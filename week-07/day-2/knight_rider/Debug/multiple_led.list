
multiple_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001814  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019f4  080019f4  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  080019f4  080019f4  000119f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019fc  080019fc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019fc  080019fc  000119fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a00  08001a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000008  08001a0c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001a0c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e40  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001416  00000000  00000000  00028e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a0  00000000  00000000  0002a290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0002ac30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023847  00000000  00000000  0002b518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000079ac  00000000  00000000  0004ed5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e034e  00000000  00000000  0005670b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136a59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002784  00000000  00000000  00136ad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080019c4 	.word	0x080019c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	080019c4 	.word	0x080019c4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8f8 	bl	8000702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f001 f938 	bl	8001788 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f001 f912 	bl	8001740 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000024 	.word	0x20000024

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000024 	.word	0x20000024

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <__NVIC_SetPriorityGrouping+0x40>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005d2:	4313      	orrs	r3, r2
 80005d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d6:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <__NVIC_SetPriorityGrouping+0x40>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	60d3      	str	r3, [r2, #12]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	05fa0000 	.word	0x05fa0000

080005f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_GetPriorityGrouping+0x18>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 0307 	and.w	r3, r3, #7
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <__NVIC_EnableIRQ+0x38>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f04f 32ff 	mov.w	r2, #4294967295
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43da      	mvns	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	401a      	ands	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4313      	orrs	r3, r2
         );
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff4c 	bl	80005a8 <__NVIC_SetPriorityGrouping>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072a:	f7ff ff61 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 800072e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	6978      	ldr	r0, [r7, #20]
 8000736:	f7ff ffb1 	bl	800069c <NVIC_EncodePriority>
 800073a:	4602      	mov	r2, r0
 800073c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff80 	bl	8000648 <__NVIC_SetPriority>
}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff54 	bl	800060c <__NVIC_EnableIRQ>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40007000 	.word	0x40007000

0800078c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e25c      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f000 8087 	beq.w	80008be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007b0:	4b96      	ldr	r3, [pc, #600]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	f003 030c 	and.w	r3, r3, #12
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d00c      	beq.n	80007d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007bc:	4b93      	ldr	r3, [pc, #588]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 030c 	and.w	r3, r3, #12
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d112      	bne.n	80007ee <HAL_RCC_OscConfig+0x62>
 80007c8:	4b90      	ldr	r3, [pc, #576]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80007d4:	d10b      	bne.n	80007ee <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007d6:	4b8d      	ldr	r3, [pc, #564]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d06c      	beq.n	80008bc <HAL_RCC_OscConfig+0x130>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d168      	bne.n	80008bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e236      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007f6:	d106      	bne.n	8000806 <HAL_RCC_OscConfig+0x7a>
 80007f8:	4b84      	ldr	r3, [pc, #528]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a83      	ldr	r2, [pc, #524]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80007fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	e02e      	b.n	8000864 <HAL_RCC_OscConfig+0xd8>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10c      	bne.n	8000828 <HAL_RCC_OscConfig+0x9c>
 800080e:	4b7f      	ldr	r3, [pc, #508]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a7e      	ldr	r2, [pc, #504]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	4b7c      	ldr	r3, [pc, #496]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a7b      	ldr	r2, [pc, #492]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	e01d      	b.n	8000864 <HAL_RCC_OscConfig+0xd8>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000830:	d10c      	bne.n	800084c <HAL_RCC_OscConfig+0xc0>
 8000832:	4b76      	ldr	r3, [pc, #472]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a75      	ldr	r2, [pc, #468]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	4b73      	ldr	r3, [pc, #460]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a72      	ldr	r2, [pc, #456]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	e00b      	b.n	8000864 <HAL_RCC_OscConfig+0xd8>
 800084c:	4b6f      	ldr	r3, [pc, #444]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a6e      	ldr	r2, [pc, #440]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b6c      	ldr	r3, [pc, #432]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a6b      	ldr	r2, [pc, #428]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 800085e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d013      	beq.n	8000894 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800086c:	f7ff fe6e 	bl	800054c <HAL_GetTick>
 8000870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000872:	e008      	b.n	8000886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000874:	f7ff fe6a 	bl	800054c <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	2b64      	cmp	r3, #100	; 0x64
 8000880:	d901      	bls.n	8000886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000882:	2303      	movs	r3, #3
 8000884:	e1ea      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000886:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f0      	beq.n	8000874 <HAL_RCC_OscConfig+0xe8>
 8000892:	e014      	b.n	80008be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000894:	f7ff fe5a 	bl	800054c <HAL_GetTick>
 8000898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800089a:	e008      	b.n	80008ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800089c:	f7ff fe56 	bl	800054c <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	2b64      	cmp	r3, #100	; 0x64
 80008a8:	d901      	bls.n	80008ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e1d6      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008ae:	4b57      	ldr	r3, [pc, #348]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f0      	bne.n	800089c <HAL_RCC_OscConfig+0x110>
 80008ba:	e000      	b.n	80008be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d069      	beq.n	800099e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008ca:	4b50      	ldr	r3, [pc, #320]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f003 030c 	and.w	r3, r3, #12
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008d6:	4b4d      	ldr	r3, [pc, #308]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 030c 	and.w	r3, r3, #12
 80008de:	2b08      	cmp	r3, #8
 80008e0:	d11c      	bne.n	800091c <HAL_RCC_OscConfig+0x190>
 80008e2:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d116      	bne.n	800091c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d005      	beq.n	8000906 <HAL_RCC_OscConfig+0x17a>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d001      	beq.n	8000906 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e1aa      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000906:	4b41      	ldr	r3, [pc, #260]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	493d      	ldr	r1, [pc, #244]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000916:	4313      	orrs	r3, r2
 8000918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800091a:	e040      	b.n	800099e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d023      	beq.n	800096c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000924:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a38      	ldr	r2, [pc, #224]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000930:	f7ff fe0c 	bl	800054c <HAL_GetTick>
 8000934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000936:	e008      	b.n	800094a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000938:	f7ff fe08 	bl	800054c <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b02      	cmp	r3, #2
 8000944:	d901      	bls.n	800094a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000946:	2303      	movs	r3, #3
 8000948:	e188      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094a:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0f0      	beq.n	8000938 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	4929      	ldr	r1, [pc, #164]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000966:	4313      	orrs	r3, r2
 8000968:	600b      	str	r3, [r1, #0]
 800096a:	e018      	b.n	800099e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800096c:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000972:	f023 0301 	bic.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000978:	f7ff fde8 	bl	800054c <HAL_GetTick>
 800097c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097e:	e008      	b.n	8000992 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000980:	f7ff fde4 	bl	800054c <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b02      	cmp	r3, #2
 800098c:	d901      	bls.n	8000992 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800098e:	2303      	movs	r3, #3
 8000990:	e164      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f0      	bne.n	8000980 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0308 	and.w	r3, r3, #8
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d038      	beq.n	8000a1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d019      	beq.n	80009e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80009b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009be:	f7ff fdc5 	bl	800054c <HAL_GetTick>
 80009c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c4:	e008      	b.n	80009d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009c6:	f7ff fdc1 	bl	800054c <HAL_GetTick>
 80009ca:	4602      	mov	r2, r0
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d901      	bls.n	80009d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80009d4:	2303      	movs	r3, #3
 80009d6:	e141      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80009da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f0      	beq.n	80009c6 <HAL_RCC_OscConfig+0x23a>
 80009e4:	e01a      	b.n	8000a1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80009e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_RCC_OscConfig+0x280>)
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009f2:	f7ff fdab 	bl	800054c <HAL_GetTick>
 80009f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009f8:	e00a      	b.n	8000a10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009fa:	f7ff fda7 	bl	800054c <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d903      	bls.n	8000a10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e127      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
 8000a0c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a10:	4b94      	ldr	r3, [pc, #592]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1ee      	bne.n	80009fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 80a4 	beq.w	8000b72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2a:	4b8e      	ldr	r3, [pc, #568]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10d      	bne.n	8000a52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b8b      	ldr	r3, [pc, #556]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a8a      	ldr	r2, [pc, #552]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b88      	ldr	r3, [pc, #544]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000a52:	4b85      	ldr	r3, [pc, #532]	; (8000c68 <HAL_RCC_OscConfig+0x4dc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d118      	bne.n	8000a90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000a5e:	4b82      	ldr	r3, [pc, #520]	; (8000c68 <HAL_RCC_OscConfig+0x4dc>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a81      	ldr	r2, [pc, #516]	; (8000c68 <HAL_RCC_OscConfig+0x4dc>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a6a:	f7ff fd6f 	bl	800054c <HAL_GetTick>
 8000a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000a70:	e008      	b.n	8000a84 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a72:	f7ff fd6b 	bl	800054c <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	2b64      	cmp	r3, #100	; 0x64
 8000a7e:	d901      	bls.n	8000a84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000a80:	2303      	movs	r3, #3
 8000a82:	e0eb      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000a84:	4b78      	ldr	r3, [pc, #480]	; (8000c68 <HAL_RCC_OscConfig+0x4dc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0f0      	beq.n	8000a72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x31a>
 8000a98:	4b72      	ldr	r3, [pc, #456]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a9c:	4a71      	ldr	r2, [pc, #452]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8000aa4:	e02d      	b.n	8000b02 <HAL_RCC_OscConfig+0x376>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10c      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x33c>
 8000aae:	4b6d      	ldr	r3, [pc, #436]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ab2:	4a6c      	ldr	r2, [pc, #432]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000ab4:	f023 0301 	bic.w	r3, r3, #1
 8000ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8000aba:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000abe:	4a69      	ldr	r2, [pc, #420]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000ac0:	f023 0304 	bic.w	r3, r3, #4
 8000ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ac6:	e01c      	b.n	8000b02 <HAL_RCC_OscConfig+0x376>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	d10c      	bne.n	8000aea <HAL_RCC_OscConfig+0x35e>
 8000ad0:	4b64      	ldr	r3, [pc, #400]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ad4:	4a63      	ldr	r2, [pc, #396]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6713      	str	r3, [r2, #112]	; 0x70
 8000adc:	4b61      	ldr	r3, [pc, #388]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ae0:	4a60      	ldr	r2, [pc, #384]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ae8:	e00b      	b.n	8000b02 <HAL_RCC_OscConfig+0x376>
 8000aea:	4b5e      	ldr	r3, [pc, #376]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aee:	4a5d      	ldr	r2, [pc, #372]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000af0:	f023 0301 	bic.w	r3, r3, #1
 8000af4:	6713      	str	r3, [r2, #112]	; 0x70
 8000af6:	4b5b      	ldr	r3, [pc, #364]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000afa:	4a5a      	ldr	r2, [pc, #360]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000afc:	f023 0304 	bic.w	r3, r3, #4
 8000b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d015      	beq.n	8000b36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b0a:	f7ff fd1f 	bl	800054c <HAL_GetTick>
 8000b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b10:	e00a      	b.n	8000b28 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b12:	f7ff fd1b 	bl	800054c <HAL_GetTick>
 8000b16:	4602      	mov	r2, r0
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d901      	bls.n	8000b28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000b24:	2303      	movs	r3, #3
 8000b26:	e099      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0ee      	beq.n	8000b12 <HAL_RCC_OscConfig+0x386>
 8000b34:	e014      	b.n	8000b60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b36:	f7ff fd09 	bl	800054c <HAL_GetTick>
 8000b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b3c:	e00a      	b.n	8000b54 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b3e:	f7ff fd05 	bl	800054c <HAL_GetTick>
 8000b42:	4602      	mov	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d901      	bls.n	8000b54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000b50:	2303      	movs	r3, #3
 8000b52:	e083      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b54:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1ee      	bne.n	8000b3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d105      	bne.n	8000b72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d06f      	beq.n	8000c5a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	d067      	beq.n	8000c56 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d149      	bne.n	8000c22 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b8e:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a34      	ldr	r2, [pc, #208]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b9a:	f7ff fcd7 	bl	800054c <HAL_GetTick>
 8000b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ba0:	e008      	b.n	8000bb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba2:	f7ff fcd3 	bl	800054c <HAL_GetTick>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e053      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f0      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69da      	ldr	r2, [r3, #28]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a1b      	ldr	r3, [r3, #32]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bce:	019b      	lsls	r3, r3, #6
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	085b      	lsrs	r3, r3, #1
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	041b      	lsls	r3, r3, #16
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be2:	061b      	lsls	r3, r3, #24
 8000be4:	4313      	orrs	r3, r2
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000be8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bec:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fca7 	bl	800054c <HAL_GetTick>
 8000bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c00:	e008      	b.n	8000c14 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c02:	f7ff fca3 	bl	800054c <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d901      	bls.n	8000c14 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e023      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f0      	beq.n	8000c02 <HAL_RCC_OscConfig+0x476>
 8000c20:	e01b      	b.n	8000c5a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fc8d 	bl	800054c <HAL_GetTick>
 8000c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c34:	e008      	b.n	8000c48 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c36:	f7ff fc89 	bl	800054c <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d901      	bls.n	8000c48 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e009      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_RCC_OscConfig+0x4d8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f0      	bne.n	8000c36 <HAL_RCC_OscConfig+0x4aa>
 8000c54:	e001      	b.n	8000c5a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40007000 	.word	0x40007000

08000c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e0ce      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c84:	4b69      	ldr	r3, [pc, #420]	; (8000e2c <HAL_RCC_ClockConfig+0x1c0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 030f 	and.w	r3, r3, #15
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d910      	bls.n	8000cb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c92:	4b66      	ldr	r3, [pc, #408]	; (8000e2c <HAL_RCC_ClockConfig+0x1c0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f023 020f 	bic.w	r2, r3, #15
 8000c9a:	4964      	ldr	r1, [pc, #400]	; (8000e2c <HAL_RCC_ClockConfig+0x1c0>)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ca2:	4b62      	ldr	r3, [pc, #392]	; (8000e2c <HAL_RCC_ClockConfig+0x1c0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d001      	beq.n	8000cb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e0b6      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d020      	beq.n	8000d02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d005      	beq.n	8000cd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ccc:	4b58      	ldr	r3, [pc, #352]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4a57      	ldr	r2, [pc, #348]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d005      	beq.n	8000cf0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ce4:	4b52      	ldr	r3, [pc, #328]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	4a51      	ldr	r2, [pc, #324]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cf0:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	494c      	ldr	r1, [pc, #304]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d040      	beq.n	8000d90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d107      	bne.n	8000d26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d115      	bne.n	8000d4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e07d      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d107      	bne.n	8000d3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d2e:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e071      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d3e:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e069      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d4e:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f023 0203 	bic.w	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4935      	ldr	r1, [pc, #212]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000d60:	f7ff fbf4 	bl	800054c <HAL_GetTick>
 8000d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d66:	e00a      	b.n	8000d7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d68:	f7ff fbf0 	bl	800054c <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e051      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 020c 	and.w	r2, r3, #12
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d1eb      	bne.n	8000d68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <HAL_RCC_ClockConfig+0x1c0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d210      	bcs.n	8000dc0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9e:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <HAL_RCC_ClockConfig+0x1c0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 020f 	bic.w	r2, r3, #15
 8000da6:	4921      	ldr	r1, [pc, #132]	; (8000e2c <HAL_RCC_ClockConfig+0x1c0>)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_RCC_ClockConfig+0x1c0>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d001      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e030      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d008      	beq.n	8000dde <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	4915      	ldr	r1, [pc, #84]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	490d      	ldr	r1, [pc, #52]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dfe:	f000 f81d 	bl	8000e3c <HAL_RCC_GetSysClockFreq>
 8000e02:	4601      	mov	r1, r0
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_RCC_ClockConfig+0x1c4>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <HAL_RCC_ClockConfig+0x1c8>)
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	fa21 f303 	lsr.w	r3, r1, r3
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_RCC_ClockConfig+0x1cc>)
 8000e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 fcb4 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00
 8000e30:	40023800 	.word	0x40023800
 8000e34:	080019dc 	.word	0x080019dc
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e52:	4b50      	ldr	r3, [pc, #320]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d007      	beq.n	8000e6e <HAL_RCC_GetSysClockFreq+0x32>
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d008      	beq.n	8000e74 <HAL_RCC_GetSysClockFreq+0x38>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 808d 	bne.w	8000f82 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e68:	4b4b      	ldr	r3, [pc, #300]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000e6a:	60bb      	str	r3, [r7, #8]
       break;
 8000e6c:	e08c      	b.n	8000f88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e6e:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8000e70:	60bb      	str	r3, [r7, #8]
      break;
 8000e72:	e089      	b.n	8000f88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e74:	4b47      	ldr	r3, [pc, #284]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e7c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000e7e:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d023      	beq.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e8a:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x158>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	099b      	lsrs	r3, r3, #6
 8000e90:	f04f 0400 	mov.w	r4, #0
 8000e94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	ea03 0501 	and.w	r5, r3, r1
 8000ea0:	ea04 0602 	and.w	r6, r4, r2
 8000ea4:	4a3d      	ldr	r2, [pc, #244]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8000ea6:	fb02 f106 	mul.w	r1, r2, r6
 8000eaa:	2200      	movs	r2, #0
 8000eac:	fb02 f205 	mul.w	r2, r2, r5
 8000eb0:	440a      	add	r2, r1
 8000eb2:	493a      	ldr	r1, [pc, #232]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8000eb4:	fba5 0101 	umull	r0, r1, r5, r1
 8000eb8:	1853      	adds	r3, r2, r1
 8000eba:	4619      	mov	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f04f 0400 	mov.w	r4, #0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4623      	mov	r3, r4
 8000ec6:	f7ff f99f 	bl	8000208 <__aeabi_uldivmod>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460c      	mov	r4, r1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	e049      	b.n	8000f66 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x158>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	099b      	lsrs	r3, r3, #6
 8000ed8:	f04f 0400 	mov.w	r4, #0
 8000edc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	ea03 0501 	and.w	r5, r3, r1
 8000ee8:	ea04 0602 	and.w	r6, r4, r2
 8000eec:	4629      	mov	r1, r5
 8000eee:	4632      	mov	r2, r6
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	f04f 0400 	mov.w	r4, #0
 8000ef8:	0154      	lsls	r4, r2, #5
 8000efa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000efe:	014b      	lsls	r3, r1, #5
 8000f00:	4619      	mov	r1, r3
 8000f02:	4622      	mov	r2, r4
 8000f04:	1b49      	subs	r1, r1, r5
 8000f06:	eb62 0206 	sbc.w	r2, r2, r6
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	f04f 0400 	mov.w	r4, #0
 8000f12:	0194      	lsls	r4, r2, #6
 8000f14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f18:	018b      	lsls	r3, r1, #6
 8000f1a:	1a5b      	subs	r3, r3, r1
 8000f1c:	eb64 0402 	sbc.w	r4, r4, r2
 8000f20:	f04f 0100 	mov.w	r1, #0
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	00e2      	lsls	r2, r4, #3
 8000f2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000f2e:	00d9      	lsls	r1, r3, #3
 8000f30:	460b      	mov	r3, r1
 8000f32:	4614      	mov	r4, r2
 8000f34:	195b      	adds	r3, r3, r5
 8000f36:	eb44 0406 	adc.w	r4, r4, r6
 8000f3a:	f04f 0100 	mov.w	r1, #0
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	02a2      	lsls	r2, r4, #10
 8000f44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f48:	0299      	lsls	r1, r3, #10
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	4621      	mov	r1, r4
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f04f 0400 	mov.w	r4, #0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	f7ff f954 	bl	8000208 <__aeabi_uldivmod>
 8000f60:	4603      	mov	r3, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x158>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	3301      	adds	r3, #1
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	60bb      	str	r3, [r7, #8]
      break;
 8000f80:	e002      	b.n	8000f88 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x15c>)
 8000f84:	60bb      	str	r3, [r7, #8]
      break;
 8000f86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f88:	68bb      	ldr	r3, [r7, #8]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	00f42400 	.word	0x00f42400
 8000f9c:	017d7840 	.word	0x017d7840

08000fa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_RCC_GetHCLKFreq>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	0a9b      	lsrs	r3, r3, #10
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	080019ec 	.word	0x080019ec

08000fe0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	220f      	movs	r2, #15
 8000fee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_RCC_GetClockConfig+0x5c>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_RCC_GetClockConfig+0x5c>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_RCC_GetClockConfig+0x5c>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_RCC_GetClockConfig+0x5c>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_RCC_GetClockConfig+0x60>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 020f 	and.w	r2, r3, #15
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40023c00 	.word	0x40023c00

08001044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e01d      	b.n	8001092 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f815 	bl	800109a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3304      	adds	r3, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4610      	mov	r0, r2
 8001084:	f000 f986 	bl	8001394 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_TIM_Base_Start_IT+0x50>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d00b      	beq.n	80010f2 <HAL_TIM_Base_Start_IT+0x42>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d007      	beq.n	80010f2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0201 	orr.w	r2, r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	00010007 	.word	0x00010007

08001104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b02      	cmp	r3, #2
 8001118:	d122      	bne.n	8001160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b02      	cmp	r3, #2
 8001126:	d11b      	bne.n	8001160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f06f 0202 	mvn.w	r2, #2
 8001130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f905 	bl	8001356 <HAL_TIM_IC_CaptureCallback>
 800114c:	e005      	b.n	800115a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f8f7 	bl	8001342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f908 	bl	800136a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	2b04      	cmp	r3, #4
 800116c:	d122      	bne.n	80011b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b04      	cmp	r3, #4
 800117a:	d11b      	bne.n	80011b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f06f 0204 	mvn.w	r2, #4
 8001184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2202      	movs	r2, #2
 800118a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f8db 	bl	8001356 <HAL_TIM_IC_CaptureCallback>
 80011a0:	e005      	b.n	80011ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f8cd 	bl	8001342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f8de 	bl	800136a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d122      	bne.n	8001208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d11b      	bne.n	8001208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f06f 0208 	mvn.w	r2, #8
 80011d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2204      	movs	r2, #4
 80011de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f8b1 	bl	8001356 <HAL_TIM_IC_CaptureCallback>
 80011f4:	e005      	b.n	8001202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f8a3 	bl	8001342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f8b4 	bl	800136a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b10      	cmp	r3, #16
 8001214:	d122      	bne.n	800125c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b10      	cmp	r3, #16
 8001222:	d11b      	bne.n	800125c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f06f 0210 	mvn.w	r2, #16
 800122c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2208      	movs	r2, #8
 8001232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f887 	bl	8001356 <HAL_TIM_IC_CaptureCallback>
 8001248:	e005      	b.n	8001256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f879 	bl	8001342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f88a 	bl	800136a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10e      	bne.n	8001288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f06f 0201 	mvn.w	r2, #1
 8001280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fa42 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	2b80      	cmp	r3, #128	; 0x80
 8001294:	d10e      	bne.n	80012b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a0:	2b80      	cmp	r3, #128	; 0x80
 80012a2:	d107      	bne.n	80012b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80012ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f91a 	bl	80014e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c2:	d10e      	bne.n	80012e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	2b80      	cmp	r3, #128	; 0x80
 80012d0:	d107      	bne.n	80012e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80012da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f90d 	bl	80014fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ec:	2b40      	cmp	r3, #64	; 0x40
 80012ee:	d10e      	bne.n	800130e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	2b40      	cmp	r3, #64	; 0x40
 80012fc:	d107      	bne.n	800130e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f838 	bl	800137e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	2b20      	cmp	r3, #32
 800131a:	d10e      	bne.n	800133a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	2b20      	cmp	r3, #32
 8001328:	d107      	bne.n	800133a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f06f 0220 	mvn.w	r2, #32
 8001332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f8cd 	bl	80014d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <TIM_Base_SetConfig+0x114>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d013      	beq.n	80013d4 <TIM_Base_SetConfig+0x40>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b2:	d00f      	beq.n	80013d4 <TIM_Base_SetConfig+0x40>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a3d      	ldr	r2, [pc, #244]	; (80014ac <TIM_Base_SetConfig+0x118>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d00b      	beq.n	80013d4 <TIM_Base_SetConfig+0x40>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3c      	ldr	r2, [pc, #240]	; (80014b0 <TIM_Base_SetConfig+0x11c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d007      	beq.n	80013d4 <TIM_Base_SetConfig+0x40>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <TIM_Base_SetConfig+0x120>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d003      	beq.n	80013d4 <TIM_Base_SetConfig+0x40>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3a      	ldr	r2, [pc, #232]	; (80014b8 <TIM_Base_SetConfig+0x124>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d108      	bne.n	80013e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <TIM_Base_SetConfig+0x114>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d02b      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f4:	d027      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <TIM_Base_SetConfig+0x118>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d023      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <TIM_Base_SetConfig+0x11c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01f      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a2a      	ldr	r2, [pc, #168]	; (80014b4 <TIM_Base_SetConfig+0x120>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01b      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <TIM_Base_SetConfig+0x124>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d017      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a28      	ldr	r2, [pc, #160]	; (80014bc <TIM_Base_SetConfig+0x128>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <TIM_Base_SetConfig+0x12c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00f      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <TIM_Base_SetConfig+0x130>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d00b      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <TIM_Base_SetConfig+0x134>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a24      	ldr	r2, [pc, #144]	; (80014cc <TIM_Base_SetConfig+0x138>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d003      	beq.n	8001446 <TIM_Base_SetConfig+0xb2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <TIM_Base_SetConfig+0x13c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d108      	bne.n	8001458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4313      	orrs	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <TIM_Base_SetConfig+0x114>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d003      	beq.n	800148c <TIM_Base_SetConfig+0xf8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <TIM_Base_SetConfig+0x124>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d103      	bne.n	8001494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	615a      	str	r2, [r3, #20]
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40010000 	.word	0x40010000
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40000800 	.word	0x40000800
 80014b4:	40000c00 	.word	0x40000c00
 80014b8:	40010400 	.word	0x40010400
 80014bc:	40014000 	.word	0x40014000
 80014c0:	40014400 	.word	0x40014400
 80014c4:	40014800 	.word	0x40014800
 80014c8:	40001800 	.word	0x40001800
 80014cc:	40001c00 	.word	0x40001c00
 80014d0:	40002000 	.word	0x40002000

080014d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f7fe fff7 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f85d 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f000 f8c5 	bl	80016ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <main+0xbc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a29      	ldr	r2, [pc, #164]	; (80015cc <main+0xbc>)
 8001528:	f043 0320 	orr.w	r3, r3, #32
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <main+0xbc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <main+0xbc>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30


  //GPIOF->MODER |= (GPIO_MODER_MODER1_0);
  GPIOF->MODER = 0b01010101 << 14;
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <main+0xc0>)
 800153c:	f44f 12aa 	mov.w	r2, #1392640	; 0x154000
 8001540:	601a      	str	r2, [r3, #0]
  GPIOB->MODER = 0b00 << 8;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <main+0xc4>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]


  GPIOF->OTYPER &= ~(GPIO_OTYPER_OT_1);
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <main+0xc0>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <main+0xc0>)
 800154e:	f023 0302 	bic.w	r3, r3, #2
 8001552:	6053      	str	r3, [r2, #4]
  GPIOF->PUPDR &= ~(GPIO_PUPDR_PUPDR1);
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <main+0xc0>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <main+0xc0>)
 800155a:	f023 030c 	bic.w	r3, r3, #12
 800155e:	60d3      	str	r3, [r2, #12]


  GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_1);
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <main+0xc4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <main+0xc4>)
 8001566:	f023 0302 	bic.w	r3, r3, #2
 800156a:	6053      	str	r3, [r2, #4]
  GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR1);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <main+0xc4>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <main+0xc4>)
 8001572:	f023 030c 	bic.w	r3, r3, #12
 8001576:	60d3      	str	r3, [r2, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (GPIOB->IDR & 1 << 4){
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <main+0xc4>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d011      	beq.n	80015a8 <main+0x98>

	 	while(1){
	for (int i = 7; i < 10; ++i){
 8001584:	2307      	movs	r3, #7
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	e00a      	b.n	80015a0 <main+0x90>

	  GPIOF ->ODR = 0b1 << i;
 800158a:	2201      	movs	r2, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	409a      	lsls	r2, r3
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <main+0xc0>)
 8001592:	615a      	str	r2, [r3, #20]



		  HAL_Delay(200);
 8001594:	20c8      	movs	r0, #200	; 0xc8
 8001596:	f7fe ffe5 	bl	8000564 <HAL_Delay>
	for (int i = 7; i < 10; ++i){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3301      	adds	r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b09      	cmp	r3, #9
 80015a4:	ddf1      	ble.n	800158a <main+0x7a>
 80015a6:	e7ed      	b.n	8001584 <main+0x74>
	 	}
	  }

	  while(1){

	  for (int i = 10; i > 7; --i){
 80015a8:	230a      	movs	r3, #10
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	e00a      	b.n	80015c4 <main+0xb4>

		  GPIOF ->ODR = 0b1 << i;
 80015ae:	2201      	movs	r2, #1
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	409a      	lsls	r2, r3
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <main+0xc0>)
 80015b6:	615a      	str	r2, [r3, #20]

		//  if (GPIOB->IDR & 1 << 4){
		  						 // 		 break;
		  						//  	  }

			  HAL_Delay(200);
 80015b8:	20c8      	movs	r0, #200	; 0xc8
 80015ba:	f7fe ffd3 	bl	8000564 <HAL_Delay>
	  for (int i = 10; i > 7; --i){
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	dcf1      	bgt.n	80015ae <main+0x9e>
 80015ca:	e7ed      	b.n	80015a8 <main+0x98>
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021400 	.word	0x40021400
 80015d4:	40020400 	.word	0x40020400

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b094      	sub	sp, #80	; 0x50
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	2230      	movs	r2, #48	; 0x30
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f9e4 	bl	80019b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80015fc:	f7ff f8b6 	bl	800076c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SystemClock_Config+0xcc>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <SystemClock_Config+0xcc>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <SystemClock_Config+0xcc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <SystemClock_Config+0xd0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <SystemClock_Config+0xd0>)
 8001622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <SystemClock_Config+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	2301      	movs	r3, #1
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163c:	2310      	movs	r3, #16
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001640:	2302      	movs	r3, #2
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001644:	2300      	movs	r3, #0
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001648:	230a      	movs	r3, #10
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 800164c:	23d2      	movs	r3, #210	; 0xd2
 800164e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001650:	2302      	movs	r3, #2
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001654:	2302      	movs	r3, #2
 8001656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f895 	bl	800078c <HAL_RCC_OscConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001668:	f000 f862 	bl	8001730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166c:	230f      	movs	r3, #15
 800166e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001670:	2302      	movs	r3, #2
 8001672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800167c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2105      	movs	r1, #5
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff faee 	bl	8000c6c <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001696:	f000 f84b 	bl	8001730 <Error_Handler>
  }
}
 800169a:	bf00      	nop
 800169c:	3750      	adds	r7, #80	; 0x50
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_GPIO_Init+0x5c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800171e:	f7fe ff01 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40002000 	.word	0x40002000

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_MspInit+0x44>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_MspInit+0x44>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_MspInit+0x44>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_MspInit+0x44>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_MspInit+0x44>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_MspInit+0x44>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	202d      	movs	r0, #45	; 0x2d
 800179e:	f7fe ffbb 	bl	8000718 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 80017a2:	202d      	movs	r0, #45	; 0x2d
 80017a4:	f7fe ffd4 	bl	8000750 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80017a8:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <HAL_InitTick+0xa0>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <HAL_InitTick+0xa0>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <HAL_InitTick+0xa0>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c0:	f107 0210 	add.w	r2, r7, #16
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4611      	mov	r1, r2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fc08 	bl	8000fe0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017d0:	f7ff fbf2 	bl	8000fb8 <HAL_RCC_GetPCLK1Freq>
 80017d4:	4603      	mov	r3, r0
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <HAL_InitTick+0xa4>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	0c9b      	lsrs	r3, r3, #18
 80017e4:	3b01      	subs	r3, #1
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_InitTick+0xa8>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <HAL_InitTick+0xac>)
 80017ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_InitTick+0xa8>)
 80017f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_InitTick+0xa8>)
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_InitTick+0xa8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_InitTick+0xa8>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001808:	4809      	ldr	r0, [pc, #36]	; (8001830 <HAL_InitTick+0xa8>)
 800180a:	f7ff fc1b 	bl	8001044 <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001814:	4806      	ldr	r0, [pc, #24]	; (8001830 <HAL_InitTick+0xa8>)
 8001816:	f7ff fc4b 	bl	80010b0 <HAL_TIM_Base_Start_IT>
 800181a:	4603      	mov	r3, r0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3730      	adds	r7, #48	; 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	431bde83 	.word	0x431bde83
 8001830:	20000028 	.word	0x20000028
 8001834:	40002000 	.word	0x40002000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800189e:	f7ff fc31 	bl	8001104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000028 	.word	0x20000028

080018ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <SystemInit+0x5c>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <SystemInit+0x5c>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <SystemInit+0x60>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <SystemInit+0x60>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <SystemInit+0x60>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <SystemInit+0x60>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <SystemInit+0x60>)
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <SystemInit+0x64>)
 80018da:	4013      	ands	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <SystemInit+0x60>)
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <SystemInit+0x68>)
 80018e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <SystemInit+0x60>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a08      	ldr	r2, [pc, #32]	; (800190c <SystemInit+0x60>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <SystemInit+0x60>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018f6:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SystemInit+0x5c>)
 80018f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018fc:	609a      	str	r2, [r3, #8]
#endif
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00
 800190c:	40023800 	.word	0x40023800
 8001910:	fef6ffff 	.word	0xfef6ffff
 8001914:	24003010 	.word	0x24003010

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800191c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800191e:	e003      	b.n	8001928 <LoopCopyDataInit>

08001920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001926:	3104      	adds	r1, #4

08001928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800192c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800192e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001930:	d3f6      	bcc.n	8001920 <CopyDataInit>
  ldr  r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001934:	e002      	b.n	800193c <LoopFillZerobss>

08001936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001938:	f842 3b04 	str.w	r3, [r2], #4

0800193c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001940:	d3f9      	bcc.n	8001936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001942:	f7ff ffb3 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f000 f811 	bl	800196c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff fde1 	bl	8001510 <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001950:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001954:	08001a04 	.word	0x08001a04
  ldr  r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800195c:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001960:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001964:	20000068 	.word	0x20000068

08001968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <__libc_init_array>:
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	4e0d      	ldr	r6, [pc, #52]	; (80019a4 <__libc_init_array+0x38>)
 8001970:	4c0d      	ldr	r4, [pc, #52]	; (80019a8 <__libc_init_array+0x3c>)
 8001972:	1ba4      	subs	r4, r4, r6
 8001974:	10a4      	asrs	r4, r4, #2
 8001976:	2500      	movs	r5, #0
 8001978:	42a5      	cmp	r5, r4
 800197a:	d109      	bne.n	8001990 <__libc_init_array+0x24>
 800197c:	4e0b      	ldr	r6, [pc, #44]	; (80019ac <__libc_init_array+0x40>)
 800197e:	4c0c      	ldr	r4, [pc, #48]	; (80019b0 <__libc_init_array+0x44>)
 8001980:	f000 f820 	bl	80019c4 <_init>
 8001984:	1ba4      	subs	r4, r4, r6
 8001986:	10a4      	asrs	r4, r4, #2
 8001988:	2500      	movs	r5, #0
 800198a:	42a5      	cmp	r5, r4
 800198c:	d105      	bne.n	800199a <__libc_init_array+0x2e>
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001994:	4798      	blx	r3
 8001996:	3501      	adds	r5, #1
 8001998:	e7ee      	b.n	8001978 <__libc_init_array+0xc>
 800199a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800199e:	4798      	blx	r3
 80019a0:	3501      	adds	r5, #1
 80019a2:	e7f2      	b.n	800198a <__libc_init_array+0x1e>
 80019a4:	080019fc 	.word	0x080019fc
 80019a8:	080019fc 	.word	0x080019fc
 80019ac:	080019fc 	.word	0x080019fc
 80019b0:	08001a00 	.word	0x08001a00

080019b4 <memset>:
 80019b4:	4402      	add	r2, r0
 80019b6:	4603      	mov	r3, r0
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d100      	bne.n	80019be <memset+0xa>
 80019bc:	4770      	bx	lr
 80019be:	f803 1b01 	strb.w	r1, [r3], #1
 80019c2:	e7f9      	b.n	80019b8 <memset+0x4>

080019c4 <_init>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr

080019d0 <_fini>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	bf00      	nop
 80019d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d6:	bc08      	pop	{r3}
 80019d8:	469e      	mov	lr, r3
 80019da:	4770      	bx	lr
