
reaction_tester_single_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d7c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f5c  08009f5c  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f64  08009f64  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f68  08009f68  00019f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08009f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000008  08009f74  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab8  08009f74  00020ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002970e  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a20  00000000  00000000  00049746  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002390  00000000  00000000  0004e168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002160  00000000  00000000  000504f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007188  00000000  00000000  00052658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021f38  00000000  00000000  000597e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011c52a  00000000  00000000  0007b718  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00197c42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099b0  00000000  00000000  00197cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009f2c 	.word	0x08009f2c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	08009f2c 	.word	0x08009f2c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fb6a 	bl	8000be6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f009 fb12 	bl	8009b3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f008 fc18 	bl	8008d4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000034 	.word	0x20000034

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000034 	.word	0x20000034

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e031      	b.n	8000622 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d109      	bne.n	80005da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f008 fbe4 	bl	8008d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 0310 	and.w	r3, r3, #16
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d116      	bne.n	8000614 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_ADC_Init+0x84>)
 80005ec:	4013      	ands	r3, r2
 80005ee:	f043 0202 	orr.w	r2, r3, #2
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f94e 	bl	8000898 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f023 0303 	bic.w	r3, r3, #3
 800060a:	f043 0201 	orr.w	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	641a      	str	r2, [r3, #64]	; 0x40
 8000612:	e001      	b.n	8000618 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	ffffeefd 	.word	0xffffeefd

08000630 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000644:	2b01      	cmp	r3, #1
 8000646:	d101      	bne.n	800064c <HAL_ADC_ConfigChannel+0x1c>
 8000648:	2302      	movs	r3, #2
 800064a:	e115      	b.n	8000878 <HAL_ADC_ConfigChannel+0x248>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2201      	movs	r2, #1
 8000650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b09      	cmp	r3, #9
 800065a:	d935      	bls.n	80006c8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68d9      	ldr	r1, [r3, #12]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	3b1e      	subs	r3, #30
 8000672:	2207      	movs	r2, #7
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43da      	mvns	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	400a      	ands	r2, r1
 8000680:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a7f      	ldr	r2, [pc, #508]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d10a      	bne.n	80006a2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68d9      	ldr	r1, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	061a      	lsls	r2, r3, #24
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	430a      	orrs	r2, r1
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	e035      	b.n	800070e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68d9      	ldr	r1, [r3, #12]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	4603      	mov	r3, r0
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4403      	add	r3, r0
 80006ba:	3b1e      	subs	r3, #30
 80006bc:	409a      	lsls	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	e022      	b.n	800070e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6919      	ldr	r1, [r3, #16]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	2207      	movs	r2, #7
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6919      	ldr	r1, [r3, #16]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4403      	add	r3, r0
 8000704:	409a      	lsls	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	430a      	orrs	r2, r1
 800070c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	2b06      	cmp	r3, #6
 8000714:	d824      	bhi.n	8000760 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	3b05      	subs	r3, #5
 8000728:	221f      	movs	r2, #31
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	400a      	ands	r2, r1
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	3b05      	subs	r3, #5
 8000752:	fa00 f203 	lsl.w	r2, r0, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	430a      	orrs	r2, r1
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
 800075e:	e04c      	b.n	80007fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	2b0c      	cmp	r3, #12
 8000766:	d824      	bhi.n	80007b2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3b23      	subs	r3, #35	; 0x23
 800077a:	221f      	movs	r2, #31
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	43da      	mvns	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	400a      	ands	r2, r1
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b29b      	uxth	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	3b23      	subs	r3, #35	; 0x23
 80007a4:	fa00 f203 	lsl.w	r2, r0, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
 80007b0:	e023      	b.n	80007fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	3b41      	subs	r3, #65	; 0x41
 80007c4:	221f      	movs	r2, #31
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	400a      	ands	r2, r1
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	3b41      	subs	r3, #65	; 0x41
 80007ee:	fa00 f203 	lsl.w	r2, r0, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <HAL_ADC_ConfigChannel+0x258>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d109      	bne.n	8000818 <HAL_ADC_ConfigChannel+0x1e8>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b12      	cmp	r3, #18
 800080a:	d105      	bne.n	8000818 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a1e      	ldr	r2, [pc, #120]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 8000812:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000816:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <HAL_ADC_ConfigChannel+0x258>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d125      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d003      	beq.n	8000834 <HAL_ADC_ConfigChannel+0x204>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b11      	cmp	r3, #17
 8000832:	d11c      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 800083a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800083e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d111      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_ADC_ConfigChannel+0x260>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a11      	ldr	r2, [pc, #68]	; (8000894 <HAL_ADC_ConfigChannel+0x264>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	0c9a      	lsrs	r2, r3, #18
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000860:	e002      	b.n	8000868 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3b01      	subs	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f9      	bne.n	8000862 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	10000012 	.word	0x10000012
 8000888:	40012000 	.word	0x40012000
 800088c:	40012300 	.word	0x40012300
 8000890:	20000004 	.word	0x20000004
 8000894:	431bde83 	.word	0x431bde83

08000898 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80008a0:	4b78      	ldr	r3, [pc, #480]	; (8000a84 <ADC_Init+0x1ec>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	4a77      	ldr	r2, [pc, #476]	; (8000a84 <ADC_Init+0x1ec>)
 80008a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80008ac:	4b75      	ldr	r3, [pc, #468]	; (8000a84 <ADC_Init+0x1ec>)
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	4973      	ldr	r1, [pc, #460]	; (8000a84 <ADC_Init+0x1ec>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6859      	ldr	r1, [r3, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	021a      	lsls	r2, r3, #8
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	430a      	orrs	r2, r1
 80008dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6859      	ldr	r1, [r3, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800090e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6899      	ldr	r1, [r3, #8]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	430a      	orrs	r2, r1
 8000920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	4a58      	ldr	r2, [pc, #352]	; (8000a88 <ADC_Init+0x1f0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d022      	beq.n	8000972 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800093a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6899      	ldr	r1, [r3, #8]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800095c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6899      	ldr	r1, [r3, #8]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	430a      	orrs	r2, r1
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	e00f      	b.n	8000992 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000990:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0202 	bic.w	r2, r2, #2
 80009a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6899      	ldr	r1, [r3, #8]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	005a      	lsls	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d01b      	beq.n	80009f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	685a      	ldr	r2, [r3, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6859      	ldr	r1, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	3b01      	subs	r3, #1
 80009ec:	035a      	lsls	r2, r3, #13
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	e007      	b.n	8000a08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	051a      	lsls	r2, r3, #20
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6899      	ldr	r1, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a4a:	025a      	lsls	r2, r3, #9
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6899      	ldr	r1, [r3, #8]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	029a      	lsls	r2, r3, #10
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	609a      	str	r2, [r3, #8]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40012300 	.word	0x40012300
 8000a88:	0f000001 	.word	0x0f000001

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	05fa0000 	.word	0x05fa0000

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff4c 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0e:	f7ff ff61 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	6978      	ldr	r0, [r7, #20]
 8000c1a:	f7ff ffb1 	bl	8000b80 <NVIC_EncodePriority>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff80 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff54 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e054      	b.n	8000d0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7f5b      	ldrb	r3, [r3, #29]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f008 f8e8 	bl	8008e48 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10c      	bne.n	8000ca0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <HAL_CRC_Init+0xc4>)
 8000c8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0218 	bic.w	r2, r2, #24
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	e00c      	b.n	8000cba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6899      	ldr	r1, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f834 	bl	8000d18 <HAL_CRCEx_Polynomial_Set>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e028      	b.n	8000d0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	795b      	ldrb	r3, [r3, #5]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	e004      	b.n	8000cd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6912      	ldr	r2, [r2, #16]
 8000cd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	04c11db7 	.word	0x04c11db7

08000d18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d28:	231f      	movs	r3, #31
 8000d2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d2c:	bf00      	nop
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	613a      	str	r2, [r7, #16]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <HAL_CRCEx_Polynomial_Set+0x34>
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	fa22 f303 	lsr.w	r3, r2, r3
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b18      	cmp	r3, #24
 8000d50:	d846      	bhi.n	8000de0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000de7 	.word	0x08000de7
 8000d5c:	08000de1 	.word	0x08000de1
 8000d60:	08000de1 	.word	0x08000de1
 8000d64:	08000de1 	.word	0x08000de1
 8000d68:	08000de1 	.word	0x08000de1
 8000d6c:	08000de1 	.word	0x08000de1
 8000d70:	08000de1 	.word	0x08000de1
 8000d74:	08000de1 	.word	0x08000de1
 8000d78:	08000dd5 	.word	0x08000dd5
 8000d7c:	08000de1 	.word	0x08000de1
 8000d80:	08000de1 	.word	0x08000de1
 8000d84:	08000de1 	.word	0x08000de1
 8000d88:	08000de1 	.word	0x08000de1
 8000d8c:	08000de1 	.word	0x08000de1
 8000d90:	08000de1 	.word	0x08000de1
 8000d94:	08000de1 	.word	0x08000de1
 8000d98:	08000dc9 	.word	0x08000dc9
 8000d9c:	08000de1 	.word	0x08000de1
 8000da0:	08000de1 	.word	0x08000de1
 8000da4:	08000de1 	.word	0x08000de1
 8000da8:	08000de1 	.word	0x08000de1
 8000dac:	08000de1 	.word	0x08000de1
 8000db0:	08000de1 	.word	0x08000de1
 8000db4:	08000de1 	.word	0x08000de1
 8000db8:	08000dbd 	.word	0x08000dbd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d913      	bls.n	8000dea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dc6:	e010      	b.n	8000dea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d90f      	bls.n	8000dee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dd2:	e00c      	b.n	8000dee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d90b      	bls.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dde:	e008      	b.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	75fb      	strb	r3, [r7, #23]
      break;
 8000de4:	e006      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000de6:	bf00      	nop
 8000de8:	e004      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dea:	bf00      	nop
 8000dec:	e002      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dee:	bf00      	nop
 8000df0:	e000      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df2:	bf00      	nop
  }
  if (status == HAL_OK)
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10d      	bne.n	8000e16 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f023 0118 	bic.w	r1, r3, #24
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e062      	b.n	8000efc <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f008 f820 	bl	8008e88 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <HAL_DCMI_Init+0xe0>)
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e74:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e80:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e8c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e98:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000ea4:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d112      	bne.n	8000edc <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7f1b      	ldrb	r3, [r3, #28]
 8000eba:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7f5b      	ldrb	r3, [r3, #29]
 8000ec0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ec2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7f9b      	ldrb	r3, [r3, #30]
 8000ec8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000eca:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7fdb      	ldrb	r3, [r3, #31]
 8000ed2:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ed8:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eda:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 021e 	orr.w	r2, r2, #30
 8000eea:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	ffe0f007 	.word	0xffe0f007

08000f08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e039      	b.n	8000f8e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f008 f868 	bl	8009004 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f58:	f023 0107 	bic.w	r1, r3, #7
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_DMA2D_Init+0x90>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68d1      	ldr	r1, [r2, #12]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	ffffc000 	.word	0xffffc000

08000f9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d026      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	2b00      	cmp	r3, #0
 8001014:	d026      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d021      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800102e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2220      	movs	r2, #32
 8001036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	f043 0202 	orr.w	r2, r3, #2
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2204      	movs	r2, #4
 8001048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d026      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001074:	2b00      	cmp	r3, #0
 8001076:	d021      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001086:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2208      	movs	r2, #8
 800108e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2204      	movs	r2, #4
 80010a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d013      	beq.n	80010ee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2204      	movs	r2, #4
 80010e6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f853 	bl	8001194 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d024      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01f      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001110:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2202      	movs	r2, #2
 8001118:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01f      	beq.n	800118c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01a      	beq.n	800118c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001164:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2210      	movs	r2, #16
 800116c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f80e 	bl	80011a8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_DMA2D_ConfigLayer+0x20>
 80011d8:	2302      	movs	r3, #2
 80011da:	e079      	b.n	80012d0 <HAL_DMA2D_ConfigLayer+0x114>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	3318      	adds	r3, #24
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <HAL_DMA2D_ConfigLayer+0x120>)
 8001208:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b0a      	cmp	r3, #10
 8001210:	d003      	beq.n	800121a <HAL_DMA2D_ConfigLayer+0x5e>
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d107      	bne.n	800122a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e005      	b.n	8001236 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	061b      	lsls	r3, r3, #24
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4313      	orrs	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d120      	bne.n	800127e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	ea02 0103 	and.w	r1, r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	430a      	orrs	r2, r1
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d003      	beq.n	800126e <HAL_DMA2D_ConfigLayer+0xb2>
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b09      	cmp	r3, #9
 800126c:	d127      	bne.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
 800127c:	e01f      	b.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	ea02 0103 	and.w	r1, r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	430a      	orrs	r2, r1
 8001294:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b0a      	cmp	r3, #10
 80012a6:	d003      	beq.n	80012b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d106      	bne.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80012bc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	ff03000f 	.word	0xff03000f

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e175      	b.n	80015ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8164 	bne.w	80015e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x4e>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b12      	cmp	r3, #18
 800132c:	d123      	bne.n	8001376 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	69b9      	ldr	r1, [r7, #24]
 8001372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0203 	and.w	r2, r3, #3
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d00b      	beq.n	80013ca <HAL_GPIO_Init+0xea>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013be:	2b11      	cmp	r3, #17
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d130      	bne.n	800142c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 0201 	and.w	r2, r3, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80be 	beq.w	80015e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b65      	ldr	r3, [pc, #404]	; (8001600 <HAL_GPIO_Init+0x320>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a64      	ldr	r2, [pc, #400]	; (8001600 <HAL_GPIO_Init+0x320>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_GPIO_Init+0x320>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001482:	4a60      	ldr	r2, [pc, #384]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a57      	ldr	r2, [pc, #348]	; (8001608 <HAL_GPIO_Init+0x328>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d037      	beq.n	800151e <HAL_GPIO_Init+0x23e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x32c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_GPIO_Init+0x23a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a55      	ldr	r2, [pc, #340]	; (8001610 <HAL_GPIO_Init+0x330>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02b      	beq.n	8001516 <HAL_GPIO_Init+0x236>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a54      	ldr	r2, [pc, #336]	; (8001614 <HAL_GPIO_Init+0x334>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x232>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a53      	ldr	r2, [pc, #332]	; (8001618 <HAL_GPIO_Init+0x338>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x22e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_GPIO_Init+0x33c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x22a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a51      	ldr	r2, [pc, #324]	; (8001620 <HAL_GPIO_Init+0x340>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x226>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <HAL_GPIO_Init+0x344>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x222>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <HAL_GPIO_Init+0x348>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x21e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4e      	ldr	r2, [pc, #312]	; (800162c <HAL_GPIO_Init+0x34c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x21a>
 80014f6:	2309      	movs	r3, #9
 80014f8:	e012      	b.n	8001520 <HAL_GPIO_Init+0x240>
 80014fa:	230a      	movs	r3, #10
 80014fc:	e010      	b.n	8001520 <HAL_GPIO_Init+0x240>
 80014fe:	2308      	movs	r3, #8
 8001500:	e00e      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001502:	2307      	movs	r3, #7
 8001504:	e00c      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001506:	2306      	movs	r3, #6
 8001508:	e00a      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800150a:	2305      	movs	r3, #5
 800150c:	e008      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800150e:	2304      	movs	r3, #4
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001512:	2303      	movs	r3, #3
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800151e:	2300      	movs	r3, #0
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001530:	4934      	ldr	r1, [pc, #208]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_GPIO_Init+0x350>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_GPIO_Init+0x350>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	f67f ae86 	bls.w	8001300 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015f4:	bf00      	nop
 80015f6:	3724      	adds	r7, #36	; 0x24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40023800 	.word	0x40023800
 8001604:	40013800 	.word	0x40013800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40021c00 	.word	0x40021c00
 8001628:	40022000 	.word	0x40022000
 800162c:	40022400 	.word	0x40022400
 8001630:	40013c00 	.word	0x40013c00

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	401a      	ands	r2, r3
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	429a      	cmp	r2, r3
 800167e:	d104      	bne.n	800168a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	041a      	lsls	r2, r3, #16
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f007 faf4 	bl	8008ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40013c00 	.word	0x40013c00

080016cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 fdac 	bl	8007240 <USB_GetMode>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	f040 80f1 	bne.w	80018d2 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f005 fd90 	bl	800721a <USB_ReadInterrupts>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80e7 	beq.w	80018d0 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f005 fd87 	bl	800721a <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001716:	d104      	bne.n	8001722 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001720:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fd77 	bl	800721a <USB_ReadInterrupts>
 800172c:	4603      	mov	r3, r0
 800172e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001736:	d104      	bne.n	8001742 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001740:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f005 fd67 	bl	800721a <USB_ReadInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001756:	d104      	bne.n	8001762 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001760:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fd57 	bl	800721a <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d103      	bne.n	800177e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2202      	movs	r2, #2
 800177c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f005 fd49 	bl	800721a <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800178e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001792:	d117      	bne.n	80017c4 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80017a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80017a6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f008 facf 	bl	8009d4c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2101      	movs	r1, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 fd51 	bl	800725c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f005 fd26 	bl	800721a <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d102      	bne.n	80017e0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f001 f874 	bl	80028c8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fd18 	bl	800721a <USB_ReadInterrupts>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d106      	bne.n	8001802 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f008 fa8d 	bl	8009d14 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2208      	movs	r2, #8
 8001800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f005 fd07 	bl	800721a <USB_ReadInterrupts>
 800180c:	4603      	mov	r3, r0
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001816:	d138      	bne.n	800188a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f005 fd90 	bl	8007342 <USB_HC_ReadInterrupt>
 8001822:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e025      	b.n	8001876 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d018      	beq.n	8001870 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4413      	add	r3, r2
 8001846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001854:	d106      	bne.n	8001864 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f87b 	bl	8001958 <HCD_HC_IN_IRQHandler>
 8001862:	e005      	b.n	8001870 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4619      	mov	r1, r3
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fc0b 	bl	8002086 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3d4      	bcc.n	800182a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001888:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f005 fcc3 	bl	800721a <USB_ReadInterrupts>
 8001894:	4603      	mov	r3, r0
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b10      	cmp	r3, #16
 800189c:	d101      	bne.n	80018a2 <HAL_HCD_IRQHandler+0x1d6>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_HCD_IRQHandler+0x1d8>
 80018a2:	2300      	movs	r3, #0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d014      	beq.n	80018d2 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0210 	bic.w	r2, r2, #16
 80018b6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 ff59 	bl	8002770 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0210 	orr.w	r2, r2, #16
 80018cc:	619a      	str	r2, [r3, #24]
 80018ce:	e000      	b.n	80018d2 <HAL_HCD_IRQHandler+0x206>
      return;
 80018d0:	bf00      	nop
    }
  }
}
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_HCD_Start+0x16>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e013      	b.n	8001916 <HAL_HCD_Start+0x3e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f005 fbfa 	bl	80070f4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f005 fce2 	bl	80072d0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_HCD_Stop+0x16>
 8001930:	2302      	movs	r3, #2
 8001932:	e00d      	b.n	8001950 <HAL_HCD_Stop+0x32>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f005 fe0e 	bl	8007562 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4413      	add	r3, r2
 800197a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b04      	cmp	r3, #4
 8001986:	d119      	bne.n	80019bc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4413      	add	r3, r2
 8001990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001994:	461a      	mov	r2, r3
 8001996:	2304      	movs	r3, #4
 8001998:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	015a      	lsls	r2, r3, #5
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	0151      	lsls	r1, r2, #5
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	440a      	add	r2, r1
 80019b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	60d3      	str	r3, [r2, #12]
 80019ba:	e095      	b.n	8001ae8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0320 	and.w	r3, r3, #32
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d109      	bne.n	80019e6 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019de:	461a      	mov	r2, r3
 80019e0:	2320      	movs	r3, #32
 80019e2:	6093      	str	r3, [r2, #8]
 80019e4:	e080      	b.n	8001ae8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	015a      	lsls	r2, r3, #5
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d134      	bne.n	8001a66 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	0151      	lsls	r1, r2, #5
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	440a      	add	r2, r1
 8001a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a16:	f043 0302 	orr.w	r3, r3, #2
 8001a1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	335d      	adds	r3, #93	; 0x5d
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2310      	movs	r3, #16
 8001a40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	015a      	lsls	r2, r3, #5
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2308      	movs	r3, #8
 8001a52:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 fc80 	bl	8007364 <USB_HC_Halt>
 8001a64:	e040      	b.n	8001ae8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7c:	d134      	bne.n	8001ae8 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	015a      	lsls	r2, r3, #5
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4413      	add	r3, r2
 8001a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	0151      	lsls	r1, r2, #5
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	440a      	add	r2, r1
 8001a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f005 fc5b 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	015a      	lsls	r2, r3, #5
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aba:	461a      	mov	r2, r3
 8001abc:	2310      	movs	r3, #16
 8001abe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	335d      	adds	r3, #93	; 0x5d
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001afe:	d122      	bne.n	8001b46 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	015a      	lsls	r2, r3, #5
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	0151      	lsls	r1, r2, #5
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	440a      	add	r2, r1
 8001b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fc1a 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	015a      	lsls	r2, r3, #5
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4413      	add	r3, r2
 8001b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b42:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001b44:	e29b      	b.n	800207e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	015a      	lsls	r2, r3, #5
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	f040 80c1 	bne.w	8001ce0 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d01b      	beq.n	8001b9e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	3348      	adds	r3, #72	; 0x48
 8001b76:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	0159      	lsls	r1, r3, #5
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	440b      	add	r3, r1
 8001b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001b8a:	1ad1      	subs	r1, r2, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4403      	add	r3, r0
 8001b9a:	334c      	adds	r3, #76	; 0x4c
 8001b9c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	335d      	adds	r3, #93	; 0x5d
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3358      	adds	r3, #88	; 0x58
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	333f      	adds	r3, #63	; 0x3f
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	333f      	adds	r3, #63	; 0x3f
 8001bfe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d121      	bne.n	8001c48 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	015a      	lsls	r2, r3, #5
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	0151      	lsls	r1, r2, #5
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	440a      	add	r2, r1
 8001c1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fb98 	bl	8007364 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c40:	461a      	mov	r2, r3
 8001c42:	2310      	movs	r3, #16
 8001c44:	6093      	str	r3, [r2, #8]
 8001c46:	e034      	b.n	8001cb2 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	333f      	adds	r3, #63	; 0x3f
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d129      	bne.n	8001cb2 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	0151      	lsls	r1, r2, #5
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	440a      	add	r2, r1
 8001c74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c7c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	335c      	adds	r3, #92	; 0x5c
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b2d8      	uxtb	r0, r3
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	335c      	adds	r3, #92	; 0x5c
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4601      	mov	r1, r0
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f008 f85b 	bl	8009d68 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3350      	adds	r3, #80	; 0x50
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2d8      	uxtb	r0, r3
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3350      	adds	r3, #80	; 0x50
 8001cda:	4602      	mov	r2, r0
 8001cdc:	701a      	strb	r2, [r3, #0]
}
 8001cde:	e1ce      	b.n	800207e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	015a      	lsls	r2, r3, #5
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	f040 80f1 	bne.w	8001eda <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	0151      	lsls	r1, r2, #5
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	440a      	add	r2, r1
 8001d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d12:	f023 0302 	bic.w	r3, r3, #2
 8001d16:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	440b      	add	r3, r1
 8001d26:	335d      	adds	r3, #93	; 0x5d
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10a      	bne.n	8001d44 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	335c      	adds	r3, #92	; 0x5c
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e0b0      	b.n	8001ea6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	335d      	adds	r3, #93	; 0x5d
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10a      	bne.n	8001d70 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	335c      	adds	r3, #92	; 0x5c
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e09a      	b.n	8001ea6 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	335d      	adds	r3, #93	; 0x5d
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d00a      	beq.n	8001d9c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	335d      	adds	r3, #93	; 0x5d
 8001d96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d156      	bne.n	8001e4a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	3358      	adds	r3, #88	; 0x58
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	1c59      	adds	r1, r3, #1
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4403      	add	r3, r0
 8001dbe:	3358      	adds	r3, #88	; 0x58
 8001dc0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	3358      	adds	r3, #88	; 0x58
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d914      	bls.n	8001e02 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	3358      	adds	r3, #88	; 0x58
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	335c      	adds	r3, #92	; 0x5c
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e009      	b.n	8001e16 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	335c      	adds	r3, #92	; 0x5c
 8001e12:	2202      	movs	r2, #2
 8001e14:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e2c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e34:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e02d      	b.n	8001ea6 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	335d      	adds	r3, #93	; 0x5d
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d122      	bne.n	8001ea6 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	335c      	adds	r3, #92	; 0x5c
 8001e70:	2202      	movs	r2, #2
 8001e72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	015a      	lsls	r2, r3, #5
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	b2d8      	uxtb	r0, r3
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	335c      	adds	r3, #92	; 0x5c
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f007 ff48 	bl	8009d68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ed8:	e0d1      	b.n	800207e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d13e      	bne.n	8001f6e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	0151      	lsls	r1, r2, #5
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	440a      	add	r2, r1
 8001f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3358      	adds	r3, #88	; 0x58
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1c59      	adds	r1, r3, #1
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4403      	add	r3, r0
 8001f32:	3358      	adds	r3, #88	; 0x58
 8001f34:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	335d      	adds	r3, #93	; 0x5d
 8001f46:	2206      	movs	r2, #6
 8001f48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f005 fa05 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	461a      	mov	r2, r3
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	6093      	str	r3, [r2, #8]
}
 8001f6c:	e087      	b.n	800207e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d17c      	bne.n	800207e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	333f      	adds	r3, #63	; 0x3f
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d122      	bne.n	8001fe0 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3358      	adds	r3, #88	; 0x58
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	0151      	lsls	r1, r2, #5
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	440a      	add	r2, r1
 8001fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f005 f9c3 	bl	8007364 <USB_HC_Halt>
 8001fde:	e045      	b.n	800206c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	333f      	adds	r3, #63	; 0x3f
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	333f      	adds	r3, #63	; 0x3f
 8002006:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002008:	2b02      	cmp	r3, #2
 800200a:	d12f      	bne.n	800206c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	3358      	adds	r3, #88	; 0x58
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d121      	bne.n	800206c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	335d      	adds	r3, #93	; 0x5d
 8002038:	2203      	movs	r2, #3
 800203a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	0151      	lsls	r1, r2, #5
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	440a      	add	r2, r1
 8002052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f005 f97c 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	2310      	movs	r3, #16
 800207c:	6093      	str	r3, [r2, #8]
}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d119      	bne.n	80020ea <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	461a      	mov	r2, r3
 80020c4:	2304      	movs	r3, #4
 80020c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	0151      	lsls	r1, r2, #5
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	440a      	add	r2, r1
 80020de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80020e8:	e33e      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d141      	bne.n	8002184 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	2320      	movs	r3, #32
 8002110:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	333d      	adds	r3, #61	; 0x3d
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	f040 831f 	bne.w	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	333d      	adds	r3, #61	; 0x3d
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	335c      	adds	r3, #92	; 0x5c
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	0151      	lsls	r1, r2, #5
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	440a      	add	r2, r1
 8002168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f005 f8f1 	bl	8007364 <USB_HC_Halt>
}
 8002182:	e2f1      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d13f      	bne.n	800221a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	335d      	adds	r3, #93	; 0x5d
 80021aa:	2204      	movs	r2, #4
 80021ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	333d      	adds	r3, #61	; 0x3d
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	3358      	adds	r3, #88	; 0x58
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	0151      	lsls	r1, r2, #5
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	440a      	add	r2, r1
 80021ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f005 f8af 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	461a      	mov	r2, r3
 8002214:	2340      	movs	r3, #64	; 0x40
 8002216:	6093      	str	r3, [r2, #8]
}
 8002218:	e2a6      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800222c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002230:	d122      	bne.n	8002278 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	440a      	add	r2, r1
 8002248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f005 f881 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002274:	6093      	str	r3, [r2, #8]
}
 8002276:	e277      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d135      	bne.n	80022fa <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3358      	adds	r3, #88	; 0x58
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	0151      	lsls	r1, r2, #5
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	440a      	add	r2, r1
 80022b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f005 f849 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	461a      	mov	r2, r3
 80022e0:	2301      	movs	r3, #1
 80022e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	335d      	adds	r3, #93	; 0x5d
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
}
 80022f8:	e236      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b08      	cmp	r3, #8
 800230e:	d12b      	bne.n	8002368 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	461a      	mov	r2, r3
 800231e:	2308      	movs	r3, #8
 8002320:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	0151      	lsls	r1, r2, #5
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	440a      	add	r2, r1
 8002338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800233c:	f043 0302 	orr.w	r3, r3, #2
 8002340:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f005 f809 	bl	8007364 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	440b      	add	r3, r1
 8002360:	335d      	adds	r3, #93	; 0x5d
 8002362:	2205      	movs	r2, #5
 8002364:	701a      	strb	r2, [r3, #0]
}
 8002366:	e1ff      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d155      	bne.n	800242a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	440b      	add	r3, r1
 800238c:	3358      	adds	r3, #88	; 0x58
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	440b      	add	r3, r1
 80023a0:	335d      	adds	r3, #93	; 0x5d
 80023a2:	2203      	movs	r2, #3
 80023a4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	333d      	adds	r3, #61	; 0x3d
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d114      	bne.n	80023e6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	333c      	adds	r3, #60	; 0x3c
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	440b      	add	r3, r1
 80023e0:	333d      	adds	r3, #61	; 0x3d
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	0151      	lsls	r1, r2, #5
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	440a      	add	r2, r1
 80023fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f004 ffa7 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	461a      	mov	r2, r3
 8002424:	2310      	movs	r3, #16
 8002426:	6093      	str	r3, [r2, #8]
}
 8002428:	e19e      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b80      	cmp	r3, #128	; 0x80
 800243e:	d12b      	bne.n	8002498 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	0151      	lsls	r1, r2, #5
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	440a      	add	r2, r1
 8002456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f004 ff7a 	bl	8007364 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	440b      	add	r3, r1
 800247e:	335d      	adds	r3, #93	; 0x5d
 8002480:	2206      	movs	r2, #6
 8002482:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	461a      	mov	r2, r3
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	6093      	str	r3, [r2, #8]
}
 8002496:	e167      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	d135      	bne.n	800251c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	0151      	lsls	r1, r2, #5
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	440a      	add	r2, r1
 80024c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 ff42 	bl	8007364 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	461a      	mov	r2, r3
 80024ee:	2310      	movs	r3, #16
 80024f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	461a      	mov	r2, r3
 8002500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002504:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	335d      	adds	r3, #93	; 0x5d
 8002516:	2208      	movs	r2, #8
 8002518:	701a      	strb	r2, [r3, #0]
}
 800251a:	e125      	b.n	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	f040 811a 	bne.w	8002768 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	0151      	lsls	r1, r2, #5
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	440a      	add	r2, r1
 800254a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254e:	f023 0302 	bic.w	r3, r3, #2
 8002552:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	335d      	adds	r3, #93	; 0x5d
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d137      	bne.n	80025da <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	335c      	adds	r3, #92	; 0x5c
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	333f      	adds	r3, #63	; 0x3f
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d00b      	beq.n	80025ac <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	333f      	adds	r3, #63	; 0x3f
 80025a4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	f040 80c5 	bne.w	8002736 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	440b      	add	r3, r1
 80025ba:	3351      	adds	r3, #81	; 0x51
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	f083 0301 	eor.w	r3, r3, #1
 80025c2:	b2d8      	uxtb	r0, r3
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	3351      	adds	r3, #81	; 0x51
 80025d4:	4602      	mov	r2, r0
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e0ad      	b.n	8002736 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	440b      	add	r3, r1
 80025e8:	335d      	adds	r3, #93	; 0x5d
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d10a      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	335c      	adds	r3, #92	; 0x5c
 8002600:	2202      	movs	r2, #2
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e097      	b.n	8002736 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	335d      	adds	r3, #93	; 0x5d
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b04      	cmp	r3, #4
 800261a:	d10a      	bne.n	8002632 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	440b      	add	r3, r1
 800262a:	335c      	adds	r3, #92	; 0x5c
 800262c:	2202      	movs	r2, #2
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	e081      	b.n	8002736 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	335d      	adds	r3, #93	; 0x5d
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d10a      	bne.n	800265e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	335c      	adds	r3, #92	; 0x5c
 8002658:	2205      	movs	r2, #5
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e06b      	b.n	8002736 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	335d      	adds	r3, #93	; 0x5d
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b06      	cmp	r3, #6
 8002672:	d00a      	beq.n	800268a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	440b      	add	r3, r1
 8002682:	335d      	adds	r3, #93	; 0x5d
 8002684:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002686:	2b08      	cmp	r3, #8
 8002688:	d155      	bne.n	8002736 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	3358      	adds	r3, #88	; 0x58
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1c59      	adds	r1, r3, #1
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4403      	add	r3, r0
 80026ac:	3358      	adds	r3, #88	; 0x58
 80026ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	3358      	adds	r3, #88	; 0x58
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d914      	bls.n	80026f0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	3358      	adds	r3, #88	; 0x58
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	335c      	adds	r3, #92	; 0x5c
 80026ea:	2204      	movs	r2, #4
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e009      	b.n	8002704 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	335c      	adds	r3, #92	; 0x5c
 8002700:	2202      	movs	r2, #2
 8002702:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800271a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002722:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2302      	movs	r3, #2
 8002746:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	b2d8      	uxtb	r0, r3
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	335c      	adds	r3, #92	; 0x5c
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4601      	mov	r1, r0
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f007 fb00 	bl	8009d68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	0c5b      	lsrs	r3, r3, #17
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d003      	beq.n	80027b4 <HCD_RXQLVL_IRQHandler+0x44>
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	f000 8082 	beq.w	80028b6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80027b2:	e083      	b.n	80028bc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d07f      	beq.n	80028ba <HCD_RXQLVL_IRQHandler+0x14a>
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	3344      	adds	r3, #68	; 0x44
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d074      	beq.n	80028ba <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	3344      	adds	r3, #68	; 0x44
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	b292      	uxth	r2, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f004 fcec 	bl	80071c8 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3344      	adds	r3, #68	; 0x44
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	18d1      	adds	r1, r2, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4403      	add	r3, r0
 8002814:	3344      	adds	r3, #68	; 0x44
 8002816:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	334c      	adds	r3, #76	; 0x4c
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	18d1      	adds	r1, r2, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4403      	add	r3, r0
 800283c:	334c      	adds	r3, #76	; 0x4c
 800283e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d031      	beq.n	80028ba <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800286c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002874:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	3350      	adds	r3, #80	; 0x50
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f083 0301 	eor.w	r3, r3, #1
 800289e:	b2d8      	uxtb	r0, r3
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	3350      	adds	r3, #80	; 0x50
 80028b0:	4602      	mov	r2, r0
 80028b2:	701a      	strb	r2, [r3, #0]
      break;
 80028b4:	e001      	b.n	80028ba <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80028ba:	bf00      	nop
  }
}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	1ff80000 	.word	0x1ff80000

080028c8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80028f4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d113      	bne.n	8002928 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d10a      	bne.n	8002920 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002918:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f007 fa08 	bl	8009d30 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b08      	cmp	r3, #8
 8002930:	d147      	bne.n	80029c2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f043 0308 	orr.w	r3, r3, #8
 8002938:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d129      	bne.n	8002998 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d113      	bne.n	8002974 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002952:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002956:	d106      	bne.n	8002966 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2102      	movs	r1, #2
 800295e:	4618      	mov	r0, r3
 8002960:	f004 fc7c 	bl	800725c <USB_InitFSLSPClkSel>
 8002964:	e011      	b.n	800298a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2101      	movs	r1, #1
 800296c:	4618      	mov	r0, r3
 800296e:	f004 fc75 	bl	800725c <USB_InitFSLSPClkSel>
 8002972:	e00a      	b.n	800298a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d106      	bne.n	800298a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002982:	461a      	mov	r2, r3
 8002984:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002988:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f007 f9fa 	bl	8009d84 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f007 f9cd 	bl	8009d30 <HAL_HCD_Connect_Callback>
 8002996:	e014      	b.n	80029c2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f007 fa01 	bl	8009da0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80029ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029b0:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80029c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d103      	bne.n	80029d4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07f      	b.n	8002afa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f006 fb1e 	bl	8009050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e006      	b.n	8002a70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d104      	bne.n	8002a82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_I2C_Init+0x11c>)
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	ea42 0103 	orr.w	r1, r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69d9      	ldr	r1, [r3, #28]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	02008000 	.word	0x02008000

08002b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d138      	bne.n	8002b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e032      	b.n	8002b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	; 0x24
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d139      	bne.n	8002c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e033      	b.n	8002c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2224      	movs	r2, #36	; 0x24
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0bf      	b.n	8002dca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f006 fa6e 	bl	8009140 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002c7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6999      	ldr	r1, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <HAL_LTDC_Init+0x19c>)
 8002cac:	400b      	ands	r3, r1
 8002cae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6899      	ldr	r1, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68d9      	ldr	r1, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <HAL_LTDC_Init+0x19c>)
 8002cda:	400b      	ands	r3, r1
 8002cdc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68d9      	ldr	r1, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6919      	ldr	r1, [r3, #16]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_LTDC_Init+0x19c>)
 8002d08:	400b      	ands	r3, r1
 8002d0a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6919      	ldr	r1, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6959      	ldr	r1, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_LTDC_Init+0x19c>)
 8002d36:	400b      	ands	r3, r1
 8002d38:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6959      	ldr	r1, [r3, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0206 	orr.w	r2, r2, #6
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	f000f800 	.word	0xf000f800

08002dd8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d023      	beq.n	8002e42 <HAL_LTDC_IRQHandler+0x6a>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01e      	beq.n	8002e42 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0204 	bic.w	r2, r2, #4
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f86f 	bl	8002f20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d023      	beq.n	8002e94 <HAL_LTDC_IRQHandler+0xbc>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01e      	beq.n	8002e94 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0202 	bic.w	r2, r2, #2
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e74:	f043 0202 	orr.w	r2, r3, #2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2204      	movs	r2, #4
 8002e82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f846 	bl	8002f20 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01b      	beq.n	8002ed6 <HAL_LTDC_IRQHandler+0xfe>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d016      	beq.n	8002ed6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0201 	bic.w	r2, r2, #1
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f82f 	bl	8002f34 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01b      	beq.n	8002f18 <HAL_LTDC_IRQHandler+0x140>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d016      	beq.n	8002f18 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0208 	bic.w	r2, r2, #8
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2208      	movs	r2, #8
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f818 	bl	8002f48 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f5c:	b5b0      	push	{r4, r5, r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_LTDC_ConfigLayer+0x1a>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e02c      	b.n	8002fd0 <HAL_LTDC_ConfigLayer+0x74>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2134      	movs	r1, #52	; 0x34
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4614      	mov	r4, r2
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f811 	bl	8002fd8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bdb0      	pop	{r4, r5, r7, pc}

08002fd8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	4413      	add	r3, r2
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	01db      	lsls	r3, r3, #7
 8003004:	4413      	add	r3, r2
 8003006:	3384      	adds	r3, #132	; 0x84
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	4611      	mov	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	01d2      	lsls	r2, r2, #7
 8003014:	440a      	add	r2, r1
 8003016:	3284      	adds	r2, #132	; 0x84
 8003018:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800301c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	4413      	add	r3, r2
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4619      	mov	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	01db      	lsls	r3, r3, #7
 800303c:	440b      	add	r3, r1
 800303e:	3384      	adds	r3, #132	; 0x84
 8003040:	4619      	mov	r1, r3
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003056:	4413      	add	r3, r2
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	01db      	lsls	r3, r3, #7
 8003066:	4413      	add	r3, r2
 8003068:	3384      	adds	r3, #132	; 0x84
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	4611      	mov	r1, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	01d2      	lsls	r2, r2, #7
 8003076:	440a      	add	r2, r1
 8003078:	3284      	adds	r2, #132	; 0x84
 800307a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800307e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800308e:	4413      	add	r3, r2
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4619      	mov	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	440b      	add	r3, r1
 800309e:	3384      	adds	r3, #132	; 0x84
 80030a0:	4619      	mov	r1, r3
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	01db      	lsls	r3, r3, #7
 80030b2:	4413      	add	r3, r2
 80030b4:	3384      	adds	r3, #132	; 0x84
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	4611      	mov	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	01d2      	lsls	r2, r2, #7
 80030c2:	440a      	add	r2, r1
 80030c4:	3284      	adds	r2, #132	; 0x84
 80030c6:	f023 0307 	bic.w	r3, r3, #7
 80030ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	01db      	lsls	r3, r3, #7
 80030d6:	4413      	add	r3, r2
 80030d8:	3384      	adds	r3, #132	; 0x84
 80030da:	461a      	mov	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	01db      	lsls	r3, r3, #7
 8003108:	4413      	add	r3, r2
 800310a:	3384      	adds	r3, #132	; 0x84
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	01db      	lsls	r3, r3, #7
 8003118:	4413      	add	r3, r2
 800311a:	3384      	adds	r3, #132	; 0x84
 800311c:	461a      	mov	r2, r3
 800311e:	2300      	movs	r3, #0
 8003120:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003128:	461a      	mov	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	431a      	orrs	r2, r3
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	01db      	lsls	r3, r3, #7
 800313c:	440b      	add	r3, r1
 800313e:	3384      	adds	r3, #132	; 0x84
 8003140:	4619      	mov	r1, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	01db      	lsls	r3, r3, #7
 8003152:	4413      	add	r3, r2
 8003154:	3384      	adds	r3, #132	; 0x84
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	4611      	mov	r1, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	01d2      	lsls	r2, r2, #7
 8003162:	440a      	add	r2, r1
 8003164:	3284      	adds	r2, #132	; 0x84
 8003166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800316a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	01db      	lsls	r3, r3, #7
 8003176:	4413      	add	r3, r2
 8003178:	3384      	adds	r3, #132	; 0x84
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	01db      	lsls	r3, r3, #7
 800318c:	4413      	add	r3, r2
 800318e:	3384      	adds	r3, #132	; 0x84
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4619      	mov	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	01db      	lsls	r3, r3, #7
 800319c:	440b      	add	r3, r1
 800319e:	3384      	adds	r3, #132	; 0x84
 80031a0:	4619      	mov	r1, r3
 80031a2:	4b58      	ldr	r3, [pc, #352]	; (8003304 <LTDC_SetConfig+0x32c>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	6809      	ldr	r1, [r1, #0]
 80031b4:	4608      	mov	r0, r1
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	01c9      	lsls	r1, r1, #7
 80031ba:	4401      	add	r1, r0
 80031bc:	3184      	adds	r1, #132	; 0x84
 80031be:	4313      	orrs	r3, r2
 80031c0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	01db      	lsls	r3, r3, #7
 80031cc:	4413      	add	r3, r2
 80031ce:	3384      	adds	r3, #132	; 0x84
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	01db      	lsls	r3, r3, #7
 80031dc:	4413      	add	r3, r2
 80031de:	3384      	adds	r3, #132	; 0x84
 80031e0:	461a      	mov	r2, r3
 80031e2:	2300      	movs	r3, #0
 80031e4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	01db      	lsls	r3, r3, #7
 80031f0:	4413      	add	r3, r2
 80031f2:	3384      	adds	r3, #132	; 0x84
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003204:	2304      	movs	r3, #4
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	e01b      	b.n	8003242 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003212:	2303      	movs	r3, #3
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e014      	b.n	8003242 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	2b04      	cmp	r3, #4
 800321e:	d00b      	beq.n	8003238 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003224:	2b02      	cmp	r3, #2
 8003226:	d007      	beq.n	8003238 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800322c:	2b03      	cmp	r3, #3
 800322e:	d003      	beq.n	8003238 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003234:	2b07      	cmp	r3, #7
 8003236:	d102      	bne.n	800323e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003238:	2302      	movs	r3, #2
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e001      	b.n	8003242 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800323e:	2301      	movs	r3, #1
 8003240:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	01db      	lsls	r3, r3, #7
 800324c:	4413      	add	r3, r2
 800324e:	3384      	adds	r3, #132	; 0x84
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4611      	mov	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	01d2      	lsls	r2, r2, #7
 800325c:	440a      	add	r2, r1
 800325e:	3284      	adds	r2, #132	; 0x84
 8003260:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003264:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6859      	ldr	r1, [r3, #4]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1acb      	subs	r3, r1, r3
 800327c:	69f9      	ldr	r1, [r7, #28]
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	3303      	adds	r3, #3
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	6809      	ldr	r1, [r1, #0]
 8003288:	4608      	mov	r0, r1
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	01c9      	lsls	r1, r1, #7
 800328e:	4401      	add	r1, r0
 8003290:	3184      	adds	r1, #132	; 0x84
 8003292:	4313      	orrs	r3, r2
 8003294:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	01db      	lsls	r3, r3, #7
 80032a0:	4413      	add	r3, r2
 80032a2:	3384      	adds	r3, #132	; 0x84
 80032a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	01db      	lsls	r3, r3, #7
 80032b0:	440b      	add	r3, r1
 80032b2:	3384      	adds	r3, #132	; 0x84
 80032b4:	4619      	mov	r1, r3
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <LTDC_SetConfig+0x330>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	01db      	lsls	r3, r3, #7
 80032c6:	4413      	add	r3, r2
 80032c8:	3384      	adds	r3, #132	; 0x84
 80032ca:	461a      	mov	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	01db      	lsls	r3, r3, #7
 80032dc:	4413      	add	r3, r2
 80032de:	3384      	adds	r3, #132	; 0x84
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4611      	mov	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	01d2      	lsls	r2, r2, #7
 80032ec:	440a      	add	r2, r1
 80032ee:	3284      	adds	r2, #132	; 0x84
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6013      	str	r3, [r2, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	fffff8f8 	.word	0xfffff8f8
 8003308:	fffff800 	.word	0xfffff800

0800330c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003338:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800333a:	f7fd f907 	bl	800054c <HAL_GetTick>
 800333e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003340:	e009      	b.n	8003356 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003342:	f7fd f903 	bl	800054c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003350:	d901      	bls.n	8003356 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e022      	b.n	800339c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d1ee      	bne.n	8003342 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003370:	f7fd f8ec 	bl	800054c <HAL_GetTick>
 8003374:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003376:	e009      	b.n	800338c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003378:	f7fd f8e8 	bl	800054c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003386:	d901      	bls.n	800338c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e007      	b.n	800339c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003398:	d1ee      	bne.n	8003378 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40007000 	.word	0x40007000

080033ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7fd f8c8 	bl	800054c <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e073      	b.n	80034b0 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_QSPI_Init+0x2c>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e06b      	b.n	80034b0 <HAL_QSPI_Init+0x104>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f005 ff6b 	bl	80092d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80033fa:	f241 3188 	movw	r1, #5000	; 0x1388
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f85e 	bl	80034c0 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	3b01      	subs	r3, #1
 8003414:	021a      	lsls	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	2120      	movs	r1, #32
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f856 	bl	80034dc <QSPI_WaitFlagStateUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d135      	bne.n	80034a6 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_QSPI_Init+0x10c>)
 8003442:	4013      	ands	r3, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6852      	ldr	r2, [r2, #4]
 8003448:	0611      	lsls	r1, r2, #24
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68d2      	ldr	r2, [r2, #12]
 800344e:	4311      	orrs	r1, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	69d2      	ldr	r2, [r2, #28]
 8003454:	4311      	orrs	r1, r2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6a12      	ldr	r2, [r2, #32]
 800345a:	4311      	orrs	r1, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_QSPI_Init+0x110>)
 800346c:	4013      	ands	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6912      	ldr	r2, [r2, #16]
 8003472:	0411      	lsls	r1, r2, #16
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6952      	ldr	r2, [r2, #20]
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6992      	ldr	r2, [r2, #24]
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	430b      	orrs	r3, r1
 8003486:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	00ffff2f 	.word	0x00ffff2f
 80034bc:	ffe0f8fe 	.word	0xffe0f8fe

080034c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	649a      	str	r2, [r3, #72]	; 0x48
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80034ec:	e01a      	b.n	8003524 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d016      	beq.n	8003524 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <QSPI_WaitFlagStateUntilTimeout+0x30>
 80034fc:	f7fd f826 	bl	800054c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	429a      	cmp	r2, r3
 800350a:	d20b      	bcs.n	8003524 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2204      	movs	r2, #4
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e00e      	b.n	8003542 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	429a      	cmp	r2, r3
 800353e:	d1d6      	bne.n	80034ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003554:	2300      	movs	r3, #0
 8003556:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e25c      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8087 	beq.w	800367e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003570:	4b96      	ldr	r3, [pc, #600]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b04      	cmp	r3, #4
 800357a:	d00c      	beq.n	8003596 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357c:	4b93      	ldr	r3, [pc, #588]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d112      	bne.n	80035ae <HAL_RCC_OscConfig+0x62>
 8003588:	4b90      	ldr	r3, [pc, #576]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003594:	d10b      	bne.n	80035ae <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003596:	4b8d      	ldr	r3, [pc, #564]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d06c      	beq.n	800367c <HAL_RCC_OscConfig+0x130>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d168      	bne.n	800367c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e236      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x7a>
 80035b8:	4b84      	ldr	r3, [pc, #528]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a83      	ldr	r2, [pc, #524]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80035be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	e02e      	b.n	8003624 <HAL_RCC_OscConfig+0xd8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x9c>
 80035ce:	4b7f      	ldr	r3, [pc, #508]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7e      	ldr	r2, [pc, #504]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80035d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b7c      	ldr	r3, [pc, #496]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7b      	ldr	r2, [pc, #492]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80035e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e01d      	b.n	8003624 <HAL_RCC_OscConfig+0xd8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0xc0>
 80035f2:	4b76      	ldr	r3, [pc, #472]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a75      	ldr	r2, [pc, #468]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80035f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4b73      	ldr	r3, [pc, #460]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a72      	ldr	r2, [pc, #456]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0xd8>
 800360c:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b6c      	ldr	r3, [pc, #432]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a6b      	ldr	r2, [pc, #428]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d013      	beq.n	8003654 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fc ff8e 	bl	800054c <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003634:	f7fc ff8a 	bl	800054c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1ea      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b61      	ldr	r3, [pc, #388]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0xe8>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fc ff7a 	bl	800054c <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800365c:	f7fc ff76 	bl	800054c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1d6      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	4b57      	ldr	r3, [pc, #348]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x110>
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d069      	beq.n	800375e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800368a:	4b50      	ldr	r3, [pc, #320]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b4d      	ldr	r3, [pc, #308]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d11c      	bne.n	80036dc <HAL_RCC_OscConfig+0x190>
 80036a2:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d116      	bne.n	80036dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_RCC_OscConfig+0x17a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1aa      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	4b41      	ldr	r3, [pc, #260]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	493d      	ldr	r1, [pc, #244]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	e040      	b.n	800375e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d023      	beq.n	800372c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e4:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a38      	ldr	r2, [pc, #224]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fc ff2c 	bl	800054c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f8:	f7fc ff28 	bl	800054c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e188      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370a:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4929      	ldr	r1, [pc, #164]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
 800372a:	e018      	b.n	800375e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a26      	ldr	r2, [pc, #152]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fc ff08 	bl	800054c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7fc ff04 	bl	800054c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e164      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d038      	beq.n	80037dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d019      	beq.n	80037a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fc fee5 	bl	800054c <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003786:	f7fc fee1 	bl	800054c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e141      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 800379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x23a>
 80037a4:	e01a      	b.n	80037dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80037a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <HAL_RCC_OscConfig+0x280>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fc fecb 	bl	800054c <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fc fec7 	bl	800054c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d903      	bls.n	80037d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e127      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
 80037cc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	4b94      	ldr	r3, [pc, #592]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ee      	bne.n	80037ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 80a4 	beq.w	8003932 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b8e      	ldr	r3, [pc, #568]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10d      	bne.n	8003812 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	4a8a      	ldr	r2, [pc, #552]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003800:	6413      	str	r3, [r2, #64]	; 0x40
 8003802:	4b88      	ldr	r3, [pc, #544]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003812:	4b85      	ldr	r3, [pc, #532]	; (8003a28 <HAL_RCC_OscConfig+0x4dc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d118      	bne.n	8003850 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800381e:	4b82      	ldr	r3, [pc, #520]	; (8003a28 <HAL_RCC_OscConfig+0x4dc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a81      	ldr	r2, [pc, #516]	; (8003a28 <HAL_RCC_OscConfig+0x4dc>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382a:	f7fc fe8f 	bl	800054c <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003832:	f7fc fe8b 	bl	800054c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	; 0x64
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0eb      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003844:	4b78      	ldr	r3, [pc, #480]	; (8003a28 <HAL_RCC_OscConfig+0x4dc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d106      	bne.n	8003866 <HAL_RCC_OscConfig+0x31a>
 8003858:	4b72      	ldr	r3, [pc, #456]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a71      	ldr	r2, [pc, #452]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6713      	str	r3, [r2, #112]	; 0x70
 8003864:	e02d      	b.n	80038c2 <HAL_RCC_OscConfig+0x376>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x33c>
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a6c      	ldr	r2, [pc, #432]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a69      	ldr	r2, [pc, #420]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	e01c      	b.n	80038c2 <HAL_RCC_OscConfig+0x376>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b05      	cmp	r3, #5
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0x35e>
 8003890:	4b64      	ldr	r3, [pc, #400]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a63      	ldr	r2, [pc, #396]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003896:	f043 0304 	orr.w	r3, r3, #4
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4a60      	ldr	r2, [pc, #384]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
 80038a8:	e00b      	b.n	80038c2 <HAL_RCC_OscConfig+0x376>
 80038aa:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a5d      	ldr	r2, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	4b5b      	ldr	r3, [pc, #364]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a5a      	ldr	r2, [pc, #360]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d015      	beq.n	80038f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ca:	f7fc fe3f 	bl	800054c <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fc fe3b 	bl	800054c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e099      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e8:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ee      	beq.n	80038d2 <HAL_RCC_OscConfig+0x386>
 80038f4:	e014      	b.n	8003920 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fc fe29 	bl	800054c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fc fe25 	bl	800054c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e083      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003914:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1ee      	bne.n	80038fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d105      	bne.n	8003932 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003926:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	4a3e      	ldr	r2, [pc, #248]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 800392c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003930:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d06f      	beq.n	8003a1a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800393a:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b08      	cmp	r3, #8
 8003944:	d067      	beq.n	8003a16 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d149      	bne.n	80039e2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003954:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fc fdf7 	bl	800054c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003962:	f7fc fdf3 	bl	800054c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e053      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	019b      	lsls	r3, r3, #6
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	3b01      	subs	r3, #1
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	061b      	lsls	r3, r3, #24
 80039a4:	4313      	orrs	r3, r2
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80039a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ac:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1c      	ldr	r2, [pc, #112]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80039b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fc fdc7 	bl	800054c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c2:	f7fc fdc3 	bl	800054c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e023      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x476>
 80039e0:	e01b      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 80039e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fc fdad 	bl	800054c <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f6:	f7fc fda9 	bl	800054c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e009      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCC_OscConfig+0x4d8>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0x4aa>
 8003a14:	e001      	b.n	8003a1a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40007000 	.word	0x40007000

08003a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0ce      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a44:	4b69      	ldr	r3, [pc, #420]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d910      	bls.n	8003a74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a52:	4b66      	ldr	r3, [pc, #408]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 020f 	bic.w	r2, r3, #15
 8003a5a:	4964      	ldr	r1, [pc, #400]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b62      	ldr	r3, [pc, #392]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0b6      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a8c:	4b58      	ldr	r3, [pc, #352]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa4:	4b52      	ldr	r3, [pc, #328]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	494c      	ldr	r1, [pc, #304]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d040      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b46      	ldr	r3, [pc, #280]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d115      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07d      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d107      	bne.n	8003afe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aee:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e071      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b3c      	ldr	r3, [pc, #240]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e069      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 0203 	bic.w	r2, r3, #3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4935      	ldr	r1, [pc, #212]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b20:	f7fc fd14 	bl	800054c <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b28:	f7fc fd10 	bl	800054c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e051      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3e:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 020c 	and.w	r2, r3, #12
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1eb      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d210      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 020f 	bic.w	r2, r3, #15
 8003b66:	4921      	ldr	r1, [pc, #132]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e030      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8c:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4915      	ldr	r1, [pc, #84]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	490d      	ldr	r1, [pc, #52]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bbe:	f000 f81d 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bc2:	4601      	mov	r1, r0
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd0:	5cd3      	ldrb	r3, [r2, r3]
 8003bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f005 ffae 	bl	8009b3c <HAL_InitTick>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023c00 	.word	0x40023c00
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	08009f44 	.word	0x08009f44
 8003bf8:	20000004 	.word	0x20000004

08003bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	607b      	str	r3, [r7, #4]
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c12:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d007      	beq.n	8003c2e <HAL_RCC_GetSysClockFreq+0x32>
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d008      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x38>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 808d 	bne.w	8003d42 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c2a:	60bb      	str	r3, [r7, #8]
       break;
 8003c2c:	e08c      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2e:	4b4b      	ldr	r3, [pc, #300]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c30:	60bb      	str	r3, [r7, #8]
      break;
 8003c32:	e089      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c34:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c3e:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d023      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4a:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	f04f 0400 	mov.w	r4, #0
 8003c54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	ea03 0501 	and.w	r5, r3, r1
 8003c60:	ea04 0602 	and.w	r6, r4, r2
 8003c64:	4a3d      	ldr	r2, [pc, #244]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c66:	fb02 f106 	mul.w	r1, r2, r6
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	fb02 f205 	mul.w	r2, r2, r5
 8003c70:	440a      	add	r2, r1
 8003c72:	493a      	ldr	r1, [pc, #232]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c74:	fba5 0101 	umull	r0, r1, r5, r1
 8003c78:	1853      	adds	r3, r2, r1
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f04f 0400 	mov.w	r4, #0
 8003c82:	461a      	mov	r2, r3
 8003c84:	4623      	mov	r3, r4
 8003c86:	f7fc fabf 	bl	8000208 <__aeabi_uldivmod>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e049      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	f04f 0400 	mov.w	r4, #0
 8003c9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	ea03 0501 	and.w	r5, r3, r1
 8003ca8:	ea04 0602 	and.w	r6, r4, r2
 8003cac:	4629      	mov	r1, r5
 8003cae:	4632      	mov	r2, r6
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	f04f 0400 	mov.w	r4, #0
 8003cb8:	0154      	lsls	r4, r2, #5
 8003cba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cbe:	014b      	lsls	r3, r1, #5
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	1b49      	subs	r1, r1, r5
 8003cc6:	eb62 0206 	sbc.w	r2, r2, r6
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	f04f 0400 	mov.w	r4, #0
 8003cd2:	0194      	lsls	r4, r2, #6
 8003cd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cd8:	018b      	lsls	r3, r1, #6
 8003cda:	1a5b      	subs	r3, r3, r1
 8003cdc:	eb64 0402 	sbc.w	r4, r4, r2
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	00e2      	lsls	r2, r4, #3
 8003cea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cee:	00d9      	lsls	r1, r3, #3
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	195b      	adds	r3, r3, r5
 8003cf6:	eb44 0406 	adc.w	r4, r4, r6
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	02a2      	lsls	r2, r4, #10
 8003d04:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d08:	0299      	lsls	r1, r3, #10
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	4621      	mov	r1, r4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f04f 0400 	mov.w	r4, #0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	f7fc fa74 	bl	8000208 <__aeabi_uldivmod>
 8003d20:	4603      	mov	r3, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0c1b      	lsrs	r3, r3, #16
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	3301      	adds	r3, #1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	60bb      	str	r3, [r7, #8]
      break;
 8003d40:	e002      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d44:	60bb      	str	r3, [r7, #8]
      break;
 8003d46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d48:	68bb      	ldr	r3, [r7, #8]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800
 8003d58:	00f42400 	.word	0x00f42400
 8003d5c:	017d7840 	.word	0x017d7840

08003d60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	20000004 	.word	0x20000004

08003d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d7c:	f7ff fff0 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d80:	4601      	mov	r1, r0
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0a9b      	lsrs	r3, r3, #10
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4a03      	ldr	r2, [pc, #12]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8e:	5cd3      	ldrb	r3, [r2, r3]
 8003d90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	08009f54 	.word	0x08009f54

08003da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da4:	f7ff ffdc 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003da8:	4601      	mov	r1, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0b5b      	lsrs	r3, r3, #13
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4a03      	ldr	r2, [pc, #12]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
 8003db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	08009f54 	.word	0x08009f54

08003dc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0203 	and.w	r2, r3, #3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003de4:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_GetClockConfig+0x5c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <HAL_RCC_GetClockConfig+0x60>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	601a      	str	r2, [r3, #0]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40023c00 	.word	0x40023c00

08003e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d012      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e54:	4b69      	ldr	r3, [pc, #420]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a68      	ldr	r2, [pc, #416]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e5e:	6093      	str	r3, [r2, #8]
 8003e60:	4b66      	ldr	r3, [pc, #408]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	4964      	ldr	r1, [pc, #400]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d017      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e86:	4b5d      	ldr	r3, [pc, #372]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	4959      	ldr	r1, [pc, #356]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d017      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ec2:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	494a      	ldr	r1, [pc, #296]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 808b 	beq.w	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f10:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	4a39      	ldr	r2, [pc, #228]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1c:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f28:	4b35      	ldr	r3, [pc, #212]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a34      	ldr	r2, [pc, #208]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f34:	f7fc fb0a 	bl	800054c <HAL_GetTick>
 8003f38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3c:	f7fc fb06 	bl	800054c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e355      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f5a:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d035      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d02e      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f82:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f9a:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d114      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fc face 	bl	800054c <HAL_GetTick>
 8003fb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fc faca 	bl	800054c <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e317      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ee      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe2:	d111      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	4901      	ldr	r1, [pc, #4]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
 8003ffa:	e00b      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40007000 	.word	0x40007000
 8004004:	0ffffcff 	.word	0x0ffffcff
 8004008:	4bb0      	ldr	r3, [pc, #704]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4aaf      	ldr	r2, [pc, #700]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800400e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004012:	6093      	str	r3, [r2, #8]
 8004014:	4bad      	ldr	r3, [pc, #692]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004020:	49aa      	ldr	r1, [pc, #680]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004032:	4ba6      	ldr	r3, [pc, #664]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004038:	4aa4      	ldr	r2, [pc, #656]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800403a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004042:	4ba2      	ldr	r3, [pc, #648]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004044:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	499f      	ldr	r1, [pc, #636]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004060:	4b9a      	ldr	r3, [pc, #616]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406e:	4997      	ldr	r1, [pc, #604]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004082:	4b92      	ldr	r3, [pc, #584]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004090:	498e      	ldr	r1, [pc, #568]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a4:	4b89      	ldr	r3, [pc, #548]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b2:	4986      	ldr	r1, [pc, #536]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c6:	4b81      	ldr	r3, [pc, #516]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	497d      	ldr	r1, [pc, #500]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040e8:	4b78      	ldr	r3, [pc, #480]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f023 0203 	bic.w	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	4975      	ldr	r1, [pc, #468]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800410a:	4b70      	ldr	r3, [pc, #448]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f023 020c 	bic.w	r2, r3, #12
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004118:	496c      	ldr	r1, [pc, #432]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800412c:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	4964      	ldr	r1, [pc, #400]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800414e:	4b5f      	ldr	r3, [pc, #380]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	495b      	ldr	r1, [pc, #364]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004170:	4b56      	ldr	r3, [pc, #344]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	4953      	ldr	r1, [pc, #332]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004192:	4b4e      	ldr	r3, [pc, #312]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	494a      	ldr	r1, [pc, #296]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041b4:	4b45      	ldr	r3, [pc, #276]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c2:	4942      	ldr	r1, [pc, #264]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041d6:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	4939      	ldr	r1, [pc, #228]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041f8:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004206:	4931      	ldr	r1, [pc, #196]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d011      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800421a:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004228:	4928      	ldr	r1, [pc, #160]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004238:	d101      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800423a:	2301      	movs	r3, #1
 800423c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425a:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	4918      	ldr	r1, [pc, #96]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800427c:	4b13      	ldr	r3, [pc, #76]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428c:	490f      	ldr	r1, [pc, #60]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d005      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042a2:	f040 80d8 	bne.w	8004456 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042a6:	4b09      	ldr	r3, [pc, #36]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a08      	ldr	r2, [pc, #32]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80042ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b2:	f7fc f94b 	bl	800054c <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042ba:	f7fc f947 	bl	800054c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d903      	bls.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e196      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80042cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d0:	4b6c      	ldr	r3, [pc, #432]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1ee      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d021      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d11d      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042f0:	4b64      	ldr	r3, [pc, #400]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042fe:	4b61      	ldr	r3, [pc, #388]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004304:	0e1b      	lsrs	r3, r3, #24
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	019a      	lsls	r2, r3, #6
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	431a      	orrs	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	071b      	lsls	r3, r3, #28
 8004324:	4957      	ldr	r1, [pc, #348]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02e      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004356:	d129      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004358:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	f003 0303 	and.w	r3, r3, #3
 8004364:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004366:	4b47      	ldr	r3, [pc, #284]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436c:	0f1b      	lsrs	r3, r3, #28
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	019a      	lsls	r2, r3, #6
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	431a      	orrs	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	071b      	lsls	r3, r3, #28
 800438c:	493d      	ldr	r1, [pc, #244]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004394:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439a:	f023 021f 	bic.w	r2, r3, #31
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	3b01      	subs	r3, #1
 80043a4:	4937      	ldr	r1, [pc, #220]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01d      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043be:	0e1b      	lsrs	r3, r3, #24
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043c6:	4b2f      	ldr	r3, [pc, #188]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043cc:	0f1b      	lsrs	r3, r3, #28
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	019a      	lsls	r2, r3, #6
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	071b      	lsls	r3, r3, #28
 80043ec:	4925      	ldr	r1, [pc, #148]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d011      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	019a      	lsls	r2, r3, #6
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	071b      	lsls	r3, r3, #28
 800441c:	4919      	ldr	r1, [pc, #100]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004424:	4b17      	ldr	r3, [pc, #92]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a16      	ldr	r2, [pc, #88]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800442a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800442e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004430:	f7fc f88c 	bl	800054c <HAL_GetTick>
 8004434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004438:	f7fc f888 	bl	800054c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0d7      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b01      	cmp	r3, #1
 800445a:	f040 80cd 	bne.w	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446a:	f7fc f86f 	bl	800054c <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004470:	e00a      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004472:	f7fc f86b 	bl	800054c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b64      	cmp	r3, #100	; 0x64
 800447e:	d903      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e0ba      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004484:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004488:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004494:	d0ed      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d009      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d02e      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d12a      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044be:	4b51      	ldr	r3, [pc, #324]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044cc:	4b4d      	ldr	r3, [pc, #308]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	0f1b      	lsrs	r3, r3, #28
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	019a      	lsls	r2, r3, #6
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	071b      	lsls	r3, r3, #28
 80044f2:	4944      	ldr	r1, [pc, #272]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044fa:	4b42      	ldr	r3, [pc, #264]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004500:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	493d      	ldr	r1, [pc, #244]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d022      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004528:	d11d      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800452a:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	0e1b      	lsrs	r3, r3, #24
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004538:	4b32      	ldr	r3, [pc, #200]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	0f1b      	lsrs	r3, r3, #28
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	019a      	lsls	r2, r3, #6
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	041b      	lsls	r3, r3, #16
 8004552:	431a      	orrs	r2, r3
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	061b      	lsls	r3, r3, #24
 8004558:	431a      	orrs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	071b      	lsls	r3, r3, #28
 800455e:	4929      	ldr	r1, [pc, #164]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d028      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	0e1b      	lsrs	r3, r3, #24
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004580:	4b20      	ldr	r3, [pc, #128]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	019a      	lsls	r2, r3, #6
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	431a      	orrs	r2, r3
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	071b      	lsls	r3, r3, #28
 80045a6:	4917      	ldr	r1, [pc, #92]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4911      	ldr	r1, [pc, #68]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0e      	ldr	r2, [pc, #56]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d0:	f7fb ffbc 	bl	800054c <HAL_GetTick>
 80045d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045d8:	f7fb ffb8 	bl	800054c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e007      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f6:	d1ef      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004626:	f040 8086 	bne.w	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800462a:	4b8d      	ldr	r3, [pc, #564]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004630:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004638:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004640:	d03e      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8004642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004646:	d073      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d000      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800464c:	e074      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800464e:	4b84      	ldr	r3, [pc, #528]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d108      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800465a:	4b81      	ldr	r3, [pc, #516]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004662:	4a80      	ldr	r2, [pc, #512]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	e007      	b.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800466c:	4b7c      	ldr	r3, [pc, #496]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004674:	4a7c      	ldr	r2, [pc, #496]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800467c:	4b78      	ldr	r3, [pc, #480]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	0e1b      	lsrs	r3, r3, #24
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800468a:	4b75      	ldr	r3, [pc, #468]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	099b      	lsrs	r3, r3, #6
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	fb02 f203 	mul.w	r2, r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80046a4:	4b6e      	ldr	r3, [pc, #440]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80046a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
        break;
 80046be:	e03b      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046c0:	4b67      	ldr	r3, [pc, #412]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d108      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046cc:	4b64      	ldr	r3, [pc, #400]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d4:	4a63      	ldr	r2, [pc, #396]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	e007      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80046de:	4b60      	ldr	r3, [pc, #384]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e6:	4a60      	ldr	r2, [pc, #384]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80046ee:	4b5c      	ldr	r3, [pc, #368]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80046f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f4:	0e1b      	lsrs	r3, r3, #24
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80046fc:	4b58      	ldr	r3, [pc, #352]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80046fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004702:	099b      	lsrs	r3, r3, #6
 8004704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	fb02 f203 	mul.w	r2, r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004716:	4b52      	ldr	r3, [pc, #328]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	3301      	adds	r3, #1
 8004722:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
        break;
 800472e:	e003      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004730:	4b4e      	ldr	r3, [pc, #312]	; (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004732:	617b      	str	r3, [r7, #20]
        break;
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8004736:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473e:	f040 8086 	bne.w	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004742:	4b47      	ldr	r3, [pc, #284]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004748:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004750:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004758:	d03e      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800475a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800475e:	d073      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d000      	beq.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004764:	e074      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004766:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d108      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004772:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800477a:	4a3a      	ldr	r2, [pc, #232]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	e007      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004784:	4b36      	ldr	r3, [pc, #216]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478c:	4a36      	ldr	r2, [pc, #216]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004794:	4b32      	ldr	r3, [pc, #200]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	0e1b      	lsrs	r3, r3, #24
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80047a2:	4b2f      	ldr	r3, [pc, #188]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	099b      	lsrs	r3, r3, #6
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	fb02 f203 	mul.w	r2, r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80047bc:	4b28      	ldr	r3, [pc, #160]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80047be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	3301      	adds	r3, #1
 80047ca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
        break;
 80047d6:	e03b      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047d8:	4b21      	ldr	r3, [pc, #132]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d108      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	e007      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047f6:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fe:	4a1a      	ldr	r2, [pc, #104]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	0e1b      	lsrs	r3, r3, #24
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481a:	099b      	lsrs	r3, r3, #6
 800481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	fb02 f203 	mul.w	r2, r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800482e:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	617b      	str	r3, [r7, #20]
        break;
 8004846:	e003      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004848:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800484a:	617b      	str	r3, [r7, #20]
        break;
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800484e:	bf00      	nop

  return frequency;
 8004850:	697b      	ldr	r3, [r7, #20]
}
 8004852:	4618      	mov	r0, r3
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800
 8004864:	00f42400 	.word	0x00f42400
 8004868:	017d7840 	.word	0x017d7840
 800486c:	00bb8000 	.word	0x00bb8000

08004870 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e01c      	b.n	80048bc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	795b      	ldrb	r3, [r3, #5]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f004 fdac 	bl	80093f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0204 	orr.w	r2, r2, #4
 80048ac:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	791b      	ldrb	r3, [r3, #4]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_RNG_GenerateRandomNumber+0x1a>
 80048da:	2302      	movs	r3, #2
 80048dc:	e03d      	b.n	800495a <HAL_RNG_GenerateRandomNumber+0x96>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	795b      	ldrb	r3, [r3, #5]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d12c      	bne.n	8004948 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fb fe2a 	bl	800054c <HAL_GetTick>
 80048f8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80048fa:	e011      	b.n	8004920 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80048fc:	f7fb fe26 	bl	800054c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d90a      	bls.n	8004920 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e01c      	b.n	800495a <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d1e6      	bne.n	80048fc <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	715a      	strb	r2, [r3, #5]
 8004946:	e004      	b.n	8004952 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2204      	movs	r2, #4
 800494c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	711a      	strb	r2, [r3, #4]

  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	330c      	adds	r3, #12
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ffa7 	bl	80048c4 <HAL_RNG_GenerateRandomNumber>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	e000      	b.n	8004984 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8004982:	2300      	movs	r3, #0
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e06b      	b.n	8004a76 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	7f5b      	ldrb	r3, [r3, #29]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f004 fd3e 	bl	8009430 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	22ca      	movs	r2, #202	; 0xca
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2253      	movs	r2, #83	; 0x53
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fb00 	bl	8004fd0 <RTC_EnterInitMode>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2204      	movs	r2, #4
 80049e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e046      	b.n	8004a76 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6899      	ldr	r1, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_RTC_Init+0xf4>)
 80049f4:	400b      	ands	r3, r1
 80049f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6899      	ldr	r1, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68d2      	ldr	r2, [r2, #12]
 8004a1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6919      	ldr	r1, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	041a      	lsls	r2, r3, #16
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a42:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0208 	bic.w	r2, r2, #8
 8004a52:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	22ff      	movs	r2, #255	; 0xff
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	ff8fffbf 	.word	0xff8fffbf

08004a84 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	7f1b      	ldrb	r3, [r3, #28]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RTC_SetTime+0x1c>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e0a8      	b.n	8004bf2 <HAL_RTC_SetTime+0x16e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d126      	bne.n	8004b00 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 faac 	bl	8005028 <RTC_ByteToBcd2>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 faa5 	bl	8005028 <RTC_ByteToBcd2>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004ae2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	789b      	ldrb	r3, [r3, #2]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fa9d 	bl	8005028 <RTC_ByteToBcd2>
 8004aee:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004af0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	7b1b      	ldrb	r3, [r3, #12]
 8004af8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e018      	b.n	8004b32 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2200      	movs	r2, #0
 8004b12:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	785b      	ldrb	r3, [r3, #1]
 8004b1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b20:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004b26:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	7b1b      	ldrb	r3, [r3, #12]
 8004b2c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	22ca      	movs	r2, #202	; 0xca
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2253      	movs	r2, #83	; 0x53
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fa44 	bl	8004fd0 <RTC_EnterInitMode>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	22ff      	movs	r2, #255	; 0xff
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e045      	b.n	8004bf2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	6979      	ldr	r1, [r7, #20]
 8004b6c:	4b23      	ldr	r3, [pc, #140]	; (8004bfc <HAL_RTC_SetTime+0x178>)
 8004b6e:	400b      	ands	r3, r1
 8004b70:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6899      	ldr	r1, [r3, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ba8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d111      	bne.n	8004bdc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f9e1 	bl	8004f80 <HAL_RTC_WaitForSynchro>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00b      	beq.n	8004bdc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	22ff      	movs	r2, #255	; 0xff
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2204      	movs	r2, #4
 8004bd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e00a      	b.n	8004bf2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd90      	pop	{r4, r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	007f7f7f 	.word	0x007f7f7f

08004c00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	7f1b      	ldrb	r3, [r3, #28]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_RTC_SetDate+0x1c>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e092      	b.n	8004d42 <HAL_RTC_SetDate+0x142>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2202      	movs	r2, #2
 8004c26:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_RTC_SetDate+0x4c>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	f003 0310 	and.w	r3, r3, #16
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	330a      	adds	r3, #10
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11c      	bne.n	8004c8c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	78db      	ldrb	r3, [r3, #3]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f9e6 	bl	8005028 <RTC_ByteToBcd2>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 f9df 	bl	8005028 <RTC_ByteToBcd2>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004c6e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	789b      	ldrb	r3, [r3, #2]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f9d7 	bl	8005028 <RTC_ByteToBcd2>
 8004c7a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004c7c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e00e      	b.n	8004caa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	78db      	ldrb	r3, [r3, #3]
 8004c90:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004c98:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8004c9e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	22ca      	movs	r2, #202	; 0xca
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2253      	movs	r2, #83	; 0x53
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f988 	bl	8004fd0 <RTC_EnterInitMode>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	22ff      	movs	r2, #255	; 0xff
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e031      	b.n	8004d42 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	6979      	ldr	r1, [r7, #20]
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RTC_SetDate+0x14c>)
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d111      	bne.n	8004d2c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f939 	bl	8004f80 <HAL_RTC_WaitForSynchro>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2204      	movs	r2, #4
 8004d20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e00a      	b.n	8004d42 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004d40:	2300      	movs	r3, #0
  }
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	00ffff3f 	.word	0x00ffff3f

08004d50 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b089      	sub	sp, #36	; 0x24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	7f1b      	ldrb	r3, [r3, #28]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_RTC_SetAlarm+0x24>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e101      	b.n	8004f78 <HAL_RTC_SetAlarm+0x228>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d137      	bne.n	8004df6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f942 	bl	8005028 <RTC_ByteToBcd2>
 8004da4:	4603      	mov	r3, r0
 8004da6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 f93b 	bl	8005028 <RTC_ByteToBcd2>
 8004db2:	4603      	mov	r3, r0
 8004db4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004db6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	789b      	ldrb	r3, [r3, #2]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f933 	bl	8005028 <RTC_ByteToBcd2>
 8004dc2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8004dc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	7b1b      	ldrb	r3, [r3, #12]
 8004dcc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004dce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f925 	bl	8005028 <RTC_ByteToBcd2>
 8004dde:	4603      	mov	r3, r0
 8004de0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004de2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8004dea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e023      	b.n	8004e3e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2200      	movs	r2, #0
 8004e08:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004e16:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8004e1c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	7b1b      	ldrb	r3, [r3, #12]
 8004e22:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004e24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8004e2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8004e34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	22ca      	movs	r2, #202	; 0xca
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2253      	movs	r2, #83	; 0x53
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e62:	d13f      	bne.n	8004ee4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e72:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e82:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e84:	f7fb fb62 	bl	800054c <HAL_GetTick>
 8004e88:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004e8a:	e013      	b.n	8004eb4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e8c:	f7fb fb5e 	bl	800054c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e9a:	d90b      	bls.n	8004eb4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	22ff      	movs	r2, #255	; 0xff
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e061      	b.n	8004f78 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0e4      	beq.n	8004e8c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee0:	609a      	str	r2, [r3, #8]
 8004ee2:	e03e      	b.n	8004f62 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ef2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f02:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f04:	f7fb fb22 	bl	800054c <HAL_GetTick>
 8004f08:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004f0a:	e013      	b.n	8004f34 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f0c:	f7fb fb1e 	bl	800054c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f1a:	d90b      	bls.n	8004f34 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	22ff      	movs	r2, #255	; 0xff
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2203      	movs	r2, #3
 8004f28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e021      	b.n	8004f78 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0e4      	beq.n	8004f0c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f60:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	22ff      	movs	r2, #255	; 0xff
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3724      	adds	r7, #36	; 0x24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd90      	pop	{r4, r7, pc}

08004f80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9c:	f7fb fad6 	bl	800054c <HAL_GetTick>
 8004fa0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004fa2:	e009      	b.n	8004fb8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004fa4:	f7fb fad2 	bl	800054c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e007      	b.n	8004fc8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0ee      	beq.n	8004fa4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d119      	bne.n	800501e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ff4:	f7fb faaa 	bl	800054c <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ffa:	e009      	b.n	8005010 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ffc:	f7fb faa6 	bl	800054c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800500a:	d901      	bls.n	8005010 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e007      	b.n	8005020 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0ee      	beq.n	8004ffc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005036:	e005      	b.n	8005044 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3301      	adds	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	3b0a      	subs	r3, #10
 8005042:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	2b09      	cmp	r3, #9
 8005048:	d8f6      	bhi.n	8005038 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	b2da      	uxtb	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	4313      	orrs	r3, r2
 8005056:	b2db      	uxtb	r3, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	7f1b      	ldrb	r3, [r3, #28]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_RTCEx_SetTimeStamp+0x1c>
 800507c:	2302      	movs	r3, #2
 800507e:	e03e      	b.n	80050fe <HAL_RTCEx_SetTimeStamp+0x9a>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2202      	movs	r2, #2
 800508a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	4b1e      	ldr	r3, [pc, #120]	; (800510c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8005094:	4013      	ands	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	22ca      	movs	r2, #202	; 0xca
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2253      	movs	r2, #83	; 0x53
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0206 	bic.w	r2, r2, #6
 80050be:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	22ff      	movs	r2, #255	; 0xff
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	fffff7f7 	.word	0xfffff7f7

08005110 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e149      	b.n	80053c2 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f004 fc90 	bl	8009a68 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f94f 	bl	80053f4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d007      	beq.n	800516e <HAL_SAI_Init+0x5e>
 800515e:	2b01      	cmp	r3, #1
 8005160:	d302      	bcc.n	8005168 <HAL_SAI_Init+0x58>
 8005162:	2b02      	cmp	r3, #2
 8005164:	d006      	beq.n	8005174 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8005166:	e008      	b.n	800517a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
      break;
 800516c:	e005      	b.n	800517a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800516e:	2310      	movs	r3, #16
 8005170:	61fb      	str	r3, [r7, #28]
      break;
 8005172:	e002      	b.n	800517a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005174:	2320      	movs	r3, #32
 8005176:	61fb      	str	r3, [r7, #28]
      break;
 8005178:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d81d      	bhi.n	80051be <HAL_SAI_Init+0xae>
 8005182:	a201      	add	r2, pc, #4	; (adr r2, 8005188 <HAL_SAI_Init+0x78>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	08005199 	.word	0x08005199
 800518c:	0800519f 	.word	0x0800519f
 8005190:	080051a7 	.word	0x080051a7
 8005194:	080051af 	.word	0x080051af
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
      }
      break;
 800519c:	e010      	b.n	80051c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800519e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a2:	617b      	str	r3, [r7, #20]
      }
      break;
 80051a4:	e00c      	b.n	80051c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80051a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051aa:	617b      	str	r3, [r7, #20]
      }
      break;
 80051ac:	e008      	b.n	80051c0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80051ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051b2:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	61fb      	str	r3, [r7, #28]
      }
      break;
 80051bc:	e000      	b.n	80051c0 <HAL_SAI_Init+0xb0>
  default:
    break;
 80051be:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a81      	ldr	r2, [pc, #516]	; (80053cc <HAL_SAI_Init+0x2bc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_SAI_Init+0xc4>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a80      	ldr	r2, [pc, #512]	; (80053d0 <HAL_SAI_Init+0x2c0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d103      	bne.n	80051dc <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 80051d4:	4a7f      	ldr	r2, [pc, #508]	; (80053d4 <HAL_SAI_Init+0x2c4>)
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e002      	b.n	80051e2 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80051dc:	4a7e      	ldr	r2, [pc, #504]	; (80053d8 <HAL_SAI_Init+0x2c8>)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d043      	beq.n	8005272 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a76      	ldr	r2, [pc, #472]	; (80053cc <HAL_SAI_Init+0x2bc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_SAI_Init+0xf2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a74      	ldr	r2, [pc, #464]	; (80053d0 <HAL_SAI_Init+0x2c0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d104      	bne.n	800520c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005202:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005206:	f7ff f9ff 	bl	8004608 <HAL_RCCEx_GetPeriphCLKFreq>
 800520a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a72      	ldr	r2, [pc, #456]	; (80053dc <HAL_SAI_Init+0x2cc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_SAI_Init+0x110>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a71      	ldr	r2, [pc, #452]	; (80053e0 <HAL_SAI_Init+0x2d0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d104      	bne.n	800522a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005220:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005224:	f7ff f9f0 	bl	8004608 <HAL_RCCEx_GetPeriphCLKFreq>
 8005228:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	025b      	lsls	r3, r3, #9
 800523c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005240:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a67      	ldr	r2, [pc, #412]	; (80053e4 <HAL_SAI_Init+0x2d4>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	08da      	lsrs	r2, r3, #3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8005250:	68f9      	ldr	r1, [r7, #12]
 8005252:	4b64      	ldr	r3, [pc, #400]	; (80053e4 <HAL_SAI_Init+0x2d4>)
 8005254:	fba3 2301 	umull	r2, r3, r3, r1
 8005258:	08da      	lsrs	r2, r3, #3
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	1aca      	subs	r2, r1, r3
 8005264:	2a08      	cmp	r2, #8
 8005266:	d904      	bls.n	8005272 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_SAI_Init+0x172>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d109      	bne.n	8005296 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_SAI_Init+0x17e>
 800528a:	2300      	movs	r3, #0
 800528c:	e001      	b.n	8005292 <HAL_SAI_Init+0x182>
 800528e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e008      	b.n	80052a8 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d102      	bne.n	80052a4 <HAL_SAI_Init+0x194>
 800529e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a2:	e000      	b.n	80052a6 <HAL_SAI_Init+0x196>
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b4d      	ldr	r3, [pc, #308]	; (80053e8 <HAL_SAI_Init+0x2d8>)
 80052b4:	400b      	ands	r3, r1
 80052b6:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052cc:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	431a      	orrs	r2, r3
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80052e0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80052ec:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	051b      	lsls	r3, r3, #20
 80052f4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b38      	ldr	r3, [pc, #224]	; (80053ec <HAL_SAI_Init+0x2dc>)
 800530a:	400b      	ands	r3, r1
 800530c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6859      	ldr	r1, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6899      	ldr	r1, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b2e      	ldr	r3, [pc, #184]	; (80053f0 <HAL_SAI_Init+0x2e0>)
 8005338:	400b      	ands	r3, r1
 800533a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6899      	ldr	r1, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800534c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005352:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8005358:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	3b01      	subs	r3, #1
 8005360:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8005362:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68d9      	ldr	r1, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	f24f 0320 	movw	r3, #61472	; 0xf020
 800537a:	400b      	ands	r3, r1
 800537c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68d9      	ldr	r1, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	3b01      	subs	r3, #1
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40015804 	.word	0x40015804
 80053d0:	40015824 	.word	0x40015824
 80053d4:	40015800 	.word	0x40015800
 80053d8:	40015c00 	.word	0x40015c00
 80053dc:	40015c04 	.word	0x40015c04
 80053e0:	40015c24 	.word	0x40015c24
 80053e4:	cccccccd 	.word	0xcccccccd
 80053e8:	ff05c010 	.word	0xff05c010
 80053ec:	ffff1ff0 	.word	0xffff1ff0
 80053f0:	fff88000 	.word	0xfff88000

080053f4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80053f4:	b490      	push	{r4, r7}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <SAI_Disable+0x64>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a16      	ldr	r2, [pc, #88]	; (800545c <SAI_Disable+0x68>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	0b1b      	lsrs	r3, r3, #12
 8005408:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800541c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800541e:	4623      	mov	r3, r4
 8005420:	1e5c      	subs	r4, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	73fb      	strb	r3, [r7, #15]
      break;
 800543a:	e006      	b.n	800544a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e9      	bne.n	800541e <SAI_Disable+0x2a>

  return status;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bc90      	pop	{r4, r7}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000004 	.word	0x20000004
 800545c:	95cbec1b 	.word	0x95cbec1b

08005460 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e025      	b.n	80054c0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f004 fae3 	bl	8009a54 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2202      	movs	r2, #2
 8005492:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3304      	adds	r3, #4
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f001 fd35 	bl	8006f10 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	f001 fd9f 	bl	8006ff4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e04c      	b.n	8005574 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f003 ffb8 	bl	8009464 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0203 	bic.w	r2, r2, #3
 800550a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_SPDIFRX_Init+0xb4>)
 8005518:	4013      	ands	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8005524:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800552a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8005530:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8005536:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800553c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8005542:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8005548:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800554e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8005554:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	fff88407 	.word	0xfff88407

08005580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e084      	b.n	800569c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f003 ff9b 	bl	80094e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055d2:	d902      	bls.n	80055da <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e002      	b.n	80055e0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055e8:	d007      	beq.n	80055fa <HAL_SPI_Init+0x7a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055f2:	d002      	beq.n	80055fa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800560a:	d903      	bls.n	8005614 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	631a      	str	r2, [r3, #48]	; 0x30
 8005612:	e002      	b.n	800561a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	ea42 0103 	orr.w	r1, r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	f003 0204 	and.w	r2, r3, #4
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	ea42 0103 	orr.w	r1, r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	430a      	orrs	r2, r1
 800567a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800568a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e01d      	b.n	80056f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f003 ff6e 	bl	80095ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	4610      	mov	r0, r2
 80056e4:	f000 fb78 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <HAL_TIM_Base_Start_IT+0x50>)
 800571c:	4013      	ands	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d00b      	beq.n	800573e <HAL_TIM_Base_Start_IT+0x42>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572c:	d007      	beq.n	800573e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	00010007 	.word	0x00010007

08005750 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e01d      	b.n	800579e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f003 ff8c 	bl	8009694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 fb22 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d122      	bne.n	8005802 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d11b      	bne.n	8005802 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0202 	mvn.w	r2, #2
 80057d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fad7 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 80057ee:	e005      	b.n	80057fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fac9 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fada 	bl	8005db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d122      	bne.n	8005856 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d11b      	bne.n	8005856 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0204 	mvn.w	r2, #4
 8005826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 faad 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 8005842:	e005      	b.n	8005850 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fa9f 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fab0 	bl	8005db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b08      	cmp	r3, #8
 8005862:	d122      	bne.n	80058aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b08      	cmp	r3, #8
 8005870:	d11b      	bne.n	80058aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f06f 0208 	mvn.w	r2, #8
 800587a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2204      	movs	r2, #4
 8005880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fa83 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 8005896:	e005      	b.n	80058a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fa75 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fa86 	bl	8005db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d122      	bne.n	80058fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d11b      	bne.n	80058fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f06f 0210 	mvn.w	r2, #16
 80058ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2208      	movs	r2, #8
 80058d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fa59 	bl	8005d9c <HAL_TIM_IC_CaptureCallback>
 80058ea:	e005      	b.n	80058f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fa4b 	bl	8005d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa5c 	bl	8005db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d10e      	bne.n	800592a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0201 	mvn.w	r2, #1
 8005922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f003 f9f7 	bl	8008d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005934:	2b80      	cmp	r3, #128	; 0x80
 8005936:	d10e      	bne.n	8005956 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d107      	bne.n	8005956 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 febd 	bl	80066d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005964:	d10e      	bne.n	8005984 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d107      	bne.n	8005984 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800597c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 feb0 	bl	80066e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d10e      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa0a 	bl	8005dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d10e      	bne.n	80059dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d107      	bne.n	80059dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0220 	mvn.w	r2, #32
 80059d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fe70 	bl	80066bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e105      	b.n	8005c0a <HAL_TIM_PWM_ConfigChannel+0x226>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b14      	cmp	r3, #20
 8005a12:	f200 80f0 	bhi.w	8005bf6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005a71 	.word	0x08005a71
 8005a20:	08005bf7 	.word	0x08005bf7
 8005a24:	08005bf7 	.word	0x08005bf7
 8005a28:	08005bf7 	.word	0x08005bf7
 8005a2c:	08005ab1 	.word	0x08005ab1
 8005a30:	08005bf7 	.word	0x08005bf7
 8005a34:	08005bf7 	.word	0x08005bf7
 8005a38:	08005bf7 	.word	0x08005bf7
 8005a3c:	08005af3 	.word	0x08005af3
 8005a40:	08005bf7 	.word	0x08005bf7
 8005a44:	08005bf7 	.word	0x08005bf7
 8005a48:	08005bf7 	.word	0x08005bf7
 8005a4c:	08005b33 	.word	0x08005b33
 8005a50:	08005bf7 	.word	0x08005bf7
 8005a54:	08005bf7 	.word	0x08005bf7
 8005a58:	08005bf7 	.word	0x08005bf7
 8005a5c:	08005b75 	.word	0x08005b75
 8005a60:	08005bf7 	.word	0x08005bf7
 8005a64:	08005bf7 	.word	0x08005bf7
 8005a68:	08005bf7 	.word	0x08005bf7
 8005a6c:	08005bb5 	.word	0x08005bb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fa4e 	bl	8005f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0208 	orr.w	r2, r2, #8
 8005a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0204 	bic.w	r2, r2, #4
 8005a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	619a      	str	r2, [r3, #24]
      break;
 8005aae:	e0a3      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 faa0 	bl	8005ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	021a      	lsls	r2, r3, #8
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	619a      	str	r2, [r3, #24]
      break;
 8005af0:	e082      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 faf7 	bl	80060ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0208 	orr.w	r2, r2, #8
 8005b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0204 	bic.w	r2, r2, #4
 8005b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69d9      	ldr	r1, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	61da      	str	r2, [r3, #28]
      break;
 8005b30:	e062      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fb4d 	bl	80061d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	021a      	lsls	r2, r3, #8
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	61da      	str	r2, [r3, #28]
      break;
 8005b72:	e041      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fb84 	bl	8006288 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0208 	orr.w	r2, r2, #8
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0204 	bic.w	r2, r2, #4
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691a      	ldr	r2, [r3, #16]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bb2:	e021      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fbb6 	bl	800632c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	021a      	lsls	r2, r3, #8
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bf4:	e000      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005bf6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop

08005c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIM_ConfigClockSource+0x18>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e0a6      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x166>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4b4f      	ldr	r3, [pc, #316]	; (8005d84 <HAL_TIM_ConfigClockSource+0x170>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d067      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0x120>
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d80b      	bhi.n	8005c80 <HAL_TIM_ConfigClockSource+0x6c>
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d073      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0x140>
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d802      	bhi.n	8005c76 <HAL_TIM_ConfigClockSource+0x62>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d06f      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c74:	e078      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d06c      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0x140>
 8005c7a:	2b30      	cmp	r3, #48	; 0x30
 8005c7c:	d06a      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005c7e:	e073      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c80:	2b70      	cmp	r3, #112	; 0x70
 8005c82:	d00d      	beq.n	8005ca0 <HAL_TIM_ConfigClockSource+0x8c>
 8005c84:	2b70      	cmp	r3, #112	; 0x70
 8005c86:	d804      	bhi.n	8005c92 <HAL_TIM_ConfigClockSource+0x7e>
 8005c88:	2b50      	cmp	r3, #80	; 0x50
 8005c8a:	d033      	beq.n	8005cf4 <HAL_TIM_ConfigClockSource+0xe0>
 8005c8c:	2b60      	cmp	r3, #96	; 0x60
 8005c8e:	d041      	beq.n	8005d14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005c90:	e06a      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c96:	d066      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x152>
 8005c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9c:	d017      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c9e:	e063      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6899      	ldr	r1, [r3, #8]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f000 fc0a 	bl	80064c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	609a      	str	r2, [r3, #8]
      break;
 8005ccc:	e04c      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6899      	ldr	r1, [r3, #8]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f000 fbf3 	bl	80064c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cf0:	609a      	str	r2, [r3, #8]
      break;
 8005cf2:	e039      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	6859      	ldr	r1, [r3, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	461a      	mov	r2, r3
 8005d02:	f000 fb67 	bl	80063d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2150      	movs	r1, #80	; 0x50
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fbc0 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005d12:	e029      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f000 fb86 	bl	8006432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2160      	movs	r1, #96	; 0x60
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fbb0 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005d32:	e019      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6859      	ldr	r1, [r3, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	461a      	mov	r2, r3
 8005d42:	f000 fb47 	bl	80063d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2140      	movs	r1, #64	; 0x40
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fba0 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005d52:	e009      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 fb97 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005d64:	e000      	b.n	8005d68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	fffeff88 	.word	0xfffeff88

08005d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a40      	ldr	r2, [pc, #256]	; (8005eec <TIM_Base_SetConfig+0x114>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df6:	d00f      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3d      	ldr	r2, [pc, #244]	; (8005ef0 <TIM_Base_SetConfig+0x118>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00b      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3c      	ldr	r2, [pc, #240]	; (8005ef4 <TIM_Base_SetConfig+0x11c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a3b      	ldr	r2, [pc, #236]	; (8005ef8 <TIM_Base_SetConfig+0x120>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a3a      	ldr	r2, [pc, #232]	; (8005efc <TIM_Base_SetConfig+0x124>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2f      	ldr	r2, [pc, #188]	; (8005eec <TIM_Base_SetConfig+0x114>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d02b      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d027      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2c      	ldr	r2, [pc, #176]	; (8005ef0 <TIM_Base_SetConfig+0x118>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d023      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a2b      	ldr	r2, [pc, #172]	; (8005ef4 <TIM_Base_SetConfig+0x11c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01f      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2a      	ldr	r2, [pc, #168]	; (8005ef8 <TIM_Base_SetConfig+0x120>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01b      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a29      	ldr	r2, [pc, #164]	; (8005efc <TIM_Base_SetConfig+0x124>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d017      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a28      	ldr	r2, [pc, #160]	; (8005f00 <TIM_Base_SetConfig+0x128>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a27      	ldr	r2, [pc, #156]	; (8005f04 <TIM_Base_SetConfig+0x12c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00f      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a26      	ldr	r2, [pc, #152]	; (8005f08 <TIM_Base_SetConfig+0x130>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a25      	ldr	r2, [pc, #148]	; (8005f0c <TIM_Base_SetConfig+0x134>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d007      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a24      	ldr	r2, [pc, #144]	; (8005f10 <TIM_Base_SetConfig+0x138>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a23      	ldr	r2, [pc, #140]	; (8005f14 <TIM_Base_SetConfig+0x13c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d108      	bne.n	8005e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <TIM_Base_SetConfig+0x114>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0xf8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <TIM_Base_SetConfig+0x124>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d103      	bne.n	8005ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	615a      	str	r2, [r3, #20]
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40010400 	.word	0x40010400
 8005f00:	40014000 	.word	0x40014000
 8005f04:	40014400 	.word	0x40014400
 8005f08:	40014800 	.word	0x40014800
 8005f0c:	40001800 	.word	0x40001800
 8005f10:	40001c00 	.word	0x40001c00
 8005f14:	40002000 	.word	0x40002000

08005f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0201 	bic.w	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4b2b      	ldr	r3, [pc, #172]	; (8005ff0 <TIM_OC1_SetConfig+0xd8>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 0302 	bic.w	r3, r3, #2
 8005f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <TIM_OC1_SetConfig+0xdc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_OC1_SetConfig+0x64>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a20      	ldr	r2, [pc, #128]	; (8005ff8 <TIM_OC1_SetConfig+0xe0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d10c      	bne.n	8005f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 0308 	bic.w	r3, r3, #8
 8005f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <TIM_OC1_SetConfig+0xdc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_OC1_SetConfig+0x8e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <TIM_OC1_SetConfig+0xe0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d111      	bne.n	8005fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	621a      	str	r2, [r3, #32]
}
 8005fe4:	bf00      	nop
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	fffeff8f 	.word	0xfffeff8f
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40010400 	.word	0x40010400

08005ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f023 0210 	bic.w	r2, r3, #16
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4b2e      	ldr	r3, [pc, #184]	; (80060e0 <TIM_OC2_SetConfig+0xe4>)
 8006028:	4013      	ands	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f023 0320 	bic.w	r3, r3, #32
 8006046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <TIM_OC2_SetConfig+0xe8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_OC2_SetConfig+0x68>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <TIM_OC2_SetConfig+0xec>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d10d      	bne.n	8006080 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800607e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <TIM_OC2_SetConfig+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC2_SetConfig+0x94>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <TIM_OC2_SetConfig+0xec>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d113      	bne.n	80060b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800609e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	feff8fff 	.word	0xfeff8fff
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40010400 	.word	0x40010400

080060ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4b2d      	ldr	r3, [pc, #180]	; (80061cc <TIM_OC3_SetConfig+0xe0>)
 8006118:	4013      	ands	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <TIM_OC3_SetConfig+0xe4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_OC3_SetConfig+0x66>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a21      	ldr	r2, [pc, #132]	; (80061d4 <TIM_OC3_SetConfig+0xe8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d10d      	bne.n	800616e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800616c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a17      	ldr	r2, [pc, #92]	; (80061d0 <TIM_OC3_SetConfig+0xe4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d003      	beq.n	800617e <TIM_OC3_SetConfig+0x92>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a16      	ldr	r2, [pc, #88]	; (80061d4 <TIM_OC3_SetConfig+0xe8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d113      	bne.n	80061a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800618c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	621a      	str	r2, [r3, #32]
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	fffeff8f 	.word	0xfffeff8f
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400

080061d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4b1e      	ldr	r3, [pc, #120]	; (800627c <TIM_OC4_SetConfig+0xa4>)
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800620e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	031b      	lsls	r3, r3, #12
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a13      	ldr	r2, [pc, #76]	; (8006280 <TIM_OC4_SetConfig+0xa8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC4_SetConfig+0x68>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a12      	ldr	r2, [pc, #72]	; (8006284 <TIM_OC4_SetConfig+0xac>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d109      	bne.n	8006254 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	019b      	lsls	r3, r3, #6
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	feff8fff 	.word	0xfeff8fff
 8006280:	40010000 	.word	0x40010000
 8006284:	40010400 	.word	0x40010400

08006288 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <TIM_OC5_SetConfig+0x98>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a12      	ldr	r2, [pc, #72]	; (8006324 <TIM_OC5_SetConfig+0x9c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d003      	beq.n	80062e6 <TIM_OC5_SetConfig+0x5e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a11      	ldr	r2, [pc, #68]	; (8006328 <TIM_OC5_SetConfig+0xa0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d109      	bne.n	80062fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	621a      	str	r2, [r3, #32]
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	fffeff8f 	.word	0xfffeff8f
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400

0800632c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4b1c      	ldr	r3, [pc, #112]	; (80063c8 <TIM_OC6_SetConfig+0x9c>)
 8006358:	4013      	ands	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800636e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	051b      	lsls	r3, r3, #20
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a13      	ldr	r2, [pc, #76]	; (80063cc <TIM_OC6_SetConfig+0xa0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC6_SetConfig+0x60>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <TIM_OC6_SetConfig+0xa4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d109      	bne.n	80063a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006392:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	029b      	lsls	r3, r3, #10
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	feff8fff 	.word	0xfeff8fff
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40010400 	.word	0x40010400

080063d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 030a 	bic.w	r3, r3, #10
 8006410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006432:	b480      	push	{r7}
 8006434:	b087      	sub	sp, #28
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0210 	bic.w	r2, r3, #16
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800645c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800646e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f043 0307 	orr.w	r3, r3, #7
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	609a      	str	r2, [r3, #8]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800651c:	2302      	movs	r3, #2
 800651e:	e045      	b.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1c      	ldr	r2, [pc, #112]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d004      	beq.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d108      	bne.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800655a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800657e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	4313      	orrs	r3, r2
 8006588:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40010400 	.word	0x40010400

080065c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065d8:	2302      	movs	r3, #2
 80065da:	e065      	b.n	80066a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a16      	ldr	r2, [pc, #88]	; (80066b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d115      	bne.n	8006696 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	051b      	lsls	r3, r3, #20
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400

080066bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e040      	b.n	800678c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f003 f8a8 	bl	8009870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2224      	movs	r2, #36	; 0x24
 8006724:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f82c 	bl	8006794 <UART_SetConfig>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e022      	b.n	800678c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fac4 	bl	8006cdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006762:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006772:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb4b 	bl	8006e20 <UART_CheckIdleState>
 800678a:	4603      	mov	r3, r0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800679c:	2300      	movs	r3, #0
 800679e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4bb1      	ldr	r3, [pc, #708]	; (8006a88 <UART_SetConfig+0x2f4>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	6939      	ldr	r1, [r7, #16]
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a9f      	ldr	r2, [pc, #636]	; (8006a8c <UART_SetConfig+0x2f8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d121      	bne.n	8006858 <UART_SetConfig+0xc4>
 8006814:	4b9e      	ldr	r3, [pc, #632]	; (8006a90 <UART_SetConfig+0x2fc>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	2b03      	cmp	r3, #3
 8006820:	d816      	bhi.n	8006850 <UART_SetConfig+0xbc>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <UART_SetConfig+0x94>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006839 	.word	0x08006839
 800682c:	08006845 	.word	0x08006845
 8006830:	0800683f 	.word	0x0800683f
 8006834:	0800684b 	.word	0x0800684b
 8006838:	2301      	movs	r3, #1
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e151      	b.n	8006ae2 <UART_SetConfig+0x34e>
 800683e:	2302      	movs	r3, #2
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e14e      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006844:	2304      	movs	r3, #4
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e14b      	b.n	8006ae2 <UART_SetConfig+0x34e>
 800684a:	2308      	movs	r3, #8
 800684c:	77fb      	strb	r3, [r7, #31]
 800684e:	e148      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006850:	2310      	movs	r3, #16
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	bf00      	nop
 8006856:	e144      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a8d      	ldr	r2, [pc, #564]	; (8006a94 <UART_SetConfig+0x300>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d134      	bne.n	80068cc <UART_SetConfig+0x138>
 8006862:	4b8b      	ldr	r3, [pc, #556]	; (8006a90 <UART_SetConfig+0x2fc>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006868:	f003 030c 	and.w	r3, r3, #12
 800686c:	2b0c      	cmp	r3, #12
 800686e:	d829      	bhi.n	80068c4 <UART_SetConfig+0x130>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <UART_SetConfig+0xe4>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	080068ad 	.word	0x080068ad
 800687c:	080068c5 	.word	0x080068c5
 8006880:	080068c5 	.word	0x080068c5
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068b9 	.word	0x080068b9
 800688c:	080068c5 	.word	0x080068c5
 8006890:	080068c5 	.word	0x080068c5
 8006894:	080068c5 	.word	0x080068c5
 8006898:	080068b3 	.word	0x080068b3
 800689c:	080068c5 	.word	0x080068c5
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	080068c5 	.word	0x080068c5
 80068a8:	080068bf 	.word	0x080068bf
 80068ac:	2300      	movs	r3, #0
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e117      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80068b2:	2302      	movs	r3, #2
 80068b4:	77fb      	strb	r3, [r7, #31]
 80068b6:	e114      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80068b8:	2304      	movs	r3, #4
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	e111      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80068be:	2308      	movs	r3, #8
 80068c0:	77fb      	strb	r3, [r7, #31]
 80068c2:	e10e      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80068c4:	2310      	movs	r3, #16
 80068c6:	77fb      	strb	r3, [r7, #31]
 80068c8:	bf00      	nop
 80068ca:	e10a      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a71      	ldr	r2, [pc, #452]	; (8006a98 <UART_SetConfig+0x304>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d120      	bne.n	8006918 <UART_SetConfig+0x184>
 80068d6:	4b6e      	ldr	r3, [pc, #440]	; (8006a90 <UART_SetConfig+0x2fc>)
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068e0:	2b10      	cmp	r3, #16
 80068e2:	d00f      	beq.n	8006904 <UART_SetConfig+0x170>
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d802      	bhi.n	80068ee <UART_SetConfig+0x15a>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <UART_SetConfig+0x164>
 80068ec:	e010      	b.n	8006910 <UART_SetConfig+0x17c>
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d005      	beq.n	80068fe <UART_SetConfig+0x16a>
 80068f2:	2b30      	cmp	r3, #48	; 0x30
 80068f4:	d009      	beq.n	800690a <UART_SetConfig+0x176>
 80068f6:	e00b      	b.n	8006910 <UART_SetConfig+0x17c>
 80068f8:	2300      	movs	r3, #0
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e0f1      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80068fe:	2302      	movs	r3, #2
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e0ee      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006904:	2304      	movs	r3, #4
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e0eb      	b.n	8006ae2 <UART_SetConfig+0x34e>
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e0e8      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	bf00      	nop
 8006916:	e0e4      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a5f      	ldr	r2, [pc, #380]	; (8006a9c <UART_SetConfig+0x308>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d120      	bne.n	8006964 <UART_SetConfig+0x1d0>
 8006922:	4b5b      	ldr	r3, [pc, #364]	; (8006a90 <UART_SetConfig+0x2fc>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d00f      	beq.n	8006950 <UART_SetConfig+0x1bc>
 8006930:	2b40      	cmp	r3, #64	; 0x40
 8006932:	d802      	bhi.n	800693a <UART_SetConfig+0x1a6>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <UART_SetConfig+0x1b0>
 8006938:	e010      	b.n	800695c <UART_SetConfig+0x1c8>
 800693a:	2b80      	cmp	r3, #128	; 0x80
 800693c:	d005      	beq.n	800694a <UART_SetConfig+0x1b6>
 800693e:	2bc0      	cmp	r3, #192	; 0xc0
 8006940:	d009      	beq.n	8006956 <UART_SetConfig+0x1c2>
 8006942:	e00b      	b.n	800695c <UART_SetConfig+0x1c8>
 8006944:	2300      	movs	r3, #0
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e0cb      	b.n	8006ae2 <UART_SetConfig+0x34e>
 800694a:	2302      	movs	r3, #2
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e0c8      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006950:	2304      	movs	r3, #4
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e0c5      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006956:	2308      	movs	r3, #8
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e0c2      	b.n	8006ae2 <UART_SetConfig+0x34e>
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	bf00      	nop
 8006962:	e0be      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a4d      	ldr	r2, [pc, #308]	; (8006aa0 <UART_SetConfig+0x30c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d124      	bne.n	80069b8 <UART_SetConfig+0x224>
 800696e:	4b48      	ldr	r3, [pc, #288]	; (8006a90 <UART_SetConfig+0x2fc>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697c:	d012      	beq.n	80069a4 <UART_SetConfig+0x210>
 800697e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006982:	d802      	bhi.n	800698a <UART_SetConfig+0x1f6>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <UART_SetConfig+0x204>
 8006988:	e012      	b.n	80069b0 <UART_SetConfig+0x21c>
 800698a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698e:	d006      	beq.n	800699e <UART_SetConfig+0x20a>
 8006990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006994:	d009      	beq.n	80069aa <UART_SetConfig+0x216>
 8006996:	e00b      	b.n	80069b0 <UART_SetConfig+0x21c>
 8006998:	2300      	movs	r3, #0
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e0a1      	b.n	8006ae2 <UART_SetConfig+0x34e>
 800699e:	2302      	movs	r3, #2
 80069a0:	77fb      	strb	r3, [r7, #31]
 80069a2:	e09e      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80069a4:	2304      	movs	r3, #4
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e09b      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80069aa:	2308      	movs	r3, #8
 80069ac:	77fb      	strb	r3, [r7, #31]
 80069ae:	e098      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80069b0:	2310      	movs	r3, #16
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	bf00      	nop
 80069b6:	e094      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a39      	ldr	r2, [pc, #228]	; (8006aa4 <UART_SetConfig+0x310>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d124      	bne.n	8006a0c <UART_SetConfig+0x278>
 80069c2:	4b33      	ldr	r3, [pc, #204]	; (8006a90 <UART_SetConfig+0x2fc>)
 80069c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d0:	d012      	beq.n	80069f8 <UART_SetConfig+0x264>
 80069d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d6:	d802      	bhi.n	80069de <UART_SetConfig+0x24a>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <UART_SetConfig+0x258>
 80069dc:	e012      	b.n	8006a04 <UART_SetConfig+0x270>
 80069de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069e2:	d006      	beq.n	80069f2 <UART_SetConfig+0x25e>
 80069e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069e8:	d009      	beq.n	80069fe <UART_SetConfig+0x26a>
 80069ea:	e00b      	b.n	8006a04 <UART_SetConfig+0x270>
 80069ec:	2301      	movs	r3, #1
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e077      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80069f2:	2302      	movs	r3, #2
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e074      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80069f8:	2304      	movs	r3, #4
 80069fa:	77fb      	strb	r3, [r7, #31]
 80069fc:	e071      	b.n	8006ae2 <UART_SetConfig+0x34e>
 80069fe:	2308      	movs	r3, #8
 8006a00:	77fb      	strb	r3, [r7, #31]
 8006a02:	e06e      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006a04:	2310      	movs	r3, #16
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	bf00      	nop
 8006a0a:	e06a      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a25      	ldr	r2, [pc, #148]	; (8006aa8 <UART_SetConfig+0x314>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d124      	bne.n	8006a60 <UART_SetConfig+0x2cc>
 8006a16:	4b1e      	ldr	r3, [pc, #120]	; (8006a90 <UART_SetConfig+0x2fc>)
 8006a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a24:	d012      	beq.n	8006a4c <UART_SetConfig+0x2b8>
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	d802      	bhi.n	8006a32 <UART_SetConfig+0x29e>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <UART_SetConfig+0x2ac>
 8006a30:	e012      	b.n	8006a58 <UART_SetConfig+0x2c4>
 8006a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a36:	d006      	beq.n	8006a46 <UART_SetConfig+0x2b2>
 8006a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a3c:	d009      	beq.n	8006a52 <UART_SetConfig+0x2be>
 8006a3e:	e00b      	b.n	8006a58 <UART_SetConfig+0x2c4>
 8006a40:	2300      	movs	r3, #0
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e04d      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006a46:	2302      	movs	r3, #2
 8006a48:	77fb      	strb	r3, [r7, #31]
 8006a4a:	e04a      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	77fb      	strb	r3, [r7, #31]
 8006a50:	e047      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006a52:	2308      	movs	r3, #8
 8006a54:	77fb      	strb	r3, [r7, #31]
 8006a56:	e044      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006a58:	2310      	movs	r3, #16
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	bf00      	nop
 8006a5e:	e040      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a11      	ldr	r2, [pc, #68]	; (8006aac <UART_SetConfig+0x318>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d139      	bne.n	8006ade <UART_SetConfig+0x34a>
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <UART_SetConfig+0x2fc>)
 8006a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a78:	d027      	beq.n	8006aca <UART_SetConfig+0x336>
 8006a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7e:	d817      	bhi.n	8006ab0 <UART_SetConfig+0x31c>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01c      	beq.n	8006abe <UART_SetConfig+0x32a>
 8006a84:	e027      	b.n	8006ad6 <UART_SetConfig+0x342>
 8006a86:	bf00      	nop
 8006a88:	efff69f3 	.word	0xefff69f3
 8006a8c:	40011000 	.word	0x40011000
 8006a90:	40023800 	.word	0x40023800
 8006a94:	40004400 	.word	0x40004400
 8006a98:	40004800 	.word	0x40004800
 8006a9c:	40004c00 	.word	0x40004c00
 8006aa0:	40005000 	.word	0x40005000
 8006aa4:	40011400 	.word	0x40011400
 8006aa8:	40007800 	.word	0x40007800
 8006aac:	40007c00 	.word	0x40007c00
 8006ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab4:	d006      	beq.n	8006ac4 <UART_SetConfig+0x330>
 8006ab6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aba:	d009      	beq.n	8006ad0 <UART_SetConfig+0x33c>
 8006abc:	e00b      	b.n	8006ad6 <UART_SetConfig+0x342>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e00e      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e00b      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006aca:	2304      	movs	r3, #4
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e008      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e005      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006ad6:	2310      	movs	r3, #16
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	bf00      	nop
 8006adc:	e001      	b.n	8006ae2 <UART_SetConfig+0x34e>
 8006ade:	2310      	movs	r3, #16
 8006ae0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aea:	d17c      	bne.n	8006be6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8006aec:	7ffb      	ldrb	r3, [r7, #31]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d859      	bhi.n	8006ba6 <UART_SetConfig+0x412>
 8006af2:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <UART_SetConfig+0x364>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b1d 	.word	0x08006b1d
 8006afc:	08006b3b 	.word	0x08006b3b
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006ba7 	.word	0x08006ba7
 8006b08:	08006b71 	.word	0x08006b71
 8006b0c:	08006ba7 	.word	0x08006ba7
 8006b10:	08006ba7 	.word	0x08006ba7
 8006b14:	08006ba7 	.word	0x08006ba7
 8006b18:	08006b8f 	.word	0x08006b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006b1c:	f7fd f92c 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8006b20:	4603      	mov	r3, r0
 8006b22:	005a      	lsls	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	441a      	add	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	61bb      	str	r3, [r7, #24]
        break;
 8006b38:	e038      	b.n	8006bac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006b3a:	f7fd f931 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	005a      	lsls	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	441a      	add	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	61bb      	str	r3, [r7, #24]
        break;
 8006b56:	e029      	b.n	8006bac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	085a      	lsrs	r2, r3, #1
 8006b5e:	4b5d      	ldr	r3, [pc, #372]	; (8006cd4 <UART_SetConfig+0x540>)
 8006b60:	4413      	add	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6852      	ldr	r2, [r2, #4]
 8006b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	61bb      	str	r3, [r7, #24]
        break;
 8006b6e:	e01d      	b.n	8006bac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006b70:	f7fd f844 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8006b74:	4603      	mov	r3, r0
 8006b76:	005a      	lsls	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	441a      	add	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	61bb      	str	r3, [r7, #24]
        break;
 8006b8c:	e00e      	b.n	8006bac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	085b      	lsrs	r3, r3, #1
 8006b94:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	61bb      	str	r3, [r7, #24]
        break;
 8006ba4:	e002      	b.n	8006bac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	75fb      	strb	r3, [r7, #23]
        break;
 8006baa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b0f      	cmp	r3, #15
 8006bb0:	d916      	bls.n	8006be0 <UART_SetConfig+0x44c>
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb8:	d212      	bcs.n	8006be0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	f023 030f 	bic.w	r3, r3, #15
 8006bc2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	89fb      	ldrh	r3, [r7, #14]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	89fa      	ldrh	r2, [r7, #14]
 8006bdc:	60da      	str	r2, [r3, #12]
 8006bde:	e06e      	b.n	8006cbe <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
 8006be4:	e06b      	b.n	8006cbe <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8006be6:	7ffb      	ldrb	r3, [r7, #31]
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d857      	bhi.n	8006c9c <UART_SetConfig+0x508>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <UART_SetConfig+0x460>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c35 	.word	0x08006c35
 8006bfc:	08006c51 	.word	0x08006c51
 8006c00:	08006c9d 	.word	0x08006c9d
 8006c04:	08006c69 	.word	0x08006c69
 8006c08:	08006c9d 	.word	0x08006c9d
 8006c0c:	08006c9d 	.word	0x08006c9d
 8006c10:	08006c9d 	.word	0x08006c9d
 8006c14:	08006c85 	.word	0x08006c85
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006c18:	f7fd f8ae 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	441a      	add	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	61bb      	str	r3, [r7, #24]
        break;
 8006c32:	e036      	b.n	8006ca2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006c34:	f7fd f8b4 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	441a      	add	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	61bb      	str	r3, [r7, #24]
        break;
 8006c4e:	e028      	b.n	8006ca2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	085a      	lsrs	r2, r3, #1
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <UART_SetConfig+0x544>)
 8006c58:	4413      	add	r3, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6852      	ldr	r2, [r2, #4]
 8006c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	61bb      	str	r3, [r7, #24]
        break;
 8006c66:	e01c      	b.n	8006ca2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006c68:	f7fc ffc8 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	441a      	add	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	61bb      	str	r3, [r7, #24]
        break;
 8006c82:	e00e      	b.n	8006ca2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	61bb      	str	r3, [r7, #24]
        break;
 8006c9a:	e002      	b.n	8006ca2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
        break;
 8006ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	2b0f      	cmp	r3, #15
 8006ca6:	d908      	bls.n	8006cba <UART_SetConfig+0x526>
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cae:	d204      	bcs.n	8006cba <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	60da      	str	r2, [r3, #12]
 8006cb8:	e001      	b.n	8006cbe <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	01e84800 	.word	0x01e84800
 8006cd8:	00f42400 	.word	0x00f42400

08006cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01a      	beq.n	8006df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dda:	d10a      	bne.n	8006df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	605a      	str	r2, [r3, #4]
  }
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e2e:	f7f9 fb8d 	bl	800054c <HAL_GetTick>
 8006e32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d10e      	bne.n	8006e60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f814 	bl	8006e7e <UART_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e00a      	b.n	8006e76 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2220      	movs	r2, #32
 8006e64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	603b      	str	r3, [r7, #0]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e8e:	e02a      	b.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d026      	beq.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e98:	f7f9 fb58 	bl	800054c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d302      	bcc.n	8006eae <UART_WaitOnFlagUntilTimeout+0x30>
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d11b      	bne.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ebc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0201 	bic.w	r2, r2, #1
 8006ecc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e00f      	b.n	8006f06 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2301      	moveq	r3, #1
 8006ef8:	2300      	movne	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d0c5      	beq.n	8006e90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d027      	beq.n	8006f7a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <FMC_SDRAM_Init+0xe0>)
 8006f34:	4013      	ands	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f40:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8006f46:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006f4c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006f52:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8006f58:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006f5e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006f64:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006f6a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e032      	b.n	8006fe0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f86:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006f90:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006f96:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <FMC_SDRAM_Init+0xe0>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006fb4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8006fba:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006fc0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8006fc6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006fcc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	ffff8000 	.word	0xffff8000

08006ff4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d02e      	beq.n	800706c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800701a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	3b01      	subs	r3, #1
 8007028:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800702a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	3b01      	subs	r3, #1
 8007032:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007034:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	3b01      	subs	r3, #1
 800703c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800703e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	3b01      	subs	r3, #1
 8007046:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007048:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	3b01      	subs	r3, #1
 8007050:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007052:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	3b01      	subs	r3, #1
 800705a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800705c:	4313      	orrs	r3, r2
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	609a      	str	r2, [r3, #8]
 800706a:	e039      	b.n	80070e0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <FMC_SDRAM_Timing_Init+0xfc>)
 8007076:	4013      	ands	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	3b01      	subs	r3, #1
 8007080:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	3b01      	subs	r3, #1
 8007088:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800708a:	4313      	orrs	r3, r2
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800709e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80070ae:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	3b01      	subs	r3, #1
 80070b6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80070b8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	3b01      	subs	r3, #1
 80070c0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80070c2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80070cc:	4313      	orrs	r3, r2
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	ff0f0fff 	.word	0xff0f0fff

080070f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f043 0201 	orr.w	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f023 0201 	bic.w	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	019b      	lsls	r3, r3, #6
 800714a:	f043 0220 	orr.w	r2, r3, #32
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3301      	adds	r3, #1
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4a09      	ldr	r2, [pc, #36]	; (8007180 <USB_FlushTxFifo+0x48>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d901      	bls.n	8007164 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e006      	b.n	8007172 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b20      	cmp	r3, #32
 800716e:	d0f0      	beq.n	8007152 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	00030d40 	.word	0x00030d40

08007184 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2210      	movs	r2, #16
 8007194:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <USB_FlushRxFifo+0x40>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d901      	bls.n	80071a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e006      	b.n	80071b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f003 0310 	and.w	r3, r3, #16
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	d0f0      	beq.n	8007196 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	00030d40 	.word	0x00030d40

080071c8 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b089      	sub	sp, #36	; 0x24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	3303      	adds	r3, #3
 80071e2:	089b      	lsrs	r3, r3, #2
 80071e4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e00b      	b.n	8007204 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	3304      	adds	r3, #4
 80071fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	3301      	adds	r3, #1
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	429a      	cmp	r2, r3
 800720a:	d3ef      	bcc.n	80071ec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800720c:	69fb      	ldr	r3, [r7, #28]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3724      	adds	r7, #36	; 0x24
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4013      	ands	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f003 0301 	and.w	r3, r3, #1
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800727a:	f023 0303 	bic.w	r3, r3, #3
 800727e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007294:	4313      	orrs	r3, r2
 8007296:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d107      	bne.n	80072ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a4:	461a      	mov	r2, r3
 80072a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072aa:	6053      	str	r3, [r2, #4]
 80072ac:	e009      	b.n	80072c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d106      	bne.n	80072c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ba:	461a      	mov	r2, r3
 80072bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80072c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80072f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d109      	bne.n	8007314 <USB_DriveVbus+0x44>
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d106      	bne.n	8007314 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800730e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007312:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800731a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731e:	d109      	bne.n	8007334 <USB_DriveVbus+0x64>
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800732e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007332:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007342:	b480      	push	{r7}
 8007344:	b085      	sub	sp, #20
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	b29b      	uxth	r3, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	0c9b      	lsrs	r3, r3, #18
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <USB_HC_Halt+0x3a>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d16c      	bne.n	8007478 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073bc:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d143      	bne.n	8007452 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	0151      	lsls	r1, r2, #5
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	440a      	add	r2, r1
 80073e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073e8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007408:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	440a      	add	r2, r1
 8007420:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007428:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	3301      	adds	r3, #1
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007436:	d81d      	bhi.n	8007474 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4413      	add	r3, r2
 8007440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800744a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800744e:	d0ec      	beq.n	800742a <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007450:	e080      	b.n	8007554 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	4413      	add	r3, r2
 800745a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	440a      	add	r2, r1
 8007468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800746c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007470:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007472:	e06f      	b.n	8007554 <USB_HC_Halt+0x1f0>
          break;
 8007474:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007476:	e06d      	b.n	8007554 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4413      	add	r3, r2
 8007480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	440a      	add	r2, r1
 800748e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007492:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007496:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d143      	bne.n	8007530 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007502:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007506:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	3301      	adds	r3, #1
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007514:	d81d      	bhi.n	8007552 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	015a      	lsls	r2, r3, #5
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4413      	add	r3, r2
 800751e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752c:	d0ec      	beq.n	8007508 <USB_HC_Halt+0x1a4>
 800752e:	e011      	b.n	8007554 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4413      	add	r3, r2
 8007538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	440a      	add	r2, r1
 8007546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	e000      	b.n	8007554 <USB_HC_Halt+0x1f0>
          break;
 8007552:	bf00      	nop
    }
  }

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fdcf 	bl	8007116 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007578:	2110      	movs	r1, #16
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fddc 	bl	8007138 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fdff 	bl	8007184 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007586:	2300      	movs	r3, #0
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	e01f      	b.n	80075cc <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075a2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075aa:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075b2:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c0:	461a      	mov	r2, r3
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	3301      	adds	r3, #1
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b0f      	cmp	r3, #15
 80075d0:	d9dc      	bls.n	800758c <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	e034      	b.n	8007642 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075ee:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075f6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075fe:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4413      	add	r3, r2
 8007608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760c:	461a      	mov	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	3301      	adds	r3, #1
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800761e:	d80c      	bhi.n	800763a <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007636:	d0ec      	beq.n	8007612 <USB_StopHost+0xb0>
 8007638:	e000      	b.n	800763c <USB_StopHost+0xda>
        break;
 800763a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3301      	adds	r3, #1
 8007640:	613b      	str	r3, [r7, #16]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b0f      	cmp	r3, #15
 8007646:	d9c7      	bls.n	80075d8 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800764e:	461a      	mov	r2, r3
 8007650:	f04f 33ff 	mov.w	r3, #4294967295
 8007654:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f04f 32ff 	mov.w	r2, #4294967295
 800765c:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff fd48 	bl	80070f4 <USB_EnableGlobalInt>

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f804 	bl	8007692 <USBH_HandleSof>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b0b      	cmp	r3, #11
 80076a2:	d10a      	bne.n	80076ba <USBH_HandleSof+0x28>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
  }
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80076d2:	bf00      	nop
}
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80076ee:	bf00      	nop
}
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10f      	bne.n	800772c <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00e      	beq.n	800773c <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007724:	2104      	movs	r1, #4
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
 800772a:	e007      	b.n	800773c <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007732:	2b01      	cmp	r3, #1
 8007734:	d102      	bne.n	800773c <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f002 fb4f 	bl	8009df2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	791b      	ldrb	r3, [r3, #4]
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f820 	bl	80077a0 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	795b      	ldrb	r3, [r3, #5]
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f81a 	bl	80077a0 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d005      	beq.n	800778a <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007784:	2105      	movs	r1, #5
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f002 fb16 	bl	8009dbc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2203      	movs	r2, #3
 8007794:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	2b0a      	cmp	r3, #10
 80077b0:	d80b      	bhi.n	80077ca <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	32e0      	adds	r2, #224	; 0xe0
 80077b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32e0      	adds	r2, #224	; 0xe0
 80077c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80077dc:	f7f8 fe94 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80077e0:	f000 f8be 	bl	8007960 <SystemClock_Config>
  //RNG_CR_RNGEN;
  //RNG->CR |= RNG_CR_RNGEN;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80077e4:	f001 f876 	bl	80088d4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80077e8:	f000 f976 	bl	8007ad8 <MX_ADC3_Init>
  MX_CRC_Init();
 80077ec:	f000 f9c6 	bl	8007b7c <MX_CRC_Init>
  MX_DCMI_Init();
 80077f0:	f000 f9e6 	bl	8007bc0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80077f4:	f000 fa18 	bl	8007c28 <MX_DMA2D_Init>
  MX_FMC_Init();
 80077f8:	f001 f81c 	bl	8008834 <MX_FMC_Init>
  MX_I2C1_Init();
 80077fc:	f000 fa46 	bl	8007c8c <MX_I2C1_Init>
  MX_I2C3_Init();
 8007800:	f000 fa84 	bl	8007d0c <MX_I2C3_Init>
  MX_LTDC_Init();
 8007804:	f000 fac2 	bl	8007d8c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8007808:	f000 fb42 	bl	8007e90 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800780c:	f000 fb80 	bl	8007f10 <MX_RTC_Init>
  MX_SAI2_Init();
 8007810:	f000 fc26 	bl	8008060 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8007814:	f000 fccc 	bl	80081b0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8007818:	f000 fcfa 	bl	8008210 <MX_SPI2_Init>
  MX_TIM1_Init();
 800781c:	f000 fd36 	bl	800828c <MX_TIM1_Init>
  MX_TIM2_Init();
 8007820:	f000 fde0 	bl	80083e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007824:	f000 fe54 	bl	80084d0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8007828:	f000 fec8 	bl	80085bc <MX_TIM5_Init>
  MX_TIM8_Init();
 800782c:	f000 ff3c 	bl	80086a8 <MX_TIM8_Init>
  MX_TIM12_Init();
 8007830:	f000 ff8c 	bl	800874c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8007834:	f000 ffce 	bl	80087d4 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8007838:	f000 fb56 	bl	8007ee8 <MX_RNG_Init>
  while (1) {
    /* USER CODE END WHILE */
   // MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
    if (game_state == READY) {
 800783c:	4b41      	ldr	r3, [pc, #260]	; (8007944 <main+0x16c>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d108      	bne.n	8007856 <main+0x7e>
      HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8007844:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007848:	483f      	ldr	r0, [pc, #252]	; (8007948 <main+0x170>)
 800784a:	f7f9 ff0c 	bl	8001666 <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 800784e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007852:	f7f8 fe87 	bl	8000564 <HAL_Delay>
    }


    if (game_state == STEADY) {
 8007856:	4b3b      	ldr	r3, [pc, #236]	; (8007944 <main+0x16c>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d130      	bne.n	80078c0 <main+0xe8>

      round_counter = round_counter + 1;
 800785e:	4b3b      	ldr	r3, [pc, #236]	; (800794c <main+0x174>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	4a39      	ldr	r2, [pc, #228]	; (800794c <main+0x174>)
 8007866:	6013      	str	r3, [r2, #0]

      HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8007868:	2201      	movs	r2, #1
 800786a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800786e:	4836      	ldr	r0, [pc, #216]	; (8007948 <main+0x170>)
 8007870:	f7f9 fee0 	bl	8001634 <HAL_GPIO_WritePin>

      // unsigned int rnd = RNG -> DR;

      //printf(%d,rnd);

      delay = 1000 + (HAL_RNG_GetRandomNumber(&hrng) % 9) * 1000;
 8007874:	4836      	ldr	r0, [pc, #216]	; (8007950 <main+0x178>)
 8007876:	f7fd f874 	bl	8004962 <HAL_RNG_GetRandomNumber>
 800787a:	4601      	mov	r1, r0
 800787c:	4b35      	ldr	r3, [pc, #212]	; (8007954 <main+0x17c>)
 800787e:	fba3 2301 	umull	r2, r3, r3, r1
 8007882:	085a      	lsrs	r2, r3, #1
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4413      	add	r3, r2
 800788a:	1aca      	subs	r2, r1, r3
 800788c:	1c53      	adds	r3, r2, #1
 800788e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007892:	fb02 f303 	mul.w	r3, r2, r3
 8007896:	4a30      	ldr	r2, [pc, #192]	; (8007958 <main+0x180>)
 8007898:	6013      	str	r3, [r2, #0]

      HAL_Delay(delay);
 800789a:	4b2f      	ldr	r3, [pc, #188]	; (8007958 <main+0x180>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7f8 fe60 	bl	8000564 <HAL_Delay>

      HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80078a4:	2200      	movs	r2, #0
 80078a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80078aa:	4827      	ldr	r0, [pc, #156]	; (8007948 <main+0x170>)
 80078ac:	f7f9 fec2 	bl	8001634 <HAL_GPIO_WritePin>


      game_start_time = HAL_GetTick();
 80078b0:	f7f8 fe4c 	bl	800054c <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	4b29      	ldr	r3, [pc, #164]	; (800795c <main+0x184>)
 80078b8:	601a      	str	r2, [r3, #0]

      game_state = GO;
 80078ba:	4b22      	ldr	r3, [pc, #136]	; (8007944 <main+0x16c>)
 80078bc:	2202      	movs	r2, #2
 80078be:	701a      	strb	r2, [r3, #0]

      }



    if (game_state == VALID) {
 80078c0:	4b20      	ldr	r3, [pc, #128]	; (8007944 <main+0x16c>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d110      	bne.n	80078ea <main+0x112>
      HAL_GPIO_WritePin(RGB_LED1_G_GPIO_Port, RGB_LED1_G_Pin, GPIO_PIN_RESET);
 80078c8:	2200      	movs	r2, #0
 80078ca:	2180      	movs	r1, #128	; 0x80
 80078cc:	481e      	ldr	r0, [pc, #120]	; (8007948 <main+0x170>)
 80078ce:	f7f9 feb1 	bl	8001634 <HAL_GPIO_WritePin>
      HAL_Delay(3000);
 80078d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80078d6:	f7f8 fe45 	bl	8000564 <HAL_Delay>
      HAL_GPIO_WritePin(RGB_LED1_G_GPIO_Port, RGB_LED1_G_Pin, GPIO_PIN_SET);
 80078da:	2201      	movs	r2, #1
 80078dc:	2180      	movs	r1, #128	; 0x80
 80078de:	481a      	ldr	r0, [pc, #104]	; (8007948 <main+0x170>)
 80078e0:	f7f9 fea8 	bl	8001634 <HAL_GPIO_WritePin>

      game_state = STEADY;
 80078e4:	4b17      	ldr	r3, [pc, #92]	; (8007944 <main+0x16c>)
 80078e6:	2201      	movs	r2, #1
 80078e8:	701a      	strb	r2, [r3, #0]
      }



    if (game_state == INVALID) {
 80078ea:	4b16      	ldr	r3, [pc, #88]	; (8007944 <main+0x16c>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d112      	bne.n	8007918 <main+0x140>

      HAL_GPIO_WritePin(RGB_LED1_R_GPIO_Port, RGB_LED1_R_Pin, GPIO_PIN_RESET);
 80078f2:	2200      	movs	r2, #0
 80078f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078f8:	4813      	ldr	r0, [pc, #76]	; (8007948 <main+0x170>)
 80078fa:	f7f9 fe9b 	bl	8001634 <HAL_GPIO_WritePin>
      HAL_Delay(3000);
 80078fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007902:	f7f8 fe2f 	bl	8000564 <HAL_Delay>
      HAL_GPIO_WritePin(RGB_LED1_R_GPIO_Port, RGB_LED1_R_Pin, GPIO_PIN_SET);
 8007906:	2201      	movs	r2, #1
 8007908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800790c:	480e      	ldr	r0, [pc, #56]	; (8007948 <main+0x170>)
 800790e:	f7f9 fe91 	bl	8001634 <HAL_GPIO_WritePin>

      game_state = STEADY;
 8007912:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <main+0x16c>)
 8007914:	2201      	movs	r2, #1
 8007916:	701a      	strb	r2, [r3, #0]
     }


    if (round_counter > 5) {
 8007918:	4b0c      	ldr	r3, [pc, #48]	; (800794c <main+0x174>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b05      	cmp	r3, #5
 800791e:	d98d      	bls.n	800783c <main+0x64>
            round_counter = 0;
 8007920:	4b0a      	ldr	r3, [pc, #40]	; (800794c <main+0x174>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8007926:	2201      	movs	r2, #1
 8007928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800792c:	4806      	ldr	r0, [pc, #24]	; (8007948 <main+0x170>)
 800792e:	f7f9 fe81 	bl	8001634 <HAL_GPIO_WritePin>
            HAL_Delay(3000);
 8007932:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007936:	f7f8 fe15 	bl	8000564 <HAL_Delay>
            game_state = READY;
 800793a:	4b02      	ldr	r3, [pc, #8]	; (8007944 <main+0x16c>)
 800793c:	2200      	movs	r2, #0
 800793e:	701a      	strb	r2, [r3, #0]
    if (game_state == READY) {
 8007940:	e77c      	b.n	800783c <main+0x64>
 8007942:	bf00      	nop
 8007944:	20000028 	.word	0x20000028
 8007948:	40021400 	.word	0x40021400
 800794c:	20000024 	.word	0x20000024
 8007950:	20000618 	.word	0x20000618
 8007954:	38e38e39 	.word	0x38e38e39
 8007958:	20000628 	.word	0x20000628
 800795c:	20000370 	.word	0x20000370

08007960 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007960:	b580      	push	{r7, lr}
 8007962:	b0b4      	sub	sp, #208	; 0xd0
 8007964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007966:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800796a:	2230      	movs	r2, #48	; 0x30
 800796c:	2100      	movs	r1, #0
 800796e:	4618      	mov	r0, r3
 8007970:	f002 fad4 	bl	8009f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007974:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	605a      	str	r2, [r3, #4]
 800797e:	609a      	str	r2, [r3, #8]
 8007980:	60da      	str	r2, [r3, #12]
 8007982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8007984:	f107 0308 	add.w	r3, r7, #8
 8007988:	2284      	movs	r2, #132	; 0x84
 800798a:	2100      	movs	r1, #0
 800798c:	4618      	mov	r0, r3
 800798e:	f002 fac5 	bl	8009f1c <memset>

  /** Configure the main internal regulator output voltage 
   */
  __HAL_RCC_PWR_CLK_ENABLE()
 8007992:	4b4e      	ldr	r3, [pc, #312]	; (8007acc <SystemClock_Config+0x16c>)
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	4a4d      	ldr	r2, [pc, #308]	; (8007acc <SystemClock_Config+0x16c>)
 8007998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799c:	6413      	str	r3, [r2, #64]	; 0x40
 800799e:	4b4b      	ldr	r3, [pc, #300]	; (8007acc <SystemClock_Config+0x16c>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a6:	607b      	str	r3, [r7, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
  ;
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079aa:	4b49      	ldr	r3, [pc, #292]	; (8007ad0 <SystemClock_Config+0x170>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a48      	ldr	r2, [pc, #288]	; (8007ad0 <SystemClock_Config+0x170>)
 80079b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	4b46      	ldr	r3, [pc, #280]	; (8007ad0 <SystemClock_Config+0x170>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80079c2:	2309      	movs	r3, #9
 80079c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      | RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80079c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079d6:	2302      	movs	r3, #2
 80079d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80079dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80079e4:	2319      	movs	r3, #25
 80079e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80079ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80079ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80079f2:	2302      	movs	r3, #2
 80079f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80079f8:	2309      	movs	r3, #9
 80079fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80079fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fb fda2 	bl	800354c <HAL_RCC_OscConfig>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <SystemClock_Config+0xb2>
    Error_Handler();
 8007a0e:	f001 f995 	bl	8008d3c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8007a12:	f7fb fc7b 	bl	800330c <HAL_PWREx_EnableOverDrive>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <SystemClock_Config+0xc0>
    Error_Handler();
 8007a1c:	f001 f98e 	bl	8008d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007a20:	230f      	movs	r3, #15
 8007a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a26:	2302      	movs	r3, #2
 8007a28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007a32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8007a42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007a46:	2106      	movs	r1, #6
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fb ffef 	bl	8003a2c <HAL_RCC_ClockConfig>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <SystemClock_Config+0xf8>
    Error_Handler();
 8007a54:	f001 f972 	bl	8008d3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX
 8007a58:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <SystemClock_Config+0x174>)
 8007a5a:	60bb      	str	r3, [r7, #8]
      | RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USART1
      | RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3
      | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8007a5c:	2364      	movs	r3, #100	; 0x64
 8007a5e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8007a60:	2302      	movs	r3, #2
 8007a62:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007a64:	2302      	movs	r3, #2
 8007a66:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8007a6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007a70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8007a72:	2305      	movs	r3, #5
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8007a76:	2302      	movs	r3, #2
 8007a78:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8007a82:	2301      	movs	r3, #1
 8007a84:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8007a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a90:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8007a92:	2300      	movs	r3, #0
 8007a94:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007a96:	2300      	movs	r3, #0
 8007a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8007aa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8007ab0:	f107 0308 	add.w	r3, r7, #8
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fc f9b9 	bl	8003e2c <HAL_RCCEx_PeriphCLKConfig>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <SystemClock_Config+0x164>
    Error_Handler();
 8007ac0:	f001 f93c 	bl	8008d3c <Error_Handler>
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	37d0      	adds	r7, #208	; 0xd0
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	40023800 	.word	0x40023800
 8007ad0:	40007000 	.word	0x40007000
 8007ad4:	01b14068 	.word	0x01b14068

08007ad8 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = { 0 };
 8007ade:	463b      	mov	r3, r7
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	605a      	str	r2, [r3, #4]
 8007ae6:	609a      	str	r2, [r3, #8]
 8007ae8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
   */
  hadc3.Instance = ADC3;
 8007aea:	4b21      	ldr	r3, [pc, #132]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007aec:	4a21      	ldr	r2, [pc, #132]	; (8007b74 <MX_ADC3_Init+0x9c>)
 8007aee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007af0:	4b1f      	ldr	r3, [pc, #124]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007af2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007af6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8007af8:	4b1d      	ldr	r3, [pc, #116]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007afe:	4b1c      	ldr	r3, [pc, #112]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8007b04:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007b0a:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007b12:	4b17      	ldr	r3, [pc, #92]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007b18:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b1a:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <MX_ADC3_Init+0xa0>)
 8007b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007b1e:	4b14      	ldr	r3, [pc, #80]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8007b24:	4b12      	ldr	r3, [pc, #72]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b26:	2201      	movs	r2, #1
 8007b28:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8007b2a:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007b32:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8007b38:	480d      	ldr	r0, [pc, #52]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b3a:	f7f8 fd35 	bl	80005a8 <HAL_ADC_Init>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <MX_ADC3_Init+0x70>
    Error_Handler();
 8007b44:	f001 f8fa 	bl	8008d3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
   */
  sConfig.Channel = ADC_CHANNEL_4;
 8007b48:	2304      	movs	r3, #4
 8007b4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8007b54:	463b      	mov	r3, r7
 8007b56:	4619      	mov	r1, r3
 8007b58:	4805      	ldr	r0, [pc, #20]	; (8007b70 <MX_ADC3_Init+0x98>)
 8007b5a:	f7f8 fd69 	bl	8000630 <HAL_ADC_ConfigChannel>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <MX_ADC3_Init+0x90>
    Error_Handler();
 8007b64:	f001 f8ea 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	200004a0 	.word	0x200004a0
 8007b74:	40012200 	.word	0x40012200
 8007b78:	0f000001 	.word	0x0f000001

08007b7c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007b80:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <MX_CRC_Init+0x3c>)
 8007b82:	4a0e      	ldr	r2, [pc, #56]	; (8007bbc <MX_CRC_Init+0x40>)
 8007b84:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007b86:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <MX_CRC_Init+0x3c>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <MX_CRC_Init+0x3c>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007b92:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <MX_CRC_Init+0x3c>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007b98:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <MX_CRC_Init+0x3c>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <MX_CRC_Init+0x3c>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8007ba4:	4804      	ldr	r0, [pc, #16]	; (8007bb8 <MX_CRC_Init+0x3c>)
 8007ba6:	f7f9 f853 	bl	8000c50 <HAL_CRC_Init>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_CRC_Init+0x38>
    Error_Handler();
 8007bb0:	f001 f8c4 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007bb4:	bf00      	nop
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	200002c8 	.word	0x200002c8
 8007bbc:	40023000 	.word	0x40023000

08007bc0 <MX_DCMI_Init>:
/**
 * @brief DCMI Initialization Function
 * @param None
 * @retval None
 */
static void MX_DCMI_Init(void) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8007bc4:	4b16      	ldr	r3, [pc, #88]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bc6:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <MX_DCMI_Init+0x64>)
 8007bc8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8007bca:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8007bd0:	4b13      	ldr	r3, [pc, #76]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8007bd6:	4b12      	ldr	r3, [pc, #72]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8007bdc:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8007be8:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8007bf4:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8007bfa:	4b09      	ldr	r3, [pc, #36]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8007c06:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK) {
 8007c0c:	4804      	ldr	r0, [pc, #16]	; (8007c20 <MX_DCMI_Init+0x60>)
 8007c0e:	f7f9 f909 	bl	8000e24 <HAL_DCMI_Init>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <MX_DCMI_Init+0x5c>
    Error_Handler();
 8007c18:	f001 f890 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8007c1c:	bf00      	nop
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	200004e8 	.word	0x200004e8
 8007c24:	50050000 	.word	0x50050000

08007c28 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8007c2c:	4b15      	ldr	r3, [pc, #84]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c2e:	4a16      	ldr	r2, [pc, #88]	; (8007c88 <MX_DMA2D_Init+0x60>)
 8007c30:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8007c32:	4b14      	ldr	r3, [pc, #80]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8007c38:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8007c3e:	4b11      	ldr	r3, [pc, #68]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8007c44:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8007c50:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8007c5c:	4809      	ldr	r0, [pc, #36]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c5e:	f7f9 f953 	bl	8000f08 <HAL_DMA2D_Init>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <MX_DMA2D_Init+0x44>
    Error_Handler();
 8007c68:	f001 f868 	bl	8008d3c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	4805      	ldr	r0, [pc, #20]	; (8007c84 <MX_DMA2D_Init+0x5c>)
 8007c70:	f7f9 faa4 	bl	80011bc <HAL_DMA2D_ConfigLayer>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <MX_DMA2D_Init+0x56>
    Error_Handler();
 8007c7a:	f001 f85f 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8007c7e:	bf00      	nop
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	2000062c 	.word	0x2000062c
 8007c88:	4002b000 	.word	0x4002b000

08007c8c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007c90:	4b1b      	ldr	r3, [pc, #108]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007c92:	4a1c      	ldr	r2, [pc, #112]	; (8007d04 <MX_I2C1_Init+0x78>)
 8007c94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007c98:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <MX_I2C1_Init+0x7c>)
 8007c9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007c9c:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007ca2:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007ca8:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007cae:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007cb4:	4b12      	ldr	r3, [pc, #72]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8007cc6:	480e      	ldr	r0, [pc, #56]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007cc8:	f7fa fe8e 	bl	80029e8 <HAL_I2C_Init>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <MX_I2C1_Init+0x4a>
    Error_Handler();
 8007cd2:	f001 f833 	bl	8008d3c <Error_Handler>
  }
  /** Configure Analogue filter 
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4809      	ldr	r0, [pc, #36]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007cda:	f7fa ff15 	bl	8002b08 <HAL_I2CEx_ConfigAnalogFilter>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8007ce4:	f001 f82a 	bl	8008d3c <Error_Handler>
  }
  /** Configure Digital filter 
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4805      	ldr	r0, [pc, #20]	; (8007d00 <MX_I2C1_Init+0x74>)
 8007cec:	f7fa ff57 	bl	8002b9e <HAL_I2CEx_ConfigDigitalFilter>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <MX_I2C1_Init+0x6e>
    Error_Handler();
 8007cf6:	f001 f821 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	2000027c 	.word	0x2000027c
 8007d04:	40005400 	.word	0x40005400
 8007d08:	00c0eaff 	.word	0x00c0eaff

08007d0c <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8007d10:	4b1b      	ldr	r3, [pc, #108]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d12:	4a1c      	ldr	r2, [pc, #112]	; (8007d84 <MX_I2C3_Init+0x78>)
 8007d14:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8007d16:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d18:	4a1b      	ldr	r2, [pc, #108]	; (8007d88 <MX_I2C3_Init+0x7c>)
 8007d1a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8007d1c:	4b18      	ldr	r3, [pc, #96]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007d22:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007d28:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8007d2e:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007d34:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007d3a:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007d40:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8007d46:	480e      	ldr	r0, [pc, #56]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d48:	f7fa fe4e 	bl	80029e8 <HAL_I2C_Init>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <MX_I2C3_Init+0x4a>
    Error_Handler();
 8007d52:	f000 fff3 	bl	8008d3c <Error_Handler>
  }
  /** Configure Analogue filter 
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8007d56:	2100      	movs	r1, #0
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d5a:	f7fa fed5 	bl	8002b08 <HAL_I2CEx_ConfigAnalogFilter>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <MX_I2C3_Init+0x5c>
    Error_Handler();
 8007d64:	f000 ffea 	bl	8008d3c <Error_Handler>
  }
  /** Configure Digital filter 
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4805      	ldr	r0, [pc, #20]	; (8007d80 <MX_I2C3_Init+0x74>)
 8007d6c:	f7fa ff17 	bl	8002b9e <HAL_I2CEx_ConfigDigitalFilter>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <MX_I2C3_Init+0x6e>
    Error_Handler();
 8007d76:	f000 ffe1 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8007d7a:	bf00      	nop
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	200000bc 	.word	0x200000bc
 8007d84:	40005c00 	.word	0x40005c00
 8007d88:	00c0eaff 	.word	0x00c0eaff

08007d8c <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08e      	sub	sp, #56	; 0x38
 8007d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8007d92:	1d3b      	adds	r3, r7, #4
 8007d94:	2234      	movs	r2, #52	; 0x34
 8007d96:	2100      	movs	r1, #0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f002 f8bf 	bl	8009f1c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8007d9e:	4b3a      	ldr	r3, [pc, #232]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007da0:	4a3a      	ldr	r2, [pc, #232]	; (8007e8c <MX_LTDC_Init+0x100>)
 8007da2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007da4:	4b38      	ldr	r3, [pc, #224]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007daa:	4b37      	ldr	r3, [pc, #220]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007db0:	4b35      	ldr	r3, [pc, #212]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007db6:	4b34      	ldr	r3, [pc, #208]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007db8:	2200      	movs	r2, #0
 8007dba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8007dbc:	4b32      	ldr	r3, [pc, #200]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dbe:	2228      	movs	r2, #40	; 0x28
 8007dc0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8007dc2:	4b31      	ldr	r3, [pc, #196]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dc4:	2209      	movs	r2, #9
 8007dc6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8007dc8:	4b2f      	ldr	r3, [pc, #188]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dca:	2235      	movs	r2, #53	; 0x35
 8007dcc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8007dce:	4b2e      	ldr	r3, [pc, #184]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dd0:	220b      	movs	r2, #11
 8007dd2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8007dd4:	4b2c      	ldr	r3, [pc, #176]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dd6:	f240 2215 	movw	r2, #533	; 0x215
 8007dda:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8007ddc:	4b2a      	ldr	r3, [pc, #168]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dde:	f240 121b 	movw	r2, #283	; 0x11b
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8007de4:	4b28      	ldr	r3, [pc, #160]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007de6:	f240 2235 	movw	r2, #565	; 0x235
 8007dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8007dec:	4b26      	ldr	r3, [pc, #152]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dee:	f240 121d 	movw	r2, #285	; 0x11d
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007df4:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8007dfc:	4b22      	ldr	r3, [pc, #136]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8007e04:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8007e0c:	481e      	ldr	r0, [pc, #120]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007e0e:	f7fa ff13 	bl	8002c38 <HAL_LTDC_Init>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <MX_LTDC_Init+0x90>
    Error_Handler();
 8007e18:	f000 ff90 	bl	8008d3c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8007e20:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007e24:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8007e2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e2e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8007e30:	2302      	movs	r3, #2
 8007e32:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8007e34:	23ff      	movs	r3, #255	; 0xff
 8007e36:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007e3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007e40:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007e42:	2307      	movs	r3, #7
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8007e46:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8007e4c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8007e52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8007e6a:	1d3b      	adds	r3, r7, #4
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4805      	ldr	r0, [pc, #20]	; (8007e88 <MX_LTDC_Init+0xfc>)
 8007e72:	f7fb f873 	bl	8002f5c <HAL_LTDC_ConfigLayer>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <MX_LTDC_Init+0xf4>
    Error_Handler();
 8007e7c:	f000 ff5e 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8007e80:	bf00      	nop
 8007e82:	3738      	adds	r7, #56	; 0x38
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	200003f4 	.word	0x200003f4
 8007e8c:	40016800 	.word	0x40016800

08007e90 <MX_QUADSPI_Init>:
/**
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8007e94:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007e96:	4a13      	ldr	r2, [pc, #76]	; (8007ee4 <MX_QUADSPI_Init+0x54>)
 8007e98:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8007e9a:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007e9c:	22ff      	movs	r2, #255	; 0xff
 8007e9e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8007ea0:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8007ea6:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8007eac:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007eae:	2201      	movs	r2, #1
 8007eb0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8007eb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8007eb8:	4b09      	ldr	r3, [pc, #36]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8007ebe:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 8007eca:	4805      	ldr	r0, [pc, #20]	; (8007ee0 <MX_QUADSPI_Init+0x50>)
 8007ecc:	f7fb fa6e 	bl	80033ac <HAL_QSPI_Init>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <MX_QUADSPI_Init+0x4a>
    Error_Handler();
 8007ed6:	f000 ff31 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8007eda:	bf00      	nop
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000768 	.word	0x20000768
 8007ee4:	a0001000 	.word	0xa0001000

08007ee8 <MX_RNG_Init>:
/**
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <MX_RNG_Init+0x20>)
 8007eee:	4a07      	ldr	r2, [pc, #28]	; (8007f0c <MX_RNG_Init+0x24>)
 8007ef0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8007ef2:	4805      	ldr	r0, [pc, #20]	; (8007f08 <MX_RNG_Init+0x20>)
 8007ef4:	f7fc fcbc 	bl	8004870 <HAL_RNG_Init>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <MX_RNG_Init+0x1a>
    Error_Handler();
 8007efe:	f000 ff1d 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8007f02:	bf00      	nop
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000618 	.word	0x20000618
 8007f0c:	50060800 	.word	0x50060800

08007f10 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b092      	sub	sp, #72	; 0x48
 8007f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = { 0 };
 8007f16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
 8007f20:	609a      	str	r2, [r3, #8]
 8007f22:	60da      	str	r2, [r3, #12]
 8007f24:	611a      	str	r2, [r3, #16]
 8007f26:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = { 0 };
 8007f28:	2300      	movs	r3, #0
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = { 0 };
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	222c      	movs	r2, #44	; 0x2c
 8007f30:	2100      	movs	r1, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fff2 	bl	8009f1c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
   */
  hrtc.Instance = RTC;
 8007f38:	4b47      	ldr	r3, [pc, #284]	; (8008058 <MX_RTC_Init+0x148>)
 8007f3a:	4a48      	ldr	r2, [pc, #288]	; (800805c <MX_RTC_Init+0x14c>)
 8007f3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007f3e:	4b46      	ldr	r3, [pc, #280]	; (8008058 <MX_RTC_Init+0x148>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007f44:	4b44      	ldr	r3, [pc, #272]	; (8008058 <MX_RTC_Init+0x148>)
 8007f46:	227f      	movs	r2, #127	; 0x7f
 8007f48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007f4a:	4b43      	ldr	r3, [pc, #268]	; (8008058 <MX_RTC_Init+0x148>)
 8007f4c:	22ff      	movs	r2, #255	; 0xff
 8007f4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007f50:	4b41      	ldr	r3, [pc, #260]	; (8008058 <MX_RTC_Init+0x148>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007f56:	4b40      	ldr	r3, [pc, #256]	; (8008058 <MX_RTC_Init+0x148>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007f5c:	4b3e      	ldr	r3, [pc, #248]	; (8008058 <MX_RTC_Init+0x148>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8007f62:	483d      	ldr	r0, [pc, #244]	; (8008058 <MX_RTC_Init+0x148>)
 8007f64:	f7fc fd12 	bl	800498c <HAL_RTC_Init>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <MX_RTC_Init+0x62>
    Error_Handler();
 8007f6e:	f000 fee5 	bl	8008d3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
   */
  sTime.Hours = 0x0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8007f8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f90:	2201      	movs	r2, #1
 8007f92:	4619      	mov	r1, r3
 8007f94:	4830      	ldr	r0, [pc, #192]	; (8008058 <MX_RTC_Init+0x148>)
 8007f96:	f7fc fd75 	bl	8004a84 <HAL_RTC_SetTime>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <MX_RTC_Init+0x94>
    Error_Handler();
 8007fa0:	f000 fecc 	bl	8008d3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8007faa:	2301      	movs	r3, #1
 8007fac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8007fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4824      	ldr	r0, [pc, #144]	; (8008058 <MX_RTC_Init+0x148>)
 8007fc6:	f7fc fe1b 	bl	8004c00 <HAL_RTC_SetDate>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <MX_RTC_Init+0xc4>
    Error_Handler();
 8007fd0:	f000 feb4 	bl	8008d3c <Error_Handler>
  }
  /** Enable the Alarm A 
   */
  sAlarm.AlarmTime.Hours = 0x0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8007ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8008004:	463b      	mov	r3, r7
 8008006:	2201      	movs	r2, #1
 8008008:	4619      	mov	r1, r3
 800800a:	4813      	ldr	r0, [pc, #76]	; (8008058 <MX_RTC_Init+0x148>)
 800800c:	f7fc fea0 	bl	8004d50 <HAL_RTC_SetAlarm>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <MX_RTC_Init+0x10a>
    Error_Handler();
 8008016:	f000 fe91 	bl	8008d3c <Error_Handler>
  }
  /** Enable the Alarm B 
   */
  sAlarm.AlarmDateWeekDay = 0x1;
 800801a:	2301      	movs	r3, #1
 800801c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8008020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008024:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 8008026:	463b      	mov	r3, r7
 8008028:	2201      	movs	r2, #1
 800802a:	4619      	mov	r1, r3
 800802c:	480a      	ldr	r0, [pc, #40]	; (8008058 <MX_RTC_Init+0x148>)
 800802e:	f7fc fe8f 	bl	8004d50 <HAL_RTC_SetAlarm>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <MX_RTC_Init+0x12c>
    Error_Handler();
 8008038:	f000 fe80 	bl	8008d3c <Error_Handler>
  }
  /** Enable the TimeStamp 
   */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING,
 800803c:	2202      	movs	r2, #2
 800803e:	2100      	movs	r1, #0
 8008040:	4805      	ldr	r0, [pc, #20]	; (8008058 <MX_RTC_Init+0x148>)
 8008042:	f7fd f80f 	bl	8005064 <HAL_RTCEx_SetTimeStamp>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_RTC_Init+0x140>
  RTC_TIMESTAMPPIN_POS1) != HAL_OK) {
    Error_Handler();
 800804c:	f000 fe76 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008050:	bf00      	nop
 8008052:	3748      	adds	r7, #72	; 0x48
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	200005b8 	.word	0x200005b8
 800805c:	40002800 	.word	0x40002800

08008060 <MX_SAI2_Init>:
/**
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void) {
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8008064:	4b4d      	ldr	r3, [pc, #308]	; (800819c <MX_SAI2_Init+0x13c>)
 8008066:	4a4e      	ldr	r2, [pc, #312]	; (80081a0 <MX_SAI2_Init+0x140>)
 8008068:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800806a:	4b4c      	ldr	r3, [pc, #304]	; (800819c <MX_SAI2_Init+0x13c>)
 800806c:	2200      	movs	r2, #0
 800806e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8008070:	4b4a      	ldr	r3, [pc, #296]	; (800819c <MX_SAI2_Init+0x13c>)
 8008072:	2200      	movs	r2, #0
 8008074:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8008076:	4b49      	ldr	r3, [pc, #292]	; (800819c <MX_SAI2_Init+0x13c>)
 8008078:	2240      	movs	r2, #64	; 0x40
 800807a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800807c:	4b47      	ldr	r3, [pc, #284]	; (800819c <MX_SAI2_Init+0x13c>)
 800807e:	2200      	movs	r2, #0
 8008080:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008082:	4b46      	ldr	r3, [pc, #280]	; (800819c <MX_SAI2_Init+0x13c>)
 8008084:	2200      	movs	r2, #0
 8008086:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8008088:	4b44      	ldr	r3, [pc, #272]	; (800819c <MX_SAI2_Init+0x13c>)
 800808a:	2200      	movs	r2, #0
 800808c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800808e:	4b43      	ldr	r3, [pc, #268]	; (800819c <MX_SAI2_Init+0x13c>)
 8008090:	2200      	movs	r2, #0
 8008092:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8008094:	4b41      	ldr	r3, [pc, #260]	; (800819c <MX_SAI2_Init+0x13c>)
 8008096:	2200      	movs	r2, #0
 8008098:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800809a:	4b40      	ldr	r3, [pc, #256]	; (800819c <MX_SAI2_Init+0x13c>)
 800809c:	2200      	movs	r2, #0
 800809e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80080a0:	4b3e      	ldr	r3, [pc, #248]	; (800819c <MX_SAI2_Init+0x13c>)
 80080a2:	4a40      	ldr	r2, [pc, #256]	; (80081a4 <MX_SAI2_Init+0x144>)
 80080a4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80080a6:	4b3d      	ldr	r3, [pc, #244]	; (800819c <MX_SAI2_Init+0x13c>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80080ac:	4b3b      	ldr	r3, [pc, #236]	; (800819c <MX_SAI2_Init+0x13c>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80080b2:	4b3a      	ldr	r3, [pc, #232]	; (800819c <MX_SAI2_Init+0x13c>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80080b8:	4b38      	ldr	r3, [pc, #224]	; (800819c <MX_SAI2_Init+0x13c>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80080be:	4b37      	ldr	r3, [pc, #220]	; (800819c <MX_SAI2_Init+0x13c>)
 80080c0:	2208      	movs	r2, #8
 80080c2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80080c4:	4b35      	ldr	r3, [pc, #212]	; (800819c <MX_SAI2_Init+0x13c>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80080ca:	4b34      	ldr	r3, [pc, #208]	; (800819c <MX_SAI2_Init+0x13c>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80080d0:	4b32      	ldr	r3, [pc, #200]	; (800819c <MX_SAI2_Init+0x13c>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80080d6:	4b31      	ldr	r3, [pc, #196]	; (800819c <MX_SAI2_Init+0x13c>)
 80080d8:	2200      	movs	r2, #0
 80080da:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80080dc:	4b2f      	ldr	r3, [pc, #188]	; (800819c <MX_SAI2_Init+0x13c>)
 80080de:	2200      	movs	r2, #0
 80080e0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80080e2:	4b2e      	ldr	r3, [pc, #184]	; (800819c <MX_SAI2_Init+0x13c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80080e8:	4b2c      	ldr	r3, [pc, #176]	; (800819c <MX_SAI2_Init+0x13c>)
 80080ea:	2201      	movs	r2, #1
 80080ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80080ee:	4b2b      	ldr	r3, [pc, #172]	; (800819c <MX_SAI2_Init+0x13c>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK) {
 80080f4:	4829      	ldr	r0, [pc, #164]	; (800819c <MX_SAI2_Init+0x13c>)
 80080f6:	f7fd f80b 	bl	8005110 <HAL_SAI_Init>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <MX_SAI2_Init+0xa4>
    Error_Handler();
 8008100:	f000 fe1c 	bl	8008d3c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8008104:	4b28      	ldr	r3, [pc, #160]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008106:	4a29      	ldr	r2, [pc, #164]	; (80081ac <MX_SAI2_Init+0x14c>)
 8008108:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800810a:	4b27      	ldr	r3, [pc, #156]	; (80081a8 <MX_SAI2_Init+0x148>)
 800810c:	2200      	movs	r2, #0
 800810e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8008110:	4b25      	ldr	r3, [pc, #148]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008112:	2203      	movs	r2, #3
 8008114:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8008116:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008118:	2240      	movs	r2, #64	; 0x40
 800811a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800811c:	4b22      	ldr	r3, [pc, #136]	; (80081a8 <MX_SAI2_Init+0x148>)
 800811e:	2200      	movs	r2, #0
 8008120:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008122:	4b21      	ldr	r3, [pc, #132]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008124:	2200      	movs	r2, #0
 8008126:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8008128:	4b1f      	ldr	r3, [pc, #124]	; (80081a8 <MX_SAI2_Init+0x148>)
 800812a:	2201      	movs	r2, #1
 800812c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800812e:	4b1e      	ldr	r3, [pc, #120]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008130:	2200      	movs	r2, #0
 8008132:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8008134:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008136:	2200      	movs	r2, #0
 8008138:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <MX_SAI2_Init+0x148>)
 800813c:	2200      	movs	r2, #0
 800813e:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8008140:	4b19      	ldr	r3, [pc, #100]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008142:	2200      	movs	r2, #0
 8008144:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8008146:	4b18      	ldr	r3, [pc, #96]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008148:	2200      	movs	r2, #0
 800814a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800814c:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <MX_SAI2_Init+0x148>)
 800814e:	2200      	movs	r2, #0
 8008150:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 8008152:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008154:	2218      	movs	r2, #24
 8008156:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8008158:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <MX_SAI2_Init+0x148>)
 800815a:	2201      	movs	r2, #1
 800815c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800815e:	4b12      	ldr	r3, [pc, #72]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008160:	2200      	movs	r2, #0
 8008162:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008164:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008166:	2200      	movs	r2, #0
 8008168:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800816a:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <MX_SAI2_Init+0x148>)
 800816c:	2200      	movs	r2, #0
 800816e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8008170:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008172:	2200      	movs	r2, #0
 8008174:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8008176:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008178:	2200      	movs	r2, #0
 800817a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <MX_SAI2_Init+0x148>)
 800817e:	2201      	movs	r2, #1
 8008180:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <MX_SAI2_Init+0x148>)
 8008184:	2200      	movs	r2, #0
 8008186:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK) {
 8008188:	4807      	ldr	r0, [pc, #28]	; (80081a8 <MX_SAI2_Init+0x148>)
 800818a:	f7fc ffc1 	bl	8005110 <HAL_SAI_Init>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <MX_SAI2_Init+0x138>
    Error_Handler();
 8008194:	f000 fdd2 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8008198:	bf00      	nop
 800819a:	bd80      	pop	{r7, pc}
 800819c:	200001f8 	.word	0x200001f8
 80081a0:	40015c04 	.word	0x40015c04
 80081a4:	0002ee00 	.word	0x0002ee00
 80081a8:	20000038 	.word	0x20000038
 80081ac:	40015c24 	.word	0x40015c24

080081b0 <MX_SPDIFRX_Init>:
/**
 * @brief SPDIFRX Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPDIFRX_Init(void) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80081b4:	4b15      	ldr	r3, [pc, #84]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80081ba:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80081bc:	4b13      	ldr	r3, [pc, #76]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081be:	2200      	movs	r2, #0
 80081c0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80081c2:	4b12      	ldr	r3, [pc, #72]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80081c8:	4b10      	ldr	r3, [pc, #64]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80081ce:	4b0f      	ldr	r3, [pc, #60]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80081d4:	4b0d      	ldr	r3, [pc, #52]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80081da:	4b0c      	ldr	r3, [pc, #48]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081dc:	2200      	movs	r2, #0
 80081de:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80081e0:	4b0a      	ldr	r3, [pc, #40]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80081e6:	4b09      	ldr	r3, [pc, #36]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80081ec:	4b07      	ldr	r3, [pc, #28]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80081f2:	4b06      	ldr	r3, [pc, #24]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK) {
 80081f8:	4804      	ldr	r0, [pc, #16]	; (800820c <MX_SPDIFRX_Init+0x5c>)
 80081fa:	f7fd f965 	bl	80054c8 <HAL_SPDIFRX_Init>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <MX_SPDIFRX_Init+0x58>
    Error_Handler();
 8008204:	f000 fd9a 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8008208:	bf00      	nop
 800820a:	bd80      	pop	{r7, pc}
 800820c:	200001ac 	.word	0x200001ac

08008210 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <MX_SPI2_Init+0x74>)
 8008216:	4a1c      	ldr	r2, [pc, #112]	; (8008288 <MX_SPI2_Init+0x78>)
 8008218:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800821a:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <MX_SPI2_Init+0x74>)
 800821c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008220:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008222:	4b18      	ldr	r3, [pc, #96]	; (8008284 <MX_SPI2_Init+0x74>)
 8008224:	2200      	movs	r2, #0
 8008226:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8008228:	4b16      	ldr	r3, [pc, #88]	; (8008284 <MX_SPI2_Init+0x74>)
 800822a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800822e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008230:	4b14      	ldr	r3, [pc, #80]	; (8008284 <MX_SPI2_Init+0x74>)
 8008232:	2200      	movs	r2, #0
 8008234:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008236:	4b13      	ldr	r3, [pc, #76]	; (8008284 <MX_SPI2_Init+0x74>)
 8008238:	2200      	movs	r2, #0
 800823a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800823c:	4b11      	ldr	r3, [pc, #68]	; (8008284 <MX_SPI2_Init+0x74>)
 800823e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008242:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008244:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <MX_SPI2_Init+0x74>)
 8008246:	2200      	movs	r2, #0
 8008248:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800824a:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <MX_SPI2_Init+0x74>)
 800824c:	2200      	movs	r2, #0
 800824e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008250:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <MX_SPI2_Init+0x74>)
 8008252:	2200      	movs	r2, #0
 8008254:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008256:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <MX_SPI2_Init+0x74>)
 8008258:	2200      	movs	r2, #0
 800825a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800825c:	4b09      	ldr	r3, [pc, #36]	; (8008284 <MX_SPI2_Init+0x74>)
 800825e:	2207      	movs	r2, #7
 8008260:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008262:	4b08      	ldr	r3, [pc, #32]	; (8008284 <MX_SPI2_Init+0x74>)
 8008264:	2200      	movs	r2, #0
 8008266:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008268:	4b06      	ldr	r3, [pc, #24]	; (8008284 <MX_SPI2_Init+0x74>)
 800826a:	2208      	movs	r2, #8
 800826c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800826e:	4805      	ldr	r0, [pc, #20]	; (8008284 <MX_SPI2_Init+0x74>)
 8008270:	f7fd f986 	bl	8005580 <HAL_SPI_Init>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <MX_SPI2_Init+0x6e>
    Error_Handler();
 800827a:	f000 fd5f 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800827e:	bf00      	nop
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20000108 	.word	0x20000108
 8008288:	40003800 	.word	0x40003800

0800828c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b09a      	sub	sp, #104	; 0x68
 8008290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8008292:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	605a      	str	r2, [r3, #4]
 800829c:	609a      	str	r2, [r3, #8]
 800829e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80082a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	605a      	str	r2, [r3, #4]
 80082aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 80082ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	605a      	str	r2, [r3, #4]
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	611a      	str	r2, [r3, #16]
 80082bc:	615a      	str	r2, [r3, #20]
 80082be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	222c      	movs	r2, #44	; 0x2c
 80082c4:	2100      	movs	r1, #0
 80082c6:	4618      	mov	r0, r3
 80082c8:	f001 fe28 	bl	8009f1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80082cc:	4b43      	ldr	r3, [pc, #268]	; (80083dc <MX_TIM1_Init+0x150>)
 80082ce:	4a44      	ldr	r2, [pc, #272]	; (80083e0 <MX_TIM1_Init+0x154>)
 80082d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80082d2:	4b42      	ldr	r3, [pc, #264]	; (80083dc <MX_TIM1_Init+0x150>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082d8:	4b40      	ldr	r3, [pc, #256]	; (80083dc <MX_TIM1_Init+0x150>)
 80082da:	2200      	movs	r2, #0
 80082dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80082de:	4b3f      	ldr	r3, [pc, #252]	; (80083dc <MX_TIM1_Init+0x150>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082e4:	4b3d      	ldr	r3, [pc, #244]	; (80083dc <MX_TIM1_Init+0x150>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80082ea:	4b3c      	ldr	r3, [pc, #240]	; (80083dc <MX_TIM1_Init+0x150>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082f0:	4b3a      	ldr	r3, [pc, #232]	; (80083dc <MX_TIM1_Init+0x150>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80082f6:	4839      	ldr	r0, [pc, #228]	; (80083dc <MX_TIM1_Init+0x150>)
 80082f8:	f7fd f9d4 	bl	80056a4 <HAL_TIM_Base_Init>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8008302:	f000 fd1b 	bl	8008d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800830a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800830c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008310:	4619      	mov	r1, r3
 8008312:	4832      	ldr	r0, [pc, #200]	; (80083dc <MX_TIM1_Init+0x150>)
 8008314:	f7fd fc7e 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <MX_TIM1_Init+0x96>
    Error_Handler();
 800831e:	f000 fd0d 	bl	8008d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8008322:	482e      	ldr	r0, [pc, #184]	; (80083dc <MX_TIM1_Init+0x150>)
 8008324:	f7fd fa14 	bl	8005750 <HAL_TIM_PWM_Init>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <MX_TIM1_Init+0xa6>
    Error_Handler();
 800832e:	f000 fd05 	bl	8008d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008332:	2300      	movs	r3, #0
 8008334:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008336:	2300      	movs	r3, #0
 8008338:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800833a:	2300      	movs	r3, #0
 800833c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800833e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008342:	4619      	mov	r1, r3
 8008344:	4825      	ldr	r0, [pc, #148]	; (80083dc <MX_TIM1_Init+0x150>)
 8008346:	f7fe f8df 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <MX_TIM1_Init+0xc8>
    Error_Handler();
 8008350:	f000 fcf4 	bl	8008d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008354:	2360      	movs	r3, #96	; 0x60
 8008356:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800835c:	2300      	movs	r3, #0
 800835e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008360:	2300      	movs	r3, #0
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008364:	2300      	movs	r3, #0
 8008366:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008368:	2300      	movs	r3, #0
 800836a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800836c:	2300      	movs	r3, #0
 800836e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8008370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008374:	2200      	movs	r2, #0
 8008376:	4619      	mov	r1, r3
 8008378:	4818      	ldr	r0, [pc, #96]	; (80083dc <MX_TIM1_Init+0x150>)
 800837a:	f7fd fb33 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <MX_TIM1_Init+0xfc>
    Error_Handler();
 8008384:	f000 fcda 	bl	8008d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008388:	2300      	movs	r3, #0
 800838a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800838c:	2300      	movs	r3, #0
 800838e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800839c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80083a6:	2300      	movs	r3, #0
 80083a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80083aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80083b4:	2300      	movs	r3, #0
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80083b8:	1d3b      	adds	r3, r7, #4
 80083ba:	4619      	mov	r1, r3
 80083bc:	4807      	ldr	r0, [pc, #28]	; (80083dc <MX_TIM1_Init+0x150>)
 80083be:	f7fe f8ff 	bl	80065c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <MX_TIM1_Init+0x140>
    Error_Handler();
 80083c8:	f000 fcb8 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80083cc:	4803      	ldr	r0, [pc, #12]	; (80083dc <MX_TIM1_Init+0x150>)
 80083ce:	f001 f981 	bl	80096d4 <HAL_TIM_MspPostInit>

}
 80083d2:	bf00      	nop
 80083d4:	3768      	adds	r7, #104	; 0x68
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	200005d8 	.word	0x200005d8
 80083e0:	40010000 	.word	0x40010000

080083e4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08e      	sub	sp, #56	; 0x38
 80083e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80083ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	605a      	str	r2, [r3, #4]
 80083f4:	609a      	str	r2, [r3, #8]
 80083f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80083f8:	f107 031c 	add.w	r3, r7, #28
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	605a      	str	r2, [r3, #4]
 8008402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8008404:	463b      	mov	r3, r7
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	605a      	str	r2, [r3, #4]
 800840c:	609a      	str	r2, [r3, #8]
 800840e:	60da      	str	r2, [r3, #12]
 8008410:	611a      	str	r2, [r3, #16]
 8008412:	615a      	str	r2, [r3, #20]
 8008414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008416:	4b2d      	ldr	r3, [pc, #180]	; (80084cc <MX_TIM2_Init+0xe8>)
 8008418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800841c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800841e:	4b2b      	ldr	r3, [pc, #172]	; (80084cc <MX_TIM2_Init+0xe8>)
 8008420:	2200      	movs	r2, #0
 8008422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008424:	4b29      	ldr	r3, [pc, #164]	; (80084cc <MX_TIM2_Init+0xe8>)
 8008426:	2200      	movs	r2, #0
 8008428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800842a:	4b28      	ldr	r3, [pc, #160]	; (80084cc <MX_TIM2_Init+0xe8>)
 800842c:	2200      	movs	r2, #0
 800842e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008430:	4b26      	ldr	r3, [pc, #152]	; (80084cc <MX_TIM2_Init+0xe8>)
 8008432:	2200      	movs	r2, #0
 8008434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008436:	4b25      	ldr	r3, [pc, #148]	; (80084cc <MX_TIM2_Init+0xe8>)
 8008438:	2200      	movs	r2, #0
 800843a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800843c:	4823      	ldr	r0, [pc, #140]	; (80084cc <MX_TIM2_Init+0xe8>)
 800843e:	f7fd f931 	bl	80056a4 <HAL_TIM_Base_Init>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <MX_TIM2_Init+0x68>
    Error_Handler();
 8008448:	f000 fc78 	bl	8008d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800844c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008450:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8008452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008456:	4619      	mov	r1, r3
 8008458:	481c      	ldr	r0, [pc, #112]	; (80084cc <MX_TIM2_Init+0xe8>)
 800845a:	f7fd fbdb 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <MX_TIM2_Init+0x84>
    Error_Handler();
 8008464:	f000 fc6a 	bl	8008d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8008468:	4818      	ldr	r0, [pc, #96]	; (80084cc <MX_TIM2_Init+0xe8>)
 800846a:	f7fd f971 	bl	8005750 <HAL_TIM_PWM_Init>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <MX_TIM2_Init+0x94>
    Error_Handler();
 8008474:	f000 fc62 	bl	8008d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800847c:	2300      	movs	r3, #0
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8008480:	f107 031c 	add.w	r3, r7, #28
 8008484:	4619      	mov	r1, r3
 8008486:	4811      	ldr	r0, [pc, #68]	; (80084cc <MX_TIM2_Init+0xe8>)
 8008488:	f7fe f83e 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <MX_TIM2_Init+0xb2>
    Error_Handler();
 8008492:	f000 fc53 	bl	8008d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008496:	2360      	movs	r3, #96	; 0x60
 8008498:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800849e:	2300      	movs	r3, #0
 80084a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80084a6:	463b      	mov	r3, r7
 80084a8:	2200      	movs	r2, #0
 80084aa:	4619      	mov	r1, r3
 80084ac:	4807      	ldr	r0, [pc, #28]	; (80084cc <MX_TIM2_Init+0xe8>)
 80084ae:	f7fd fa99 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <MX_TIM2_Init+0xd8>
    Error_Handler();
 80084b8:	f000 fc40 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80084bc:	4803      	ldr	r0, [pc, #12]	; (80084cc <MX_TIM2_Init+0xe8>)
 80084be:	f001 f909 	bl	80096d4 <HAL_TIM_MspPostInit>

}
 80084c2:	bf00      	nop
 80084c4:	3738      	adds	r7, #56	; 0x38
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	2000066c 	.word	0x2000066c

080084d0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08e      	sub	sp, #56	; 0x38
 80084d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80084d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	605a      	str	r2, [r3, #4]
 80084e0:	609a      	str	r2, [r3, #8]
 80084e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80084e4:	f107 031c 	add.w	r3, r7, #28
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	605a      	str	r2, [r3, #4]
 80084ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 80084f0:	463b      	mov	r3, r7
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	605a      	str	r2, [r3, #4]
 80084f8:	609a      	str	r2, [r3, #8]
 80084fa:	60da      	str	r2, [r3, #12]
 80084fc:	611a      	str	r2, [r3, #16]
 80084fe:	615a      	str	r2, [r3, #20]
 8008500:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008502:	4b2c      	ldr	r3, [pc, #176]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008504:	4a2c      	ldr	r2, [pc, #176]	; (80085b8 <MX_TIM3_Init+0xe8>)
 8008506:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008508:	4b2a      	ldr	r3, [pc, #168]	; (80085b4 <MX_TIM3_Init+0xe4>)
 800850a:	2200      	movs	r2, #0
 800850c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800850e:	4b29      	ldr	r3, [pc, #164]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008510:	2200      	movs	r2, #0
 8008512:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8008514:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008516:	2200      	movs	r2, #0
 8008518:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800851a:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <MX_TIM3_Init+0xe4>)
 800851c:	2200      	movs	r2, #0
 800851e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008520:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008522:	2200      	movs	r2, #0
 8008524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8008526:	4823      	ldr	r0, [pc, #140]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008528:	f7fd f8bc 	bl	80056a4 <HAL_TIM_Base_Init>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <MX_TIM3_Init+0x66>
    Error_Handler();
 8008532:	f000 fc03 	bl	8008d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800853c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008540:	4619      	mov	r1, r3
 8008542:	481c      	ldr	r0, [pc, #112]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008544:	f7fd fb66 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <MX_TIM3_Init+0x82>
    Error_Handler();
 800854e:	f000 fbf5 	bl	8008d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8008552:	4818      	ldr	r0, [pc, #96]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008554:	f7fd f8fc 	bl	8005750 <HAL_TIM_PWM_Init>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <MX_TIM3_Init+0x92>
    Error_Handler();
 800855e:	f000 fbed 	bl	8008d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008562:	2300      	movs	r3, #0
 8008564:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008566:	2300      	movs	r3, #0
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800856a:	f107 031c 	add.w	r3, r7, #28
 800856e:	4619      	mov	r1, r3
 8008570:	4810      	ldr	r0, [pc, #64]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008572:	f7fd ffc9 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_TIM3_Init+0xb0>
    Error_Handler();
 800857c:	f000 fbde 	bl	8008d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008580:	2360      	movs	r3, #96	; 0x60
 8008582:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008588:	2300      	movs	r3, #0
 800858a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800858c:	2300      	movs	r3, #0
 800858e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8008590:	463b      	mov	r3, r7
 8008592:	2200      	movs	r2, #0
 8008594:	4619      	mov	r1, r3
 8008596:	4807      	ldr	r0, [pc, #28]	; (80085b4 <MX_TIM3_Init+0xe4>)
 8008598:	f7fd fa24 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <MX_TIM3_Init+0xd6>
    Error_Handler();
 80085a2:	f000 fbcb 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80085a6:	4803      	ldr	r0, [pc, #12]	; (80085b4 <MX_TIM3_Init+0xe4>)
 80085a8:	f001 f894 	bl	80096d4 <HAL_TIM_MspPostInit>

}
 80085ac:	bf00      	nop
 80085ae:	3738      	adds	r7, #56	; 0x38
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	200003b4 	.word	0x200003b4
 80085b8:	40000400 	.word	0x40000400

080085bc <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08e      	sub	sp, #56	; 0x38
 80085c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80085c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	605a      	str	r2, [r3, #4]
 80085cc:	609a      	str	r2, [r3, #8]
 80085ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80085d0:	f107 031c 	add.w	r3, r7, #28
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	605a      	str	r2, [r3, #4]
 80085da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 80085dc:	463b      	mov	r3, r7
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	605a      	str	r2, [r3, #4]
 80085e4:	609a      	str	r2, [r3, #8]
 80085e6:	60da      	str	r2, [r3, #12]
 80085e8:	611a      	str	r2, [r3, #16]
 80085ea:	615a      	str	r2, [r3, #20]
 80085ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80085ee:	4b2c      	ldr	r3, [pc, #176]	; (80086a0 <MX_TIM5_Init+0xe4>)
 80085f0:	4a2c      	ldr	r2, [pc, #176]	; (80086a4 <MX_TIM5_Init+0xe8>)
 80085f2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80085f4:	4b2a      	ldr	r3, [pc, #168]	; (80086a0 <MX_TIM5_Init+0xe4>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085fa:	4b29      	ldr	r3, [pc, #164]	; (80086a0 <MX_TIM5_Init+0xe4>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8008600:	4b27      	ldr	r3, [pc, #156]	; (80086a0 <MX_TIM5_Init+0xe4>)
 8008602:	2200      	movs	r2, #0
 8008604:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008606:	4b26      	ldr	r3, [pc, #152]	; (80086a0 <MX_TIM5_Init+0xe4>)
 8008608:	2200      	movs	r2, #0
 800860a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800860c:	4b24      	ldr	r3, [pc, #144]	; (80086a0 <MX_TIM5_Init+0xe4>)
 800860e:	2200      	movs	r2, #0
 8008610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8008612:	4823      	ldr	r0, [pc, #140]	; (80086a0 <MX_TIM5_Init+0xe4>)
 8008614:	f7fd f846 	bl	80056a4 <HAL_TIM_Base_Init>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <MX_TIM5_Init+0x66>
    Error_Handler();
 800861e:	f000 fb8d 	bl	8008d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008626:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8008628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800862c:	4619      	mov	r1, r3
 800862e:	481c      	ldr	r0, [pc, #112]	; (80086a0 <MX_TIM5_Init+0xe4>)
 8008630:	f7fd faf0 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <MX_TIM5_Init+0x82>
    Error_Handler();
 800863a:	f000 fb7f 	bl	8008d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 800863e:	4818      	ldr	r0, [pc, #96]	; (80086a0 <MX_TIM5_Init+0xe4>)
 8008640:	f7fd f886 	bl	8005750 <HAL_TIM_PWM_Init>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <MX_TIM5_Init+0x92>
    Error_Handler();
 800864a:	f000 fb77 	bl	8008d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800864e:	2300      	movs	r3, #0
 8008650:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008652:	2300      	movs	r3, #0
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8008656:	f107 031c 	add.w	r3, r7, #28
 800865a:	4619      	mov	r1, r3
 800865c:	4810      	ldr	r0, [pc, #64]	; (80086a0 <MX_TIM5_Init+0xe4>)
 800865e:	f7fd ff53 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <MX_TIM5_Init+0xb0>
    Error_Handler();
 8008668:	f000 fb68 	bl	8008d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800866c:	2360      	movs	r3, #96	; 0x60
 800866e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008674:	2300      	movs	r3, #0
 8008676:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008678:	2300      	movs	r3, #0
 800867a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 800867c:	463b      	mov	r3, r7
 800867e:	220c      	movs	r2, #12
 8008680:	4619      	mov	r1, r3
 8008682:	4807      	ldr	r0, [pc, #28]	; (80086a0 <MX_TIM5_Init+0xe4>)
 8008684:	f7fd f9ae 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <MX_TIM5_Init+0xd6>
    Error_Handler();
 800868e:	f000 fb55 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8008692:	4803      	ldr	r0, [pc, #12]	; (80086a0 <MX_TIM5_Init+0xe4>)
 8008694:	f001 f81e 	bl	80096d4 <HAL_TIM_MspPostInit>

}
 8008698:	bf00      	nop
 800869a:	3738      	adds	r7, #56	; 0x38
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20000374 	.word	0x20000374
 80086a4:	40000c00 	.word	0x40000c00

080086a8 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80086ae:	f107 0310 	add.w	r3, r7, #16
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	605a      	str	r2, [r3, #4]
 80086b8:	609a      	str	r2, [r3, #8]
 80086ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80086bc:	1d3b      	adds	r3, r7, #4
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	605a      	str	r2, [r3, #4]
 80086c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80086c6:	4b1f      	ldr	r3, [pc, #124]	; (8008744 <MX_TIM8_Init+0x9c>)
 80086c8:	4a1f      	ldr	r2, [pc, #124]	; (8008748 <MX_TIM8_Init+0xa0>)
 80086ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80086cc:	4b1d      	ldr	r3, [pc, #116]	; (8008744 <MX_TIM8_Init+0x9c>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086d2:	4b1c      	ldr	r3, [pc, #112]	; (8008744 <MX_TIM8_Init+0x9c>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80086d8:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <MX_TIM8_Init+0x9c>)
 80086da:	2200      	movs	r2, #0
 80086dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086de:	4b19      	ldr	r3, [pc, #100]	; (8008744 <MX_TIM8_Init+0x9c>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80086e4:	4b17      	ldr	r3, [pc, #92]	; (8008744 <MX_TIM8_Init+0x9c>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086ea:	4b16      	ldr	r3, [pc, #88]	; (8008744 <MX_TIM8_Init+0x9c>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80086f0:	4814      	ldr	r0, [pc, #80]	; (8008744 <MX_TIM8_Init+0x9c>)
 80086f2:	f7fc ffd7 	bl	80056a4 <HAL_TIM_Base_Init>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <MX_TIM8_Init+0x58>
    Error_Handler();
 80086fc:	f000 fb1e 	bl	8008d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008704:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	4619      	mov	r1, r3
 800870c:	480d      	ldr	r0, [pc, #52]	; (8008744 <MX_TIM8_Init+0x9c>)
 800870e:	f7fd fa81 	bl	8005c14 <HAL_TIM_ConfigClockSource>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <MX_TIM8_Init+0x74>
    Error_Handler();
 8008718:	f000 fb10 	bl	8008d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800871c:	2300      	movs	r3, #0
 800871e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008720:	2300      	movs	r3, #0
 8008722:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8008728:	1d3b      	adds	r3, r7, #4
 800872a:	4619      	mov	r1, r3
 800872c:	4805      	ldr	r0, [pc, #20]	; (8008744 <MX_TIM8_Init+0x9c>)
 800872e:	f7fd feeb 	bl	8006508 <HAL_TIMEx_MasterConfigSynchronization>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <MX_TIM8_Init+0x94>
    Error_Handler();
 8008738:	f000 fb00 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800873c:	bf00      	nop
 800873e:	3720      	adds	r7, #32
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	2000016c 	.word	0x2000016c
 8008748:	40010400 	.word	0x40010400

0800874c <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8008752:	1d3b      	adds	r3, r7, #4
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	609a      	str	r2, [r3, #8]
 800875c:	60da      	str	r2, [r3, #12]
 800875e:	611a      	str	r2, [r3, #16]
 8008760:	615a      	str	r2, [r3, #20]
 8008762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8008764:	4b19      	ldr	r3, [pc, #100]	; (80087cc <MX_TIM12_Init+0x80>)
 8008766:	4a1a      	ldr	r2, [pc, #104]	; (80087d0 <MX_TIM12_Init+0x84>)
 8008768:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800876a:	4b18      	ldr	r3, [pc, #96]	; (80087cc <MX_TIM12_Init+0x80>)
 800876c:	2200      	movs	r2, #0
 800876e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008770:	4b16      	ldr	r3, [pc, #88]	; (80087cc <MX_TIM12_Init+0x80>)
 8008772:	2200      	movs	r2, #0
 8008774:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8008776:	4b15      	ldr	r3, [pc, #84]	; (80087cc <MX_TIM12_Init+0x80>)
 8008778:	2200      	movs	r2, #0
 800877a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800877c:	4b13      	ldr	r3, [pc, #76]	; (80087cc <MX_TIM12_Init+0x80>)
 800877e:	2200      	movs	r2, #0
 8008780:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008782:	4b12      	ldr	r3, [pc, #72]	; (80087cc <MX_TIM12_Init+0x80>)
 8008784:	2200      	movs	r2, #0
 8008786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8008788:	4810      	ldr	r0, [pc, #64]	; (80087cc <MX_TIM12_Init+0x80>)
 800878a:	f7fc ffe1 	bl	8005750 <HAL_TIM_PWM_Init>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <MX_TIM12_Init+0x4c>
    Error_Handler();
 8008794:	f000 fad2 	bl	8008d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008798:	2360      	movs	r3, #96	; 0x60
 800879a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80087a8:	1d3b      	adds	r3, r7, #4
 80087aa:	2200      	movs	r2, #0
 80087ac:	4619      	mov	r1, r3
 80087ae:	4807      	ldr	r0, [pc, #28]	; (80087cc <MX_TIM12_Init+0x80>)
 80087b0:	f7fd f918 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <MX_TIM12_Init+0x72>
    Error_Handler();
 80087ba:	f000 fabf 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80087be:	4803      	ldr	r0, [pc, #12]	; (80087cc <MX_TIM12_Init+0x80>)
 80087c0:	f000 ff88 	bl	80096d4 <HAL_TIM_MspPostInit>

}
 80087c4:	bf00      	nop
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	200006ac 	.word	0x200006ac
 80087d0:	40001800 	.word	0x40001800

080087d4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80087d8:	4b14      	ldr	r3, [pc, #80]	; (800882c <MX_USART1_UART_Init+0x58>)
 80087da:	4a15      	ldr	r2, [pc, #84]	; (8008830 <MX_USART1_UART_Init+0x5c>)
 80087dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80087de:	4b13      	ldr	r3, [pc, #76]	; (800882c <MX_USART1_UART_Init+0x58>)
 80087e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80087e6:	4b11      	ldr	r3, [pc, #68]	; (800882c <MX_USART1_UART_Init+0x58>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80087ec:	4b0f      	ldr	r3, [pc, #60]	; (800882c <MX_USART1_UART_Init+0x58>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80087f2:	4b0e      	ldr	r3, [pc, #56]	; (800882c <MX_USART1_UART_Init+0x58>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80087f8:	4b0c      	ldr	r3, [pc, #48]	; (800882c <MX_USART1_UART_Init+0x58>)
 80087fa:	220c      	movs	r2, #12
 80087fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087fe:	4b0b      	ldr	r3, [pc, #44]	; (800882c <MX_USART1_UART_Init+0x58>)
 8008800:	2200      	movs	r2, #0
 8008802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008804:	4b09      	ldr	r3, [pc, #36]	; (800882c <MX_USART1_UART_Init+0x58>)
 8008806:	2200      	movs	r2, #0
 8008808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800880a:	4b08      	ldr	r3, [pc, #32]	; (800882c <MX_USART1_UART_Init+0x58>)
 800880c:	2200      	movs	r2, #0
 800880e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008810:	4b06      	ldr	r3, [pc, #24]	; (800882c <MX_USART1_UART_Init+0x58>)
 8008812:	2200      	movs	r2, #0
 8008814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8008816:	4805      	ldr	r0, [pc, #20]	; (800882c <MX_USART1_UART_Init+0x58>)
 8008818:	f7fd ff6e 	bl	80066f8 <HAL_UART_Init>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <MX_USART1_UART_Init+0x52>
    Error_Handler();
 8008822:	f000 fa8b 	bl	8008d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008826:	bf00      	nop
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000538 	.word	0x20000538
 8008830:	40011000 	.word	0x40011000

08008834 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 800883a:	1d3b      	adds	r3, r7, #4
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	609a      	str	r2, [r3, #8]
 8008844:	60da      	str	r2, [r3, #12]
 8008846:	611a      	str	r2, [r3, #16]
 8008848:	615a      	str	r2, [r3, #20]
 800884a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
   */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800884c:	4b1f      	ldr	r3, [pc, #124]	; (80088cc <MX_FMC_Init+0x98>)
 800884e:	4a20      	ldr	r2, [pc, #128]	; (80088d0 <MX_FMC_Init+0x9c>)
 8008850:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8008852:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <MX_FMC_Init+0x98>)
 8008854:	2200      	movs	r2, #0
 8008856:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008858:	4b1c      	ldr	r3, [pc, #112]	; (80088cc <MX_FMC_Init+0x98>)
 800885a:	2200      	movs	r2, #0
 800885c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800885e:	4b1b      	ldr	r3, [pc, #108]	; (80088cc <MX_FMC_Init+0x98>)
 8008860:	2204      	movs	r2, #4
 8008862:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8008864:	4b19      	ldr	r3, [pc, #100]	; (80088cc <MX_FMC_Init+0x98>)
 8008866:	2210      	movs	r2, #16
 8008868:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800886a:	4b18      	ldr	r3, [pc, #96]	; (80088cc <MX_FMC_Init+0x98>)
 800886c:	2240      	movs	r2, #64	; 0x40
 800886e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8008870:	4b16      	ldr	r3, [pc, #88]	; (80088cc <MX_FMC_Init+0x98>)
 8008872:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008876:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008878:	4b14      	ldr	r3, [pc, #80]	; (80088cc <MX_FMC_Init+0x98>)
 800887a:	2200      	movs	r2, #0
 800887c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800887e:	4b13      	ldr	r3, [pc, #76]	; (80088cc <MX_FMC_Init+0x98>)
 8008880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008884:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8008886:	4b11      	ldr	r3, [pc, #68]	; (80088cc <MX_FMC_Init+0x98>)
 8008888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800888c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <MX_FMC_Init+0x98>)
 8008890:	2200      	movs	r2, #0
 8008892:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8008894:	2302      	movs	r3, #2
 8008896:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8008898:	2307      	movs	r3, #7
 800889a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800889c:	2304      	movs	r3, #4
 800889e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80088a0:	2307      	movs	r3, #7
 80088a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80088a4:	2303      	movs	r3, #3
 80088a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80088a8:	2302      	movs	r3, #2
 80088aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80088ac:	2302      	movs	r3, #2
 80088ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 80088b0:	1d3b      	adds	r3, r7, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	4805      	ldr	r0, [pc, #20]	; (80088cc <MX_FMC_Init+0x98>)
 80088b6:	f7fc fdd3 	bl	8005460 <HAL_SDRAM_Init>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <MX_FMC_Init+0x90>
    Error_Handler();
 80088c0:	f000 fa3c 	bl	8008d3c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80088c4:	bf00      	nop
 80088c6:	3720      	adds	r7, #32
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	200006ec 	.word	0x200006ec
 80088d0:	a0000140 	.word	0xa0000140

080088d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b090      	sub	sp, #64	; 0x40
 80088d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80088da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	605a      	str	r2, [r3, #4]
 80088e4:	609a      	str	r2, [r3, #8]
 80088e6:	60da      	str	r2, [r3, #12]
 80088e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE()
 80088ea:	4bb0      	ldr	r3, [pc, #704]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80088ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ee:	4aaf      	ldr	r2, [pc, #700]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80088f0:	f043 0310 	orr.w	r3, r3, #16
 80088f4:	6313      	str	r3, [r2, #48]	; 0x30
 80088f6:	4bad      	ldr	r3, [pc, #692]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
  ;
  __HAL_RCC_GPIOG_CLK_ENABLE()
 8008902:	4baa      	ldr	r3, [pc, #680]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	4aa9      	ldr	r2, [pc, #676]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800890c:	6313      	str	r3, [r2, #48]	; 0x30
 800890e:	4ba7      	ldr	r3, [pc, #668]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  ;
  __HAL_RCC_GPIOB_CLK_ENABLE()
 800891a:	4ba4      	ldr	r3, [pc, #656]	; (8008bac <MX_GPIO_Init+0x2d8>)
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	4aa3      	ldr	r2, [pc, #652]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008920:	f043 0302 	orr.w	r3, r3, #2
 8008924:	6313      	str	r3, [r2, #48]	; 0x30
 8008926:	4ba1      	ldr	r3, [pc, #644]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	623b      	str	r3, [r7, #32]
 8008930:	6a3b      	ldr	r3, [r7, #32]
  ;
  __HAL_RCC_GPIOD_CLK_ENABLE()
 8008932:	4b9e      	ldr	r3, [pc, #632]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	4a9d      	ldr	r2, [pc, #628]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008938:	f043 0308 	orr.w	r3, r3, #8
 800893c:	6313      	str	r3, [r2, #48]	; 0x30
 800893e:	4b9b      	ldr	r3, [pc, #620]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f003 0308 	and.w	r3, r3, #8
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	69fb      	ldr	r3, [r7, #28]
  ;
  __HAL_RCC_GPIOC_CLK_ENABLE()
 800894a:	4b98      	ldr	r3, [pc, #608]	; (8008bac <MX_GPIO_Init+0x2d8>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	4a97      	ldr	r2, [pc, #604]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008950:	f043 0304 	orr.w	r3, r3, #4
 8008954:	6313      	str	r3, [r2, #48]	; 0x30
 8008956:	4b95      	ldr	r3, [pc, #596]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	f003 0304 	and.w	r3, r3, #4
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	69bb      	ldr	r3, [r7, #24]
  ;
  __HAL_RCC_GPIOA_CLK_ENABLE()
 8008962:	4b92      	ldr	r3, [pc, #584]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	4a91      	ldr	r2, [pc, #580]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008968:	f043 0301 	orr.w	r3, r3, #1
 800896c:	6313      	str	r3, [r2, #48]	; 0x30
 800896e:	4b8f      	ldr	r3, [pc, #572]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	697b      	ldr	r3, [r7, #20]
  ;
  __HAL_RCC_GPIOJ_CLK_ENABLE()
 800897a:	4b8c      	ldr	r3, [pc, #560]	; (8008bac <MX_GPIO_Init+0x2d8>)
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897e:	4a8b      	ldr	r2, [pc, #556]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008984:	6313      	str	r3, [r2, #48]	; 0x30
 8008986:	4b89      	ldr	r3, [pc, #548]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	693b      	ldr	r3, [r7, #16]
  ;
  __HAL_RCC_GPIOI_CLK_ENABLE()
 8008992:	4b86      	ldr	r3, [pc, #536]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	4a85      	ldr	r2, [pc, #532]	; (8008bac <MX_GPIO_Init+0x2d8>)
 8008998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800899c:	6313      	str	r3, [r2, #48]	; 0x30
 800899e:	4b83      	ldr	r3, [pc, #524]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
  ;
  __HAL_RCC_GPIOK_CLK_ENABLE()
 80089aa:	4b80      	ldr	r3, [pc, #512]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	4a7f      	ldr	r2, [pc, #508]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80089b4:	6313      	str	r3, [r2, #48]	; 0x30
 80089b6:	4b7d      	ldr	r3, [pc, #500]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089be:	60bb      	str	r3, [r7, #8]
 80089c0:	68bb      	ldr	r3, [r7, #8]
  ;
  __HAL_RCC_GPIOF_CLK_ENABLE()
 80089c2:	4b7a      	ldr	r3, [pc, #488]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	4a79      	ldr	r2, [pc, #484]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089c8:	f043 0320 	orr.w	r3, r3, #32
 80089cc:	6313      	str	r3, [r2, #48]	; 0x30
 80089ce:	4b77      	ldr	r3, [pc, #476]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	f003 0320 	and.w	r3, r3, #32
 80089d6:	607b      	str	r3, [r7, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
  ;
  __HAL_RCC_GPIOH_CLK_ENABLE()
 80089da:	4b74      	ldr	r3, [pc, #464]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	4a73      	ldr	r2, [pc, #460]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e4:	6313      	str	r3, [r2, #48]	; 0x30
 80089e6:	4b71      	ldr	r3, [pc, #452]	; (8008bac <MX_GPIO_Init+0x2d8>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ee:	603b      	str	r3, [r7, #0]
 80089f0:	683b      	ldr	r3, [r7, #0]
  ;

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 80089f2:	2201      	movs	r2, #1
 80089f4:	2120      	movs	r1, #32
 80089f6:	486e      	ldr	r0, [pc, #440]	; (8008bb0 <MX_GPIO_Init+0x2dc>)
 80089f8:	f7f8 fe1c 	bl	8001634 <HAL_GPIO_WritePin>
      GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80089fc:	2200      	movs	r2, #0
 80089fe:	210c      	movs	r1, #12
 8008a00:	486c      	ldr	r0, [pc, #432]	; (8008bb4 <MX_GPIO_Init+0x2e0>)
 8008a02:	f7f8 fe17 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8008a06:	2201      	movs	r2, #1
 8008a08:	2108      	movs	r1, #8
 8008a0a:	486b      	ldr	r0, [pc, #428]	; (8008bb8 <MX_GPIO_Init+0x2e4>)
 8008a0c:	f7f8 fe12 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8008a10:	2201      	movs	r2, #1
 8008a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a16:	4867      	ldr	r0, [pc, #412]	; (8008bb4 <MX_GPIO_Init+0x2e0>)
 8008a18:	f7f8 fe0c 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008a22:	4866      	ldr	r0, [pc, #408]	; (8008bbc <MX_GPIO_Init+0x2e8>)
 8008a24:	f7f8 fe06 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 8008a28:	2200      	movs	r2, #0
 8008a2a:	21c8      	movs	r1, #200	; 0xc8
 8008a2c:	4864      	ldr	r0, [pc, #400]	; (8008bc0 <MX_GPIO_Init+0x2ec>)
 8008a2e:	f7f8 fe01 	bl	8001634 <HAL_GPIO_WritePin>
      GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RGB_LED1_G_Pin | RGB_LED1_R_Pin | RGB_LED1_B_Pin,
 8008a32:	2201      	movs	r2, #1
 8008a34:	f44f 7160 	mov.w	r1, #896	; 0x380
 8008a38:	4862      	ldr	r0, [pc, #392]	; (8008bc4 <MX_GPIO_Init+0x2f0>)
 8008a3a:	f7f8 fdfb 	bl	8001634 <HAL_GPIO_WritePin>
      GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008a44:	485f      	ldr	r0, [pc, #380]	; (8008bc4 <MX_GPIO_Init+0x2f0>)
 8008a46:	f7f8 fdf5 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8008a4a:	2308      	movs	r3, #8
 8008a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	485a      	ldr	r0, [pc, #360]	; (8008bc8 <MX_GPIO_Init+0x2f4>)
 8008a5e:	f7f8 fc3f 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
   ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 8008a62:	f643 4323 	movw	r3, #15395	; 0x3c23
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      | ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a70:	2303      	movs	r3, #3
 8008a72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008a74:	230a      	movs	r3, #10
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4853      	ldr	r0, [pc, #332]	; (8008bcc <MX_GPIO_Init+0x2f8>)
 8008a80:	f7f8 fc2e 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8008a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008a96:	4619      	mov	r1, r3
 8008a98:	484d      	ldr	r0, [pc, #308]	; (8008bd0 <MX_GPIO_Init+0x2fc>)
 8008a9a:	f7f8 fc21 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8008a9e:	2320      	movs	r3, #32
 8008aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	483e      	ldr	r0, [pc, #248]	; (8008bb0 <MX_GPIO_Init+0x2dc>)
 8008ab6:	f7f8 fc13 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8008aba:	f241 030c 	movw	r3, #4108	; 0x100c
 8008abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008acc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4838      	ldr	r0, [pc, #224]	; (8008bb4 <MX_GPIO_Init+0x2e0>)
 8008ad4:	f7f8 fc04 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8008ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8008ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008aea:	4619      	mov	r1, r3
 8008aec:	4839      	ldr	r0, [pc, #228]	; (8008bd4 <MX_GPIO_Init+0x300>)
 8008aee:	f7f8 fbf7 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8008af2:	2308      	movs	r3, #8
 8008af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008af6:	2301      	movs	r3, #1
 8008af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008afa:	2300      	movs	r3, #0
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8008b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b06:	4619      	mov	r1, r3
 8008b08:	482b      	ldr	r0, [pc, #172]	; (8008bb8 <MX_GPIO_Init+0x2e4>)
 8008b0a:	f7f8 fbe9 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008b0e:	2310      	movs	r3, #16
 8008b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b12:	2300      	movs	r3, #0
 8008b14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4823      	ldr	r0, [pc, #140]	; (8008bb0 <MX_GPIO_Init+0x2dc>)
 8008b22:	f7f8 fbdd 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8008b26:	f248 0304 	movw	r3, #32772	; 0x8004
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b30:	2300      	movs	r3, #0
 8008b32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4820      	ldr	r0, [pc, #128]	; (8008bbc <MX_GPIO_Init+0x2e8>)
 8008b3c:	f7f8 fbd0 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8008b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b46:	2301      	movs	r3, #1
 8008b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8008b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b56:	4619      	mov	r1, r3
 8008b58:	4818      	ldr	r0, [pc, #96]	; (8008bbc <MX_GPIO_Init+0x2e8>)
 8008b5a:	f7f8 fbc1 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8008b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008b64:	4b1c      	ldr	r3, [pc, #112]	; (8008bd8 <MX_GPIO_Init+0x304>)
 8008b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8008b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b70:	4619      	mov	r1, r3
 8008b72:	4810      	ldr	r0, [pc, #64]	; (8008bb4 <MX_GPIO_Init+0x2e0>)
 8008b74:	f7f8 fbb4 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTER_BUTTON_Pin GAME_BUTTON1_Pin */
  GPIO_InitStruct.Pin = STARTER_BUTTON_Pin | GAME_BUTTON1_Pin;
 8008b78:	23c0      	movs	r3, #192	; 0xc0
 8008b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008b7c:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <MX_GPIO_Init+0x308>)
 8008b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008b80:	2302      	movs	r3, #2
 8008b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4812      	ldr	r0, [pc, #72]	; (8008bd4 <MX_GPIO_Init+0x300>)
 8008b8c:	f7f8 fba8 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8008b90:	2310      	movs	r3, #16
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b94:	2302      	movs	r3, #2
 8008b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008ba0:	230a      	movs	r3, #10
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8008ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ba8:	e01a      	b.n	8008be0 <MX_GPIO_Init+0x30c>
 8008baa:	bf00      	nop
 8008bac:	40023800 	.word	0x40023800
 8008bb0:	40020c00 	.word	0x40020c00
 8008bb4:	40022000 	.word	0x40022000
 8008bb8:	40022800 	.word	0x40022800
 8008bbc:	40021c00 	.word	0x40021c00
 8008bc0:	40021800 	.word	0x40021800
 8008bc4:	40021400 	.word	0x40021400
 8008bc8:	40021000 	.word	0x40021000
 8008bcc:	40020400 	.word	0x40020400
 8008bd0:	40022400 	.word	0x40022400
 8008bd4:	40020800 	.word	0x40020800
 8008bd8:	10120000 	.word	0x10120000
 8008bdc:	10110000 	.word	0x10110000
 8008be0:	4619      	mov	r1, r3
 8008be2:	482c      	ldr	r0, [pc, #176]	; (8008c94 <MX_GPIO_Init+0x3c0>)
 8008be4:	f7f8 fb7c 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8008be8:	23c8      	movs	r3, #200	; 0xc8
 8008bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bec:	2301      	movs	r3, #1
 8008bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4826      	ldr	r0, [pc, #152]	; (8008c98 <MX_GPIO_Init+0x3c4>)
 8008c00:	f7f8 fb6e 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_LED1_G_Pin RED_LED_Pin RGB_LED1_R_Pin RGB_LED1_B_Pin */
  GPIO_InitStruct.Pin = RGB_LED1_G_Pin | RED_LED_Pin | RGB_LED1_R_Pin
 8008c04:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8008c08:	62fb      	str	r3, [r7, #44]	; 0x2c
      | RGB_LED1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c12:	2300      	movs	r3, #0
 8008c14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008c16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	481f      	ldr	r0, [pc, #124]	; (8008c9c <MX_GPIO_Init+0x3c8>)
 8008c1e:	f7f8 fb5f 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8008c22:	2305      	movs	r3, #5
 8008c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c26:	2302      	movs	r3, #2
 8008c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008c32:	230a      	movs	r3, #10
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4818      	ldr	r0, [pc, #96]	; (8008ca0 <MX_GPIO_Init+0x3cc>)
 8008c3e:	f7f8 fb4f 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8008c42:	2304      	movs	r3, #4
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c46:	2300      	movs	r3, #0
 8008c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8008c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c52:	4619      	mov	r1, r3
 8008c54:	4810      	ldr	r0, [pc, #64]	; (8008c98 <MX_GPIO_Init+0x3c4>)
 8008c56:	f7f8 fb43 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8008c5a:	2328      	movs	r3, #40	; 0x28
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c5e:	2302      	movs	r3, #2
 8008c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c66:	2303      	movs	r3, #3
 8008c68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8008c6a:	230a      	movs	r3, #10
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c72:	4619      	mov	r1, r3
 8008c74:	480b      	ldr	r0, [pc, #44]	; (8008ca4 <MX_GPIO_Init+0x3d0>)
 8008c76:	f7f8 fb33 	bl	80012e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	2017      	movs	r0, #23
 8008c80:	f7f7 ffbc 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008c84:	2017      	movs	r0, #23
 8008c86:	f7f7 ffd5 	bl	8000c34 <HAL_NVIC_EnableIRQ>

}
 8008c8a:	bf00      	nop
 8008c8c:	3740      	adds	r7, #64	; 0x40
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	40021c00 	.word	0x40021c00
 8008c98:	40021800 	.word	0x40021800
 8008c9c:	40021400 	.word	0x40021400
 8008ca0:	40020800 	.word	0x40020800
 8008ca4:	40020000 	.word	0x40020000

08008ca8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
HAL_GPIO_EXTI_Callback(GPIO_Pin) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]

  if (GPIO_Pin == STARTER_BUTTON_Pin) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b80      	cmp	r3, #128	; 0x80
 8008cb4:	d106      	bne.n	8008cc4 <HAL_GPIO_EXTI_Callback+0x1c>

    if (round_counter ==0){
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <HAL_GPIO_EXTI_Callback+0x60>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d102      	bne.n	8008cc4 <HAL_GPIO_EXTI_Callback+0x1c>
    game_state = STEADY;
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <HAL_GPIO_EXTI_Callback+0x64>)
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	701a      	strb	r2, [r3, #0]
    }
  }


  if (GPIO_Pin == GAME_BUTTON1_Pin) {
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b40      	cmp	r3, #64	; 0x40
 8008cc8:	d119      	bne.n	8008cfe <HAL_GPIO_EXTI_Callback+0x56>


    unsigned int button_press_time = HAL_GetTick();
 8008cca:	f7f7 fc3f 	bl	800054c <HAL_GetTick>
 8008cce:	60f8      	str	r0, [r7, #12]

    reaction_time_1 = button_press_time - game_start_time;
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <HAL_GPIO_EXTI_Callback+0x68>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	4a0e      	ldr	r2, [pc, #56]	; (8008d14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8008cda:	6013      	str	r3, [r2, #0]

    if (game_state == STEADY) {
 8008cdc:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <HAL_GPIO_EXTI_Callback+0x64>)
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d105      	bne.n	8008cf0 <HAL_GPIO_EXTI_Callback+0x48>
    reaction_time_1 = 0;
 8008ce4:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <HAL_GPIO_EXTI_Callback+0x6c>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	601a      	str	r2, [r3, #0]
    game_state = INVALID;
 8008cea:	4b08      	ldr	r3, [pc, #32]	; (8008d0c <HAL_GPIO_EXTI_Callback+0x64>)
 8008cec:	2204      	movs	r2, #4
 8008cee:	701a      	strb	r2, [r3, #0]

    }


    if (game_state == GO){
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <HAL_GPIO_EXTI_Callback+0x64>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d102      	bne.n	8008cfe <HAL_GPIO_EXTI_Callback+0x56>

      game_state = VALID;
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <HAL_GPIO_EXTI_Callback+0x64>)
 8008cfa:	2203      	movs	r2, #3
 8008cfc:	701a      	strb	r2, [r3, #0]
    }

  }

}
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000024 	.word	0x20000024
 8008d0c:	20000028 	.word	0x20000028
 8008d10:	20000370 	.word	0x20000370
 8008d14:	2000049c 	.word	0x2000049c

08008d18 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a04      	ldr	r2, [pc, #16]	; (8008d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d101      	bne.n	8008d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008d2a:	f7f7 fbfb 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	40002000 	.word	0x40002000

08008d3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008d40:	bf00      	nop
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
	...

08008d4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008d52:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <HAL_MspInit+0x44>)
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	4a0e      	ldr	r2, [pc, #56]	; (8008d90 <HAL_MspInit+0x44>)
 8008d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <HAL_MspInit+0x44>)
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d66:	607b      	str	r3, [r7, #4]
 8008d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d6a:	4b09      	ldr	r3, [pc, #36]	; (8008d90 <HAL_MspInit+0x44>)
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6e:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <HAL_MspInit+0x44>)
 8008d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d74:	6453      	str	r3, [r2, #68]	; 0x44
 8008d76:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <HAL_MspInit+0x44>)
 8008d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40023800 	.word	0x40023800

08008d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08a      	sub	sp, #40	; 0x28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d9c:	f107 0314 	add.w	r3, r7, #20
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	609a      	str	r2, [r3, #8]
 8008da8:	60da      	str	r2, [r3, #12]
 8008daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a21      	ldr	r2, [pc, #132]	; (8008e38 <HAL_ADC_MspInit+0xa4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d13b      	bne.n	8008e2e <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008db6:	4b21      	ldr	r3, [pc, #132]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dba:	4a20      	ldr	r2, [pc, #128]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8008dc2:	4b1e      	ldr	r3, [pc, #120]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dca:	613b      	str	r3, [r7, #16]
 8008dcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008dce:	4b1b      	ldr	r3, [pc, #108]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd2:	4a1a      	ldr	r2, [pc, #104]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008dd4:	f043 0320 	orr.w	r3, r3, #32
 8008dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008dda:	4b18      	ldr	r3, [pc, #96]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008de6:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dea:	4a14      	ldr	r2, [pc, #80]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008dec:	f043 0301 	orr.w	r3, r3, #1
 8008df0:	6313      	str	r3, [r2, #48]	; 0x30
 8008df2:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <HAL_ADC_MspInit+0xa8>)
 8008df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	60bb      	str	r3, [r7, #8]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PF6     ------> ADC3_IN4
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A5_Pin;
 8008dfe:	2340      	movs	r3, #64	; 0x40
 8008e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e02:	2303      	movs	r3, #3
 8008e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A5_GPIO_Port, &GPIO_InitStruct);
 8008e0a:	f107 0314 	add.w	r3, r7, #20
 8008e0e:	4619      	mov	r1, r3
 8008e10:	480b      	ldr	r0, [pc, #44]	; (8008e40 <HAL_ADC_MspInit+0xac>)
 8008e12:	f7f8 fa65 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8008e16:	2301      	movs	r3, #1
 8008e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8008e22:	f107 0314 	add.w	r3, r7, #20
 8008e26:	4619      	mov	r1, r3
 8008e28:	4806      	ldr	r0, [pc, #24]	; (8008e44 <HAL_ADC_MspInit+0xb0>)
 8008e2a:	f7f8 fa59 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8008e2e:	bf00      	nop
 8008e30:	3728      	adds	r7, #40	; 0x28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	40012200 	.word	0x40012200
 8008e3c:	40023800 	.word	0x40023800
 8008e40:	40021400 	.word	0x40021400
 8008e44:	40020000 	.word	0x40020000

08008e48 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a0a      	ldr	r2, [pc, #40]	; (8008e80 <HAL_CRC_MspInit+0x38>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d10b      	bne.n	8008e72 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <HAL_CRC_MspInit+0x3c>)
 8008e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5e:	4a09      	ldr	r2, [pc, #36]	; (8008e84 <HAL_CRC_MspInit+0x3c>)
 8008e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e64:	6313      	str	r3, [r2, #48]	; 0x30
 8008e66:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <HAL_CRC_MspInit+0x3c>)
 8008e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40023000 	.word	0x40023000
 8008e84:	40023800 	.word	0x40023800

08008e88 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08e      	sub	sp, #56	; 0x38
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	609a      	str	r2, [r3, #8]
 8008e9c:	60da      	str	r2, [r3, #12]
 8008e9e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a50      	ldr	r2, [pc, #320]	; (8008fe8 <HAL_DCMI_MspInit+0x160>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	f040 809a 	bne.w	8008fe0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8008eac:	4b4f      	ldr	r3, [pc, #316]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb0:	4a4e      	ldr	r2, [pc, #312]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008eb2:	f043 0301 	orr.w	r3, r3, #1
 8008eb6:	6353      	str	r3, [r2, #52]	; 0x34
 8008eb8:	4b4c      	ldr	r3, [pc, #304]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	623b      	str	r3, [r7, #32]
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008ec4:	4b49      	ldr	r3, [pc, #292]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	4a48      	ldr	r2, [pc, #288]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008eca:	f043 0310 	orr.w	r3, r3, #16
 8008ece:	6313      	str	r3, [r2, #48]	; 0x30
 8008ed0:	4b46      	ldr	r3, [pc, #280]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008edc:	4b43      	ldr	r3, [pc, #268]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee0:	4a42      	ldr	r2, [pc, #264]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008ee2:	f043 0308 	orr.w	r3, r3, #8
 8008ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8008ee8:	4b40      	ldr	r3, [pc, #256]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eec:	f003 0308 	and.w	r3, r3, #8
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008ef4:	4b3d      	ldr	r3, [pc, #244]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	4a3c      	ldr	r2, [pc, #240]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efe:	6313      	str	r3, [r2, #48]	; 0x30
 8008f00:	4b3a      	ldr	r3, [pc, #232]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f08:	617b      	str	r3, [r7, #20]
 8008f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8008f0c:	4b37      	ldr	r3, [pc, #220]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	4a36      	ldr	r2, [pc, #216]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f16:	6313      	str	r3, [r2, #48]	; 0x30
 8008f18:	4b34      	ldr	r3, [pc, #208]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f20:	613b      	str	r3, [r7, #16]
 8008f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f24:	4b31      	ldr	r3, [pc, #196]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f28:	4a30      	ldr	r2, [pc, #192]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008f2a:	f043 0301 	orr.w	r3, r3, #1
 8008f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8008f30:	4b2e      	ldr	r3, [pc, #184]	; (8008fec <HAL_DCMI_MspInit+0x164>)
 8008f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8008f3c:	2360      	movs	r3, #96	; 0x60
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f40:	2302      	movs	r3, #2
 8008f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008f4c:	230d      	movs	r3, #13
 8008f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f54:	4619      	mov	r1, r3
 8008f56:	4826      	ldr	r0, [pc, #152]	; (8008ff0 <HAL_DCMI_MspInit+0x168>)
 8008f58:	f7f8 f9c2 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f60:	2302      	movs	r3, #2
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008f6c:	230d      	movs	r3, #13
 8008f6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8008f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f74:	4619      	mov	r1, r3
 8008f76:	481f      	ldr	r0, [pc, #124]	; (8008ff4 <HAL_DCMI_MspInit+0x16c>)
 8008f78:	f7f8 f9b2 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8008f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f82:	2302      	movs	r3, #2
 8008f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008f8e:	230d      	movs	r3, #13
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8008f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f96:	4619      	mov	r1, r3
 8008f98:	4817      	ldr	r0, [pc, #92]	; (8008ff8 <HAL_DCMI_MspInit+0x170>)
 8008f9a:	f7f8 f9a1 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8008f9e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fac:	2300      	movs	r3, #0
 8008fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008fb0:	230d      	movs	r3, #13
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4810      	ldr	r0, [pc, #64]	; (8008ffc <HAL_DCMI_MspInit+0x174>)
 8008fbc:	f7f8 f990 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8008fc0:	2350      	movs	r3, #80	; 0x50
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008fd0:	230d      	movs	r3, #13
 8008fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4809      	ldr	r0, [pc, #36]	; (8009000 <HAL_DCMI_MspInit+0x178>)
 8008fdc:	f7f8 f980 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8008fe0:	bf00      	nop
 8008fe2:	3738      	adds	r7, #56	; 0x38
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	50050000 	.word	0x50050000
 8008fec:	40023800 	.word	0x40023800
 8008ff0:	40021000 	.word	0x40021000
 8008ff4:	40020c00 	.word	0x40020c00
 8008ff8:	40021800 	.word	0x40021800
 8008ffc:	40021c00 	.word	0x40021c00
 8009000:	40020000 	.word	0x40020000

08009004 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a0d      	ldr	r2, [pc, #52]	; (8009048 <HAL_DMA2D_MspInit+0x44>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d113      	bne.n	800903e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009016:	4b0d      	ldr	r3, [pc, #52]	; (800904c <HAL_DMA2D_MspInit+0x48>)
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	4a0c      	ldr	r2, [pc, #48]	; (800904c <HAL_DMA2D_MspInit+0x48>)
 800901c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009020:	6313      	str	r3, [r2, #48]	; 0x30
 8009022:	4b0a      	ldr	r3, [pc, #40]	; (800904c <HAL_DMA2D_MspInit+0x48>)
 8009024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	205a      	movs	r0, #90	; 0x5a
 8009034:	f7f7 fde2 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8009038:	205a      	movs	r0, #90	; 0x5a
 800903a:	f7f7 fdfb 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800903e:	bf00      	nop
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	4002b000 	.word	0x4002b000
 800904c:	40023800 	.word	0x40023800

08009050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08c      	sub	sp, #48	; 0x30
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009058:	f107 031c 	add.w	r3, r7, #28
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	609a      	str	r2, [r3, #8]
 8009064:	60da      	str	r2, [r3, #12]
 8009066:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a2f      	ldr	r2, [pc, #188]	; (800912c <HAL_I2C_MspInit+0xdc>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d129      	bne.n	80090c6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009072:	4b2f      	ldr	r3, [pc, #188]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009076:	4a2e      	ldr	r2, [pc, #184]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 8009078:	f043 0302 	orr.w	r3, r3, #2
 800907c:	6313      	str	r3, [r2, #48]	; 0x30
 800907e:	4b2c      	ldr	r3, [pc, #176]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	61bb      	str	r3, [r7, #24]
 8009088:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800908a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800908e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009090:	2312      	movs	r3, #18
 8009092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009094:	2301      	movs	r3, #1
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009098:	2300      	movs	r3, #0
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800909c:	2304      	movs	r3, #4
 800909e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090a0:	f107 031c 	add.w	r3, r7, #28
 80090a4:	4619      	mov	r1, r3
 80090a6:	4823      	ldr	r0, [pc, #140]	; (8009134 <HAL_I2C_MspInit+0xe4>)
 80090a8:	f7f8 f91a 	bl	80012e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80090ac:	4b20      	ldr	r3, [pc, #128]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 80090b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090b6:	6413      	str	r3, [r2, #64]	; 0x40
 80090b8:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80090c4:	e02d      	b.n	8009122 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1b      	ldr	r2, [pc, #108]	; (8009138 <HAL_I2C_MspInit+0xe8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d128      	bne.n	8009122 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80090d0:	4b17      	ldr	r3, [pc, #92]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 80090d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d4:	4a16      	ldr	r2, [pc, #88]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 80090d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090da:	6313      	str	r3, [r2, #48]	; 0x30
 80090dc:	4b14      	ldr	r3, [pc, #80]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 80090de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e4:	613b      	str	r3, [r7, #16]
 80090e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80090e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80090ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80090ee:	2312      	movs	r3, #18
 80090f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80090f2:	2301      	movs	r3, #1
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090f6:	2303      	movs	r3, #3
 80090f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80090fa:	2304      	movs	r3, #4
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80090fe:	f107 031c 	add.w	r3, r7, #28
 8009102:	4619      	mov	r1, r3
 8009104:	480d      	ldr	r0, [pc, #52]	; (800913c <HAL_I2C_MspInit+0xec>)
 8009106:	f7f8 f8eb 	bl	80012e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800910a:	4b09      	ldr	r3, [pc, #36]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	4a08      	ldr	r2, [pc, #32]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 8009110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009114:	6413      	str	r3, [r2, #64]	; 0x40
 8009116:	4b06      	ldr	r3, [pc, #24]	; (8009130 <HAL_I2C_MspInit+0xe0>)
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
}
 8009122:	bf00      	nop
 8009124:	3730      	adds	r7, #48	; 0x30
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	40005400 	.word	0x40005400
 8009130:	40023800 	.word	0x40023800
 8009134:	40020400 	.word	0x40020400
 8009138:	40005c00 	.word	0x40005c00
 800913c:	40021c00 	.word	0x40021c00

08009140 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08e      	sub	sp, #56	; 0x38
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	605a      	str	r2, [r3, #4]
 8009152:	609a      	str	r2, [r3, #8]
 8009154:	60da      	str	r2, [r3, #12]
 8009156:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a55      	ldr	r2, [pc, #340]	; (80092b4 <HAL_LTDC_MspInit+0x174>)
 800915e:	4293      	cmp	r3, r2
 8009160:	f040 80a3 	bne.w	80092aa <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009164:	4b54      	ldr	r3, [pc, #336]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 8009166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009168:	4a53      	ldr	r2, [pc, #332]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 800916a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800916e:	6453      	str	r3, [r2, #68]	; 0x44
 8009170:	4b51      	ldr	r3, [pc, #324]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 8009172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009178:	623b      	str	r3, [r7, #32]
 800917a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800917c:	4b4e      	ldr	r3, [pc, #312]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	4a4d      	ldr	r2, [pc, #308]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 8009182:	f043 0310 	orr.w	r3, r3, #16
 8009186:	6313      	str	r3, [r2, #48]	; 0x30
 8009188:	4b4b      	ldr	r3, [pc, #300]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 800918a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918c:	f003 0310 	and.w	r3, r3, #16
 8009190:	61fb      	str	r3, [r7, #28]
 8009192:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009194:	4b48      	ldr	r3, [pc, #288]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 8009196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009198:	4a47      	ldr	r2, [pc, #284]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 800919a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800919e:	6313      	str	r3, [r2, #48]	; 0x30
 80091a0:	4b45      	ldr	r3, [pc, #276]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091a8:	61bb      	str	r3, [r7, #24]
 80091aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80091ac:	4b42      	ldr	r3, [pc, #264]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	4a41      	ldr	r2, [pc, #260]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091b6:	6313      	str	r3, [r2, #48]	; 0x30
 80091b8:	4b3f      	ldr	r3, [pc, #252]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80091c4:	4b3c      	ldr	r3, [pc, #240]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c8:	4a3b      	ldr	r2, [pc, #236]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ce:	6313      	str	r3, [r2, #48]	; 0x30
 80091d0:	4b39      	ldr	r3, [pc, #228]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80091dc:	4b36      	ldr	r3, [pc, #216]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e0:	4a35      	ldr	r2, [pc, #212]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091e6:	6313      	str	r3, [r2, #48]	; 0x30
 80091e8:	4b33      	ldr	r3, [pc, #204]	; (80092b8 <HAL_LTDC_MspInit+0x178>)
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80091f4:	2310      	movs	r3, #16
 80091f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091f8:	2302      	movs	r3, #2
 80091fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091fc:	2300      	movs	r3, #0
 80091fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009200:	2300      	movs	r3, #0
 8009202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009204:	230e      	movs	r3, #14
 8009206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8009208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800920c:	4619      	mov	r1, r3
 800920e:	482b      	ldr	r0, [pc, #172]	; (80092bc <HAL_LTDC_MspInit+0x17c>)
 8009210:	f7f8 f866 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8009214:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8009218:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800921a:	2302      	movs	r3, #2
 800921c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800921e:	2300      	movs	r3, #0
 8009220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009222:	2300      	movs	r3, #0
 8009224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009226:	230e      	movs	r3, #14
 8009228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800922a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800922e:	4619      	mov	r1, r3
 8009230:	4823      	ldr	r0, [pc, #140]	; (80092c0 <HAL_LTDC_MspInit+0x180>)
 8009232:	f7f8 f855 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8009236:	23f7      	movs	r3, #247	; 0xf7
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800923a:	2302      	movs	r3, #2
 800923c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800923e:	2300      	movs	r3, #0
 8009240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009242:	2300      	movs	r3, #0
 8009244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009246:	230e      	movs	r3, #14
 8009248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800924a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800924e:	4619      	mov	r1, r3
 8009250:	481c      	ldr	r0, [pc, #112]	; (80092c4 <HAL_LTDC_MspInit+0x184>)
 8009252:	f7f8 f845 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8009256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800925c:	2302      	movs	r3, #2
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009260:	2300      	movs	r3, #0
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009264:	2300      	movs	r3, #0
 8009266:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009268:	2309      	movs	r3, #9
 800926a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800926c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009270:	4619      	mov	r1, r3
 8009272:	4815      	ldr	r0, [pc, #84]	; (80092c8 <HAL_LTDC_MspInit+0x188>)
 8009274:	f7f8 f834 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8009278:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800927c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800927e:	2302      	movs	r3, #2
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009282:	2300      	movs	r3, #0
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009286:	2300      	movs	r3, #0
 8009288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800928a:	230e      	movs	r3, #14
 800928c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800928e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009292:	4619      	mov	r1, r3
 8009294:	480d      	ldr	r0, [pc, #52]	; (80092cc <HAL_LTDC_MspInit+0x18c>)
 8009296:	f7f8 f823 	bl	80012e0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800929a:	2200      	movs	r2, #0
 800929c:	2100      	movs	r1, #0
 800929e:	2058      	movs	r0, #88	; 0x58
 80092a0:	f7f7 fcac 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80092a4:	2058      	movs	r0, #88	; 0x58
 80092a6:	f7f7 fcc5 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80092aa:	bf00      	nop
 80092ac:	3738      	adds	r7, #56	; 0x38
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	40016800 	.word	0x40016800
 80092b8:	40023800 	.word	0x40023800
 80092bc:	40021000 	.word	0x40021000
 80092c0:	40022400 	.word	0x40022400
 80092c4:	40022800 	.word	0x40022800
 80092c8:	40021800 	.word	0x40021800
 80092cc:	40022000 	.word	0x40022000

080092d0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08c      	sub	sp, #48	; 0x30
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092d8:	f107 031c 	add.w	r3, r7, #28
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	605a      	str	r2, [r3, #4]
 80092e2:	609a      	str	r2, [r3, #8]
 80092e4:	60da      	str	r2, [r3, #12]
 80092e6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a3b      	ldr	r2, [pc, #236]	; (80093dc <HAL_QSPI_MspInit+0x10c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d170      	bne.n	80093d4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80092f2:	4b3b      	ldr	r3, [pc, #236]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 80092f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f6:	4a3a      	ldr	r2, [pc, #232]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 80092f8:	f043 0302 	orr.w	r3, r3, #2
 80092fc:	6393      	str	r3, [r2, #56]	; 0x38
 80092fe:	4b38      	ldr	r3, [pc, #224]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800930a:	4b35      	ldr	r3, [pc, #212]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	4a34      	ldr	r2, [pc, #208]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 8009310:	f043 0310 	orr.w	r3, r3, #16
 8009314:	6313      	str	r3, [r2, #48]	; 0x30
 8009316:	4b32      	ldr	r3, [pc, #200]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	f003 0310 	and.w	r3, r3, #16
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009322:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	4a2e      	ldr	r2, [pc, #184]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 8009328:	f043 0302 	orr.w	r3, r3, #2
 800932c:	6313      	str	r3, [r2, #48]	; 0x30
 800932e:	4b2c      	ldr	r3, [pc, #176]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	613b      	str	r3, [r7, #16]
 8009338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800933a:	4b29      	ldr	r3, [pc, #164]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 800933c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933e:	4a28      	ldr	r2, [pc, #160]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 8009340:	f043 0308 	orr.w	r3, r3, #8
 8009344:	6313      	str	r3, [r2, #48]	; 0x30
 8009346:	4b26      	ldr	r3, [pc, #152]	; (80093e0 <HAL_QSPI_MspInit+0x110>)
 8009348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8009352:	2304      	movs	r3, #4
 8009354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009356:	2302      	movs	r3, #2
 8009358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800935a:	2300      	movs	r3, #0
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800935e:	2303      	movs	r3, #3
 8009360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009362:	2309      	movs	r3, #9
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8009366:	f107 031c 	add.w	r3, r7, #28
 800936a:	4619      	mov	r1, r3
 800936c:	481d      	ldr	r0, [pc, #116]	; (80093e4 <HAL_QSPI_MspInit+0x114>)
 800936e:	f7f7 ffb7 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8009372:	2340      	movs	r3, #64	; 0x40
 8009374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009376:	2302      	movs	r3, #2
 8009378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937a:	2300      	movs	r3, #0
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800937e:	2303      	movs	r3, #3
 8009380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8009382:	230a      	movs	r3, #10
 8009384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8009386:	f107 031c 	add.w	r3, r7, #28
 800938a:	4619      	mov	r1, r3
 800938c:	4816      	ldr	r0, [pc, #88]	; (80093e8 <HAL_QSPI_MspInit+0x118>)
 800938e:	f7f7 ffa7 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009392:	2304      	movs	r3, #4
 8009394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009396:	2302      	movs	r3, #2
 8009398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800939a:	2300      	movs	r3, #0
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800939e:	2303      	movs	r3, #3
 80093a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80093a2:	2309      	movs	r3, #9
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093a6:	f107 031c 	add.w	r3, r7, #28
 80093aa:	4619      	mov	r1, r3
 80093ac:	480e      	ldr	r0, [pc, #56]	; (80093e8 <HAL_QSPI_MspInit+0x118>)
 80093ae:	f7f7 ff97 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80093b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80093b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093b8:	2302      	movs	r3, #2
 80093ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093bc:	2300      	movs	r3, #0
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093c0:	2303      	movs	r3, #3
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80093c4:	2309      	movs	r3, #9
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093c8:	f107 031c 	add.w	r3, r7, #28
 80093cc:	4619      	mov	r1, r3
 80093ce:	4807      	ldr	r0, [pc, #28]	; (80093ec <HAL_QSPI_MspInit+0x11c>)
 80093d0:	f7f7 ff86 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80093d4:	bf00      	nop
 80093d6:	3730      	adds	r7, #48	; 0x30
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	a0001000 	.word	0xa0001000
 80093e0:	40023800 	.word	0x40023800
 80093e4:	40021000 	.word	0x40021000
 80093e8:	40020400 	.word	0x40020400
 80093ec:	40020c00 	.word	0x40020c00

080093f0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a0a      	ldr	r2, [pc, #40]	; (8009428 <HAL_RNG_MspInit+0x38>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d10b      	bne.n	800941a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8009402:	4b0a      	ldr	r3, [pc, #40]	; (800942c <HAL_RNG_MspInit+0x3c>)
 8009404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009406:	4a09      	ldr	r2, [pc, #36]	; (800942c <HAL_RNG_MspInit+0x3c>)
 8009408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940c:	6353      	str	r3, [r2, #52]	; 0x34
 800940e:	4b07      	ldr	r3, [pc, #28]	; (800942c <HAL_RNG_MspInit+0x3c>)
 8009410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800941a:	bf00      	nop
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	50060800 	.word	0x50060800
 800942c:	40023800 	.word	0x40023800

08009430 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a07      	ldr	r2, [pc, #28]	; (800945c <HAL_RTC_MspInit+0x2c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d105      	bne.n	800944e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <HAL_RTC_MspInit+0x30>)
 8009444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009446:	4a06      	ldr	r2, [pc, #24]	; (8009460 <HAL_RTC_MspInit+0x30>)
 8009448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800944c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	40002800 	.word	0x40002800
 8009460:	40023800 	.word	0x40023800

08009464 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08a      	sub	sp, #40	; 0x28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800946c:	f107 0314 	add.w	r3, r7, #20
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	609a      	str	r2, [r3, #8]
 8009478:	60da      	str	r2, [r3, #12]
 800947a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8009484:	d127      	bne.n	80094d6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8009486:	4b16      	ldr	r3, [pc, #88]	; (80094e0 <HAL_SPDIFRX_MspInit+0x7c>)
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	4a15      	ldr	r2, [pc, #84]	; (80094e0 <HAL_SPDIFRX_MspInit+0x7c>)
 800948c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009490:	6413      	str	r3, [r2, #64]	; 0x40
 8009492:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <HAL_SPDIFRX_MspInit+0x7c>)
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800949e:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <HAL_SPDIFRX_MspInit+0x7c>)
 80094a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a2:	4a0f      	ldr	r2, [pc, #60]	; (80094e0 <HAL_SPDIFRX_MspInit+0x7c>)
 80094a4:	f043 0308 	orr.w	r3, r3, #8
 80094a8:	6313      	str	r3, [r2, #48]	; 0x30
 80094aa:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <HAL_SPDIFRX_MspInit+0x7c>)
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80094b6:	2380      	movs	r3, #128	; 0x80
 80094b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094ba:	2302      	movs	r3, #2
 80094bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094be:	2300      	movs	r3, #0
 80094c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094c2:	2300      	movs	r3, #0
 80094c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80094c6:	2308      	movs	r3, #8
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80094ca:	f107 0314 	add.w	r3, r7, #20
 80094ce:	4619      	mov	r1, r3
 80094d0:	4804      	ldr	r0, [pc, #16]	; (80094e4 <HAL_SPDIFRX_MspInit+0x80>)
 80094d2:	f7f7 ff05 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80094d6:	bf00      	nop
 80094d8:	3728      	adds	r7, #40	; 0x28
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	40023800 	.word	0x40023800
 80094e4:	40020c00 	.word	0x40020c00

080094e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b08a      	sub	sp, #40	; 0x28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094f0:	f107 0314 	add.w	r3, r7, #20
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	605a      	str	r2, [r3, #4]
 80094fa:	609a      	str	r2, [r3, #8]
 80094fc:	60da      	str	r2, [r3, #12]
 80094fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a25      	ldr	r2, [pc, #148]	; (800959c <HAL_SPI_MspInit+0xb4>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d144      	bne.n	8009594 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800950a:	4b25      	ldr	r3, [pc, #148]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	4a24      	ldr	r2, [pc, #144]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 8009510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009514:	6413      	str	r3, [r2, #64]	; 0x40
 8009516:	4b22      	ldr	r3, [pc, #136]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 8009518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800951e:	613b      	str	r3, [r7, #16]
 8009520:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009522:	4b1f      	ldr	r3, [pc, #124]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	4a1e      	ldr	r2, [pc, #120]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 8009528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800952c:	6313      	str	r3, [r2, #48]	; 0x30
 800952e:	4b1c      	ldr	r3, [pc, #112]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800953a:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	4a18      	ldr	r2, [pc, #96]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 8009540:	f043 0302 	orr.w	r3, r3, #2
 8009544:	6313      	str	r3, [r2, #48]	; 0x30
 8009546:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <HAL_SPI_MspInit+0xb8>)
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	f003 0302 	and.w	r3, r3, #2
 800954e:	60bb      	str	r3, [r7, #8]
 8009550:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8009552:	2302      	movs	r3, #2
 8009554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009556:	2302      	movs	r3, #2
 8009558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800955a:	2300      	movs	r3, #0
 800955c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800955e:	2300      	movs	r3, #0
 8009560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009562:	2305      	movs	r3, #5
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8009566:	f107 0314 	add.w	r3, r7, #20
 800956a:	4619      	mov	r1, r3
 800956c:	480d      	ldr	r0, [pc, #52]	; (80095a4 <HAL_SPI_MspInit+0xbc>)
 800956e:	f7f7 feb7 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8009572:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009578:	2302      	movs	r3, #2
 800957a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800957c:	2300      	movs	r3, #0
 800957e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009580:	2300      	movs	r3, #0
 8009582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009584:	2305      	movs	r3, #5
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009588:	f107 0314 	add.w	r3, r7, #20
 800958c:	4619      	mov	r1, r3
 800958e:	4806      	ldr	r0, [pc, #24]	; (80095a8 <HAL_SPI_MspInit+0xc0>)
 8009590:	f7f7 fea6 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009594:	bf00      	nop
 8009596:	3728      	adds	r7, #40	; 0x28
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40003800 	.word	0x40003800
 80095a0:	40023800 	.word	0x40023800
 80095a4:	40022000 	.word	0x40022000
 80095a8:	40020400 	.word	0x40020400

080095ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a31      	ldr	r2, [pc, #196]	; (8009680 <HAL_TIM_Base_MspInit+0xd4>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d10c      	bne.n	80095d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80095be:	4b31      	ldr	r3, [pc, #196]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 80095c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c2:	4a30      	ldr	r2, [pc, #192]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 80095c4:	f043 0301 	orr.w	r3, r3, #1
 80095c8:	6453      	str	r3, [r2, #68]	; 0x44
 80095ca:	4b2e      	ldr	r3, [pc, #184]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 80095cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	61fb      	str	r3, [r7, #28]
 80095d4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80095d6:	e04e      	b.n	8009676 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e0:	d10c      	bne.n	80095fc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095e2:	4b28      	ldr	r3, [pc, #160]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	4a27      	ldr	r2, [pc, #156]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 80095e8:	f043 0301 	orr.w	r3, r3, #1
 80095ec:	6413      	str	r3, [r2, #64]	; 0x40
 80095ee:	4b25      	ldr	r3, [pc, #148]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	61bb      	str	r3, [r7, #24]
 80095f8:	69bb      	ldr	r3, [r7, #24]
}
 80095fa:	e03c      	b.n	8009676 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a21      	ldr	r2, [pc, #132]	; (8009688 <HAL_TIM_Base_MspInit+0xdc>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d10c      	bne.n	8009620 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009606:	4b1f      	ldr	r3, [pc, #124]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	4a1e      	ldr	r2, [pc, #120]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 800960c:	f043 0302 	orr.w	r3, r3, #2
 8009610:	6413      	str	r3, [r2, #64]	; 0x40
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 8009614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	697b      	ldr	r3, [r7, #20]
}
 800961e:	e02a      	b.n	8009676 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a19      	ldr	r2, [pc, #100]	; (800968c <HAL_TIM_Base_MspInit+0xe0>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d10c      	bne.n	8009644 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800962a:	4b16      	ldr	r3, [pc, #88]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	4a15      	ldr	r2, [pc, #84]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 8009630:	f043 0308 	orr.w	r3, r3, #8
 8009634:	6413      	str	r3, [r2, #64]	; 0x40
 8009636:	4b13      	ldr	r3, [pc, #76]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	693b      	ldr	r3, [r7, #16]
}
 8009642:	e018      	b.n	8009676 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a11      	ldr	r2, [pc, #68]	; (8009690 <HAL_TIM_Base_MspInit+0xe4>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d113      	bne.n	8009676 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800964e:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 8009650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009652:	4a0c      	ldr	r2, [pc, #48]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 8009654:	f043 0302 	orr.w	r3, r3, #2
 8009658:	6453      	str	r3, [r2, #68]	; 0x44
 800965a:	4b0a      	ldr	r3, [pc, #40]	; (8009684 <HAL_TIM_Base_MspInit+0xd8>)
 800965c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8009666:	2200      	movs	r2, #0
 8009668:	2100      	movs	r1, #0
 800966a:	202d      	movs	r0, #45	; 0x2d
 800966c:	f7f7 fac6 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8009670:	202d      	movs	r0, #45	; 0x2d
 8009672:	f7f7 fadf 	bl	8000c34 <HAL_NVIC_EnableIRQ>
}
 8009676:	bf00      	nop
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	40010000 	.word	0x40010000
 8009684:	40023800 	.word	0x40023800
 8009688:	40000400 	.word	0x40000400
 800968c:	40000c00 	.word	0x40000c00
 8009690:	40010400 	.word	0x40010400

08009694 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0a      	ldr	r2, [pc, #40]	; (80096cc <HAL_TIM_PWM_MspInit+0x38>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d10b      	bne.n	80096be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80096a6:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	4a09      	ldr	r2, [pc, #36]	; (80096d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80096ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b0:	6413      	str	r3, [r2, #64]	; 0x40
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80096b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80096be:	bf00      	nop
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	40001800 	.word	0x40001800
 80096d0:	40023800 	.word	0x40023800

080096d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	; 0x30
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096dc:	f107 031c 	add.w	r3, r7, #28
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	609a      	str	r2, [r3, #8]
 80096e8:	60da      	str	r2, [r3, #12]
 80096ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a56      	ldr	r2, [pc, #344]	; (800984c <HAL_TIM_MspPostInit+0x178>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d11d      	bne.n	8009732 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096f6:	4b56      	ldr	r3, [pc, #344]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	4a55      	ldr	r2, [pc, #340]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 80096fc:	f043 0301 	orr.w	r3, r3, #1
 8009700:	6313      	str	r3, [r2, #48]	; 0x30
 8009702:	4b53      	ldr	r3, [pc, #332]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	61bb      	str	r3, [r7, #24]
 800970c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800970e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009714:	2302      	movs	r3, #2
 8009716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009718:	2300      	movs	r3, #0
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800971c:	2300      	movs	r3, #0
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009720:	2301      	movs	r3, #1
 8009722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8009724:	f107 031c 	add.w	r3, r7, #28
 8009728:	4619      	mov	r1, r3
 800972a:	484a      	ldr	r0, [pc, #296]	; (8009854 <HAL_TIM_MspPostInit+0x180>)
 800972c:	f7f7 fdd8 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8009730:	e087      	b.n	8009842 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800973a:	d11d      	bne.n	8009778 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800973c:	4b44      	ldr	r3, [pc, #272]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	4a43      	ldr	r2, [pc, #268]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	6313      	str	r3, [r2, #48]	; 0x30
 8009748:	4b41      	ldr	r3, [pc, #260]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 800974a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8009754:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800975a:	2302      	movs	r3, #2
 800975c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800975e:	2300      	movs	r3, #0
 8009760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009762:	2300      	movs	r3, #0
 8009764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009766:	2301      	movs	r3, #1
 8009768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800976a:	f107 031c 	add.w	r3, r7, #28
 800976e:	4619      	mov	r1, r3
 8009770:	4838      	ldr	r0, [pc, #224]	; (8009854 <HAL_TIM_MspPostInit+0x180>)
 8009772:	f7f7 fdb5 	bl	80012e0 <HAL_GPIO_Init>
}
 8009776:	e064      	b.n	8009842 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a36      	ldr	r2, [pc, #216]	; (8009858 <HAL_TIM_MspPostInit+0x184>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d11c      	bne.n	80097bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009782:	4b33      	ldr	r3, [pc, #204]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 8009784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009786:	4a32      	ldr	r2, [pc, #200]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 8009788:	f043 0302 	orr.w	r3, r3, #2
 800978c:	6313      	str	r3, [r2, #48]	; 0x30
 800978e:	4b30      	ldr	r3, [pc, #192]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 8009790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800979a:	2310      	movs	r3, #16
 800979c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800979e:	2302      	movs	r3, #2
 80097a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097a6:	2300      	movs	r3, #0
 80097a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80097aa:	2302      	movs	r3, #2
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80097ae:	f107 031c 	add.w	r3, r7, #28
 80097b2:	4619      	mov	r1, r3
 80097b4:	4829      	ldr	r0, [pc, #164]	; (800985c <HAL_TIM_MspPostInit+0x188>)
 80097b6:	f7f7 fd93 	bl	80012e0 <HAL_GPIO_Init>
}
 80097ba:	e042      	b.n	8009842 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a27      	ldr	r2, [pc, #156]	; (8009860 <HAL_TIM_MspPostInit+0x18c>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d11c      	bne.n	8009800 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80097c6:	4b22      	ldr	r3, [pc, #136]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ca:	4a21      	ldr	r2, [pc, #132]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 80097cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097d0:	6313      	str	r3, [r2, #48]	; 0x30
 80097d2:	4b1f      	ldr	r3, [pc, #124]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 80097d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80097de:	2301      	movs	r3, #1
 80097e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e2:	2302      	movs	r3, #2
 80097e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097ea:	2300      	movs	r3, #0
 80097ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80097ee:	2302      	movs	r3, #2
 80097f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80097f2:	f107 031c 	add.w	r3, r7, #28
 80097f6:	4619      	mov	r1, r3
 80097f8:	481a      	ldr	r0, [pc, #104]	; (8009864 <HAL_TIM_MspPostInit+0x190>)
 80097fa:	f7f7 fd71 	bl	80012e0 <HAL_GPIO_Init>
}
 80097fe:	e020      	b.n	8009842 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a18      	ldr	r2, [pc, #96]	; (8009868 <HAL_TIM_MspPostInit+0x194>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d11b      	bne.n	8009842 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800980a:	4b11      	ldr	r3, [pc, #68]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 800980c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980e:	4a10      	ldr	r2, [pc, #64]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 8009810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009814:	6313      	str	r3, [r2, #48]	; 0x30
 8009816:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <HAL_TIM_MspPostInit+0x17c>)
 8009818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800981e:	60bb      	str	r3, [r7, #8]
 8009820:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8009822:	2340      	movs	r3, #64	; 0x40
 8009824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009826:	2302      	movs	r3, #2
 8009828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800982a:	2300      	movs	r3, #0
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800982e:	2300      	movs	r3, #0
 8009830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8009832:	2309      	movs	r3, #9
 8009834:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8009836:	f107 031c 	add.w	r3, r7, #28
 800983a:	4619      	mov	r1, r3
 800983c:	480b      	ldr	r0, [pc, #44]	; (800986c <HAL_TIM_MspPostInit+0x198>)
 800983e:	f7f7 fd4f 	bl	80012e0 <HAL_GPIO_Init>
}
 8009842:	bf00      	nop
 8009844:	3730      	adds	r7, #48	; 0x30
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	40010000 	.word	0x40010000
 8009850:	40023800 	.word	0x40023800
 8009854:	40020000 	.word	0x40020000
 8009858:	40000400 	.word	0x40000400
 800985c:	40020400 	.word	0x40020400
 8009860:	40000c00 	.word	0x40000c00
 8009864:	40022000 	.word	0x40022000
 8009868:	40001800 	.word	0x40001800
 800986c:	40021c00 	.word	0x40021c00

08009870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08a      	sub	sp, #40	; 0x28
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009878:	f107 0314 	add.w	r3, r7, #20
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	605a      	str	r2, [r3, #4]
 8009882:	609a      	str	r2, [r3, #8]
 8009884:	60da      	str	r2, [r3, #12]
 8009886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a25      	ldr	r2, [pc, #148]	; (8009924 <HAL_UART_MspInit+0xb4>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d144      	bne.n	800991c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009892:	4b25      	ldr	r3, [pc, #148]	; (8009928 <HAL_UART_MspInit+0xb8>)
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	4a24      	ldr	r2, [pc, #144]	; (8009928 <HAL_UART_MspInit+0xb8>)
 8009898:	f043 0310 	orr.w	r3, r3, #16
 800989c:	6453      	str	r3, [r2, #68]	; 0x44
 800989e:	4b22      	ldr	r3, [pc, #136]	; (8009928 <HAL_UART_MspInit+0xb8>)
 80098a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	613b      	str	r3, [r7, #16]
 80098a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098aa:	4b1f      	ldr	r3, [pc, #124]	; (8009928 <HAL_UART_MspInit+0xb8>)
 80098ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ae:	4a1e      	ldr	r2, [pc, #120]	; (8009928 <HAL_UART_MspInit+0xb8>)
 80098b0:	f043 0302 	orr.w	r3, r3, #2
 80098b4:	6313      	str	r3, [r2, #48]	; 0x30
 80098b6:	4b1c      	ldr	r3, [pc, #112]	; (8009928 <HAL_UART_MspInit+0xb8>)
 80098b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098c2:	4b19      	ldr	r3, [pc, #100]	; (8009928 <HAL_UART_MspInit+0xb8>)
 80098c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c6:	4a18      	ldr	r2, [pc, #96]	; (8009928 <HAL_UART_MspInit+0xb8>)
 80098c8:	f043 0301 	orr.w	r3, r3, #1
 80098cc:	6313      	str	r3, [r2, #48]	; 0x30
 80098ce:	4b16      	ldr	r3, [pc, #88]	; (8009928 <HAL_UART_MspInit+0xb8>)
 80098d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	60bb      	str	r3, [r7, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80098da:	2380      	movs	r3, #128	; 0x80
 80098dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098de:	2302      	movs	r3, #2
 80098e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098e6:	2300      	movs	r3, #0
 80098e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80098ea:	2307      	movs	r3, #7
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80098ee:	f107 0314 	add.w	r3, r7, #20
 80098f2:	4619      	mov	r1, r3
 80098f4:	480d      	ldr	r0, [pc, #52]	; (800992c <HAL_UART_MspInit+0xbc>)
 80098f6:	f7f7 fcf3 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80098fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009900:	2302      	movs	r3, #2
 8009902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009904:	2300      	movs	r3, #0
 8009906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009908:	2300      	movs	r3, #0
 800990a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800990c:	2307      	movs	r3, #7
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	4619      	mov	r1, r3
 8009916:	4806      	ldr	r0, [pc, #24]	; (8009930 <HAL_UART_MspInit+0xc0>)
 8009918:	f7f7 fce2 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800991c:	bf00      	nop
 800991e:	3728      	adds	r7, #40	; 0x28
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	40011000 	.word	0x40011000
 8009928:	40023800 	.word	0x40023800
 800992c:	40020400 	.word	0x40020400
 8009930:	40020000 	.word	0x40020000

08009934 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800993a:	1d3b      	adds	r3, r7, #4
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	605a      	str	r2, [r3, #4]
 8009942:	609a      	str	r2, [r3, #8]
 8009944:	60da      	str	r2, [r3, #12]
 8009946:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8009948:	4b3a      	ldr	r3, [pc, #232]	; (8009a34 <HAL_FMC_MspInit+0x100>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d16d      	bne.n	8009a2c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8009950:	4b38      	ldr	r3, [pc, #224]	; (8009a34 <HAL_FMC_MspInit+0x100>)
 8009952:	2201      	movs	r2, #1
 8009954:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009956:	4b38      	ldr	r3, [pc, #224]	; (8009a38 <HAL_FMC_MspInit+0x104>)
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	4a37      	ldr	r2, [pc, #220]	; (8009a38 <HAL_FMC_MspInit+0x104>)
 800995c:	f043 0301 	orr.w	r3, r3, #1
 8009960:	6393      	str	r3, [r2, #56]	; 0x38
 8009962:	4b35      	ldr	r3, [pc, #212]	; (8009a38 <HAL_FMC_MspInit+0x104>)
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800996e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009972:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009974:	2302      	movs	r3, #2
 8009976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009978:	2300      	movs	r3, #0
 800997a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800997c:	2303      	movs	r3, #3
 800997e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009980:	230c      	movs	r3, #12
 8009982:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009984:	1d3b      	adds	r3, r7, #4
 8009986:	4619      	mov	r1, r3
 8009988:	482c      	ldr	r0, [pc, #176]	; (8009a3c <HAL_FMC_MspInit+0x108>)
 800998a:	f7f7 fca9 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800998e:	f248 1333 	movw	r3, #33075	; 0x8133
 8009992:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009994:	2302      	movs	r3, #2
 8009996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009998:	2300      	movs	r3, #0
 800999a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800999c:	2303      	movs	r3, #3
 800999e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80099a0:	230c      	movs	r3, #12
 80099a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80099a4:	1d3b      	adds	r3, r7, #4
 80099a6:	4619      	mov	r1, r3
 80099a8:	4825      	ldr	r0, [pc, #148]	; (8009a40 <HAL_FMC_MspInit+0x10c>)
 80099aa:	f7f7 fc99 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80099ae:	f24c 7303 	movw	r3, #50947	; 0xc703
 80099b2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b4:	2302      	movs	r3, #2
 80099b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099bc:	2303      	movs	r3, #3
 80099be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80099c0:	230c      	movs	r3, #12
 80099c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80099c4:	1d3b      	adds	r3, r7, #4
 80099c6:	4619      	mov	r1, r3
 80099c8:	481e      	ldr	r0, [pc, #120]	; (8009a44 <HAL_FMC_MspInit+0x110>)
 80099ca:	f7f7 fc89 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80099ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80099d2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099d4:	2302      	movs	r3, #2
 80099d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099dc:	2303      	movs	r3, #3
 80099de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80099e0:	230c      	movs	r3, #12
 80099e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	4619      	mov	r1, r3
 80099e8:	4817      	ldr	r0, [pc, #92]	; (8009a48 <HAL_FMC_MspInit+0x114>)
 80099ea:	f7f7 fc79 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80099ee:	2328      	movs	r3, #40	; 0x28
 80099f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099f2:	2302      	movs	r3, #2
 80099f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099fa:	2303      	movs	r3, #3
 80099fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80099fe:	230c      	movs	r3, #12
 8009a00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009a02:	1d3b      	adds	r3, r7, #4
 8009a04:	4619      	mov	r1, r3
 8009a06:	4811      	ldr	r0, [pc, #68]	; (8009a4c <HAL_FMC_MspInit+0x118>)
 8009a08:	f7f7 fc6a 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a10:	2302      	movs	r3, #2
 8009a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009a1c:	230c      	movs	r3, #12
 8009a1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8009a20:	1d3b      	adds	r3, r7, #4
 8009a22:	4619      	mov	r1, r3
 8009a24:	480a      	ldr	r0, [pc, #40]	; (8009a50 <HAL_FMC_MspInit+0x11c>)
 8009a26:	f7f7 fc5b 	bl	80012e0 <HAL_GPIO_Init>
 8009a2a:	e000      	b.n	8009a2e <HAL_FMC_MspInit+0xfa>
    return;
 8009a2c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	2000002c 	.word	0x2000002c
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	40021000 	.word	0x40021000
 8009a40:	40021800 	.word	0x40021800
 8009a44:	40020c00 	.word	0x40020c00
 8009a48:	40021400 	.word	0x40021400
 8009a4c:	40021c00 	.word	0x40021c00
 8009a50:	40020800 	.word	0x40020800

08009a54 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009a5c:	f7ff ff6a 	bl	8009934 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08a      	sub	sp, #40	; 0x28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a2b      	ldr	r2, [pc, #172]	; (8009b24 <HAL_SAI_MspInit+0xbc>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d124      	bne.n	8009ac4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8009a7a:	4b2b      	ldr	r3, [pc, #172]	; (8009b28 <HAL_SAI_MspInit+0xc0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10b      	bne.n	8009a9a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8009a82:	4b2a      	ldr	r3, [pc, #168]	; (8009b2c <HAL_SAI_MspInit+0xc4>)
 8009a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a86:	4a29      	ldr	r2, [pc, #164]	; (8009b2c <HAL_SAI_MspInit+0xc4>)
 8009a88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a8e:	4b27      	ldr	r3, [pc, #156]	; (8009b2c <HAL_SAI_MspInit+0xc4>)
 8009a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a96:	613b      	str	r3, [r7, #16]
 8009a98:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8009a9a:	4b23      	ldr	r3, [pc, #140]	; (8009b28 <HAL_SAI_MspInit+0xc0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	4a21      	ldr	r2, [pc, #132]	; (8009b28 <HAL_SAI_MspInit+0xc0>)
 8009aa2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8009aa4:	23f0      	movs	r3, #240	; 0xf0
 8009aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aac:	2300      	movs	r3, #0
 8009aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8009ab4:	230a      	movs	r3, #10
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009ab8:	f107 0314 	add.w	r3, r7, #20
 8009abc:	4619      	mov	r1, r3
 8009abe:	481c      	ldr	r0, [pc, #112]	; (8009b30 <HAL_SAI_MspInit+0xc8>)
 8009ac0:	f7f7 fc0e 	bl	80012e0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a1a      	ldr	r2, [pc, #104]	; (8009b34 <HAL_SAI_MspInit+0xcc>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d125      	bne.n	8009b1a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8009ace:	4b16      	ldr	r3, [pc, #88]	; (8009b28 <HAL_SAI_MspInit+0xc0>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10b      	bne.n	8009aee <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8009ad6:	4b15      	ldr	r3, [pc, #84]	; (8009b2c <HAL_SAI_MspInit+0xc4>)
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ada:	4a14      	ldr	r2, [pc, #80]	; (8009b2c <HAL_SAI_MspInit+0xc4>)
 8009adc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8009ae2:	4b12      	ldr	r3, [pc, #72]	; (8009b2c <HAL_SAI_MspInit+0xc4>)
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8009aee:	4b0e      	ldr	r3, [pc, #56]	; (8009b28 <HAL_SAI_MspInit+0xc0>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	4a0c      	ldr	r2, [pc, #48]	; (8009b28 <HAL_SAI_MspInit+0xc0>)
 8009af6:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8009af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009afe:	2302      	movs	r3, #2
 8009b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b06:	2300      	movs	r3, #0
 8009b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8009b0a:	230a      	movs	r3, #10
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8009b0e:	f107 0314 	add.w	r3, r7, #20
 8009b12:	4619      	mov	r1, r3
 8009b14:	4808      	ldr	r0, [pc, #32]	; (8009b38 <HAL_SAI_MspInit+0xd0>)
 8009b16:	f7f7 fbe3 	bl	80012e0 <HAL_GPIO_Init>

    }
}
 8009b1a:	bf00      	nop
 8009b1c:	3728      	adds	r7, #40	; 0x28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	40015c04 	.word	0x40015c04
 8009b28:	20000030 	.word	0x20000030
 8009b2c:	40023800 	.word	0x40023800
 8009b30:	40022000 	.word	0x40022000
 8009b34:	40015c24 	.word	0x40015c24
 8009b38:	40021800 	.word	0x40021800

08009b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b08c      	sub	sp, #48	; 0x30
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009b44:	2300      	movs	r3, #0
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	202d      	movs	r0, #45	; 0x2d
 8009b52:	f7f7 f853 	bl	8000bfc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8009b56:	202d      	movs	r0, #45	; 0x2d
 8009b58:	f7f7 f86c 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8009b5c:	4b1f      	ldr	r3, [pc, #124]	; (8009bdc <HAL_InitTick+0xa0>)
 8009b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b60:	4a1e      	ldr	r2, [pc, #120]	; (8009bdc <HAL_InitTick+0xa0>)
 8009b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b66:	6413      	str	r3, [r2, #64]	; 0x40
 8009b68:	4b1c      	ldr	r3, [pc, #112]	; (8009bdc <HAL_InitTick+0xa0>)
 8009b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b70:	60fb      	str	r3, [r7, #12]
 8009b72:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009b74:	f107 0210 	add.w	r2, r7, #16
 8009b78:	f107 0314 	add.w	r3, r7, #20
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fa f922 	bl	8003dc8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009b84:	f7fa f8f8 	bl	8003d78 <HAL_RCC_GetPCLK1Freq>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	4a13      	ldr	r2, [pc, #76]	; (8009be0 <HAL_InitTick+0xa4>)
 8009b92:	fba2 2303 	umull	r2, r3, r2, r3
 8009b96:	0c9b      	lsrs	r3, r3, #18
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8009b9c:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <HAL_InitTick+0xa8>)
 8009b9e:	4a12      	ldr	r2, [pc, #72]	; (8009be8 <HAL_InitTick+0xac>)
 8009ba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8009ba2:	4b10      	ldr	r3, [pc, #64]	; (8009be4 <HAL_InitTick+0xa8>)
 8009ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ba8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8009baa:	4a0e      	ldr	r2, [pc, #56]	; (8009be4 <HAL_InitTick+0xa8>)
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bae:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8009bb0:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <HAL_InitTick+0xa8>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bb6:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <HAL_InitTick+0xa8>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8009bbc:	4809      	ldr	r0, [pc, #36]	; (8009be4 <HAL_InitTick+0xa8>)
 8009bbe:	f7fb fd71 	bl	80056a4 <HAL_TIM_Base_Init>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d104      	bne.n	8009bd2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8009bc8:	4806      	ldr	r0, [pc, #24]	; (8009be4 <HAL_InitTick+0xa8>)
 8009bca:	f7fb fd97 	bl	80056fc <HAL_TIM_Base_Start_IT>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	e000      	b.n	8009bd4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3730      	adds	r7, #48	; 0x30
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	40023800 	.word	0x40023800
 8009be0:	431bde83 	.word	0x431bde83
 8009be4:	200007b4 	.word	0x200007b4
 8009be8:	40002000 	.word	0x40002000

08009bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009bec:	b480      	push	{r7}
 8009bee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009bf0:	bf00      	nop
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009bfe:	e7fe      	b.n	8009bfe <HardFault_Handler+0x4>

08009c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009c04:	e7fe      	b.n	8009c04 <MemManage_Handler+0x4>

08009c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009c06:	b480      	push	{r7}
 8009c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009c0a:	e7fe      	b.n	8009c0a <BusFault_Handler+0x4>

08009c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009c10:	e7fe      	b.n	8009c10 <UsageFault_Handler+0x4>

08009c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009c12:	b480      	push	{r7}
 8009c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009c16:	bf00      	nop
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009c24:	bf00      	nop
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8009c40:	2040      	movs	r0, #64	; 0x40
 8009c42:	f7f7 fd2b 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8009c46:	2080      	movs	r0, #128	; 0x80
 8009c48:	f7f7 fd28 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009c4c:	bf00      	nop
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009c54:	4803      	ldr	r0, [pc, #12]	; (8009c64 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8009c56:	f7fb fda6 	bl	80057a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8009c5a:	4803      	ldr	r0, [pc, #12]	; (8009c68 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8009c5c:	f7fb fda3 	bl	80057a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8009c60:	bf00      	nop
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	2000016c 	.word	0x2000016c
 8009c68:	200007b4 	.word	0x200007b4

08009c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8009c70:	4802      	ldr	r0, [pc, #8]	; (8009c7c <OTG_FS_IRQHandler+0x10>)
 8009c72:	f7f7 fd2b 	bl	80016cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8009c76:	bf00      	nop
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	200007f4 	.word	0x200007f4

08009c80 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8009c84:	4802      	ldr	r0, [pc, #8]	; (8009c90 <LTDC_IRQHandler+0x10>)
 8009c86:	f7f9 f8a7 	bl	8002dd8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200003f4 	.word	0x200003f4

08009c94 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8009c98:	4802      	ldr	r0, [pc, #8]	; (8009ca4 <DMA2D_IRQHandler+0x10>)
 8009c9a:	f7f7 f97f 	bl	8000f9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8009c9e:	bf00      	nop
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	2000062c 	.word	0x2000062c

08009ca8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009cac:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <SystemInit+0x5c>)
 8009cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb2:	4a14      	ldr	r2, [pc, #80]	; (8009d04 <SystemInit+0x5c>)
 8009cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009cbc:	4b12      	ldr	r3, [pc, #72]	; (8009d08 <SystemInit+0x60>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a11      	ldr	r2, [pc, #68]	; (8009d08 <SystemInit+0x60>)
 8009cc2:	f043 0301 	orr.w	r3, r3, #1
 8009cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009cc8:	4b0f      	ldr	r3, [pc, #60]	; (8009d08 <SystemInit+0x60>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009cce:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <SystemInit+0x60>)
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	490d      	ldr	r1, [pc, #52]	; (8009d08 <SystemInit+0x60>)
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <SystemInit+0x64>)
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009cda:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <SystemInit+0x60>)
 8009cdc:	4a0c      	ldr	r2, [pc, #48]	; (8009d10 <SystemInit+0x68>)
 8009cde:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009ce0:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <SystemInit+0x60>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a08      	ldr	r2, [pc, #32]	; (8009d08 <SystemInit+0x60>)
 8009ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009cec:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <SystemInit+0x60>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009cf2:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <SystemInit+0x5c>)
 8009cf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009cf8:	609a      	str	r2, [r3, #8]
#endif
}
 8009cfa:	bf00      	nop
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	e000ed00 	.word	0xe000ed00
 8009d08:	40023800 	.word	0x40023800
 8009d0c:	fef6ffff 	.word	0xfef6ffff
 8009d10:	24003010 	.word	0x24003010

08009d14 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fd fca3 	bl	800766e <USBH_LL_IncTimer>
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fd fcdb 	bl	80076fa <USBH_LL_Connect>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fd fcf3 	bl	8007746 <USBH_LL_Disconnect>
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
 8009d74:	4613      	mov	r3, r2
 8009d76:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fd fc95 	bl	80076c2 <USBH_LL_PortEnabled>
} 
 8009d98:	bf00      	nop
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fd fc95 	bl	80076de <USBH_LL_PortDisabled>
} 
 8009db4:	bf00      	nop
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7f7 fd80 	bl	80018d8 <HAL_HCD_Start>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 f822 	bl	8009e28 <USBH_Get_USB_Status>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7f7 fd88 	bl	800191e <HAL_HCD_Stop>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 f807 	bl	8009e28 <USBH_Get_USB_Status>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	4603      	mov	r3, r0
 8009e30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d817      	bhi.n	8009e6c <USBH_Get_USB_Status+0x44>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <USBH_Get_USB_Status+0x1c>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e55 	.word	0x08009e55
 8009e48:	08009e5b 	.word	0x08009e5b
 8009e4c:	08009e61 	.word	0x08009e61
 8009e50:	08009e67 	.word	0x08009e67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
    break;
 8009e58:	e00b      	b.n	8009e72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e5e:	e008      	b.n	8009e72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009e60:	2301      	movs	r3, #1
 8009e62:	73fb      	strb	r3, [r7, #15]
    break;
 8009e64:	e005      	b.n	8009e72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009e66:	2302      	movs	r3, #2
 8009e68:	73fb      	strb	r3, [r7, #15]
    break;
 8009e6a:	e002      	b.n	8009e72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e70:	bf00      	nop
  }
  return usb_status;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009eb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009e84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009e86:	e003      	b.n	8009e90 <LoopCopyDataInit>

08009e88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009e88:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009e8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009e8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009e8e:	3104      	adds	r1, #4

08009e90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009e90:	480b      	ldr	r0, [pc, #44]	; (8009ec0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009e92:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009e94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009e96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009e98:	d3f6      	bcc.n	8009e88 <CopyDataInit>
  ldr  r2, =_sbss
 8009e9a:	4a0b      	ldr	r2, [pc, #44]	; (8009ec8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009e9c:	e002      	b.n	8009ea4 <LoopFillZerobss>

08009e9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009e9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ea0:	f842 3b04 	str.w	r3, [r2], #4

08009ea4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009ea4:	4b09      	ldr	r3, [pc, #36]	; (8009ecc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009ea6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009ea8:	d3f9      	bcc.n	8009e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009eaa:	f7ff fefd 	bl	8009ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009eae:	f000 f811 	bl	8009ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009eb2:	f7fd fc91 	bl	80077d8 <main>
  bx  lr    
 8009eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009eb8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009ebc:	08009f6c 	.word	0x08009f6c
  ldr  r0, =_sdata
 8009ec0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009ec4:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8009ec8:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8009ecc:	20000ab8 	.word	0x20000ab8

08009ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009ed0:	e7fe      	b.n	8009ed0 <ADC_IRQHandler>
	...

08009ed4 <__libc_init_array>:
 8009ed4:	b570      	push	{r4, r5, r6, lr}
 8009ed6:	4e0d      	ldr	r6, [pc, #52]	; (8009f0c <__libc_init_array+0x38>)
 8009ed8:	4c0d      	ldr	r4, [pc, #52]	; (8009f10 <__libc_init_array+0x3c>)
 8009eda:	1ba4      	subs	r4, r4, r6
 8009edc:	10a4      	asrs	r4, r4, #2
 8009ede:	2500      	movs	r5, #0
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	d109      	bne.n	8009ef8 <__libc_init_array+0x24>
 8009ee4:	4e0b      	ldr	r6, [pc, #44]	; (8009f14 <__libc_init_array+0x40>)
 8009ee6:	4c0c      	ldr	r4, [pc, #48]	; (8009f18 <__libc_init_array+0x44>)
 8009ee8:	f000 f820 	bl	8009f2c <_init>
 8009eec:	1ba4      	subs	r4, r4, r6
 8009eee:	10a4      	asrs	r4, r4, #2
 8009ef0:	2500      	movs	r5, #0
 8009ef2:	42a5      	cmp	r5, r4
 8009ef4:	d105      	bne.n	8009f02 <__libc_init_array+0x2e>
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}
 8009ef8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009efc:	4798      	blx	r3
 8009efe:	3501      	adds	r5, #1
 8009f00:	e7ee      	b.n	8009ee0 <__libc_init_array+0xc>
 8009f02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f06:	4798      	blx	r3
 8009f08:	3501      	adds	r5, #1
 8009f0a:	e7f2      	b.n	8009ef2 <__libc_init_array+0x1e>
 8009f0c:	08009f64 	.word	0x08009f64
 8009f10:	08009f64 	.word	0x08009f64
 8009f14:	08009f64 	.word	0x08009f64
 8009f18:	08009f68 	.word	0x08009f68

08009f1c <memset>:
 8009f1c:	4402      	add	r2, r0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d100      	bne.n	8009f26 <memset+0xa>
 8009f24:	4770      	bx	lr
 8009f26:	f803 1b01 	strb.w	r1, [r3], #1
 8009f2a:	e7f9      	b.n	8009f20 <memset+0x4>

08009f2c <_init>:
 8009f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2e:	bf00      	nop
 8009f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f32:	bc08      	pop	{r3}
 8009f34:	469e      	mov	lr, r3
 8009f36:	4770      	bx	lr

08009f38 <_fini>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr
