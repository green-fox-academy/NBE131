
reaction_tester_single_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba00  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800bbc8  0800bbc8  0001bbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbe0  0800bbe0  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbe0  0800bbe0  0001bbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbe8  0800bbe8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbe8  0800bbe8  0001bbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbec  0800bbec  0001bbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800bbf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e80  20000008  0800bbf8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e88  0800bbf8  00020e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d4f1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005243  00000000  00000000  0004d529  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024c8  00000000  00000000  00052770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002268  00000000  00000000  00054c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008e47  00000000  00000000  00056ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024aa2  00000000  00000000  0005fce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011d073  00000000  00000000  00084789  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a17fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e20  00000000  00000000  001a1878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800bbb0 	.word	0x0800bbb0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	0800bbb0 	.word	0x0800bbb0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fb6a 	bl	8000be6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f00b f884 	bl	800b620 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f00a f9ae 	bl	800a878 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000038 	.word	0x20000038

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000038 	.word	0x20000038

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e031      	b.n	8000622 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d109      	bne.n	80005da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f00a f97a 	bl	800a8c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	f003 0310 	and.w	r3, r3, #16
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d116      	bne.n	8000614 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_ADC_Init+0x84>)
 80005ec:	4013      	ands	r3, r2
 80005ee:	f043 0202 	orr.w	r2, r3, #2
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f94e 	bl	8000898 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	f023 0303 	bic.w	r3, r3, #3
 800060a:	f043 0201 	orr.w	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	641a      	str	r2, [r3, #64]	; 0x40
 8000612:	e001      	b.n	8000618 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	ffffeefd 	.word	0xffffeefd

08000630 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000644:	2b01      	cmp	r3, #1
 8000646:	d101      	bne.n	800064c <HAL_ADC_ConfigChannel+0x1c>
 8000648:	2302      	movs	r3, #2
 800064a:	e115      	b.n	8000878 <HAL_ADC_ConfigChannel+0x248>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2201      	movs	r2, #1
 8000650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b09      	cmp	r3, #9
 800065a:	d935      	bls.n	80006c8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68d9      	ldr	r1, [r3, #12]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	3b1e      	subs	r3, #30
 8000672:	2207      	movs	r2, #7
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43da      	mvns	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	400a      	ands	r2, r1
 8000680:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a7f      	ldr	r2, [pc, #508]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d10a      	bne.n	80006a2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68d9      	ldr	r1, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	061a      	lsls	r2, r3, #24
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	430a      	orrs	r2, r1
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	e035      	b.n	800070e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68d9      	ldr	r1, [r3, #12]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	4603      	mov	r3, r0
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4403      	add	r3, r0
 80006ba:	3b1e      	subs	r3, #30
 80006bc:	409a      	lsls	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	e022      	b.n	800070e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6919      	ldr	r1, [r3, #16]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	2207      	movs	r2, #7
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	400a      	ands	r2, r1
 80006ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6919      	ldr	r1, [r3, #16]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4403      	add	r3, r0
 8000704:	409a      	lsls	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	430a      	orrs	r2, r1
 800070c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	2b06      	cmp	r3, #6
 8000714:	d824      	bhi.n	8000760 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	3b05      	subs	r3, #5
 8000728:	221f      	movs	r2, #31
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	400a      	ands	r2, r1
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	3b05      	subs	r3, #5
 8000752:	fa00 f203 	lsl.w	r2, r0, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	430a      	orrs	r2, r1
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
 800075e:	e04c      	b.n	80007fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	2b0c      	cmp	r3, #12
 8000766:	d824      	bhi.n	80007b2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3b23      	subs	r3, #35	; 0x23
 800077a:	221f      	movs	r2, #31
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	43da      	mvns	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	400a      	ands	r2, r1
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b29b      	uxth	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	3b23      	subs	r3, #35	; 0x23
 80007a4:	fa00 f203 	lsl.w	r2, r0, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
 80007b0:	e023      	b.n	80007fa <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	3b41      	subs	r3, #65	; 0x41
 80007c4:	221f      	movs	r2, #31
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	400a      	ands	r2, r1
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	3b41      	subs	r3, #65	; 0x41
 80007ee:	fa00 f203 	lsl.w	r2, r0, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <HAL_ADC_ConfigChannel+0x258>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d109      	bne.n	8000818 <HAL_ADC_ConfigChannel+0x1e8>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b12      	cmp	r3, #18
 800080a:	d105      	bne.n	8000818 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a1e      	ldr	r2, [pc, #120]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 8000812:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000816:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <HAL_ADC_ConfigChannel+0x258>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d125      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d003      	beq.n	8000834 <HAL_ADC_ConfigChannel+0x204>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b11      	cmp	r3, #17
 8000832:	d11c      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_ADC_ConfigChannel+0x25c>)
 800083a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800083e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_ADC_ConfigChannel+0x254>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d111      	bne.n	800086e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_ADC_ConfigChannel+0x260>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a11      	ldr	r2, [pc, #68]	; (8000894 <HAL_ADC_ConfigChannel+0x264>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	0c9a      	lsrs	r2, r3, #18
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000860:	e002      	b.n	8000868 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	3b01      	subs	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f9      	bne.n	8000862 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	10000012 	.word	0x10000012
 8000888:	40012000 	.word	0x40012000
 800088c:	40012300 	.word	0x40012300
 8000890:	20000004 	.word	0x20000004
 8000894:	431bde83 	.word	0x431bde83

08000898 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80008a0:	4b78      	ldr	r3, [pc, #480]	; (8000a84 <ADC_Init+0x1ec>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	4a77      	ldr	r2, [pc, #476]	; (8000a84 <ADC_Init+0x1ec>)
 80008a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80008ac:	4b75      	ldr	r3, [pc, #468]	; (8000a84 <ADC_Init+0x1ec>)
 80008ae:	685a      	ldr	r2, [r3, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	4973      	ldr	r1, [pc, #460]	; (8000a84 <ADC_Init+0x1ec>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6859      	ldr	r1, [r3, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	021a      	lsls	r2, r3, #8
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	430a      	orrs	r2, r1
 80008dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6859      	ldr	r1, [r3, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800090e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6899      	ldr	r1, [r3, #8]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	430a      	orrs	r2, r1
 8000920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	4a58      	ldr	r2, [pc, #352]	; (8000a88 <ADC_Init+0x1f0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d022      	beq.n	8000972 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800093a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6899      	ldr	r1, [r3, #8]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800095c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6899      	ldr	r1, [r3, #8]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	430a      	orrs	r2, r1
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	e00f      	b.n	8000992 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000990:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 0202 	bic.w	r2, r2, #2
 80009a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6899      	ldr	r1, [r3, #8]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	005a      	lsls	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d01b      	beq.n	80009f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	685a      	ldr	r2, [r3, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6859      	ldr	r1, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	3b01      	subs	r3, #1
 80009ec:	035a      	lsls	r2, r3, #13
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	e007      	b.n	8000a08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	051a      	lsls	r2, r3, #20
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6899      	ldr	r1, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a4a:	025a      	lsls	r2, r3, #9
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6899      	ldr	r1, [r3, #8]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	029a      	lsls	r2, r3, #10
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	609a      	str	r2, [r3, #8]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40012300 	.word	0x40012300
 8000a88:	0f000001 	.word	0x0f000001

08000a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x40>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	05fa0000 	.word	0x05fa0000

08000ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_GetPriorityGrouping+0x18>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	f003 0307 	and.w	r3, r3, #7
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	db0b      	blt.n	8000b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f003 021f 	and.w	r2, r3, #31
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <__NVIC_EnableIRQ+0x38>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	095b      	lsrs	r3, r3, #5
 8000b10:	2001      	movs	r0, #1
 8000b12:	fa00 f202 	lsl.w	r2, r0, r2
 8000b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff4c 	bl	8000a8c <__NVIC_SetPriorityGrouping>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0e:	f7ff ff61 	bl	8000ad4 <__NVIC_GetPriorityGrouping>
 8000c12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	6978      	ldr	r0, [r7, #20]
 8000c1a:	f7ff ffb1 	bl	8000b80 <NVIC_EncodePriority>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff80 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff54 	bl	8000af0 <__NVIC_EnableIRQ>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e054      	b.n	8000d0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7f5b      	ldrb	r3, [r3, #29]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f009 fe7e 	bl	800a974 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10c      	bne.n	8000ca0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <HAL_CRC_Init+0xc4>)
 8000c8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0218 	bic.w	r2, r2, #24
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	e00c      	b.n	8000cba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6899      	ldr	r1, [r3, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f834 	bl	8000d18 <HAL_CRCEx_Polynomial_Set>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e028      	b.n	8000d0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	795b      	ldrb	r3, [r3, #5]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	e004      	b.n	8000cd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6912      	ldr	r2, [r2, #16]
 8000cd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	04c11db7 	.word	0x04c11db7

08000d18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d28:	231f      	movs	r3, #31
 8000d2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d2c:	bf00      	nop
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	613a      	str	r2, [r7, #16]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <HAL_CRCEx_Polynomial_Set+0x34>
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	fa22 f303 	lsr.w	r3, r2, r3
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f0      	beq.n	8000d2e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b18      	cmp	r3, #24
 8000d50:	d846      	bhi.n	8000de0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000de7 	.word	0x08000de7
 8000d5c:	08000de1 	.word	0x08000de1
 8000d60:	08000de1 	.word	0x08000de1
 8000d64:	08000de1 	.word	0x08000de1
 8000d68:	08000de1 	.word	0x08000de1
 8000d6c:	08000de1 	.word	0x08000de1
 8000d70:	08000de1 	.word	0x08000de1
 8000d74:	08000de1 	.word	0x08000de1
 8000d78:	08000dd5 	.word	0x08000dd5
 8000d7c:	08000de1 	.word	0x08000de1
 8000d80:	08000de1 	.word	0x08000de1
 8000d84:	08000de1 	.word	0x08000de1
 8000d88:	08000de1 	.word	0x08000de1
 8000d8c:	08000de1 	.word	0x08000de1
 8000d90:	08000de1 	.word	0x08000de1
 8000d94:	08000de1 	.word	0x08000de1
 8000d98:	08000dc9 	.word	0x08000dc9
 8000d9c:	08000de1 	.word	0x08000de1
 8000da0:	08000de1 	.word	0x08000de1
 8000da4:	08000de1 	.word	0x08000de1
 8000da8:	08000de1 	.word	0x08000de1
 8000dac:	08000de1 	.word	0x08000de1
 8000db0:	08000de1 	.word	0x08000de1
 8000db4:	08000de1 	.word	0x08000de1
 8000db8:	08000dbd 	.word	0x08000dbd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d913      	bls.n	8000dea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dc6:	e010      	b.n	8000dea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d90f      	bls.n	8000dee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dd2:	e00c      	b.n	8000dee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d90b      	bls.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dde:	e008      	b.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	75fb      	strb	r3, [r7, #23]
      break;
 8000de4:	e006      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000de6:	bf00      	nop
 8000de8:	e004      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dea:	bf00      	nop
 8000dec:	e002      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dee:	bf00      	nop
 8000df0:	e000      	b.n	8000df4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df2:	bf00      	nop
  }
  if (status == HAL_OK)
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10d      	bne.n	8000e16 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f023 0118 	bic.w	r1, r3, #24
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e062      	b.n	8000efc <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f009 fdb6 	bl	800a9b4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <HAL_DCMI_Init+0xe0>)
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e74:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e80:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e8c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e98:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000ea4:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d112      	bne.n	8000edc <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7f1b      	ldrb	r3, [r3, #28]
 8000eba:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7f5b      	ldrb	r3, [r3, #29]
 8000ec0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ec2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7f9b      	ldrb	r3, [r3, #30]
 8000ec8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000eca:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7fdb      	ldrb	r3, [r3, #31]
 8000ed2:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ed8:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eda:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 021e 	orr.w	r2, r2, #30
 8000eea:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	ffe0f007 	.word	0xffe0f007

08000f08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e039      	b.n	8000f8e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f009 fdfe 	bl	800ab30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f58:	f023 0107 	bic.w	r1, r3, #7
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_DMA2D_Init+0x90>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68d1      	ldr	r1, [r2, #12]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	ffffc000 	.word	0xffffc000

08000f9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d026      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0320 	and.w	r3, r3, #32
 8001012:	2b00      	cmp	r3, #0
 8001014:	d026      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d021      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800102e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2220      	movs	r2, #32
 8001036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	f043 0202 	orr.w	r2, r3, #2
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2204      	movs	r2, #4
 8001048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d026      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001074:	2b00      	cmp	r3, #0
 8001076:	d021      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001086:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2208      	movs	r2, #8
 800108e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2204      	movs	r2, #4
 80010a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d013      	beq.n	80010ee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2204      	movs	r2, #4
 80010e6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f853 	bl	8001194 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d024      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01f      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001110:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2202      	movs	r2, #2
 8001118:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	2b00      	cmp	r3, #0
 800114a:	d01f      	beq.n	800118c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01a      	beq.n	800118c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001164:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2210      	movs	r2, #16
 800116c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f80e 	bl	80011a8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_DMA2D_ConfigLayer+0x20>
 80011d8:	2302      	movs	r3, #2
 80011da:	e079      	b.n	80012d0 <HAL_DMA2D_ConfigLayer+0x114>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	3318      	adds	r3, #24
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001206:	4b35      	ldr	r3, [pc, #212]	; (80012dc <HAL_DMA2D_ConfigLayer+0x120>)
 8001208:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b0a      	cmp	r3, #10
 8001210:	d003      	beq.n	800121a <HAL_DMA2D_ConfigLayer+0x5e>
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d107      	bne.n	800122a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e005      	b.n	8001236 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	061b      	lsls	r3, r3, #24
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	4313      	orrs	r3, r2
 8001234:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d120      	bne.n	800127e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	ea02 0103 	and.w	r1, r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	430a      	orrs	r2, r1
 8001252:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d003      	beq.n	800126e <HAL_DMA2D_ConfigLayer+0xb2>
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b09      	cmp	r3, #9
 800126c:	d127      	bne.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
 800127c:	e01f      	b.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	ea02 0103 	and.w	r1, r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	430a      	orrs	r2, r1
 8001294:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b0a      	cmp	r3, #10
 80012a6:	d003      	beq.n	80012b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d106      	bne.n	80012be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80012bc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	ff03000f 	.word	0xff03000f

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e175      	b.n	80015ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f040 8164 	bne.w	80015e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b02      	cmp	r3, #2
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x4e>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b12      	cmp	r3, #18
 800132c:	d123      	bne.n	8001376 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	69b9      	ldr	r1, [r7, #24]
 8001372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0203 	and.w	r2, r3, #3
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d00b      	beq.n	80013ca <HAL_GPIO_Init+0xea>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013be:	2b11      	cmp	r3, #17
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d130      	bne.n	800142c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 0201 	and.w	r2, r3, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80be 	beq.w	80015e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b65      	ldr	r3, [pc, #404]	; (8001600 <HAL_GPIO_Init+0x320>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a64      	ldr	r2, [pc, #400]	; (8001600 <HAL_GPIO_Init+0x320>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b62      	ldr	r3, [pc, #392]	; (8001600 <HAL_GPIO_Init+0x320>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001482:	4a60      	ldr	r2, [pc, #384]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a57      	ldr	r2, [pc, #348]	; (8001608 <HAL_GPIO_Init+0x328>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d037      	beq.n	800151e <HAL_GPIO_Init+0x23e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x32c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d031      	beq.n	800151a <HAL_GPIO_Init+0x23a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a55      	ldr	r2, [pc, #340]	; (8001610 <HAL_GPIO_Init+0x330>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02b      	beq.n	8001516 <HAL_GPIO_Init+0x236>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a54      	ldr	r2, [pc, #336]	; (8001614 <HAL_GPIO_Init+0x334>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x232>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a53      	ldr	r2, [pc, #332]	; (8001618 <HAL_GPIO_Init+0x338>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x22e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_GPIO_Init+0x33c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x22a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a51      	ldr	r2, [pc, #324]	; (8001620 <HAL_GPIO_Init+0x340>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x226>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <HAL_GPIO_Init+0x344>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x222>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <HAL_GPIO_Init+0x348>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x21e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4e      	ldr	r2, [pc, #312]	; (800162c <HAL_GPIO_Init+0x34c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x21a>
 80014f6:	2309      	movs	r3, #9
 80014f8:	e012      	b.n	8001520 <HAL_GPIO_Init+0x240>
 80014fa:	230a      	movs	r3, #10
 80014fc:	e010      	b.n	8001520 <HAL_GPIO_Init+0x240>
 80014fe:	2308      	movs	r3, #8
 8001500:	e00e      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001502:	2307      	movs	r3, #7
 8001504:	e00c      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001506:	2306      	movs	r3, #6
 8001508:	e00a      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800150a:	2305      	movs	r3, #5
 800150c:	e008      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800150e:	2304      	movs	r3, #4
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001512:	2303      	movs	r3, #3
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x240>
 8001516:	2302      	movs	r3, #2
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x240>
 800151e:	2300      	movs	r3, #0
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001530:	4934      	ldr	r1, [pc, #208]	; (8001604 <HAL_GPIO_Init+0x324>)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_GPIO_Init+0x350>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_GPIO_Init+0x350>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_GPIO_Init+0x350>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b6:	4a1e      	ldr	r2, [pc, #120]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_GPIO_Init+0x350>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	f67f ae86 	bls.w	8001300 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015f4:	bf00      	nop
 80015f6:	3724      	adds	r7, #36	; 0x24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40023800 	.word	0x40023800
 8001604:	40013800 	.word	0x40013800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40021c00 	.word	0x40021c00
 8001628:	40022000 	.word	0x40022000
 800162c:	40022400 	.word	0x40022400
 8001630:	40013c00 	.word	0x40013c00

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	401a      	ands	r2, r3
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	429a      	cmp	r2, r3
 800167e:	d104      	bne.n	800168a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	041a      	lsls	r2, r3, #16
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f009 f884 	bl	800a7c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40013c00 	.word	0x40013c00

080016cc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af04      	add	r7, sp, #16
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	70fb      	strb	r3, [r7, #3]
 80016de:	460b      	mov	r3, r1
 80016e0:	70bb      	strb	r3, [r7, #2]
 80016e2:	4613      	mov	r3, r2
 80016e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_HCD_HC_Init+0x28>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e07f      	b.n	80017f4 <HAL_HCD_HC_Init+0x128>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	440b      	add	r3, r1
 800170a:	333d      	adds	r3, #61	; 0x3d
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	3338      	adds	r3, #56	; 0x38
 8001720:	787a      	ldrb	r2, [r7, #1]
 8001722:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3340      	adds	r3, #64	; 0x40
 8001734:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001736:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3339      	adds	r3, #57	; 0x39
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	333f      	adds	r3, #63	; 0x3f
 800175c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001760:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	78bb      	ldrb	r3, [r7, #2]
 8001766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800176a:	b2d8      	uxtb	r0, r3
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	333a      	adds	r3, #58	; 0x3a
 800177a:	4602      	mov	r2, r0
 800177c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800177e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001782:	2b00      	cmp	r3, #0
 8001784:	da0a      	bge.n	800179c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	333b      	adds	r3, #59	; 0x3b
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
 800179a:	e009      	b.n	80017b0 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	333b      	adds	r3, #59	; 0x3b
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	333c      	adds	r3, #60	; 0x3c
 80017c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	787c      	ldrb	r4, [r7, #1]
 80017cc:	78ba      	ldrb	r2, [r7, #2]
 80017ce:	78f9      	ldrb	r1, [r7, #3]
 80017d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4623      	mov	r3, r4
 80017e2:	f006 f857 	bl	8007894 <USB_HC_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}

080017fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	4608      	mov	r0, r1
 8001806:	4611      	mov	r1, r2
 8001808:	461a      	mov	r2, r3
 800180a:	4603      	mov	r3, r0
 800180c:	70fb      	strb	r3, [r7, #3]
 800180e:	460b      	mov	r3, r1
 8001810:	70bb      	strb	r3, [r7, #2]
 8001812:	4613      	mov	r3, r2
 8001814:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	333b      	adds	r3, #59	; 0x3b
 8001826:	78ba      	ldrb	r2, [r7, #2]
 8001828:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	333f      	adds	r3, #63	; 0x3f
 800183a:	787a      	ldrb	r2, [r7, #1]
 800183c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800183e:	7c3b      	ldrb	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10a      	bne.n	800185a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	3342      	adds	r3, #66	; 0x42
 8001854:	2203      	movs	r2, #3
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e009      	b.n	800186e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3342      	adds	r3, #66	; 0x42
 800186a:	2202      	movs	r2, #2
 800186c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800186e:	787b      	ldrb	r3, [r7, #1]
 8001870:	2b03      	cmp	r3, #3
 8001872:	f200 80d6 	bhi.w	8001a22 <HAL_HCD_HC_SubmitRequest+0x226>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <HAL_HCD_HC_SubmitRequest+0x80>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	0800188d 	.word	0x0800188d
 8001880:	08001a0d 	.word	0x08001a0d
 8001884:	080018f9 	.word	0x080018f9
 8001888:	08001983 	.word	0x08001983
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800188c:	7c3b      	ldrb	r3, [r7, #16]
 800188e:	2b01      	cmp	r3, #1
 8001890:	f040 80c9 	bne.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001894:	78bb      	ldrb	r3, [r7, #2]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 80c5 	bne.w	8001a26 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 800189c:	8b3b      	ldrh	r3, [r7, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018a2:	78fa      	ldrb	r2, [r7, #3]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	3351      	adds	r3, #81	; 0x51
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3351      	adds	r3, #81	; 0x51
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	3342      	adds	r3, #66	; 0x42
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018e0:	e0a1      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	3342      	adds	r3, #66	; 0x42
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
      break;
 80018f6:	e096      	b.n	8001a26 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018f8:	78bb      	ldrb	r3, [r7, #2]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d120      	bne.n	8001940 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	3351      	adds	r3, #81	; 0x51
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	3342      	adds	r3, #66	; 0x42
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001928:	e07e      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	3342      	adds	r3, #66	; 0x42
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e073      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	3350      	adds	r3, #80	; 0x50
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10a      	bne.n	800196c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	3342      	adds	r3, #66	; 0x42
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
      break;
 800196a:	e05d      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	3342      	adds	r3, #66	; 0x42
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e052      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001982:	78bb      	ldrb	r3, [r7, #2]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d120      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	440b      	add	r3, r1
 8001996:	3351      	adds	r3, #81	; 0x51
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10a      	bne.n	80019b4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3342      	adds	r3, #66	; 0x42
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019b2:	e039      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	3342      	adds	r3, #66	; 0x42
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e02e      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3350      	adds	r3, #80	; 0x50
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3342      	adds	r3, #66	; 0x42
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
      break;
 80019f4:	e018      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	3342      	adds	r3, #66	; 0x42
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
      break;
 8001a0a:	e00d      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	3342      	adds	r3, #66	; 0x42
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
      break;
 8001a20:	e002      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001a26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3344      	adds	r3, #68	; 0x44
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	8b39      	ldrh	r1, [r7, #24]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4403      	add	r3, r0
 8001a4c:	3348      	adds	r3, #72	; 0x48
 8001a4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	335c      	adds	r3, #92	; 0x5c
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	334c      	adds	r3, #76	; 0x4c
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	3339      	adds	r3, #57	; 0x39
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	335d      	adds	r3, #93	; 0x5d
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	3338      	adds	r3, #56	; 0x38
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	18d1      	adds	r1, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	f005 fff4 	bl	8007aa8 <USB_HC_StartXfer>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop

08001acc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f005 fe13 	bl	800770e <USB_GetMode>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 80f1 	bne.w	8001cd2 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f005 fdf7 	bl	80076e8 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80e7 	beq.w	8001cd0 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f005 fdee 	bl	80076e8 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b16:	d104      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f005 fdde 	bl	80076e8 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b36:	d104      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 fdce 	bl	80076e8 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b56:	d104      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f005 fdbe 	bl	80076e8 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 fdb0 	bl	80076e8 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b92:	d117      	bne.n	8001bc4 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001ba2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001ba6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f009 fe53 	bl	800b854 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 fdb8 	bl	800772a <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 fd8d 	bl	80076e8 <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd8:	d102      	bne.n	8001be0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f001 f8a6 	bl	8002d2c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 fd7f 	bl	80076e8 <USB_ReadInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d106      	bne.n	8001c02 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f009 fe11 	bl	800b81c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2208      	movs	r2, #8
 8001c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f005 fd6e 	bl	80076e8 <USB_ReadInterrupts>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c16:	d138      	bne.n	8001c8a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f006 f887 	bl	8007d30 <USB_HC_ReadInterrupt>
 8001c22:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e025      	b.n	8001c76 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d018      	beq.n	8001c70 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c54:	d106      	bne.n	8001c64 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f8ac 	bl	8001dba <HCD_HC_IN_IRQHandler>
 8001c62:	e005      	b.n	8001c70 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fc3c 	bl	80024e8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3d4      	bcc.n	8001c2a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 fd2a 	bl	80076e8 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d101      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x1d6>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_HCD_IRQHandler+0x1d8>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d014      	beq.n	8001cd2 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0210 	bic.w	r2, r2, #16
 8001cb6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 ff8b 	bl	8002bd4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 0210 	orr.w	r2, r2, #16
 8001ccc:	619a      	str	r2, [r3, #24]
 8001cce:	e000      	b.n	8001cd2 <HAL_HCD_IRQHandler+0x206>
      return;
 8001cd0:	bf00      	nop
    }
  }
}
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_HCD_Start+0x16>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e013      	b.n	8001d16 <HAL_HCD_Start+0x3e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fc2c 	bl	8007558 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fd73 	bl	80077f2 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_HCD_Stop+0x16>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e00d      	b.n	8001d50 <HAL_HCD_Stop+0x32>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f006 f941 	bl	8007fc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f005 fd1a 	bl	800779e <USB_ResetPort>
 8001d6a:	4603      	mov	r3, r0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	335c      	adds	r3, #92	; 0x5c
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 fd5a 	bl	8007864 <USB_GetHostSpeed>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d119      	bne.n	8001e1e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	461a      	mov	r2, r3
 8001df8:	2304      	movs	r3, #4
 8001dfa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	0151      	lsls	r1, r2, #5
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	440a      	add	r2, r1
 8001e12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e16:	f043 0302 	orr.w	r3, r3, #2
 8001e1a:	60d3      	str	r3, [r2, #12]
 8001e1c:	e095      	b.n	8001f4a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d109      	bne.n	8001e48 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	461a      	mov	r2, r3
 8001e42:	2320      	movs	r3, #32
 8001e44:	6093      	str	r3, [r2, #8]
 8001e46:	e080      	b.n	8001f4a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d134      	bne.n	8001ec8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	0151      	lsls	r1, r2, #5
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	440a      	add	r2, r1
 8001e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	335d      	adds	r3, #93	; 0x5d
 8001e8e:	2205      	movs	r2, #5
 8001e90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f005 ff46 	bl	8007d52 <USB_HC_Halt>
 8001ec6:	e040      	b.n	8001f4a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d134      	bne.n	8001f4a <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	0151      	lsls	r1, r2, #5
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	440a      	add	r2, r1
 8001ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 ff21 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2310      	movs	r3, #16
 8001f20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	335d      	adds	r3, #93	; 0x5d
 8001f32:	2208      	movs	r2, #8
 8001f34:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	461a      	mov	r2, r3
 8001f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f48:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f60:	d122      	bne.n	8001fa8 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f005 fee0 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fa6:	e29b      	b.n	80024e0 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	f040 80c1 	bne.w	8002142 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3348      	adds	r3, #72	; 0x48
 8001fd8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0159      	lsls	r1, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fec:	1ad1      	subs	r1, r2, r3
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4403      	add	r3, r0
 8001ffc:	334c      	adds	r3, #76	; 0x4c
 8001ffe:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	335d      	adds	r3, #93	; 0x5d
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3358      	adds	r3, #88	; 0x58
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	2301      	movs	r3, #1
 8002038:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	333f      	adds	r3, #63	; 0x3f
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	333f      	adds	r3, #63	; 0x3f
 8002060:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002062:	2b02      	cmp	r3, #2
 8002064:	d121      	bne.n	80020aa <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	0151      	lsls	r1, r2, #5
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	440a      	add	r2, r1
 800207c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f005 fe5e 	bl	8007d52 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	461a      	mov	r2, r3
 80020a4:	2310      	movs	r3, #16
 80020a6:	6093      	str	r3, [r2, #8]
 80020a8:	e034      	b.n	8002114 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	333f      	adds	r3, #63	; 0x3f
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d129      	bne.n	8002114 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	0151      	lsls	r1, r2, #5
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	440a      	add	r2, r1
 80020d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020de:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	335c      	adds	r3, #92	; 0x5c
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	b2d8      	uxtb	r0, r3
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	335c      	adds	r3, #92	; 0x5c
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	4601      	mov	r1, r0
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f009 fbae 	bl	800b870 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3350      	adds	r3, #80	; 0x50
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2d8      	uxtb	r0, r3
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	3350      	adds	r3, #80	; 0x50
 800213c:	4602      	mov	r2, r0
 800213e:	701a      	strb	r2, [r3, #0]
}
 8002140:	e1ce      	b.n	80024e0 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b02      	cmp	r3, #2
 8002156:	f040 80f1 	bne.w	800233c <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	0151      	lsls	r1, r2, #5
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	440a      	add	r2, r1
 8002170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002174:	f023 0302 	bic.w	r3, r3, #2
 8002178:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	335d      	adds	r3, #93	; 0x5d
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10a      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e0b0      	b.n	8002308 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	335d      	adds	r3, #93	; 0x5d
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d10a      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	335c      	adds	r3, #92	; 0x5c
 80021cc:	2205      	movs	r2, #5
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e09a      	b.n	8002308 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	335d      	adds	r3, #93	; 0x5d
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d00a      	beq.n	80021fe <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	335d      	adds	r3, #93	; 0x5d
 80021f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d156      	bne.n	80022ac <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	3358      	adds	r3, #88	; 0x58
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c59      	adds	r1, r3, #1
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4403      	add	r3, r0
 8002220:	3358      	adds	r3, #88	; 0x58
 8002222:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3358      	adds	r3, #88	; 0x58
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d914      	bls.n	8002264 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	3358      	adds	r3, #88	; 0x58
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	335c      	adds	r3, #92	; 0x5c
 800225e:	2204      	movs	r2, #4
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	e009      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	335c      	adds	r3, #92	; 0x5c
 8002274:	2202      	movs	r2, #2
 8002276:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800228e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002296:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e02d      	b.n	8002308 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	335d      	adds	r3, #93	; 0x5d
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d122      	bne.n	8002308 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	335c      	adds	r3, #92	; 0x5c
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022f4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	461a      	mov	r2, r3
 8002316:	2302      	movs	r3, #2
 8002318:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	b2d8      	uxtb	r0, r3
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	335c      	adds	r3, #92	; 0x5c
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4601      	mov	r1, r0
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f009 fa9b 	bl	800b870 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800233a:	e0d1      	b.n	80024e0 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	2b80      	cmp	r3, #128	; 0x80
 8002350:	d13e      	bne.n	80023d0 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	0151      	lsls	r1, r2, #5
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	440a      	add	r2, r1
 8002368:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	3358      	adds	r3, #88	; 0x58
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1c59      	adds	r1, r3, #1
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4403      	add	r3, r0
 8002394:	3358      	adds	r3, #88	; 0x58
 8002396:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	335d      	adds	r3, #93	; 0x5d
 80023a8:	2206      	movs	r2, #6
 80023aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f005 fccb 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	461a      	mov	r2, r3
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	6093      	str	r3, [r2, #8]
}
 80023ce:	e087      	b.n	80024e0 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d17c      	bne.n	80024e0 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	333f      	adds	r3, #63	; 0x3f
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d122      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	3358      	adds	r3, #88	; 0x58
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	0151      	lsls	r1, r2, #5
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	440a      	add	r2, r1
 8002426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f005 fc89 	bl	8007d52 <USB_HC_Halt>
 8002440:	e045      	b.n	80024ce <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	333f      	adds	r3, #63	; 0x3f
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	333f      	adds	r3, #63	; 0x3f
 8002468:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800246a:	2b02      	cmp	r3, #2
 800246c:	d12f      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	3358      	adds	r3, #88	; 0x58
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d121      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	335d      	adds	r3, #93	; 0x5d
 800249a:	2203      	movs	r2, #3
 800249c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	0151      	lsls	r1, r2, #5
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	440a      	add	r2, r1
 80024b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 fc42 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	015a      	lsls	r2, r3, #5
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4413      	add	r3, r2
 80024d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024da:	461a      	mov	r2, r3
 80024dc:	2310      	movs	r3, #16
 80024de:	6093      	str	r3, [r2, #8]
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4413      	add	r3, r2
 800250a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b04      	cmp	r3, #4
 8002516:	d119      	bne.n	800254c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	461a      	mov	r2, r3
 8002526:	2304      	movs	r3, #4
 8002528:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	0151      	lsls	r1, r2, #5
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	440a      	add	r2, r1
 8002540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800254a:	e33e      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b20      	cmp	r3, #32
 8002560:	d141      	bne.n	80025e6 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	2320      	movs	r3, #32
 8002572:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	333d      	adds	r3, #61	; 0x3d
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	f040 831f 	bne.w	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	333d      	adds	r3, #61	; 0x3d
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	335c      	adds	r3, #92	; 0x5c
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f005 fbb7 	bl	8007d52 <USB_HC_Halt>
}
 80025e4:	e2f1      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d13f      	bne.n	800267c <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	335d      	adds	r3, #93	; 0x5d
 800260c:	2204      	movs	r2, #4
 800260e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	333d      	adds	r3, #61	; 0x3d
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	440b      	add	r3, r1
 8002632:	3358      	adds	r3, #88	; 0x58
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	0151      	lsls	r1, r2, #5
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	440a      	add	r2, r1
 800264e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f005 fb75 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2340      	movs	r3, #64	; 0x40
 8002678:	6093      	str	r3, [r2, #8]
}
 800267a:	e2a6      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002692:	d122      	bne.n	80026da <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f005 fb47 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	461a      	mov	r2, r3
 80026d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d6:	6093      	str	r3, [r2, #8]
}
 80026d8:	e277      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d135      	bne.n	800275c <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	3358      	adds	r3, #88	; 0x58
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	0151      	lsls	r1, r2, #5
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	440a      	add	r2, r1
 800271a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f005 fb0f 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	2301      	movs	r3, #1
 8002744:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	335d      	adds	r3, #93	; 0x5d
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
}
 800275a:	e236      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b08      	cmp	r3, #8
 8002770:	d12b      	bne.n	80027ca <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	2308      	movs	r3, #8
 8002782:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	440a      	add	r2, r1
 800279a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f005 facf 	bl	8007d52 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	335d      	adds	r3, #93	; 0x5d
 80027c4:	2205      	movs	r2, #5
 80027c6:	701a      	strb	r2, [r3, #0]
}
 80027c8:	e1ff      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d155      	bne.n	800288c <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	3358      	adds	r3, #88	; 0x58
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	440b      	add	r3, r1
 8002802:	335d      	adds	r3, #93	; 0x5d
 8002804:	2203      	movs	r2, #3
 8002806:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	333d      	adds	r3, #61	; 0x3d
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d114      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	333c      	adds	r3, #60	; 0x3c
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	333d      	adds	r3, #61	; 0x3d
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	0151      	lsls	r1, r2, #5
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	440a      	add	r2, r1
 800285e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f005 fa6d 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2310      	movs	r3, #16
 8002888:	6093      	str	r3, [r2, #8]
}
 800288a:	e19e      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	2b80      	cmp	r3, #128	; 0x80
 80028a0:	d12b      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	0151      	lsls	r1, r2, #5
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	440a      	add	r2, r1
 80028b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f005 fa40 	bl	8007d52 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	335d      	adds	r3, #93	; 0x5d
 80028e2:	2206      	movs	r2, #6
 80028e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	6093      	str	r3, [r2, #8]
}
 80028f8:	e167      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002910:	d135      	bne.n	800297e <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	0151      	lsls	r1, r2, #5
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	440a      	add	r2, r1
 8002928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f005 fa08 	bl	8007d52 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	461a      	mov	r2, r3
 8002950:	2310      	movs	r3, #16
 8002952:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	461a      	mov	r2, r3
 8002962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002966:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	335d      	adds	r3, #93	; 0x5d
 8002978:	2208      	movs	r2, #8
 800297a:	701a      	strb	r2, [r3, #0]
}
 800297c:	e125      	b.n	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	f040 811a 	bne.w	8002bca <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	0151      	lsls	r1, r2, #5
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	440a      	add	r2, r1
 80029ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b0:	f023 0302 	bic.w	r3, r3, #2
 80029b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	335d      	adds	r3, #93	; 0x5d
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d137      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	335c      	adds	r3, #92	; 0x5c
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	333f      	adds	r3, #63	; 0x3f
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d00b      	beq.n	8002a0e <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	333f      	adds	r3, #63	; 0x3f
 8002a06:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	f040 80c5 	bne.w	8002b98 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3351      	adds	r3, #81	; 0x51
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	f083 0301 	eor.w	r3, r3, #1
 8002a24:	b2d8      	uxtb	r0, r3
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	3351      	adds	r3, #81	; 0x51
 8002a36:	4602      	mov	r2, r0
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e0ad      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	335d      	adds	r3, #93	; 0x5d
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d10a      	bne.n	8002a68 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	335c      	adds	r3, #92	; 0x5c
 8002a62:	2202      	movs	r2, #2
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e097      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	335d      	adds	r3, #93	; 0x5d
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d10a      	bne.n	8002a94 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	335c      	adds	r3, #92	; 0x5c
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e081      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	335d      	adds	r3, #93	; 0x5d
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10a      	bne.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	2205      	movs	r2, #5
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e06b      	b.n	8002b98 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	335d      	adds	r3, #93	; 0x5d
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d00a      	beq.n	8002aec <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	335d      	adds	r3, #93	; 0x5d
 8002ae6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d155      	bne.n	8002b98 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3358      	adds	r3, #88	; 0x58
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4403      	add	r3, r0
 8002b0e:	3358      	adds	r3, #88	; 0x58
 8002b10:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	3358      	adds	r3, #88	; 0x58
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d914      	bls.n	8002b52 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3358      	adds	r3, #88	; 0x58
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	335c      	adds	r3, #92	; 0x5c
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e009      	b.n	8002b66 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	335c      	adds	r3, #92	; 0x5c
 8002b62:	2202      	movs	r2, #2
 8002b64:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b7c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b84:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	b2d8      	uxtb	r0, r3
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f008 fe53 	bl	800b870 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	0c5b      	lsrs	r3, r3, #17
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c08:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d003      	beq.n	8002c18 <HCD_RXQLVL_IRQHandler+0x44>
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	f000 8082 	beq.w	8002d1a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c16:	e083      	b.n	8002d20 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d07f      	beq.n	8002d1e <HCD_RXQLVL_IRQHandler+0x14a>
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3344      	adds	r3, #68	; 0x44
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d074      	beq.n	8002d1e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	3344      	adds	r3, #68	; 0x44
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f004 fd21 	bl	8007696 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	3344      	adds	r3, #68	; 0x44
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	18d1      	adds	r1, r2, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4403      	add	r3, r0
 8002c78:	3344      	adds	r3, #68	; 0x44
 8002c7a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	334c      	adds	r3, #76	; 0x4c
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	18d1      	adds	r1, r2, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4403      	add	r3, r0
 8002ca0:	334c      	adds	r3, #76	; 0x4c
 8002ca2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HCD_RXQLVL_IRQHandler+0x154>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d031      	beq.n	8002d1e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cd8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3350      	adds	r3, #80	; 0x50
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	f083 0301 	eor.w	r3, r3, #1
 8002d02:	b2d8      	uxtb	r0, r3
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	3350      	adds	r3, #80	; 0x50
 8002d14:	4602      	mov	r2, r0
 8002d16:	701a      	strb	r2, [r3, #0]
      break;
 8002d18:	e001      	b.n	8002d1e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002d1e:	bf00      	nop
  }
}
 8002d20:	bf00      	nop
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	1ff80000 	.word	0x1ff80000

08002d2c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d58:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d113      	bne.n	8002d8c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d10a      	bne.n	8002d84 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002d7c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f008 fd5a 	bl	800b838 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d147      	bne.n	8002e26 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f043 0308 	orr.w	r3, r3, #8
 8002d9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d129      	bne.n	8002dfc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d113      	bne.n	8002dd8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002db6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dba:	d106      	bne.n	8002dca <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 fcb1 	bl	800772a <USB_InitFSLSPClkSel>
 8002dc8:	e011      	b.n	8002dee <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fcaa 	bl	800772a <USB_InitFSLSPClkSel>
 8002dd6:	e00a      	b.n	8002dee <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d106      	bne.n	8002dee <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002de6:	461a      	mov	r2, r3
 8002de8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dec:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f008 fd4c 	bl	800b88c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f008 fd1f 	bl	800b838 <HAL_HCD_Connect_Callback>
 8002dfa:	e014      	b.n	8002e26 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f008 fd53 	bl	800b8a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002e10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e14:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d103      	bne.n	8002e38 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f043 0320 	orr.w	r3, r3, #32
 8002e36:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e07f      	b.n	8002f5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f007 fe82 	bl	800ab7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2224      	movs	r2, #36	; 0x24
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	e006      	b.n	8002ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d104      	bne.n	8002ee6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_I2C_Init+0x11c>)
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	ea42 0103 	orr.w	r1, r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	021a      	lsls	r2, r3, #8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	02008000 	.word	0x02008000

08002f6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d138      	bne.n	8002ff4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e032      	b.n	8002ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	d139      	bne.n	800308c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003022:	2302      	movs	r3, #2
 8003024:	e033      	b.n	800308e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2224      	movs	r2, #36	; 0x24
 8003032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003054:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e0bf      	b.n	800322e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f007 fdd2 	bl	800ac6c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80030de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6999      	ldr	r1, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6899      	ldr	r1, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <HAL_LTDC_Init+0x19c>)
 8003110:	400b      	ands	r3, r1
 8003112:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68d9      	ldr	r1, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_LTDC_Init+0x19c>)
 800313e:	400b      	ands	r3, r1
 8003140:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	041b      	lsls	r3, r3, #16
 8003148:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68d9      	ldr	r1, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6919      	ldr	r1, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b33      	ldr	r3, [pc, #204]	; (8003238 <HAL_LTDC_Init+0x19c>)
 800316c:	400b      	ands	r3, r1
 800316e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6919      	ldr	r1, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6959      	ldr	r1, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_LTDC_Init+0x19c>)
 800319a:	400b      	ands	r3, r1
 800319c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	041b      	lsls	r3, r3, #16
 80031a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6959      	ldr	r1, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0206 	orr.w	r2, r2, #6
 800320a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	f000f800 	.word	0xf000f800

0800323c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d023      	beq.n	80032a6 <HAL_LTDC_IRQHandler+0x6a>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01e      	beq.n	80032a6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0204 	bic.w	r2, r2, #4
 8003276:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2204      	movs	r2, #4
 800327e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2204      	movs	r2, #4
 8003294:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f86f 	bl	8003384 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <HAL_LTDC_IRQHandler+0xbc>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01e      	beq.n	80032f8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0202 	bic.w	r2, r2, #2
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2202      	movs	r2, #2
 80032d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032d8:	f043 0202 	orr.w	r2, r3, #2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2204      	movs	r2, #4
 80032e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f846 	bl	8003384 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01b      	beq.n	800333a <HAL_LTDC_IRQHandler+0xfe>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d016      	beq.n	800333a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2201      	movs	r2, #1
 8003322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f82f 	bl	8003398 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_LTDC_IRQHandler+0x140>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0208 	bic.w	r2, r2, #8
 800335c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2208      	movs	r2, #8
 8003364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f818 	bl	80033ac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80033c0:	b5b0      	push	{r4, r5, r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_LTDC_ConfigLayer+0x1a>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e02c      	b.n	8003434 <HAL_LTDC_ConfigLayer+0x74>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2134      	movs	r1, #52	; 0x34
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4614      	mov	r4, r2
 80033fe:	461d      	mov	r5, r3
 8003400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800340a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f811 	bl	800343c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bdb0      	pop	{r4, r5, r7, pc}

0800343c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	0c1b      	lsrs	r3, r3, #16
 8003454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003458:	4413      	add	r3, r2
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	01db      	lsls	r3, r3, #7
 8003468:	4413      	add	r3, r2
 800346a:	3384      	adds	r3, #132	; 0x84
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4611      	mov	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	01d2      	lsls	r2, r2, #7
 8003478:	440a      	add	r2, r1
 800347a:	3284      	adds	r2, #132	; 0x84
 800347c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003480:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003492:	4413      	add	r3, r2
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4619      	mov	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	01db      	lsls	r3, r3, #7
 80034a0:	440b      	add	r3, r1
 80034a2:	3384      	adds	r3, #132	; 0x84
 80034a4:	4619      	mov	r1, r3
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ba:	4413      	add	r3, r2
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	01db      	lsls	r3, r3, #7
 80034ca:	4413      	add	r3, r2
 80034cc:	3384      	adds	r3, #132	; 0x84
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	4611      	mov	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	01d2      	lsls	r2, r2, #7
 80034da:	440a      	add	r2, r1
 80034dc:	3284      	adds	r2, #132	; 0x84
 80034de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80034e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034f2:	4413      	add	r3, r2
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4619      	mov	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	01db      	lsls	r3, r3, #7
 8003500:	440b      	add	r3, r1
 8003502:	3384      	adds	r3, #132	; 0x84
 8003504:	4619      	mov	r1, r3
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	01db      	lsls	r3, r3, #7
 8003516:	4413      	add	r3, r2
 8003518:	3384      	adds	r3, #132	; 0x84
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	4611      	mov	r1, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	01d2      	lsls	r2, r2, #7
 8003526:	440a      	add	r2, r1
 8003528:	3284      	adds	r2, #132	; 0x84
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	01db      	lsls	r3, r3, #7
 800353a:	4413      	add	r3, r2
 800353c:	3384      	adds	r3, #132	; 0x84
 800353e:	461a      	mov	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	01db      	lsls	r3, r3, #7
 800356c:	4413      	add	r3, r2
 800356e:	3384      	adds	r3, #132	; 0x84
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	01db      	lsls	r3, r3, #7
 800357c:	4413      	add	r3, r2
 800357e:	3384      	adds	r3, #132	; 0x84
 8003580:	461a      	mov	r2, r3
 8003582:	2300      	movs	r3, #0
 8003584:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800358c:	461a      	mov	r2, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	431a      	orrs	r2, r3
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	01db      	lsls	r3, r3, #7
 80035a0:	440b      	add	r3, r1
 80035a2:	3384      	adds	r3, #132	; 0x84
 80035a4:	4619      	mov	r1, r3
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	01db      	lsls	r3, r3, #7
 80035b6:	4413      	add	r3, r2
 80035b8:	3384      	adds	r3, #132	; 0x84
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	4611      	mov	r1, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	01d2      	lsls	r2, r2, #7
 80035c6:	440a      	add	r2, r1
 80035c8:	3284      	adds	r2, #132	; 0x84
 80035ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	01db      	lsls	r3, r3, #7
 80035da:	4413      	add	r3, r2
 80035dc:	3384      	adds	r3, #132	; 0x84
 80035de:	461a      	mov	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	01db      	lsls	r3, r3, #7
 80035f0:	4413      	add	r3, r2
 80035f2:	3384      	adds	r3, #132	; 0x84
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	01db      	lsls	r3, r3, #7
 8003600:	440b      	add	r3, r1
 8003602:	3384      	adds	r3, #132	; 0x84
 8003604:	4619      	mov	r1, r3
 8003606:	4b58      	ldr	r3, [pc, #352]	; (8003768 <LTDC_SetConfig+0x32c>)
 8003608:	4013      	ands	r3, r2
 800360a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	6809      	ldr	r1, [r1, #0]
 8003618:	4608      	mov	r0, r1
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	01c9      	lsls	r1, r1, #7
 800361e:	4401      	add	r1, r0
 8003620:	3184      	adds	r1, #132	; 0x84
 8003622:	4313      	orrs	r3, r2
 8003624:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	4413      	add	r3, r2
 8003632:	3384      	adds	r3, #132	; 0x84
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	01db      	lsls	r3, r3, #7
 8003640:	4413      	add	r3, r2
 8003642:	3384      	adds	r3, #132	; 0x84
 8003644:	461a      	mov	r2, r3
 8003646:	2300      	movs	r3, #0
 8003648:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	01db      	lsls	r3, r3, #7
 8003654:	4413      	add	r3, r2
 8003656:	3384      	adds	r3, #132	; 0x84
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003668:	2304      	movs	r3, #4
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	e01b      	b.n	80036a6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003676:	2303      	movs	r3, #3
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e014      	b.n	80036a6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d00b      	beq.n	800369c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003688:	2b02      	cmp	r3, #2
 800368a:	d007      	beq.n	800369c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003690:	2b03      	cmp	r3, #3
 8003692:	d003      	beq.n	800369c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003698:	2b07      	cmp	r3, #7
 800369a:	d102      	bne.n	80036a2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800369c:	2302      	movs	r3, #2
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	e001      	b.n	80036a6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	01db      	lsls	r3, r3, #7
 80036b0:	4413      	add	r3, r2
 80036b2:	3384      	adds	r3, #132	; 0x84
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	4611      	mov	r1, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	01d2      	lsls	r2, r2, #7
 80036c0:	440a      	add	r2, r1
 80036c2:	3284      	adds	r2, #132	; 0x84
 80036c4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80036c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1acb      	subs	r3, r1, r3
 80036e0:	69f9      	ldr	r1, [r7, #28]
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	3303      	adds	r3, #3
 80036e8:	68f9      	ldr	r1, [r7, #12]
 80036ea:	6809      	ldr	r1, [r1, #0]
 80036ec:	4608      	mov	r0, r1
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	01c9      	lsls	r1, r1, #7
 80036f2:	4401      	add	r1, r0
 80036f4:	3184      	adds	r1, #132	; 0x84
 80036f6:	4313      	orrs	r3, r2
 80036f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	01db      	lsls	r3, r3, #7
 8003704:	4413      	add	r3, r2
 8003706:	3384      	adds	r3, #132	; 0x84
 8003708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4619      	mov	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	01db      	lsls	r3, r3, #7
 8003714:	440b      	add	r3, r1
 8003716:	3384      	adds	r3, #132	; 0x84
 8003718:	4619      	mov	r1, r3
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <LTDC_SetConfig+0x330>)
 800371c:	4013      	ands	r3, r2
 800371e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	01db      	lsls	r3, r3, #7
 800372a:	4413      	add	r3, r2
 800372c:	3384      	adds	r3, #132	; 0x84
 800372e:	461a      	mov	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	01db      	lsls	r3, r3, #7
 8003740:	4413      	add	r3, r2
 8003742:	3384      	adds	r3, #132	; 0x84
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	4611      	mov	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	01d2      	lsls	r2, r2, #7
 8003750:	440a      	add	r2, r1
 8003752:	3284      	adds	r2, #132	; 0x84
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6013      	str	r3, [r2, #0]
}
 800375a:	bf00      	nop
 800375c:	3724      	adds	r7, #36	; 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	fffff8f8 	.word	0xfffff8f8
 800376c:	fffff800 	.word	0xfffff800

08003770 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <HAL_PWREx_EnableOverDrive+0x98>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_PWREx_EnableOverDrive+0x98>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6413      	str	r3, [r2, #64]	; 0x40
 8003786:	4b20      	ldr	r3, [pc, #128]	; (8003808 <HAL_PWREx_EnableOverDrive+0x98>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800379e:	f7fc fed5 	bl	800054c <HAL_GetTick>
 80037a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037a4:	e009      	b.n	80037ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037a6:	f7fc fed1 	bl	800054c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037b4:	d901      	bls.n	80037ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e022      	b.n	8003800 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ba:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d1ee      	bne.n	80037a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037c8:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d4:	f7fc feba 	bl	800054c <HAL_GetTick>
 80037d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037da:	e009      	b.n	80037f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037dc:	f7fc feb6 	bl	800054c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ea:	d901      	bls.n	80037f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e007      	b.n	8003800 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037fc:	d1ee      	bne.n	80037dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40023800 	.word	0x40023800
 800380c:	40007000 	.word	0x40007000

08003810 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800381c:	f7fc fe96 	bl	800054c <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e073      	b.n	8003914 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_QSPI_Init+0x2c>
 8003838:	2302      	movs	r3, #2
 800383a:	e06b      	b.n	8003914 <HAL_QSPI_Init+0x104>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f007 facf 	bl	800adfc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800385e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f85e 	bl	8003924 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	3b01      	subs	r3, #1
 8003878:	021a      	lsls	r2, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	2120      	movs	r1, #32
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f856 	bl	8003940 <QSPI_WaitFlagStateUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d135      	bne.n	800390a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <HAL_QSPI_Init+0x10c>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6852      	ldr	r2, [r2, #4]
 80038ac:	0611      	lsls	r1, r2, #24
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68d2      	ldr	r2, [r2, #12]
 80038b2:	4311      	orrs	r1, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	69d2      	ldr	r2, [r2, #28]
 80038b8:	4311      	orrs	r1, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6a12      	ldr	r2, [r2, #32]
 80038be:	4311      	orrs	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	4b14      	ldr	r3, [pc, #80]	; (8003920 <HAL_QSPI_Init+0x110>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6912      	ldr	r2, [r2, #16]
 80038d6:	0411      	lsls	r1, r2, #16
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6952      	ldr	r2, [r2, #20]
 80038dc:	4311      	orrs	r1, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6992      	ldr	r2, [r2, #24]
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	00ffff2f 	.word	0x00ffff2f
 8003920:	ffe0f8fe 	.word	0xffe0f8fe

08003924 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003950:	e01a      	b.n	8003988 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d016      	beq.n	8003988 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003960:	f7fc fdf4 	bl	800054c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	d20b      	bcs.n	8003988 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2204      	movs	r2, #4
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	f043 0201 	orr.w	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e00e      	b.n	80039a6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1d6      	bne.n	8003952 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e25c      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8087 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d4:	4b96      	ldr	r3, [pc, #600]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00c      	beq.n	80039fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e0:	4b93      	ldr	r3, [pc, #588]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d112      	bne.n	8003a12 <HAL_RCC_OscConfig+0x62>
 80039ec:	4b90      	ldr	r3, [pc, #576]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x130>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d168      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e236      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x7a>
 8003a1c:	4b84      	ldr	r3, [pc, #528]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a83      	ldr	r2, [pc, #524]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e02e      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x9c>
 8003a32:	4b7f      	ldr	r3, [pc, #508]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7e      	ldr	r2, [pc, #504]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b7c      	ldr	r3, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0xc0>
 8003a56:	4b76      	ldr	r3, [pc, #472]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a72      	ldr	r2, [pc, #456]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6e      	ldr	r2, [pc, #440]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6b      	ldr	r2, [pc, #428]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fc fd5c 	bl	800054c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fc fd58 	bl	800054c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1ea      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe8>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fc fd48 	bl	800054c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fc fd44 	bl	800054c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1d6      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b57      	ldr	r3, [pc, #348]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x110>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d069      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aee:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b4d      	ldr	r3, [pc, #308]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x190>
 8003b06:	4b4a      	ldr	r3, [pc, #296]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1aa      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	493d      	ldr	r1, [pc, #244]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e040      	b.n	8003bc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d023      	beq.n	8003b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a38      	ldr	r2, [pc, #224]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fc fcfa 	bl	800054c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fc fcf6 	bl	800054c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e188      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4929      	ldr	r1, [pc, #164]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
 8003b8e:	e018      	b.n	8003bc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fc fcd6 	bl	800054c <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fc fcd2 	bl	800054c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e164      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d038      	beq.n	8003c40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d019      	beq.n	8003c0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fc fcb3 	bl	800054c <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bea:	f7fc fcaf 	bl	800054c <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e141      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x23a>
 8003c08:	e01a      	b.n	8003c40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0a:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fc fc99 	bl	800054c <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7fc fc95 	bl	800054c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d903      	bls.n	8003c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e127      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
 8003c30:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b94      	ldr	r3, [pc, #592]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ee      	bne.n	8003c1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a4 	beq.w	8003d96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b8e      	ldr	r3, [pc, #568]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	4b8b      	ldr	r3, [pc, #556]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a8a      	ldr	r2, [pc, #552]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c76:	4b85      	ldr	r3, [pc, #532]	; (8003e8c <HAL_RCC_OscConfig+0x4dc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d118      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c82:	4b82      	ldr	r3, [pc, #520]	; (8003e8c <HAL_RCC_OscConfig+0x4dc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a81      	ldr	r2, [pc, #516]	; (8003e8c <HAL_RCC_OscConfig+0x4dc>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fc fc5d 	bl	800054c <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fc fc59 	bl	800054c <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	; 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e0eb      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca8:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <HAL_RCC_OscConfig+0x4dc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d106      	bne.n	8003cca <HAL_RCC_OscConfig+0x31a>
 8003cbc:	4b72      	ldr	r3, [pc, #456]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4a71      	ldr	r2, [pc, #452]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc8:	e02d      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x33c>
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a6c      	ldr	r2, [pc, #432]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a69      	ldr	r2, [pc, #420]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cea:	e01c      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCC_OscConfig+0x35e>
 8003cf4:	4b64      	ldr	r3, [pc, #400]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a63      	ldr	r2, [pc, #396]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a60      	ldr	r2, [pc, #384]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003d0e:	4b5e      	ldr	r3, [pc, #376]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a5d      	ldr	r2, [pc, #372]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a5a      	ldr	r2, [pc, #360]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d015      	beq.n	8003d5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fc fc0d 	bl	800054c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fc fc09 	bl	800054c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e099      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4c:	4b4e      	ldr	r3, [pc, #312]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ee      	beq.n	8003d36 <HAL_RCC_OscConfig+0x386>
 8003d58:	e014      	b.n	8003d84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fc fbf7 	bl	800054c <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fc fbf3 	bl	800054c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e083      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d78:	4b43      	ldr	r3, [pc, #268]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ee      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8a:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a3e      	ldr	r2, [pc, #248]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d06f      	beq.n	8003e7e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d9e:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d067      	beq.n	8003e7a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d149      	bne.n	8003e46 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db2:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a34      	ldr	r2, [pc, #208]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003db8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fc fbc5 	bl	800054c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc6:	f7fc fbc1 	bl	800054c <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e053      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	019b      	lsls	r3, r3, #6
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	085b      	lsrs	r3, r3, #1
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003e0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e10:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e12:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1c      	ldr	r2, [pc, #112]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003e18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fc fb95 	bl	800054c <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fc fb91 	bl	800054c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e023      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x476>
 8003e44:	e01b      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a0f      	ldr	r2, [pc, #60]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fc fb7b 	bl	800054c <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fc fb77 	bl	800054c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e009      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_OscConfig+0x4d8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f0      	bne.n	8003e5a <HAL_RCC_OscConfig+0x4aa>
 8003e78:	e001      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0ce      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b69      	ldr	r3, [pc, #420]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d910      	bls.n	8003ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b66      	ldr	r3, [pc, #408]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 020f 	bic.w	r2, r3, #15
 8003ebe:	4964      	ldr	r1, [pc, #400]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b62      	ldr	r3, [pc, #392]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0b6      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d020      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef0:	4b58      	ldr	r3, [pc, #352]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4a57      	ldr	r2, [pc, #348]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f08:	4b52      	ldr	r3, [pc, #328]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a51      	ldr	r2, [pc, #324]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	494c      	ldr	r1, [pc, #304]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d040      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	4b46      	ldr	r3, [pc, #280]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d115      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07d      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	4b40      	ldr	r3, [pc, #256]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e071      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e069      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f72:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4935      	ldr	r1, [pc, #212]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f84:	f7fc fae2 	bl	800054c <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fc fade 	bl	800054c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e051      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 020c 	and.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1eb      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d210      	bcs.n	8003fe4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b23      	ldr	r3, [pc, #140]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 020f 	bic.w	r2, r3, #15
 8003fca:	4921      	ldr	r1, [pc, #132]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b1f      	ldr	r3, [pc, #124]	; (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e030      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4915      	ldr	r1, [pc, #84]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	490d      	ldr	r1, [pc, #52]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004022:	f000 f81d 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 8004026:	4601      	mov	r1, r0
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	5cd3      	ldrb	r3, [r2, r3]
 8004036:	fa21 f303 	lsr.w	r3, r1, r3
 800403a:	4a08      	ldr	r2, [pc, #32]	; (800405c <HAL_RCC_ClockConfig+0x1cc>)
 800403c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800403e:	2000      	movs	r0, #0
 8004040:	f007 faee 	bl	800b620 <HAL_InitTick>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023c00 	.word	0x40023c00
 8004054:	40023800 	.word	0x40023800
 8004058:	0800bbc8 	.word	0x0800bbc8
 800405c:	20000004 	.word	0x20000004

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	2300      	movs	r3, #0
 8004070:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004076:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b04      	cmp	r3, #4
 8004080:	d007      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x32>
 8004082:	2b08      	cmp	r3, #8
 8004084:	d008      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x38>
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 808d 	bne.w	80041a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4b4b      	ldr	r3, [pc, #300]	; (80041bc <HAL_RCC_GetSysClockFreq+0x15c>)
 800408e:	60bb      	str	r3, [r7, #8]
       break;
 8004090:	e08c      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004092:	4b4b      	ldr	r3, [pc, #300]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004094:	60bb      	str	r3, [r7, #8]
      break;
 8004096:	e089      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004098:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040a2:	4b45      	ldr	r3, [pc, #276]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d023      	beq.n	80040f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4b42      	ldr	r3, [pc, #264]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	ea03 0501 	and.w	r5, r3, r1
 80040c4:	ea04 0602 	and.w	r6, r4, r2
 80040c8:	4a3d      	ldr	r2, [pc, #244]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040ca:	fb02 f106 	mul.w	r1, r2, r6
 80040ce:	2200      	movs	r2, #0
 80040d0:	fb02 f205 	mul.w	r2, r2, r5
 80040d4:	440a      	add	r2, r1
 80040d6:	493a      	ldr	r1, [pc, #232]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80040d8:	fba5 0101 	umull	r0, r1, r5, r1
 80040dc:	1853      	adds	r3, r2, r1
 80040de:	4619      	mov	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f04f 0400 	mov.w	r4, #0
 80040e6:	461a      	mov	r2, r3
 80040e8:	4623      	mov	r3, r4
 80040ea:	f7fc f88d 	bl	8000208 <__aeabi_uldivmod>
 80040ee:	4603      	mov	r3, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e049      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	f04f 0400 	mov.w	r4, #0
 8004100:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	ea03 0501 	and.w	r5, r3, r1
 800410c:	ea04 0602 	and.w	r6, r4, r2
 8004110:	4629      	mov	r1, r5
 8004112:	4632      	mov	r2, r6
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	f04f 0400 	mov.w	r4, #0
 800411c:	0154      	lsls	r4, r2, #5
 800411e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004122:	014b      	lsls	r3, r1, #5
 8004124:	4619      	mov	r1, r3
 8004126:	4622      	mov	r2, r4
 8004128:	1b49      	subs	r1, r1, r5
 800412a:	eb62 0206 	sbc.w	r2, r2, r6
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f04f 0400 	mov.w	r4, #0
 8004136:	0194      	lsls	r4, r2, #6
 8004138:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800413c:	018b      	lsls	r3, r1, #6
 800413e:	1a5b      	subs	r3, r3, r1
 8004140:	eb64 0402 	sbc.w	r4, r4, r2
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	00e2      	lsls	r2, r4, #3
 800414e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004152:	00d9      	lsls	r1, r3, #3
 8004154:	460b      	mov	r3, r1
 8004156:	4614      	mov	r4, r2
 8004158:	195b      	adds	r3, r3, r5
 800415a:	eb44 0406 	adc.w	r4, r4, r6
 800415e:	f04f 0100 	mov.w	r1, #0
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	02a2      	lsls	r2, r4, #10
 8004168:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800416c:	0299      	lsls	r1, r3, #10
 800416e:	460b      	mov	r3, r1
 8004170:	4614      	mov	r4, r2
 8004172:	4618      	mov	r0, r3
 8004174:	4621      	mov	r1, r4
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f04f 0400 	mov.w	r4, #0
 800417c:	461a      	mov	r2, r3
 800417e:	4623      	mov	r3, r4
 8004180:	f7fc f842 	bl	8000208 <__aeabi_uldivmod>
 8004184:	4603      	mov	r3, r0
 8004186:	460c      	mov	r4, r1
 8004188:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	3301      	adds	r3, #1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	60bb      	str	r3, [r7, #8]
      break;
 80041a4:	e002      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80041a8:	60bb      	str	r3, [r7, #8]
      break;
 80041aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ac:	68bb      	ldr	r3, [r7, #8]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	017d7840 	.word	0x017d7840

080041c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000004 	.word	0x20000004

080041dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80041e4:	4601      	mov	r1, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4a03      	ldr	r2, [pc, #12]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	0800bbd8 	.word	0x0800bbd8

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004208:	f7ff ffdc 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800420c:	4601      	mov	r1, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0b5b      	lsrs	r3, r3, #13
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4a03      	ldr	r2, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800bbd8 	.word	0x0800bbd8

0800422c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	220f      	movs	r2, #15
 800423a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0203 	and.w	r2, r3, #3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	08db      	lsrs	r3, r3, #3
 8004266:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <HAL_RCC_GetClockConfig+0x60>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 020f 	and.w	r2, r3, #15
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	40023c00 	.word	0x40023c00

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d012      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042b8:	4b69      	ldr	r3, [pc, #420]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a68      	ldr	r2, [pc, #416]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042c2:	6093      	str	r3, [r2, #8]
 80042c4:	4b66      	ldr	r3, [pc, #408]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042cc:	4964      	ldr	r1, [pc, #400]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d017      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ea:	4b5d      	ldr	r3, [pc, #372]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	4959      	ldr	r1, [pc, #356]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004308:	d101      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d017      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004326:	4b4e      	ldr	r3, [pc, #312]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	494a      	ldr	r1, [pc, #296]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004344:	d101      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004346:	2301      	movs	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004352:	2301      	movs	r3, #1
 8004354:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004362:	2301      	movs	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 808b 	beq.w	800448a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004374:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	4a39      	ldr	r2, [pc, #228]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437e:	6413      	str	r3, [r2, #64]	; 0x40
 8004380:	4b37      	ldr	r3, [pc, #220]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800438c:	4b35      	ldr	r3, [pc, #212]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a34      	ldr	r2, [pc, #208]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004398:	f7fc f8d8 	bl	800054c <HAL_GetTick>
 800439c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a0:	f7fc f8d4 	bl	800054c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e355      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043b2:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043be:	4b28      	ldr	r3, [pc, #160]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d035      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d02e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043dc:	4b20      	ldr	r3, [pc, #128]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e6:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043f2:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d114      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fc f89c 	bl	800054c <HAL_GetTick>
 8004414:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004416:	e00a      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f7fc f898 	bl	800054c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	; 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e317      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0ee      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004446:	d111      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004456:	400b      	ands	r3, r1
 8004458:	4901      	ldr	r1, [pc, #4]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
 800445e:	e00b      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004460:	40023800 	.word	0x40023800
 8004464:	40007000 	.word	0x40007000
 8004468:	0ffffcff 	.word	0x0ffffcff
 800446c:	4bb0      	ldr	r3, [pc, #704]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4aaf      	ldr	r2, [pc, #700]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004472:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004476:	6093      	str	r3, [r2, #8]
 8004478:	4bad      	ldr	r3, [pc, #692]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800447a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004484:	49aa      	ldr	r1, [pc, #680]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004496:	4ba6      	ldr	r3, [pc, #664]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449c:	4aa4      	ldr	r2, [pc, #656]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800449e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044a6:	4ba2      	ldr	r3, [pc, #648]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	499f      	ldr	r1, [pc, #636]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c4:	4b9a      	ldr	r3, [pc, #616]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044d2:	4997      	ldr	r1, [pc, #604]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e6:	4b92      	ldr	r3, [pc, #584]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f4:	498e      	ldr	r1, [pc, #568]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004508:	4b89      	ldr	r3, [pc, #548]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004516:	4986      	ldr	r1, [pc, #536]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800452a:	4b81      	ldr	r3, [pc, #516]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004530:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	497d      	ldr	r1, [pc, #500]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800454c:	4b78      	ldr	r3, [pc, #480]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	f023 0203 	bic.w	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	4975      	ldr	r1, [pc, #468]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800456e:	4b70      	ldr	r3, [pc, #448]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f023 020c 	bic.w	r2, r3, #12
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457c:	496c      	ldr	r1, [pc, #432]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004590:	4b67      	ldr	r3, [pc, #412]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	4964      	ldr	r1, [pc, #400]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045b2:	4b5f      	ldr	r3, [pc, #380]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	495b      	ldr	r1, [pc, #364]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045d4:	4b56      	ldr	r3, [pc, #344]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	4953      	ldr	r1, [pc, #332]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045f6:	4b4e      	ldr	r3, [pc, #312]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	494a      	ldr	r1, [pc, #296]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004618:	4b45      	ldr	r3, [pc, #276]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004626:	4942      	ldr	r1, [pc, #264]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800463a:	4b3d      	ldr	r3, [pc, #244]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	4939      	ldr	r1, [pc, #228]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800465c:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800466a:	4931      	ldr	r1, [pc, #196]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d011      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800467e:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468c:	4928      	ldr	r1, [pc, #160]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800469c:	d101      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800469e:	2301      	movs	r3, #1
 80046a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	4918      	ldr	r1, [pc, #96]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f0:	490f      	ldr	r1, [pc, #60]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d005      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004706:	f040 80d8 	bne.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a08      	ldr	r2, [pc, #32]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004710:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004716:	f7fb ff19 	bl	800054c <HAL_GetTick>
 800471a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800471c:	e00a      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800471e:	f7fb ff15 	bl	800054c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b64      	cmp	r3, #100	; 0x64
 800472a:	d903      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e196      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004730:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004734:	4b6c      	ldr	r3, [pc, #432]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ee      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d021      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11d      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004754:	4b64      	ldr	r3, [pc, #400]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004762:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004768:	0e1b      	lsrs	r3, r3, #24
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	019a      	lsls	r2, r3, #6
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	431a      	orrs	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	071b      	lsls	r3, r3, #28
 8004788:	4957      	ldr	r1, [pc, #348]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d02e      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ba:	d129      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047bc:	4b4a      	ldr	r3, [pc, #296]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047ca:	4b47      	ldr	r3, [pc, #284]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d0:	0f1b      	lsrs	r3, r3, #28
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	019a      	lsls	r2, r3, #6
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	071b      	lsls	r3, r3, #28
 80047f0:	493d      	ldr	r1, [pc, #244]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047f8:	4b3b      	ldr	r3, [pc, #236]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80047fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fe:	f023 021f 	bic.w	r2, r3, #31
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	3b01      	subs	r3, #1
 8004808:	4937      	ldr	r1, [pc, #220]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01d      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800481c:	4b32      	ldr	r3, [pc, #200]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	0e1b      	lsrs	r3, r3, #24
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800482a:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004830:	0f1b      	lsrs	r3, r3, #28
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	019a      	lsls	r2, r3, #6
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	431a      	orrs	r2, r3
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	061b      	lsls	r3, r3, #24
 800484a:	431a      	orrs	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	071b      	lsls	r3, r3, #28
 8004850:	4925      	ldr	r1, [pc, #148]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d011      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	019a      	lsls	r2, r3, #6
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	041b      	lsls	r3, r3, #16
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	061b      	lsls	r3, r3, #24
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	071b      	lsls	r3, r3, #28
 8004880:	4919      	ldr	r1, [pc, #100]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004888:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a16      	ldr	r2, [pc, #88]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800488e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004894:	f7fb fe5a 	bl	800054c <HAL_GetTick>
 8004898:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800489c:	f7fb fe56 	bl	800054c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0d7      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ae:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	f040 80cd 	bne.w	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a08      	ldr	r2, [pc, #32]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80048c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ce:	f7fb fe3d 	bl	800054c <HAL_GetTick>
 80048d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048d4:	e00a      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048d6:	f7fb fe39 	bl	800054c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b64      	cmp	r3, #100	; 0x64
 80048e2:	d903      	bls.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e0ba      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80048e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048ec:	4b5e      	ldr	r3, [pc, #376]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048f8:	d0ed      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004916:	2b00      	cmp	r3, #0
 8004918:	d02e      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d12a      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004922:	4b51      	ldr	r3, [pc, #324]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004930:	4b4d      	ldr	r3, [pc, #308]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	0f1b      	lsrs	r3, r3, #28
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	019a      	lsls	r2, r3, #6
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	431a      	orrs	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	071b      	lsls	r3, r3, #28
 8004956:	4944      	ldr	r1, [pc, #272]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800495e:	4b42      	ldr	r3, [pc, #264]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004964:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	3b01      	subs	r3, #1
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	493d      	ldr	r1, [pc, #244]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d022      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800498c:	d11d      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800498e:	4b36      	ldr	r3, [pc, #216]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	0e1b      	lsrs	r3, r3, #24
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800499c:	4b32      	ldr	r3, [pc, #200]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	0f1b      	lsrs	r3, r3, #28
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	019a      	lsls	r2, r3, #6
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	431a      	orrs	r2, r3
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	431a      	orrs	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	4929      	ldr	r1, [pc, #164]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d028      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049d6:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049dc:	0e1b      	lsrs	r3, r3, #24
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049e4:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	0c1b      	lsrs	r3, r3, #16
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	019a      	lsls	r2, r3, #6
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	431a      	orrs	r2, r3
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	071b      	lsls	r3, r3, #28
 8004a0a:	4917      	ldr	r1, [pc, #92]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	4911      	ldr	r1, [pc, #68]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a28:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0e      	ldr	r2, [pc, #56]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a34:	f7fb fd8a 	bl	800054c <HAL_GetTick>
 8004a38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a3c:	f7fb fd86 	bl	800054c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b64      	cmp	r3, #100	; 0x64
 8004a48:	d901      	bls.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e007      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5a:	d1ef      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3720      	adds	r7, #32
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40023800 	.word	0x40023800

08004a6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a8a:	f040 8086 	bne.w	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004a8e:	4b8d      	ldr	r3, [pc, #564]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a94:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004a9c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa4:	d03e      	beq.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8004aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aaa:	d073      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d000      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004ab0:	e074      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004ab2:	4b84      	ldr	r3, [pc, #528]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d108      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004abe:	4b81      	ldr	r3, [pc, #516]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac6:	4a80      	ldr	r2, [pc, #512]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e007      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004ad0:	4b7c      	ldr	r3, [pc, #496]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad8:	4a7c      	ldr	r2, [pc, #496]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004ae0:	4b78      	ldr	r3, [pc, #480]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	0e1b      	lsrs	r3, r3, #24
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004aee:	4b75      	ldr	r3, [pc, #468]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	fb02 f203 	mul.w	r2, r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004b08:	4b6e      	ldr	r3, [pc, #440]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	3301      	adds	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]
        break;
 8004b22:	e03b      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004b24:	4b67      	ldr	r3, [pc, #412]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d108      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b30:	4b64      	ldr	r3, [pc, #400]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b38:	4a63      	ldr	r2, [pc, #396]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	e007      	b.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004b42:	4b60      	ldr	r3, [pc, #384]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b4a:	4a60      	ldr	r2, [pc, #384]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004b52:	4b5c      	ldr	r3, [pc, #368]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b58:	0e1b      	lsrs	r3, r3, #24
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004b60:	4b58      	ldr	r3, [pc, #352]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	fb02 f203 	mul.w	r2, r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004b7a:	4b52      	ldr	r3, [pc, #328]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]
        break;
 8004b92:	e003      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b94:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004b96:	617b      	str	r3, [r7, #20]
        break;
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8004b9a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba2:	f040 8086 	bne.w	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004ba6:	4b47      	ldr	r3, [pc, #284]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004bb4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bbc:	d03e      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004bbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bc2:	d073      	beq.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d000      	beq.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004bc8:	e074      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004bca:	4b3e      	ldr	r3, [pc, #248]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d108      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bde:	4a3a      	ldr	r2, [pc, #232]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	e007      	b.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004be8:	4b36      	ldr	r3, [pc, #216]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf0:	4a36      	ldr	r2, [pc, #216]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004bf8:	4b32      	ldr	r3, [pc, #200]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	0e1b      	lsrs	r3, r3, #24
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004c06:	4b2f      	ldr	r3, [pc, #188]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	099b      	lsrs	r3, r3, #6
 8004c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	fb02 f203 	mul.w	r2, r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004c20:	4b28      	ldr	r3, [pc, #160]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
        break;
 8004c3a:	e03b      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004c3c:	4b21      	ldr	r3, [pc, #132]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c48:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c50:	4a1d      	ldr	r2, [pc, #116]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e007      	b.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c62:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004c6a:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c70:	0e1b      	lsrs	r3, r3, #24
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004c78:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	fb02 f203 	mul.w	r2, r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]
        break;
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004cac:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004cae:	617b      	str	r3, [r7, #20]
        break;
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8004cb2:	bf00      	nop

  return frequency;
 8004cb4:	697b      	ldr	r3, [r7, #20]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	00f42400 	.word	0x00f42400
 8004ccc:	017d7840 	.word	0x017d7840
 8004cd0:	00bb8000 	.word	0x00bb8000

08004cd4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e01c      	b.n	8004d20 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	795b      	ldrb	r3, [r3, #5]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f006 f910 	bl	800af1c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0204 	orr.w	r2, r2, #4
 8004d10:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	791b      	ldrb	r3, [r3, #4]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e03d      	b.n	8004dbe <HAL_RNG_GenerateRandomNumber+0x96>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	795b      	ldrb	r3, [r3, #5]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d12c      	bne.n	8004dac <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d58:	f7fb fbf8 	bl	800054c <HAL_GetTick>
 8004d5c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d5e:	e011      	b.n	8004d84 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d60:	f7fb fbf4 	bl	800054c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d90a      	bls.n	8004d84 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e01c      	b.n	8004dbe <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d1e6      	bne.n	8004d60 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	715a      	strb	r2, [r3, #5]
 8004daa:	e004      	b.n	8004db6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2204      	movs	r2, #4
 8004db0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	711a      	strb	r2, [r3, #4]

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ffa7 	bl	8004d28 <HAL_RNG_GenerateRandomNumber>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d102      	bne.n	8004de6 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	e000      	b.n	8004de8 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8004de6:	2300      	movs	r3, #0
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e06b      	b.n	8004eda <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7f5b      	ldrb	r3, [r3, #29]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f006 f8a2 	bl	800af5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	22ca      	movs	r2, #202	; 0xca
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2253      	movs	r2, #83	; 0x53
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fb00 	bl	8005434 <RTC_EnterInitMode>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	22ff      	movs	r2, #255	; 0xff
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2204      	movs	r2, #4
 8004e46:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e046      	b.n	8004eda <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <HAL_RTC_Init+0xf4>)
 8004e58:	400b      	ands	r3, r1
 8004e5a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6899      	ldr	r1, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68d2      	ldr	r2, [r2, #12]
 8004e82:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6919      	ldr	r1, [r3, #16]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	041a      	lsls	r2, r3, #16
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0208 	bic.w	r2, r2, #8
 8004eb6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	22ff      	movs	r2, #255	; 0xff
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	ff8fffbf 	.word	0xff8fffbf

08004ee8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	7f1b      	ldrb	r3, [r3, #28]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_RTC_SetTime+0x1c>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e0a8      	b.n	8005056 <HAL_RTC_SetTime+0x16e>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d126      	bne.n	8004f64 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2200      	movs	r2, #0
 8004f28:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 faac 	bl	800548c <RTC_ByteToBcd2>
 8004f34:	4603      	mov	r3, r0
 8004f36:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 faa5 	bl	800548c <RTC_ByteToBcd2>
 8004f42:	4603      	mov	r3, r0
 8004f44:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004f46:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	789b      	ldrb	r3, [r3, #2]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fa9d 	bl	800548c <RTC_ByteToBcd2>
 8004f52:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004f54:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	7b1b      	ldrb	r3, [r3, #12]
 8004f5c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e018      	b.n	8004f96 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2200      	movs	r2, #0
 8004f76:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004f84:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004f8a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	7b1b      	ldrb	r3, [r3, #12]
 8004f90:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	22ca      	movs	r2, #202	; 0xca
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2253      	movs	r2, #83	; 0x53
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 fa44 	bl	8005434 <RTC_EnterInitMode>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	22ff      	movs	r2, #255	; 0xff
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e045      	b.n	8005056 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	4b23      	ldr	r3, [pc, #140]	; (8005060 <HAL_RTC_SetTime+0x178>)
 8004fd2:	400b      	ands	r3, r1
 8004fd4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fe4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6899      	ldr	r1, [r3, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800500c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d111      	bne.n	8005040 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f9e1 	bl	80053e4 <HAL_RTC_WaitForSynchro>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2204      	movs	r2, #4
 8005034:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e00a      	b.n	8005056 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005054:	2300      	movs	r3, #0
  }
}
 8005056:	4618      	mov	r0, r3
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	bd90      	pop	{r4, r7, pc}
 800505e:	bf00      	nop
 8005060:	007f7f7f 	.word	0x007f7f7f

08005064 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005064:	b590      	push	{r4, r7, lr}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	7f1b      	ldrb	r3, [r3, #28]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_RTC_SetDate+0x1c>
 800507c:	2302      	movs	r3, #2
 800507e:	e092      	b.n	80051a6 <HAL_RTC_SetDate+0x142>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2202      	movs	r2, #2
 800508a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10e      	bne.n	80050b0 <HAL_RTC_SetDate+0x4c>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	f023 0310 	bic.w	r3, r3, #16
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	330a      	adds	r3, #10
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d11c      	bne.n	80050f0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	78db      	ldrb	r3, [r3, #3]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 f9e6 	bl	800548c <RTC_ByteToBcd2>
 80050c0:	4603      	mov	r3, r0
 80050c2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	785b      	ldrb	r3, [r3, #1]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f9df 	bl	800548c <RTC_ByteToBcd2>
 80050ce:	4603      	mov	r3, r0
 80050d0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80050d2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	789b      	ldrb	r3, [r3, #2]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 f9d7 	bl	800548c <RTC_ByteToBcd2>
 80050de:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80050e0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e00e      	b.n	800510e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	78db      	ldrb	r3, [r3, #3]
 80050f4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80050fc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005102:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	22ca      	movs	r2, #202	; 0xca
 8005114:	625a      	str	r2, [r3, #36]	; 0x24
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2253      	movs	r2, #83	; 0x53
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f988 	bl	8005434 <RTC_EnterInitMode>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00b      	beq.n	8005142 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	22ff      	movs	r2, #255	; 0xff
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2204      	movs	r2, #4
 8005136:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e031      	b.n	80051a6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	6979      	ldr	r1, [r7, #20]
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RTC_SetDate+0x14c>)
 800514a:	400b      	ands	r3, r1
 800514c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800515c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d111      	bne.n	8005190 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f939 	bl	80053e4 <HAL_RTC_WaitForSynchro>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	22ff      	movs	r2, #255	; 0xff
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2204      	movs	r2, #4
 8005184:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e00a      	b.n	80051a6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80051a4:	2300      	movs	r3, #0
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	00ffff3f 	.word	0x00ffff3f

080051b4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80051b4:	b590      	push	{r4, r7, lr}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	7f1b      	ldrb	r3, [r3, #28]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_RTC_SetAlarm+0x24>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e101      	b.n	80053dc <HAL_RTC_SetAlarm+0x228>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2202      	movs	r2, #2
 80051e2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d137      	bne.n	800525a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d102      	bne.n	80051fe <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f942 	bl	800548c <RTC_ByteToBcd2>
 8005208:	4603      	mov	r3, r0
 800520a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f93b 	bl	800548c <RTC_ByteToBcd2>
 8005216:	4603      	mov	r3, r0
 8005218:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800521a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	789b      	ldrb	r3, [r3, #2]
 8005220:	4618      	mov	r0, r3
 8005222:	f000 f933 	bl	800548c <RTC_ByteToBcd2>
 8005226:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005228:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	7b1b      	ldrb	r3, [r3, #12]
 8005230:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005232:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f925 	bl	800548c <RTC_ByteToBcd2>
 8005242:	4603      	mov	r3, r0
 8005244:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005246:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800524e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005254:	4313      	orrs	r3, r2
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e023      	b.n	80052a2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2200      	movs	r2, #0
 800526c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800527a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005280:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	7b1b      	ldrb	r3, [r3, #12]
 8005286:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005288:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005290:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005292:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005298:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800529e:	4313      	orrs	r3, r2
 80052a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	22ca      	movs	r2, #202	; 0xca
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2253      	movs	r2, #83	; 0x53
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c6:	d13f      	bne.n	8005348 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052e6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052e8:	f7fb f930 	bl	800054c <HAL_GetTick>
 80052ec:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80052ee:	e013      	b.n	8005318 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052f0:	f7fb f92c 	bl	800054c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052fe:	d90b      	bls.n	8005318 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	22ff      	movs	r2, #255	; 0xff
 8005306:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2203      	movs	r2, #3
 800530c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e061      	b.n	80053dc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0e4      	beq.n	80052f0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005344:	609a      	str	r2, [r3, #8]
 8005346:	e03e      	b.n	80053c6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005356:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005366:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005368:	f7fb f8f0 	bl	800054c <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800536e:	e013      	b.n	8005398 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005370:	f7fb f8ec 	bl	800054c <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800537e:	d90b      	bls.n	8005398 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	22ff      	movs	r2, #255	; 0xff
 8005386:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2203      	movs	r2, #3
 800538c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e021      	b.n	80053dc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0e4      	beq.n	8005370 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	22ff      	movs	r2, #255	; 0xff
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3724      	adds	r7, #36	; 0x24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd90      	pop	{r4, r7, pc}

080053e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053fe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005400:	f7fb f8a4 	bl	800054c <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005406:	e009      	b.n	800541c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005408:	f7fb f8a0 	bl	800054c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005416:	d901      	bls.n	800541c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e007      	b.n	800542c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0ee      	beq.n	8005408 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d119      	bne.n	8005482 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005458:	f7fb f878 	bl	800054c <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800545e:	e009      	b.n	8005474 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005460:	f7fb f874 	bl	800054c <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800546e:	d901      	bls.n	8005474 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e007      	b.n	8005484 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0ee      	beq.n	8005460 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800549a:	e005      	b.n	80054a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	3b0a      	subs	r3, #10
 80054a6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b09      	cmp	r3, #9
 80054ac:	d8f6      	bhi.n	800549c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	b2db      	uxtb	r3, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	7f1b      	ldrb	r3, [r3, #28]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e03e      	b.n	8005562 <HAL_RTCEx_SetTimeStamp+0x9a>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2202      	movs	r2, #2
 80054ee:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	22ca      	movs	r2, #202	; 0xca
 800550a:	625a      	str	r2, [r3, #36]	; 0x24
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2253      	movs	r2, #83	; 0x53
 8005512:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0206 	bic.w	r2, r2, #6
 8005522:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	430a      	orrs	r2, r1
 8005532:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800554a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	22ff      	movs	r2, #255	; 0xff
 8005552:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	fffff7f7 	.word	0xfffff7f7

08005574 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e149      	b.n	8005826 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f005 ffd0 	bl	800b54c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f94f 	bl	8005858 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d007      	beq.n	80055d2 <HAL_SAI_Init+0x5e>
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d302      	bcc.n	80055cc <HAL_SAI_Init+0x58>
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d006      	beq.n	80055d8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80055ca:	e008      	b.n	80055de <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61fb      	str	r3, [r7, #28]
      break;
 80055d0:	e005      	b.n	80055de <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80055d2:	2310      	movs	r3, #16
 80055d4:	61fb      	str	r3, [r7, #28]
      break;
 80055d6:	e002      	b.n	80055de <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80055d8:	2320      	movs	r3, #32
 80055da:	61fb      	str	r3, [r7, #28]
      break;
 80055dc:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d81d      	bhi.n	8005622 <HAL_SAI_Init+0xae>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <HAL_SAI_Init+0x78>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	080055fd 	.word	0x080055fd
 80055f0:	08005603 	.word	0x08005603
 80055f4:	0800560b 	.word	0x0800560b
 80055f8:	08005613 	.word	0x08005613
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]
      }
      break;
 8005600:	e010      	b.n	8005624 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8005602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005606:	617b      	str	r3, [r7, #20]
      }
      break;
 8005608:	e00c      	b.n	8005624 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800560a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800560e:	617b      	str	r3, [r7, #20]
      }
      break;
 8005610:	e008      	b.n	8005624 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005616:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8005620:	e000      	b.n	8005624 <HAL_SAI_Init+0xb0>
  default:
    break;
 8005622:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a81      	ldr	r2, [pc, #516]	; (8005830 <HAL_SAI_Init+0x2bc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d004      	beq.n	8005638 <HAL_SAI_Init+0xc4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a80      	ldr	r2, [pc, #512]	; (8005834 <HAL_SAI_Init+0x2c0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d103      	bne.n	8005640 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8005638:	4a7f      	ldr	r2, [pc, #508]	; (8005838 <HAL_SAI_Init+0x2c4>)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e002      	b.n	8005646 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005640:	4a7e      	ldr	r2, [pc, #504]	; (800583c <HAL_SAI_Init+0x2c8>)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d043      	beq.n	80056d6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a76      	ldr	r2, [pc, #472]	; (8005830 <HAL_SAI_Init+0x2bc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_SAI_Init+0xf2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a74      	ldr	r2, [pc, #464]	; (8005834 <HAL_SAI_Init+0x2c0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d104      	bne.n	8005670 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005666:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800566a:	f7ff f9ff 	bl	8004a6c <HAL_RCCEx_GetPeriphCLKFreq>
 800566e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a72      	ldr	r2, [pc, #456]	; (8005840 <HAL_SAI_Init+0x2cc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <HAL_SAI_Init+0x110>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a71      	ldr	r2, [pc, #452]	; (8005844 <HAL_SAI_Init+0x2d0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d104      	bne.n	800568e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005684:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005688:	f7ff f9f0 	bl	8004a6c <HAL_RCCEx_GetPeriphCLKFreq>
 800568c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	461a      	mov	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	025b      	lsls	r3, r3, #9
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a67      	ldr	r2, [pc, #412]	; (8005848 <HAL_SAI_Init+0x2d4>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	08da      	lsrs	r2, r3, #3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	4b64      	ldr	r3, [pc, #400]	; (8005848 <HAL_SAI_Init+0x2d4>)
 80056b8:	fba3 2301 	umull	r2, r3, r3, r1
 80056bc:	08da      	lsrs	r2, r3, #3
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	1aca      	subs	r2, r1, r3
 80056c8:	2a08      	cmp	r2, #8
 80056ca:	d904      	bls.n	80056d6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_SAI_Init+0x172>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d109      	bne.n	80056fa <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_SAI_Init+0x17e>
 80056ee:	2300      	movs	r3, #0
 80056f0:	e001      	b.n	80056f6 <HAL_SAI_Init+0x182>
 80056f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f6:	61bb      	str	r3, [r7, #24]
 80056f8:	e008      	b.n	800570c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d102      	bne.n	8005708 <HAL_SAI_Init+0x194>
 8005702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005706:	e000      	b.n	800570a <HAL_SAI_Init+0x196>
 8005708:	2300      	movs	r3, #0
 800570a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b4d      	ldr	r3, [pc, #308]	; (800584c <HAL_SAI_Init+0x2d8>)
 8005718:	400b      	ands	r3, r1
 800571a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6819      	ldr	r1, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005730:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	431a      	orrs	r2, r3
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005744:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005750:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	051b      	lsls	r3, r3, #20
 8005758:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b38      	ldr	r3, [pc, #224]	; (8005850 <HAL_SAI_Init+0x2dc>)
 800576e:	400b      	ands	r3, r1
 8005770:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6899      	ldr	r1, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b2e      	ldr	r3, [pc, #184]	; (8005854 <HAL_SAI_Init+0x2e0>)
 800579c:	400b      	ands	r3, r1
 800579e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6899      	ldr	r1, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80057b0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80057b6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80057bc:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	3b01      	subs	r3, #1
 80057c4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80057c6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68d9      	ldr	r1, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	f24f 0320 	movw	r3, #61472	; 0xf020
 80057de:	400b      	ands	r3, r1
 80057e0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68d9      	ldr	r1, [r3, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fe:	3b01      	subs	r3, #1
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40015804 	.word	0x40015804
 8005834:	40015824 	.word	0x40015824
 8005838:	40015800 	.word	0x40015800
 800583c:	40015c00 	.word	0x40015c00
 8005840:	40015c04 	.word	0x40015c04
 8005844:	40015c24 	.word	0x40015c24
 8005848:	cccccccd 	.word	0xcccccccd
 800584c:	ff05c010 	.word	0xff05c010
 8005850:	ffff1ff0 	.word	0xffff1ff0
 8005854:	fff88000 	.word	0xfff88000

08005858 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005858:	b490      	push	{r4, r7}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005860:	4b16      	ldr	r3, [pc, #88]	; (80058bc <SAI_Disable+0x64>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <SAI_Disable+0x68>)
 8005866:	fba2 2303 	umull	r2, r3, r2, r3
 800586a:	0b1b      	lsrs	r3, r3, #12
 800586c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005880:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005882:	4623      	mov	r3, r4
 8005884:	1e5c      	subs	r4, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005890:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	73fb      	strb	r3, [r7, #15]
      break;
 800589e:	e006      	b.n	80058ae <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e9      	bne.n	8005882 <SAI_Disable+0x2a>

  return status;
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc90      	pop	{r4, r7}
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000004 	.word	0x20000004
 80058c0:	95cbec1b 	.word	0x95cbec1b

080058c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e025      	b.n	8005924 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f005 fe23 	bl	800b538 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f001 fd35 	bl	8007374 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	461a      	mov	r2, r3
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	f001 fd9f 	bl	8007458 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e04c      	b.n	80059d8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f005 fb1c 	bl	800af90 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0203 	bic.w	r2, r2, #3
 800596e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <HAL_SPDIFRX_Init+0xb4>)
 800597c:	4013      	ands	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8005988:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800598e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8005994:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800599a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80059a0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80059a6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80059ac:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80059b2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80059b8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	fff88407 	.word	0xfff88407

080059e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e084      	b.n	8005b00 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f005 faff 	bl	800b014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a36:	d902      	bls.n	8005a3e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e002      	b.n	8005a44 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a42:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a4c:	d007      	beq.n	8005a5e <HAL_SPI_Init+0x7a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a56:	d002      	beq.n	8005a5e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a6e:	d903      	bls.n	8005a78 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
 8005a76:	e002      	b.n	8005a7e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	ea42 0103 	orr.w	r1, r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	f003 0204 	and.w	r2, r3, #4
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	ea42 0103 	orr.w	r1, r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69da      	ldr	r2, [r3, #28]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e01d      	b.n	8005b56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f005 fad2 	bl	800b0d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f000 fb78 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <HAL_TIM_Base_Start_IT+0x50>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b06      	cmp	r3, #6
 8005b88:	d00b      	beq.n	8005ba2 <HAL_TIM_Base_Start_IT+0x42>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b90:	d007      	beq.n	8005ba2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	00010007 	.word	0x00010007

08005bb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e01d      	b.n	8005c02 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f005 faf0 	bl	800b1c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f000 fb22 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b082      	sub	sp, #8
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d122      	bne.n	8005c66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d11b      	bne.n	8005c66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f06f 0202 	mvn.w	r2, #2
 8005c36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fad7 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005c52:	e005      	b.n	8005c60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fac9 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fada 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d122      	bne.n	8005cba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d11b      	bne.n	8005cba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f06f 0204 	mvn.w	r2, #4
 8005c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 faad 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005ca6:	e005      	b.n	8005cb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fa9f 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fab0 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d122      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f06f 0208 	mvn.w	r2, #8
 8005cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fa83 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005cfa:	e005      	b.n	8005d08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fa75 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fa86 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d122      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d11b      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0210 	mvn.w	r2, #16
 8005d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2208      	movs	r2, #8
 8005d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa59 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e005      	b.n	8005d5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa4b 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa5c 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d10e      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d107      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f06f 0201 	mvn.w	r2, #1
 8005d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f004 fd5b 	bl	800a844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b80      	cmp	r3, #128	; 0x80
 8005d9a:	d10e      	bne.n	8005dba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da6:	2b80      	cmp	r3, #128	; 0x80
 8005da8:	d107      	bne.n	8005dba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 febd 	bl	8006b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc8:	d10e      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b80      	cmp	r3, #128	; 0x80
 8005dd6:	d107      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 feb0 	bl	8006b48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df2:	2b40      	cmp	r3, #64	; 0x40
 8005df4:	d10e      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d107      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa0a 	bl	8006228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d10e      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d107      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0220 	mvn.w	r2, #32
 8005e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fe70 	bl	8006b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e105      	b.n	800606e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b14      	cmp	r3, #20
 8005e76:	f200 80f0 	bhi.w	800605a <HAL_TIM_PWM_ConfigChannel+0x212>
 8005e7a:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	0800605b 	.word	0x0800605b
 8005e88:	0800605b 	.word	0x0800605b
 8005e8c:	0800605b 	.word	0x0800605b
 8005e90:	08005f15 	.word	0x08005f15
 8005e94:	0800605b 	.word	0x0800605b
 8005e98:	0800605b 	.word	0x0800605b
 8005e9c:	0800605b 	.word	0x0800605b
 8005ea0:	08005f57 	.word	0x08005f57
 8005ea4:	0800605b 	.word	0x0800605b
 8005ea8:	0800605b 	.word	0x0800605b
 8005eac:	0800605b 	.word	0x0800605b
 8005eb0:	08005f97 	.word	0x08005f97
 8005eb4:	0800605b 	.word	0x0800605b
 8005eb8:	0800605b 	.word	0x0800605b
 8005ebc:	0800605b 	.word	0x0800605b
 8005ec0:	08005fd9 	.word	0x08005fd9
 8005ec4:	0800605b 	.word	0x0800605b
 8005ec8:	0800605b 	.word	0x0800605b
 8005ecc:	0800605b 	.word	0x0800605b
 8005ed0:	08006019 	.word	0x08006019
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fa4e 	bl	800637c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0208 	orr.w	r2, r2, #8
 8005eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699a      	ldr	r2, [r3, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0204 	bic.w	r2, r2, #4
 8005efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6999      	ldr	r1, [r3, #24]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	619a      	str	r2, [r3, #24]
      break;
 8005f12:	e0a3      	b.n	800605c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 faa0 	bl	8006460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6999      	ldr	r1, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	021a      	lsls	r2, r3, #8
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	619a      	str	r2, [r3, #24]
      break;
 8005f54:	e082      	b.n	800605c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 faf7 	bl	8006550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0208 	orr.w	r2, r2, #8
 8005f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0204 	bic.w	r2, r2, #4
 8005f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69d9      	ldr	r1, [r3, #28]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	61da      	str	r2, [r3, #28]
      break;
 8005f94:	e062      	b.n	800605c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fb4d 	bl	800663c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69d9      	ldr	r1, [r3, #28]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	021a      	lsls	r2, r3, #8
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	61da      	str	r2, [r3, #28]
      break;
 8005fd6:	e041      	b.n	800605c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 fb84 	bl	80066ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0208 	orr.w	r2, r2, #8
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0204 	bic.w	r2, r2, #4
 8006002:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006016:	e021      	b.n	800605c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fbb6 	bl	8006790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	021a      	lsls	r2, r3, #8
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006058:	e000      	b.n	800605c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800605a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop

08006078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_TIM_ConfigClockSource+0x18>
 800608c:	2302      	movs	r3, #2
 800608e:	e0a6      	b.n	80061de <HAL_TIM_ConfigClockSource+0x166>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <HAL_TIM_ConfigClockSource+0x170>)
 80060ac:	4013      	ands	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d067      	beq.n	8006198 <HAL_TIM_ConfigClockSource+0x120>
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d80b      	bhi.n	80060e4 <HAL_TIM_ConfigClockSource+0x6c>
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d073      	beq.n	80061b8 <HAL_TIM_ConfigClockSource+0x140>
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d802      	bhi.n	80060da <HAL_TIM_ConfigClockSource+0x62>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d06f      	beq.n	80061b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060d8:	e078      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d06c      	beq.n	80061b8 <HAL_TIM_ConfigClockSource+0x140>
 80060de:	2b30      	cmp	r3, #48	; 0x30
 80060e0:	d06a      	beq.n	80061b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060e2:	e073      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060e4:	2b70      	cmp	r3, #112	; 0x70
 80060e6:	d00d      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0x8c>
 80060e8:	2b70      	cmp	r3, #112	; 0x70
 80060ea:	d804      	bhi.n	80060f6 <HAL_TIM_ConfigClockSource+0x7e>
 80060ec:	2b50      	cmp	r3, #80	; 0x50
 80060ee:	d033      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0xe0>
 80060f0:	2b60      	cmp	r3, #96	; 0x60
 80060f2:	d041      	beq.n	8006178 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060f4:	e06a      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fa:	d066      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x152>
 80060fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006100:	d017      	beq.n	8006132 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006102:	e063      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6899      	ldr	r1, [r3, #8]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f000 fc0a 	bl	800692c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006126:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	609a      	str	r2, [r3, #8]
      break;
 8006130:	e04c      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f000 fbf3 	bl	800692c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006154:	609a      	str	r2, [r3, #8]
      break;
 8006156:	e039      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	6859      	ldr	r1, [r3, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	461a      	mov	r2, r3
 8006166:	f000 fb67 	bl	8006838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2150      	movs	r1, #80	; 0x50
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fbc0 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006176:	e029      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	461a      	mov	r2, r3
 8006186:	f000 fb86 	bl	8006896 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2160      	movs	r1, #96	; 0x60
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fbb0 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 8006196:	e019      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	461a      	mov	r2, r3
 80061a6:	f000 fb47 	bl	8006838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2140      	movs	r1, #64	; 0x40
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fba0 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80061b6:	e009      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f000 fb97 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80061c8:	e000      	b.n	80061cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80061ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	fffeff88 	.word	0xfffeff88

080061ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a40      	ldr	r2, [pc, #256]	; (8006350 <TIM_Base_SetConfig+0x114>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d00f      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a3d      	ldr	r2, [pc, #244]	; (8006354 <TIM_Base_SetConfig+0x118>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00b      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a3c      	ldr	r2, [pc, #240]	; (8006358 <TIM_Base_SetConfig+0x11c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d007      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3b      	ldr	r2, [pc, #236]	; (800635c <TIM_Base_SetConfig+0x120>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3a      	ldr	r2, [pc, #232]	; (8006360 <TIM_Base_SetConfig+0x124>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d108      	bne.n	800628e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <TIM_Base_SetConfig+0x114>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d02b      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629c:	d027      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2c      	ldr	r2, [pc, #176]	; (8006354 <TIM_Base_SetConfig+0x118>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d023      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2b      	ldr	r2, [pc, #172]	; (8006358 <TIM_Base_SetConfig+0x11c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01f      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2a      	ldr	r2, [pc, #168]	; (800635c <TIM_Base_SetConfig+0x120>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01b      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a29      	ldr	r2, [pc, #164]	; (8006360 <TIM_Base_SetConfig+0x124>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d017      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a28      	ldr	r2, [pc, #160]	; (8006364 <TIM_Base_SetConfig+0x128>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a27      	ldr	r2, [pc, #156]	; (8006368 <TIM_Base_SetConfig+0x12c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00f      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a26      	ldr	r2, [pc, #152]	; (800636c <TIM_Base_SetConfig+0x130>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00b      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a25      	ldr	r2, [pc, #148]	; (8006370 <TIM_Base_SetConfig+0x134>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d007      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a24      	ldr	r2, [pc, #144]	; (8006374 <TIM_Base_SetConfig+0x138>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a23      	ldr	r2, [pc, #140]	; (8006378 <TIM_Base_SetConfig+0x13c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d108      	bne.n	8006300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a0a      	ldr	r2, [pc, #40]	; (8006350 <TIM_Base_SetConfig+0x114>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_Base_SetConfig+0xf8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0c      	ldr	r2, [pc, #48]	; (8006360 <TIM_Base_SetConfig+0x124>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d103      	bne.n	800633c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	615a      	str	r2, [r3, #20]
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40010000 	.word	0x40010000
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40010400 	.word	0x40010400
 8006364:	40014000 	.word	0x40014000
 8006368:	40014400 	.word	0x40014400
 800636c:	40014800 	.word	0x40014800
 8006370:	40001800 	.word	0x40001800
 8006374:	40001c00 	.word	0x40001c00
 8006378:	40002000 	.word	0x40002000

0800637c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4b2b      	ldr	r3, [pc, #172]	; (8006454 <TIM_OC1_SetConfig+0xd8>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f023 0302 	bic.w	r3, r3, #2
 80063c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a21      	ldr	r2, [pc, #132]	; (8006458 <TIM_OC1_SetConfig+0xdc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_OC1_SetConfig+0x64>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a20      	ldr	r2, [pc, #128]	; (800645c <TIM_OC1_SetConfig+0xe0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10c      	bne.n	80063fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0308 	bic.w	r3, r3, #8
 80063e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f023 0304 	bic.w	r3, r3, #4
 80063f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a16      	ldr	r2, [pc, #88]	; (8006458 <TIM_OC1_SetConfig+0xdc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_OC1_SetConfig+0x8e>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a15      	ldr	r2, [pc, #84]	; (800645c <TIM_OC1_SetConfig+0xe0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d111      	bne.n	800642e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	621a      	str	r2, [r3, #32]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	fffeff8f 	.word	0xfffeff8f
 8006458:	40010000 	.word	0x40010000
 800645c:	40010400 	.word	0x40010400

08006460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0210 	bic.w	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4b2e      	ldr	r3, [pc, #184]	; (8006544 <TIM_OC2_SetConfig+0xe4>)
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f023 0320 	bic.w	r3, r3, #32
 80064aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a23      	ldr	r2, [pc, #140]	; (8006548 <TIM_OC2_SetConfig+0xe8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC2_SetConfig+0x68>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a22      	ldr	r2, [pc, #136]	; (800654c <TIM_OC2_SetConfig+0xec>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10d      	bne.n	80064e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a18      	ldr	r2, [pc, #96]	; (8006548 <TIM_OC2_SetConfig+0xe8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <TIM_OC2_SetConfig+0x94>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a17      	ldr	r2, [pc, #92]	; (800654c <TIM_OC2_SetConfig+0xec>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d113      	bne.n	800651c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	feff8fff 	.word	0xfeff8fff
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400

08006550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4b2d      	ldr	r3, [pc, #180]	; (8006630 <TIM_OC3_SetConfig+0xe0>)
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 0303 	bic.w	r3, r3, #3
 8006586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a22      	ldr	r2, [pc, #136]	; (8006634 <TIM_OC3_SetConfig+0xe4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d003      	beq.n	80065b6 <TIM_OC3_SetConfig+0x66>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a21      	ldr	r2, [pc, #132]	; (8006638 <TIM_OC3_SetConfig+0xe8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d10d      	bne.n	80065d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	021b      	lsls	r3, r3, #8
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a17      	ldr	r2, [pc, #92]	; (8006634 <TIM_OC3_SetConfig+0xe4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_OC3_SetConfig+0x92>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a16      	ldr	r2, [pc, #88]	; (8006638 <TIM_OC3_SetConfig+0xe8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d113      	bne.n	800660a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	011b      	lsls	r3, r3, #4
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4313      	orrs	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	621a      	str	r2, [r3, #32]
}
 8006624:	bf00      	nop
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	fffeff8f 	.word	0xfffeff8f
 8006634:	40010000 	.word	0x40010000
 8006638:	40010400 	.word	0x40010400

0800663c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4b1e      	ldr	r3, [pc, #120]	; (80066e0 <TIM_OC4_SetConfig+0xa4>)
 8006668:	4013      	ands	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <TIM_OC4_SetConfig+0xa8>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_OC4_SetConfig+0x68>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <TIM_OC4_SetConfig+0xac>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d109      	bne.n	80066b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	feff8fff 	.word	0xfeff8fff
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40010400 	.word	0x40010400

080066ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <TIM_OC5_SetConfig+0x98>)
 8006718:	4013      	ands	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800672c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a12      	ldr	r2, [pc, #72]	; (8006788 <TIM_OC5_SetConfig+0x9c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <TIM_OC5_SetConfig+0x5e>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a11      	ldr	r2, [pc, #68]	; (800678c <TIM_OC5_SetConfig+0xa0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d109      	bne.n	800675e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006750:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	621a      	str	r2, [r3, #32]
}
 8006778:	bf00      	nop
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	fffeff8f 	.word	0xfffeff8f
 8006788:	40010000 	.word	0x40010000
 800678c:	40010400 	.word	0x40010400

08006790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4b1c      	ldr	r3, [pc, #112]	; (800682c <TIM_OC6_SetConfig+0x9c>)
 80067bc:	4013      	ands	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	051b      	lsls	r3, r3, #20
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a13      	ldr	r2, [pc, #76]	; (8006830 <TIM_OC6_SetConfig+0xa0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_OC6_SetConfig+0x60>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a12      	ldr	r2, [pc, #72]	; (8006834 <TIM_OC6_SetConfig+0xa4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d109      	bne.n	8006804 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	029b      	lsls	r3, r3, #10
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	621a      	str	r2, [r3, #32]
}
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	feff8fff 	.word	0xfeff8fff
 8006830:	40010000 	.word	0x40010000
 8006834:	40010400 	.word	0x40010400

08006838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0201 	bic.w	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4313      	orrs	r3, r2
 800686c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 030a 	bic.w	r3, r3, #10
 8006874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006896:	b480      	push	{r7}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	f023 0210 	bic.w	r2, r3, #16
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	031b      	lsls	r3, r3, #12
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	f043 0307 	orr.w	r3, r3, #7
 8006918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	021a      	lsls	r2, r3, #8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	431a      	orrs	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	609a      	str	r2, [r3, #8]
}
 8006960:	bf00      	nop
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006980:	2302      	movs	r3, #2
 8006982:	e045      	b.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1c      	ldr	r2, [pc, #112]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1b      	ldr	r2, [pc, #108]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d108      	bne.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069e2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	40010000 	.word	0x40010000
 8006a20:	40010400 	.word	0x40010400

08006a24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e065      	b.n	8006b0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	041b      	lsls	r3, r3, #16
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a14      	ldr	r2, [pc, #80]	; (8006b1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d115      	bne.n	8006afa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	051b      	lsls	r3, r3, #20
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40010400 	.word	0x40010400

08006b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e040      	b.n	8006bf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f004 fbe8 	bl	800b354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2224      	movs	r2, #36	; 0x24
 8006b88:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0201 	bic.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f82c 	bl	8006bf8 <UART_SetConfig>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e022      	b.n	8006bf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fac4 	bl	8007140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fb4b 	bl	8007284 <UART_CheckIdleState>
 8006bee:	4603      	mov	r3, r0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4bb1      	ldr	r3, [pc, #708]	; (8006eec <UART_SetConfig+0x2f4>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	6939      	ldr	r1, [r7, #16]
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a9f      	ldr	r2, [pc, #636]	; (8006ef0 <UART_SetConfig+0x2f8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d121      	bne.n	8006cbc <UART_SetConfig+0xc4>
 8006c78:	4b9e      	ldr	r3, [pc, #632]	; (8006ef4 <UART_SetConfig+0x2fc>)
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d816      	bhi.n	8006cb4 <UART_SetConfig+0xbc>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x94>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006c9d 	.word	0x08006c9d
 8006c90:	08006ca9 	.word	0x08006ca9
 8006c94:	08006ca3 	.word	0x08006ca3
 8006c98:	08006caf 	.word	0x08006caf
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e151      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	77fb      	strb	r3, [r7, #31]
 8006ca6:	e14e      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006ca8:	2304      	movs	r3, #4
 8006caa:	77fb      	strb	r3, [r7, #31]
 8006cac:	e14b      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006cae:	2308      	movs	r3, #8
 8006cb0:	77fb      	strb	r3, [r7, #31]
 8006cb2:	e148      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	bf00      	nop
 8006cba:	e144      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a8d      	ldr	r2, [pc, #564]	; (8006ef8 <UART_SetConfig+0x300>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d134      	bne.n	8006d30 <UART_SetConfig+0x138>
 8006cc6:	4b8b      	ldr	r3, [pc, #556]	; (8006ef4 <UART_SetConfig+0x2fc>)
 8006cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ccc:	f003 030c 	and.w	r3, r3, #12
 8006cd0:	2b0c      	cmp	r3, #12
 8006cd2:	d829      	bhi.n	8006d28 <UART_SetConfig+0x130>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <UART_SetConfig+0xe4>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d11 	.word	0x08006d11
 8006ce0:	08006d29 	.word	0x08006d29
 8006ce4:	08006d29 	.word	0x08006d29
 8006ce8:	08006d29 	.word	0x08006d29
 8006cec:	08006d1d 	.word	0x08006d1d
 8006cf0:	08006d29 	.word	0x08006d29
 8006cf4:	08006d29 	.word	0x08006d29
 8006cf8:	08006d29 	.word	0x08006d29
 8006cfc:	08006d17 	.word	0x08006d17
 8006d00:	08006d29 	.word	0x08006d29
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d29 	.word	0x08006d29
 8006d0c:	08006d23 	.word	0x08006d23
 8006d10:	2300      	movs	r3, #0
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e117      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d16:	2302      	movs	r3, #2
 8006d18:	77fb      	strb	r3, [r7, #31]
 8006d1a:	e114      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	77fb      	strb	r3, [r7, #31]
 8006d20:	e111      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d22:	2308      	movs	r3, #8
 8006d24:	77fb      	strb	r3, [r7, #31]
 8006d26:	e10e      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	77fb      	strb	r3, [r7, #31]
 8006d2c:	bf00      	nop
 8006d2e:	e10a      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a71      	ldr	r2, [pc, #452]	; (8006efc <UART_SetConfig+0x304>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d120      	bne.n	8006d7c <UART_SetConfig+0x184>
 8006d3a:	4b6e      	ldr	r3, [pc, #440]	; (8006ef4 <UART_SetConfig+0x2fc>)
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d00f      	beq.n	8006d68 <UART_SetConfig+0x170>
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d802      	bhi.n	8006d52 <UART_SetConfig+0x15a>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <UART_SetConfig+0x164>
 8006d50:	e010      	b.n	8006d74 <UART_SetConfig+0x17c>
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d005      	beq.n	8006d62 <UART_SetConfig+0x16a>
 8006d56:	2b30      	cmp	r3, #48	; 0x30
 8006d58:	d009      	beq.n	8006d6e <UART_SetConfig+0x176>
 8006d5a:	e00b      	b.n	8006d74 <UART_SetConfig+0x17c>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e0f1      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d62:	2302      	movs	r3, #2
 8006d64:	77fb      	strb	r3, [r7, #31]
 8006d66:	e0ee      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	77fb      	strb	r3, [r7, #31]
 8006d6c:	e0eb      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d6e:	2308      	movs	r3, #8
 8006d70:	77fb      	strb	r3, [r7, #31]
 8006d72:	e0e8      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d74:	2310      	movs	r3, #16
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	bf00      	nop
 8006d7a:	e0e4      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a5f      	ldr	r2, [pc, #380]	; (8006f00 <UART_SetConfig+0x308>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d120      	bne.n	8006dc8 <UART_SetConfig+0x1d0>
 8006d86:	4b5b      	ldr	r3, [pc, #364]	; (8006ef4 <UART_SetConfig+0x2fc>)
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d00f      	beq.n	8006db4 <UART_SetConfig+0x1bc>
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d802      	bhi.n	8006d9e <UART_SetConfig+0x1a6>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <UART_SetConfig+0x1b0>
 8006d9c:	e010      	b.n	8006dc0 <UART_SetConfig+0x1c8>
 8006d9e:	2b80      	cmp	r3, #128	; 0x80
 8006da0:	d005      	beq.n	8006dae <UART_SetConfig+0x1b6>
 8006da2:	2bc0      	cmp	r3, #192	; 0xc0
 8006da4:	d009      	beq.n	8006dba <UART_SetConfig+0x1c2>
 8006da6:	e00b      	b.n	8006dc0 <UART_SetConfig+0x1c8>
 8006da8:	2300      	movs	r3, #0
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e0cb      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006dae:	2302      	movs	r3, #2
 8006db0:	77fb      	strb	r3, [r7, #31]
 8006db2:	e0c8      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006db4:	2304      	movs	r3, #4
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e0c5      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006dba:	2308      	movs	r3, #8
 8006dbc:	77fb      	strb	r3, [r7, #31]
 8006dbe:	e0c2      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	bf00      	nop
 8006dc6:	e0be      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a4d      	ldr	r2, [pc, #308]	; (8006f04 <UART_SetConfig+0x30c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d124      	bne.n	8006e1c <UART_SetConfig+0x224>
 8006dd2:	4b48      	ldr	r3, [pc, #288]	; (8006ef4 <UART_SetConfig+0x2fc>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de0:	d012      	beq.n	8006e08 <UART_SetConfig+0x210>
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de6:	d802      	bhi.n	8006dee <UART_SetConfig+0x1f6>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <UART_SetConfig+0x204>
 8006dec:	e012      	b.n	8006e14 <UART_SetConfig+0x21c>
 8006dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df2:	d006      	beq.n	8006e02 <UART_SetConfig+0x20a>
 8006df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df8:	d009      	beq.n	8006e0e <UART_SetConfig+0x216>
 8006dfa:	e00b      	b.n	8006e14 <UART_SetConfig+0x21c>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e0a1      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e02:	2302      	movs	r3, #2
 8006e04:	77fb      	strb	r3, [r7, #31]
 8006e06:	e09e      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	77fb      	strb	r3, [r7, #31]
 8006e0c:	e09b      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e0e:	2308      	movs	r3, #8
 8006e10:	77fb      	strb	r3, [r7, #31]
 8006e12:	e098      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e14:	2310      	movs	r3, #16
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	bf00      	nop
 8006e1a:	e094      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a39      	ldr	r2, [pc, #228]	; (8006f08 <UART_SetConfig+0x310>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d124      	bne.n	8006e70 <UART_SetConfig+0x278>
 8006e26:	4b33      	ldr	r3, [pc, #204]	; (8006ef4 <UART_SetConfig+0x2fc>)
 8006e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e34:	d012      	beq.n	8006e5c <UART_SetConfig+0x264>
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3a:	d802      	bhi.n	8006e42 <UART_SetConfig+0x24a>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <UART_SetConfig+0x258>
 8006e40:	e012      	b.n	8006e68 <UART_SetConfig+0x270>
 8006e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e46:	d006      	beq.n	8006e56 <UART_SetConfig+0x25e>
 8006e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e4c:	d009      	beq.n	8006e62 <UART_SetConfig+0x26a>
 8006e4e:	e00b      	b.n	8006e68 <UART_SetConfig+0x270>
 8006e50:	2301      	movs	r3, #1
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e077      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e56:	2302      	movs	r3, #2
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e074      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e071      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e62:	2308      	movs	r3, #8
 8006e64:	77fb      	strb	r3, [r7, #31]
 8006e66:	e06e      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e68:	2310      	movs	r3, #16
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	bf00      	nop
 8006e6e:	e06a      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <UART_SetConfig+0x314>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d124      	bne.n	8006ec4 <UART_SetConfig+0x2cc>
 8006e7a:	4b1e      	ldr	r3, [pc, #120]	; (8006ef4 <UART_SetConfig+0x2fc>)
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e88:	d012      	beq.n	8006eb0 <UART_SetConfig+0x2b8>
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8e:	d802      	bhi.n	8006e96 <UART_SetConfig+0x29e>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <UART_SetConfig+0x2ac>
 8006e94:	e012      	b.n	8006ebc <UART_SetConfig+0x2c4>
 8006e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e9a:	d006      	beq.n	8006eaa <UART_SetConfig+0x2b2>
 8006e9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ea0:	d009      	beq.n	8006eb6 <UART_SetConfig+0x2be>
 8006ea2:	e00b      	b.n	8006ebc <UART_SetConfig+0x2c4>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e04d      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e04a      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e047      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e044      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	bf00      	nop
 8006ec2:	e040      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a11      	ldr	r2, [pc, #68]	; (8006f10 <UART_SetConfig+0x318>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d139      	bne.n	8006f42 <UART_SetConfig+0x34a>
 8006ece:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <UART_SetConfig+0x2fc>)
 8006ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006edc:	d027      	beq.n	8006f2e <UART_SetConfig+0x336>
 8006ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ee2:	d817      	bhi.n	8006f14 <UART_SetConfig+0x31c>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01c      	beq.n	8006f22 <UART_SetConfig+0x32a>
 8006ee8:	e027      	b.n	8006f3a <UART_SetConfig+0x342>
 8006eea:	bf00      	nop
 8006eec:	efff69f3 	.word	0xefff69f3
 8006ef0:	40011000 	.word	0x40011000
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40004400 	.word	0x40004400
 8006efc:	40004800 	.word	0x40004800
 8006f00:	40004c00 	.word	0x40004c00
 8006f04:	40005000 	.word	0x40005000
 8006f08:	40011400 	.word	0x40011400
 8006f0c:	40007800 	.word	0x40007800
 8006f10:	40007c00 	.word	0x40007c00
 8006f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f18:	d006      	beq.n	8006f28 <UART_SetConfig+0x330>
 8006f1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f1e:	d009      	beq.n	8006f34 <UART_SetConfig+0x33c>
 8006f20:	e00b      	b.n	8006f3a <UART_SetConfig+0x342>
 8006f22:	2300      	movs	r3, #0
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e00e      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e00b      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006f2e:	2304      	movs	r3, #4
 8006f30:	77fb      	strb	r3, [r7, #31]
 8006f32:	e008      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006f34:	2308      	movs	r3, #8
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	e005      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006f3a:	2310      	movs	r3, #16
 8006f3c:	77fb      	strb	r3, [r7, #31]
 8006f3e:	bf00      	nop
 8006f40:	e001      	b.n	8006f46 <UART_SetConfig+0x34e>
 8006f42:	2310      	movs	r3, #16
 8006f44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4e:	d17c      	bne.n	800704a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8006f50:	7ffb      	ldrb	r3, [r7, #31]
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d859      	bhi.n	800700a <UART_SetConfig+0x412>
 8006f56:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <UART_SetConfig+0x364>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f9f 	.word	0x08006f9f
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	0800700b 	.word	0x0800700b
 8006f6c:	08006fd5 	.word	0x08006fd5
 8006f70:	0800700b 	.word	0x0800700b
 8006f74:	0800700b 	.word	0x0800700b
 8006f78:	0800700b 	.word	0x0800700b
 8006f7c:	08006ff3 	.word	0x08006ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006f80:	f7fd f92c 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8006f84:	4603      	mov	r3, r0
 8006f86:	005a      	lsls	r2, r3, #1
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	441a      	add	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	61bb      	str	r3, [r7, #24]
        break;
 8006f9c:	e038      	b.n	8007010 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006f9e:	f7fd f931 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	005a      	lsls	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	441a      	add	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	61bb      	str	r3, [r7, #24]
        break;
 8006fba:	e029      	b.n	8007010 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	085a      	lsrs	r2, r3, #1
 8006fc2:	4b5d      	ldr	r3, [pc, #372]	; (8007138 <UART_SetConfig+0x540>)
 8006fc4:	4413      	add	r3, r2
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6852      	ldr	r2, [r2, #4]
 8006fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	61bb      	str	r3, [r7, #24]
        break;
 8006fd2:	e01d      	b.n	8007010 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006fd4:	f7fd f844 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	005a      	lsls	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	085b      	lsrs	r3, r3, #1
 8006fe2:	441a      	add	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	61bb      	str	r3, [r7, #24]
        break;
 8006ff0:	e00e      	b.n	8007010 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	fbb2 f3f3 	udiv	r3, r2, r3
 8007004:	b29b      	uxth	r3, r3
 8007006:	61bb      	str	r3, [r7, #24]
        break;
 8007008:	e002      	b.n	8007010 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	75fb      	strb	r3, [r7, #23]
        break;
 800700e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b0f      	cmp	r3, #15
 8007014:	d916      	bls.n	8007044 <UART_SetConfig+0x44c>
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701c:	d212      	bcs.n	8007044 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f023 030f 	bic.w	r3, r3, #15
 8007026:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	085b      	lsrs	r3, r3, #1
 800702c:	b29b      	uxth	r3, r3
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	b29a      	uxth	r2, r3
 8007034:	89fb      	ldrh	r3, [r7, #14]
 8007036:	4313      	orrs	r3, r2
 8007038:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	89fa      	ldrh	r2, [r7, #14]
 8007040:	60da      	str	r2, [r3, #12]
 8007042:	e06e      	b.n	8007122 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	75fb      	strb	r3, [r7, #23]
 8007048:	e06b      	b.n	8007122 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800704a:	7ffb      	ldrb	r3, [r7, #31]
 800704c:	2b08      	cmp	r3, #8
 800704e:	d857      	bhi.n	8007100 <UART_SetConfig+0x508>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x460>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	0800707d 	.word	0x0800707d
 800705c:	08007099 	.word	0x08007099
 8007060:	080070b5 	.word	0x080070b5
 8007064:	08007101 	.word	0x08007101
 8007068:	080070cd 	.word	0x080070cd
 800706c:	08007101 	.word	0x08007101
 8007070:	08007101 	.word	0x08007101
 8007074:	08007101 	.word	0x08007101
 8007078:	080070e9 	.word	0x080070e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800707c:	f7fd f8ae 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8007080:	4602      	mov	r2, r0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	441a      	add	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	61bb      	str	r3, [r7, #24]
        break;
 8007096:	e036      	b.n	8007106 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007098:	f7fd f8b4 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 800709c:	4602      	mov	r2, r0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	61bb      	str	r3, [r7, #24]
        break;
 80070b2:	e028      	b.n	8007106 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	085a      	lsrs	r2, r3, #1
 80070ba:	4b20      	ldr	r3, [pc, #128]	; (800713c <UART_SetConfig+0x544>)
 80070bc:	4413      	add	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6852      	ldr	r2, [r2, #4]
 80070c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	61bb      	str	r3, [r7, #24]
        break;
 80070ca:	e01c      	b.n	8007106 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80070cc:	f7fc ffc8 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	441a      	add	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	61bb      	str	r3, [r7, #24]
        break;
 80070e6:	e00e      	b.n	8007106 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	61bb      	str	r3, [r7, #24]
        break;
 80070fe:	e002      	b.n	8007106 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
        break;
 8007104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b0f      	cmp	r3, #15
 800710a:	d908      	bls.n	800711e <UART_SetConfig+0x526>
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007112:	d204      	bcs.n	800711e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	60da      	str	r2, [r3, #12]
 800711c:	e001      	b.n	8007122 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800712e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	01e84800 	.word	0x01e84800
 800713c:	00f42400 	.word	0x00f42400

08007140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01a      	beq.n	8007256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800723e:	d10a      	bne.n	8007256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	605a      	str	r2, [r3, #4]
  }
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af02      	add	r7, sp, #8
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007292:	f7f9 f95b 	bl	800054c <HAL_GetTick>
 8007296:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b08      	cmp	r3, #8
 80072a4:	d10e      	bne.n	80072c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f814 	bl	80072e2 <UART_WaitOnFlagUntilTimeout>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e00a      	b.n	80072da <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	603b      	str	r3, [r7, #0]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	e02a      	b.n	800734a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d026      	beq.n	800734a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fc:	f7f9 f926 	bl	800054c <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	429a      	cmp	r2, r3
 800730a:	d302      	bcc.n	8007312 <UART_WaitOnFlagUntilTimeout+0x30>
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d11b      	bne.n	800734a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007320:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e00f      	b.n	800736a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69da      	ldr	r2, [r3, #28]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4013      	ands	r3, r2
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	429a      	cmp	r2, r3
 8007358:	bf0c      	ite	eq
 800735a:	2301      	moveq	r3, #1
 800735c:	2300      	movne	r3, #0
 800735e:	b2db      	uxtb	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	429a      	cmp	r2, r3
 8007366:	d0c5      	beq.n	80072f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d027      	beq.n	80073de <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4b2f      	ldr	r3, [pc, #188]	; (8007454 <FMC_SDRAM_Init+0xe0>)
 8007398:	4013      	ands	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073a4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80073aa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80073b0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80073b6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80073bc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80073c2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80073c8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80073ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e032      	b.n	8007444 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ea:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80073fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <FMC_SDRAM_Init+0xe0>)
 800740c:	4013      	ands	r3, r2
 800740e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007418:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800741e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007424:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800742a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007430:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	4313      	orrs	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	ffff8000 	.word	0xffff8000

08007458 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d02e      	beq.n	80074d0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800747e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	3b01      	subs	r3, #1
 800748c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800748e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	3b01      	subs	r3, #1
 8007496:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007498:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	3b01      	subs	r3, #1
 80074a0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80074a2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80074ac:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80074b6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	3b01      	subs	r3, #1
 80074be:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80074c0:	4313      	orrs	r3, r2
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	609a      	str	r2, [r3, #8]
 80074ce:	e039      	b.n	8007544 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <FMC_SDRAM_Timing_Init+0xfc>)
 80074da:	4013      	ands	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80074ee:	4313      	orrs	r3, r2
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007502:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	3b01      	subs	r3, #1
 8007510:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007512:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	3b01      	subs	r3, #1
 800751a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800751c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	3b01      	subs	r3, #1
 8007524:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007526:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	3b01      	subs	r3, #1
 800752e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007530:	4313      	orrs	r3, r2
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	ff0f0fff 	.word	0xff0f0fff

08007558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f043 0201 	orr.w	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f023 0201 	bic.w	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	019b      	lsls	r3, r3, #6
 80075ae:	f043 0220 	orr.w	r2, r3, #32
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <USB_FlushTxFifo+0x48>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d901      	bls.n	80075c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d0f0      	beq.n	80075b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	00030d40 	.word	0x00030d40

080075e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2210      	movs	r2, #16
 80075f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3301      	adds	r3, #1
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a09      	ldr	r2, [pc, #36]	; (8007628 <USB_FlushRxFifo+0x40>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d901      	bls.n	800760c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e006      	b.n	800761a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	2b10      	cmp	r3, #16
 8007616:	d0f0      	beq.n	80075fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	00030d40 	.word	0x00030d40

0800762c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800762c:	b480      	push	{r7}
 800762e:	b089      	sub	sp, #36	; 0x24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	4611      	mov	r1, r2
 8007638:	461a      	mov	r2, r3
 800763a:	460b      	mov	r3, r1
 800763c:	71fb      	strb	r3, [r7, #7]
 800763e:	4613      	mov	r3, r2
 8007640:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800764a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d11a      	bne.n	8007688 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007652:	88bb      	ldrh	r3, [r7, #4]
 8007654:	3303      	adds	r3, #3
 8007656:	089b      	lsrs	r3, r3, #2
 8007658:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800765a:	2300      	movs	r3, #0
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	e00f      	b.n	8007680 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	031a      	lsls	r2, r3, #12
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4413      	add	r3, r2
 8007668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766c:	461a      	mov	r2, r3
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	3304      	adds	r3, #4
 8007678:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	3301      	adds	r3, #1
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	429a      	cmp	r2, r3
 8007686:	d3eb      	bcc.n	8007660 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3724      	adds	r7, #36	; 0x24
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007696:	b480      	push	{r7}
 8007698:	b089      	sub	sp, #36	; 0x24
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	4613      	mov	r3, r2
 80076a2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80076ac:	88fb      	ldrh	r3, [r7, #6]
 80076ae:	3303      	adds	r3, #3
 80076b0:	089b      	lsrs	r3, r3, #2
 80076b2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80076b4:	2300      	movs	r3, #0
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	e00b      	b.n	80076d2 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	601a      	str	r2, [r3, #0]
    pDest++;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	3304      	adds	r3, #4
 80076ca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	3301      	adds	r3, #1
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d3ef      	bcc.n	80076ba <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80076da:	69fb      	ldr	r3, [r7, #28]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3724      	adds	r7, #36	; 0x24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4013      	ands	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007700:	68fb      	ldr	r3, [r7, #12]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	f003 0301 	and.w	r3, r3, #1
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007748:	f023 0303 	bic.w	r3, r3, #3
 800774c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	f003 0303 	and.w	r3, r3, #3
 800775c:	68f9      	ldr	r1, [r7, #12]
 800775e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007762:	4313      	orrs	r3, r2
 8007764:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d107      	bne.n	800777c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007772:	461a      	mov	r2, r3
 8007774:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007778:	6053      	str	r3, [r2, #4]
 800777a:	e009      	b.n	8007790 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d106      	bne.n	8007790 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007788:	461a      	mov	r2, r3
 800778a:	f241 7370 	movw	r3, #6000	; 0x1770
 800778e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077be:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80077ce:	2064      	movs	r0, #100	; 0x64
 80077d0:	f7f8 fec8 	bl	8000564 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077e2:	200a      	movs	r0, #10
 80077e4:	f7f8 febe 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	460b      	mov	r3, r1
 80077fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007816:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d109      	bne.n	8007836 <USB_DriveVbus+0x44>
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d106      	bne.n	8007836 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007834:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800783c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007840:	d109      	bne.n	8007856 <USB_DriveVbus+0x64>
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d106      	bne.n	8007856 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007854:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	0c5b      	lsrs	r3, r3, #17
 8007882:	f003 0303 	and.w	r3, r3, #3
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
	...

08007894 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	4608      	mov	r0, r1
 800789e:	4611      	mov	r1, r2
 80078a0:	461a      	mov	r2, r3
 80078a2:	4603      	mov	r3, r0
 80078a4:	70fb      	strb	r3, [r7, #3]
 80078a6:	460b      	mov	r3, r1
 80078a8:	70bb      	strb	r3, [r7, #2]
 80078aa:	4613      	mov	r3, r2
 80078ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c2:	461a      	mov	r2, r3
 80078c4:	f04f 33ff 	mov.w	r3, #4294967295
 80078c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d87e      	bhi.n	80079d0 <USB_HC_Init+0x13c>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <USB_HC_Init+0x44>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078e9 	.word	0x080078e9
 80078dc:	08007993 	.word	0x08007993
 80078e0:	080078e9 	.word	0x080078e9
 80078e4:	08007955 	.word	0x08007955
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f4:	461a      	mov	r2, r3
 80078f6:	f240 439d 	movw	r3, #1181	; 0x49d
 80078fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80078fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007900:	2b00      	cmp	r3, #0
 8007902:	da10      	bge.n	8007926 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4413      	add	r3, r2
 800790c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	78fa      	ldrb	r2, [r7, #3]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	440a      	add	r2, r1
 800791a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800791e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007922:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007924:	e057      	b.n	80079d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792e:	2b00      	cmp	r3, #0
 8007930:	d051      	beq.n	80079d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	4413      	add	r3, r2
 800793a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	78fa      	ldrb	r2, [r7, #3]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	440a      	add	r2, r1
 8007948:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800794c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007950:	60d3      	str	r3, [r2, #12]
      break;
 8007952:	e040      	b.n	80079d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007960:	461a      	mov	r2, r3
 8007962:	f240 639d 	movw	r3, #1693	; 0x69d
 8007966:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007968:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800796c:	2b00      	cmp	r3, #0
 800796e:	da34      	bge.n	80079da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4413      	add	r3, r2
 8007978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	440a      	add	r2, r1
 8007986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800798a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800798e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007990:	e023      	b.n	80079da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	4413      	add	r3, r2
 800799a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799e:	461a      	mov	r2, r3
 80079a0:	f240 2325 	movw	r3, #549	; 0x225
 80079a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da17      	bge.n	80079de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80079ae:	78fb      	ldrb	r3, [r7, #3]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	0151      	lsls	r1, r2, #5
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	440a      	add	r2, r1
 80079c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80079cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079ce:	e006      	b.n	80079de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	75fb      	strb	r3, [r7, #23]
      break;
 80079d4:	e004      	b.n	80079e0 <USB_HC_Init+0x14c>
      break;
 80079d6:	bf00      	nop
 80079d8:	e002      	b.n	80079e0 <USB_HC_Init+0x14c>
      break;
 80079da:	bf00      	nop
 80079dc:	e000      	b.n	80079e0 <USB_HC_Init+0x14c>
      break;
 80079de:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e6:	699a      	ldr	r2, [r3, #24]
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	f003 030f 	and.w	r3, r3, #15
 80079ee:	2101      	movs	r1, #1
 80079f0:	fa01 f303 	lsl.w	r3, r1, r3
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079fa:	4313      	orrs	r3, r2
 80079fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	da03      	bge.n	8007a1a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	e001      	b.n	8007a1e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007a1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d103      	bne.n	8007a2e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e001      	b.n	8007a32 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a32:	787b      	ldrb	r3, [r7, #1]
 8007a34:	059b      	lsls	r3, r3, #22
 8007a36:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a3a:	78bb      	ldrb	r3, [r7, #2]
 8007a3c:	02db      	lsls	r3, r3, #11
 8007a3e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a42:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a48:	049b      	lsls	r3, r3, #18
 8007a4a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a4e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a56:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	0159      	lsls	r1, r3, #5
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	440b      	add	r3, r1
 8007a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a68:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a6e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	d10f      	bne.n	8007a98 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a96:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop

08007aa8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08c      	sub	sp, #48	; 0x30
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ac4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d028      	beq.n	8007b24 <USB_HC_StartXfer+0x7c>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	791b      	ldrb	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d124      	bne.n	8007b24 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <USB_HC_StartXfer+0x50>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	795b      	ldrb	r3, [r3, #5]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d107      	bne.n	8007af8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	4619      	mov	r1, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fa2e 	bl	8007f50 <USB_DoPing>
      return HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e112      	b.n	8007d1e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d112      	bne.n	8007b24 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	0151      	lsls	r1, r2, #5
 8007b10:	6a3a      	ldr	r2, [r7, #32]
 8007b12:	440a      	add	r2, r1
 8007b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b18:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007b1c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d018      	beq.n	8007b5e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	8912      	ldrh	r2, [r2, #8]
 8007b34:	4413      	add	r3, r2
 8007b36:	3b01      	subs	r3, #1
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	8912      	ldrh	r2, [r2, #8]
 8007b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b40:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b44:	8b7b      	ldrh	r3, [r7, #26]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d90b      	bls.n	8007b62 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007b4a:	8b7b      	ldrh	r3, [r7, #26]
 8007b4c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	8912      	ldrh	r2, [r2, #8]
 8007b54:	fb02 f203 	mul.w	r2, r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	611a      	str	r2, [r3, #16]
 8007b5c:	e001      	b.n	8007b62 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	78db      	ldrb	r3, [r3, #3]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007b6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	8912      	ldrh	r2, [r2, #8]
 8007b70:	fb02 f203 	mul.w	r2, r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b82:	04d9      	lsls	r1, r3, #19
 8007b84:	4b68      	ldr	r3, [pc, #416]	; (8007d28 <USB_HC_StartXfer+0x280>)
 8007b86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	7a9b      	ldrb	r3, [r3, #10]
 8007b8e:	075b      	lsls	r3, r3, #29
 8007b90:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b94:	69f9      	ldr	r1, [r7, #28]
 8007b96:	0148      	lsls	r0, r1, #5
 8007b98:	6a39      	ldr	r1, [r7, #32]
 8007b9a:	4401      	add	r1, r0
 8007b9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ba0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ba2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d009      	beq.n	8007bbe <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	68d9      	ldr	r1, [r3, #12]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bba:	460a      	mov	r2, r1
 8007bbc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bf0c      	ite	eq
 8007bce:	2301      	moveq	r3, #1
 8007bd0:	2300      	movne	r3, #0
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	6a3a      	ldr	r2, [r7, #32]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bf4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	7e7b      	ldrb	r3, [r7, #25]
 8007c06:	075b      	lsls	r3, r3, #29
 8007c08:	69f9      	ldr	r1, [r7, #28]
 8007c0a:	0148      	lsls	r0, r1, #5
 8007c0c:	6a39      	ldr	r1, [r7, #32]
 8007c0e:	4401      	add	r1, r0
 8007c10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c14:	4313      	orrs	r3, r2
 8007c16:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a41      	ldr	r2, [pc, #260]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c28:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c2a:	4b40      	ldr	r3, [pc, #256]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c32:	4a3e      	ldr	r2, [pc, #248]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c34:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	78db      	ldrb	r3, [r3, #3]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d006      	beq.n	8007c4c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c3e:	4b3b      	ldr	r3, [pc, #236]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c46:	4a39      	ldr	r2, [pc, #228]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	e005      	b.n	8007c58 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c4c:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c54:	4a35      	ldr	r2, [pc, #212]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c56:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c58:	4b34      	ldr	r3, [pc, #208]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c60:	4a32      	ldr	r2, [pc, #200]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c62:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c70:	461a      	mov	r2, r3
 8007c72:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <USB_HC_StartXfer+0x284>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d14e      	bne.n	8007d1c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	78db      	ldrb	r3, [r3, #3]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d14a      	bne.n	8007d1c <USB_HC_StartXfer+0x274>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d046      	beq.n	8007d1c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	79db      	ldrb	r3, [r3, #7]
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d830      	bhi.n	8007cf8 <USB_HC_StartXfer+0x250>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <USB_HC_StartXfer+0x1f4>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cad 	.word	0x08007cad
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007cad 	.word	0x08007cad
 8007ca8:	08007cd1 	.word	0x08007cd1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	3303      	adds	r3, #3
 8007cb2:	089b      	lsrs	r3, r3, #2
 8007cb4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cb6:	8afa      	ldrh	r2, [r7, #22]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d91c      	bls.n	8007cfc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f043 0220 	orr.w	r2, r3, #32
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	619a      	str	r2, [r3, #24]
          }
          break;
 8007cce:	e015      	b.n	8007cfc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	3303      	adds	r3, #3
 8007cd6:	089b      	lsrs	r3, r3, #2
 8007cd8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007cda:	8afa      	ldrh	r2, [r7, #22]
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d90a      	bls.n	8007d00 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	619a      	str	r2, [r3, #24]
          }
          break;
 8007cf6:	e003      	b.n	8007d00 <USB_HC_StartXfer+0x258>

        default:
          break;
 8007cf8:	bf00      	nop
 8007cfa:	e002      	b.n	8007d02 <USB_HC_StartXfer+0x25a>
          break;
 8007cfc:	bf00      	nop
 8007cfe:	e000      	b.n	8007d02 <USB_HC_StartXfer+0x25a>
          break;
 8007d00:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	68d9      	ldr	r1, [r3, #12]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	785a      	ldrb	r2, [r3, #1]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	b298      	uxth	r0, r3
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4603      	mov	r3, r0
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff fc88 	bl	800762c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	1ff80000 	.word	0x1ff80000
 8007d2c:	20000024 	.word	0x20000024

08007d30 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	b29b      	uxth	r3, r3
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b087      	sub	sp, #28
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	0c9b      	lsrs	r3, r3, #18
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <USB_HC_Halt+0x3a>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d16c      	bne.n	8007e66 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007da6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007daa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d143      	bne.n	8007e40 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007df6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e16:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e24:	d81d      	bhi.n	8007e62 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e3c:	d0ec      	beq.n	8007e18 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e3e:	e080      	b.n	8007f42 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e5e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e60:	e06f      	b.n	8007f42 <USB_HC_Halt+0x1f0>
          break;
 8007e62:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e64:	e06d      	b.n	8007f42 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	0151      	lsls	r1, r2, #5
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	440a      	add	r2, r1
 8007e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e84:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d143      	bne.n	8007f1e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eb4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	0151      	lsls	r1, r2, #5
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	440a      	add	r2, r1
 8007ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ed4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ef4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f02:	d81d      	bhi.n	8007f40 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f1a:	d0ec      	beq.n	8007ef6 <USB_HC_Halt+0x1a4>
 8007f1c:	e011      	b.n	8007f42 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	0151      	lsls	r1, r2, #5
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	440a      	add	r2, r1
 8007f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	e000      	b.n	8007f42 <USB_HC_Halt+0x1f0>
          break;
 8007f40:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f64:	2301      	movs	r3, #1
 8007f66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	04da      	lsls	r2, r3, #19
 8007f6c:	4b15      	ldr	r3, [pc, #84]	; (8007fc4 <USB_DoPing+0x74>)
 8007f6e:	4013      	ands	r3, r2
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	0151      	lsls	r1, r2, #5
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	440a      	add	r2, r1
 8007f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f80:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f98:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fa0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	1ff80000 	.word	0x1ff80000

08007fc8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff face 	bl	800757a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007fde:	2110      	movs	r1, #16
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f7ff fadb 	bl	800759c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff fafe 	bl	80075e8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fec:	2300      	movs	r3, #0
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	e01f      	b.n	8008032 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008008:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008010:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008018:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	3301      	adds	r3, #1
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b0f      	cmp	r3, #15
 8008036:	d9dc      	bls.n	8007ff2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008038:	2300      	movs	r3, #0
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	e034      	b.n	80080a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4413      	add	r3, r2
 8008046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008054:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800805c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008064:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008072:	461a      	mov	r2, r3
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	3301      	adds	r3, #1
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008084:	d80c      	bhi.n	80080a0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4413      	add	r3, r2
 800808e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800809c:	d0ec      	beq.n	8008078 <USB_StopHost+0xb0>
 800809e:	e000      	b.n	80080a2 <USB_StopHost+0xda>
        break;
 80080a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	3301      	adds	r3, #1
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	d9c7      	bls.n	800803e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080b4:	461a      	mov	r2, r3
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f04f 32ff 	mov.w	r2, #4294967295
 80080c2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fa47 	bl	8007558 <USB_EnableGlobalInt>

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80080e0:	e008      	b.n	80080f4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	32e0      	adds	r2, #224	; 0xe0
 80080e8:	2100      	movs	r1, #0
 80080ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b0e      	cmp	r3, #14
 80080f8:	d9f3      	bls.n	80080e2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	e009      	b.n	8008114 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4413      	add	r3, r2
 8008106:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3301      	adds	r3, #1
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800811a:	d3f1      	bcc.n	8008100 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2240      	movs	r2, #64	; 0x40
 8008140:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
	...

08008168 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af04      	add	r7, sp, #16
 800816e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008170:	2302      	movs	r3, #2
 8008172:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fadd 	bl	8008738 <USBH_IsPortEnabled>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10c      	bne.n	800819e <USBH_Process+0x36>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b03      	cmp	r3, #3
 8008196:	d002      	beq.n	800819e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2203      	movs	r2, #3
 800819c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b0b      	cmp	r3, #11
 80081a6:	f200 814c 	bhi.w	8008442 <USBH_Process+0x2da>
 80081aa:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <USBH_Process+0x48>)
 80081ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b0:	080081e1 	.word	0x080081e1
 80081b4:	08008203 	.word	0x08008203
 80081b8:	08008217 	.word	0x08008217
 80081bc:	0800841d 	.word	0x0800841d
 80081c0:	08008443 	.word	0x08008443
 80081c4:	080082a5 	.word	0x080082a5
 80081c8:	080083d3 	.word	0x080083d3
 80081cc:	080082d5 	.word	0x080082d5
 80081d0:	080082f5 	.word	0x080082f5
 80081d4:	08008315 	.word	0x08008315
 80081d8:	08008343 	.word	0x08008343
 80081dc:	08008405 	.word	0x08008405
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 812c 	beq.w	8008446 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80081f4:	20c8      	movs	r0, #200	; 0xc8
 80081f6:	f003 fc4e 	bl	800ba96 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f003 fbbd 	bl	800b97a <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008200:	e121      	b.n	8008446 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008208:	2b01      	cmp	r3, #1
 800820a:	f040 811e 	bne.w	800844a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2202      	movs	r2, #2
 8008212:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008214:	e119      	b.n	800844a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8008216:	2064      	movs	r0, #100	; 0x64
 8008218:	f003 fc3d 	bl	800ba96 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f003 fb87 	bl	800b930 <USBH_LL_GetSpeed>
 8008222:	4603      	mov	r3, r0
 8008224:	461a      	mov	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2205      	movs	r2, #5
 8008230:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8008232:	2100      	movs	r1, #0
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 ffe3 	bl	8009200 <USBH_AllocPipe>
 800823a:	4603      	mov	r3, r0
 800823c:	461a      	mov	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8008242:	2180      	movs	r1, #128	; 0x80
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 ffdb 	bl	8009200 <USBH_AllocPipe>
 800824a:	4603      	mov	r3, r0
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7919      	ldrb	r1, [r3, #4]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008266:	b292      	uxth	r2, r2
 8008268:	9202      	str	r2, [sp, #8]
 800826a:	2200      	movs	r2, #0
 800826c:	9201      	str	r2, [sp, #4]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	4603      	mov	r3, r0
 8008272:	2280      	movs	r2, #128	; 0x80
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 ffa4 	bl	80091c2 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7959      	ldrb	r1, [r3, #5]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800828e:	b292      	uxth	r2, r2
 8008290:	9202      	str	r2, [sp, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	4603      	mov	r3, r0
 800829a:	2200      	movs	r2, #0
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 ff90 	bl	80091c2 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80082a2:	e0e3      	b.n	800846c <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f8e7 	bl	8008478 <USBH_HandleEnum>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f040 80ce 	bne.w	800844e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d103      	bne.n	80082cc <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2208      	movs	r2, #8
 80082c8:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80082ca:	e0c0      	b.n	800844e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2207      	movs	r2, #7
 80082d0:	701a      	strb	r2, [r3, #0]
    break;
 80082d2:	e0bc      	b.n	800844e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80b9 	beq.w	8008452 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80082e6:	2101      	movs	r1, #1
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2208      	movs	r2, #8
 80082f0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80082f2:	e0ae      	b.n	8008452 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fb4a 	bl	8008998 <USBH_SetCfg>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	f040 80a5 	bne.w	8008456 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2209      	movs	r2, #9
 8008310:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008312:	e0a0      	b.n	8008456 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00b      	beq.n	800833a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008322:	2101      	movs	r1, #1
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fb5a 	bl	80089de <USBH_SetFeature>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 8094 	bne.w	800845a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	220a      	movs	r2, #10
 8008336:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008338:	e08f      	b.n	800845a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	220a      	movs	r2, #10
 800833e:	701a      	strb	r2, [r3, #0]
    break;
 8008340:	e08b      	b.n	800845a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 8088 	beq.w	800845e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]
 800835a:	e017      	b.n	800838c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	33dc      	adds	r3, #220	; 0xdc
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4413      	add	r3, r2
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	791a      	ldrb	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8008370:	429a      	cmp	r2, r3
 8008372:	d108      	bne.n	8008386 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	33dc      	adds	r3, #220	; 0xdc
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	3301      	adds	r3, #1
 800838a:	73fb      	strb	r3, [r7, #15]
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0e4      	beq.n	800835c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008398:	2b00      	cmp	r3, #0
 800839a:	d016      	beq.n	80083ca <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	4798      	blx	r3
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d109      	bne.n	80083c2 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2206      	movs	r2, #6
 80083b2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80083ba:	2103      	movs	r1, #3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80083c0:	e04d      	b.n	800845e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	220d      	movs	r2, #13
 80083c6:	701a      	strb	r2, [r3, #0]
    break;
 80083c8:	e049      	b.n	800845e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	220d      	movs	r2, #13
 80083ce:	701a      	strb	r2, [r3, #0]
    break;
 80083d0:	e045      	b.n	800845e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00f      	beq.n	80083fc <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d136      	bne.n	8008462 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	220b      	movs	r2, #11
 80083f8:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80083fa:	e032      	b.n	8008462 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	220d      	movs	r2, #13
 8008400:	701a      	strb	r2, [r3, #0]
    break;
 8008402:	e02e      	b.n	8008462 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800840a:	2b00      	cmp	r3, #0
 800840c:	d02b      	beq.n	8008466 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
    }
    break;
 800841a:	e024      	b.n	8008466 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff fe59 	bl	80080d4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01e      	beq.n	800846a <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8008440:	e013      	b.n	800846a <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8008442:	bf00      	nop
 8008444:	e012      	b.n	800846c <USBH_Process+0x304>
    break;
 8008446:	bf00      	nop
 8008448:	e010      	b.n	800846c <USBH_Process+0x304>
    break;
 800844a:	bf00      	nop
 800844c:	e00e      	b.n	800846c <USBH_Process+0x304>
    break;
 800844e:	bf00      	nop
 8008450:	e00c      	b.n	800846c <USBH_Process+0x304>
    break;
 8008452:	bf00      	nop
 8008454:	e00a      	b.n	800846c <USBH_Process+0x304>
    break;
 8008456:	bf00      	nop
 8008458:	e008      	b.n	800846c <USBH_Process+0x304>
    break;
 800845a:	bf00      	nop
 800845c:	e006      	b.n	800846c <USBH_Process+0x304>
    break;
 800845e:	bf00      	nop
 8008460:	e004      	b.n	800846c <USBH_Process+0x304>
    break;
 8008462:	bf00      	nop
 8008464:	e002      	b.n	800846c <USBH_Process+0x304>
    break;
 8008466:	bf00      	nop
 8008468:	e000      	b.n	800846c <USBH_Process+0x304>
    break;
 800846a:	bf00      	nop
  }
 return USBH_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af04      	add	r7, sp, #16
 800847e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008480:	2301      	movs	r3, #1
 8008482:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	785b      	ldrb	r3, [r3, #1]
 8008488:	2b07      	cmp	r3, #7
 800848a:	f200 80f8 	bhi.w	800867e <USBH_HandleEnum+0x206>
 800848e:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <USBH_HandleEnum+0x1c>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	080084b5 	.word	0x080084b5
 8008498:	08008527 	.word	0x08008527
 800849c:	0800853f 	.word	0x0800853f
 80084a0:	080085b5 	.word	0x080085b5
 80084a4:	080085cb 	.word	0x080085cb
 80084a8:	080085e7 	.word	0x080085e7
 80084ac:	0800861b 	.word	0x0800861b
 80084b0:	0800864f 	.word	0x0800864f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80084b4:	2108      	movs	r1, #8
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f99e 	bl	80087f8 <USBH_Get_DevDesc>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f040 80df 	bne.w	8008682 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7919      	ldrb	r1, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80084e8:	b292      	uxth	r2, r2
 80084ea:	9202      	str	r2, [sp, #8]
 80084ec:	2200      	movs	r2, #0
 80084ee:	9201      	str	r2, [sp, #4]
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	4603      	mov	r3, r0
 80084f4:	2280      	movs	r2, #128	; 0x80
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fe63 	bl	80091c2 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	7959      	ldrb	r1, [r3, #5]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008510:	b292      	uxth	r2, r2
 8008512:	9202      	str	r2, [sp, #8]
 8008514:	2200      	movs	r2, #0
 8008516:	9201      	str	r2, [sp, #4]
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	4603      	mov	r3, r0
 800851c:	2200      	movs	r2, #0
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fe4f 	bl	80091c2 <USBH_OpenPipe>

    }
    break;
 8008524:	e0ad      	b.n	8008682 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8008526:	2112      	movs	r1, #18
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f965 	bl	80087f8 <USBH_Get_DevDesc>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	f040 80a8 	bne.w	8008686 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800853c:	e0a3      	b.n	8008686 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800853e:	2101      	movs	r1, #1
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fa05 	bl	8008950 <USBH_SetAddress>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	f040 809e 	bne.w	800868a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800854e:	2002      	movs	r0, #2
 8008550:	f003 faa1 	bl	800ba96 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2203      	movs	r2, #3
 8008560:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7919      	ldrb	r1, [r3, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008576:	b292      	uxth	r2, r2
 8008578:	9202      	str	r2, [sp, #8]
 800857a:	2200      	movs	r2, #0
 800857c:	9201      	str	r2, [sp, #4]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4603      	mov	r3, r0
 8008582:	2280      	movs	r2, #128	; 0x80
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fe1c 	bl	80091c2 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	7959      	ldrb	r1, [r3, #5]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800859e:	b292      	uxth	r2, r2
 80085a0:	9202      	str	r2, [sp, #8]
 80085a2:	2200      	movs	r2, #0
 80085a4:	9201      	str	r2, [sp, #4]
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	4603      	mov	r3, r0
 80085aa:	2200      	movs	r2, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fe08 	bl	80091c2 <USBH_OpenPipe>
    }
    break;
 80085b2:	e06a      	b.n	800868a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80085b4:	2109      	movs	r1, #9
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f946 	bl	8008848 <USBH_Get_CfgDesc>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d165      	bne.n	800868e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2204      	movs	r2, #4
 80085c6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80085c8:	e061      	b.n	800868e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f938 	bl	8008848 <USBH_Get_CfgDesc>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d159      	bne.n	8008692 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2205      	movs	r2, #5
 80085e2:	705a      	strb	r2, [r3, #1]
    }
    break;
 80085e4:	e055      	b.n	8008692 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d010      	beq.n	8008612 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80085fc:	23ff      	movs	r3, #255	; 0xff
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f946 	bl	8008890 <USBH_Get_StringDesc>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d145      	bne.n	8008696 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2206      	movs	r2, #6
 800860e:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008610:	e041      	b.n	8008696 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2206      	movs	r2, #6
 8008616:	705a      	strb	r2, [r3, #1]
    break;
 8008618:	e03d      	b.n	8008696 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8008620:	2b00      	cmp	r3, #0
 8008622:	d010      	beq.n	8008646 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008630:	23ff      	movs	r3, #255	; 0xff
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f92c 	bl	8008890 <USBH_Get_StringDesc>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d12d      	bne.n	800869a <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2207      	movs	r2, #7
 8008642:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008644:	e029      	b.n	800869a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2207      	movs	r2, #7
 800864a:	705a      	strb	r2, [r3, #1]
    break;
 800864c:	e025      	b.n	800869a <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00f      	beq.n	8008678 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008664:	23ff      	movs	r3, #255	; 0xff
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f912 	bl	8008890 <USBH_Get_StringDesc>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d115      	bne.n	800869e <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008676:	e012      	b.n	800869e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
    break;
 800867c:	e00f      	b.n	800869e <USBH_HandleEnum+0x226>

  default:
    break;
 800867e:	bf00      	nop
 8008680:	e00e      	b.n	80086a0 <USBH_HandleEnum+0x228>
    break;
 8008682:	bf00      	nop
 8008684:	e00c      	b.n	80086a0 <USBH_HandleEnum+0x228>
    break;
 8008686:	bf00      	nop
 8008688:	e00a      	b.n	80086a0 <USBH_HandleEnum+0x228>
    break;
 800868a:	bf00      	nop
 800868c:	e008      	b.n	80086a0 <USBH_HandleEnum+0x228>
    break;
 800868e:	bf00      	nop
 8008690:	e006      	b.n	80086a0 <USBH_HandleEnum+0x228>
    break;
 8008692:	bf00      	nop
 8008694:	e004      	b.n	80086a0 <USBH_HandleEnum+0x228>
    break;
 8008696:	bf00      	nop
 8008698:	e002      	b.n	80086a0 <USBH_HandleEnum+0x228>
    break;
 800869a:	bf00      	nop
 800869c:	e000      	b.n	80086a0 <USBH_HandleEnum+0x228>
    break;
 800869e:	bf00      	nop
  }
  return Status;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop

080086ac <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f804 	bl	80086d0 <USBH_HandleSof>
}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b0b      	cmp	r3, #11
 80086e0:	d10a      	bne.n	80086f8 <USBH_HandleSof+0x28>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	4798      	blx	r3
  }
}
 80086f8:	bf00      	nop
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008710:	bf00      	nop
}
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800872c:	bf00      	nop
}
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8008746:	4618      	mov	r0, r3
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10f      	bne.n	8008784 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00e      	beq.n	8008794 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800877c:	2104      	movs	r1, #4
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	4798      	blx	r3
 8008782:	e007      	b.n	8008794 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800878a:	2b01      	cmp	r3, #1
 800878c:	d102      	bne.n	8008794 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2202      	movs	r2, #2
 8008792:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f003 f8a7 	bl	800b8fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	791b      	ldrb	r3, [r3, #4]
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fd42 	bl	800923c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	795b      	ldrb	r3, [r3, #5]
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fd3c 	bl	800923c <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d005      	beq.n	80087e2 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80087dc:	2105      	movs	r1, #5
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f003 f86e 	bl	800b8c4 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2203      	movs	r2, #3
 80087ec:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800880a:	78fb      	ldrb	r3, [r7, #3]
 800880c:	b29b      	uxth	r3, r3
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4613      	mov	r3, r2
 8008812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008816:	2100      	movs	r1, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f864 	bl	80088e6 <USBH_GetDescriptor>
 800881e:	4603      	mov	r3, r0
 8008820:	73fb      	strb	r3, [r7, #15]
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f203 3022 	addw	r0, r3, #802	; 0x322
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	b292      	uxth	r2, r2
 8008838:	4619      	mov	r1, r3
 800883a:	f000 f8f4 	bl	8008a26 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af02      	add	r7, sp, #8
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	331c      	adds	r3, #28
 8008858:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800885a:	887b      	ldrh	r3, [r7, #2]
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008864:	2100      	movs	r1, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f83d 	bl	80088e6 <USBH_GetDescriptor>
 800886c:	4603      	mov	r3, r0
 800886e:	72fb      	strb	r3, [r7, #11]
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d107      	bne.n	8008886 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800887c:	887a      	ldrh	r2, [r7, #2]
 800887e:	68f9      	ldr	r1, [r7, #12]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f940 	bl	8008b06 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8008886:	7afb      	ldrb	r3, [r7, #11]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af02      	add	r7, sp, #8
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	461a      	mov	r2, r3
 800889c:	460b      	mov	r3, r1
 800889e:	72fb      	strb	r3, [r7, #11]
 80088a0:	4613      	mov	r3, r2
 80088a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80088ac:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80088b4:	893b      	ldrh	r3, [r7, #8]
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	460b      	mov	r3, r1
 80088ba:	2100      	movs	r1, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f812 	bl	80088e6 <USBH_GetDescriptor>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d107      	bne.n	80088dc <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088d2:	893a      	ldrh	r2, [r7, #8]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fa13 	bl	8008d02 <USBH_ParseStringDesc>
  }
  return status;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	607b      	str	r3, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	72fb      	strb	r3, [r7, #11]
 80088f4:	4613      	mov	r3, r2
 80088f6:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	789b      	ldrb	r3, [r3, #2]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d11c      	bne.n	800893a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008906:	b2da      	uxtb	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2206      	movs	r2, #6
 8008910:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	893a      	ldrh	r2, [r7, #8]
 8008916:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008918:	893b      	ldrh	r3, [r7, #8]
 800891a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800891e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008922:	d104      	bne.n	800892e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f240 4209 	movw	r2, #1033	; 0x409
 800892a:	829a      	strh	r2, [r3, #20]
 800892c:	e002      	b.n	8008934 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8b3a      	ldrh	r2, [r7, #24]
 8008938:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800893a:	8b3b      	ldrh	r3, [r7, #24]
 800893c:	461a      	mov	r2, r3
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 fa2c 	bl	8008d9e <USBH_CtlReq>
 8008946:	4603      	mov	r3, r0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	789b      	ldrb	r3, [r3, #2]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10f      	bne.n	8008984 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2205      	movs	r2, #5
 800896e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	b29a      	uxth	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008984:	2200      	movs	r2, #0
 8008986:	2100      	movs	r1, #0
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fa08 	bl	8008d9e <USBH_CtlReq>
 800898e:	4603      	mov	r3, r0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	789b      	ldrb	r3, [r3, #2]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d10e      	bne.n	80089ca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2209      	movs	r2, #9
 80089b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	887a      	ldrh	r2, [r7, #2]
 80089bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 80089ca:	2200      	movs	r2, #0
 80089cc:	2100      	movs	r1, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9e5 	bl	8008d9e <USBH_CtlReq>
 80089d4:	4603      	mov	r3, r0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	789b      	ldrb	r3, [r3, #2]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d10f      	bne.n	8008a12 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2203      	movs	r2, #3
 80089fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a12:	2200      	movs	r2, #0
 8008a14:	2100      	movs	r1, #0
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f9c1 	bl	8008d9e <USBH_CtlReq>
 8008a1c:	4603      	mov	r3, r0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	4613      	mov	r3, r2
 8008a32:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	785a      	ldrb	r2, [r3, #1]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	3302      	adds	r3, #2
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	3303      	adds	r3, #3
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	791a      	ldrb	r2, [r3, #4]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	795a      	ldrb	r2, [r3, #5]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	799a      	ldrb	r2, [r3, #6]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	79da      	ldrb	r2, [r3, #7]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	2b08      	cmp	r3, #8
 8008a84:	d939      	bls.n	8008afa <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	3309      	adds	r3, #9
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	330a      	adds	r3, #10
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	330b      	adds	r3, #11
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	021b      	lsls	r3, r3, #8
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	330d      	adds	r3, #13
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	7b9a      	ldrb	r2, [r3, #14]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	7bda      	ldrb	r2, [r3, #15]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	7c1a      	ldrb	r2, [r3, #16]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	7c5a      	ldrb	r2, [r3, #17]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	745a      	strb	r2, [r3, #17]
  }
}
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b08a      	sub	sp, #40	; 0x28
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	4613      	mov	r3, r2
 8008b12:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	785a      	ldrb	r2, [r3, #1]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	3302      	adds	r3, #2
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3303      	adds	r3, #3
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	021b      	lsls	r3, r3, #8
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	791a      	ldrb	r2, [r3, #4]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	795a      	ldrb	r2, [r3, #5]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	799a      	ldrb	r2, [r3, #6]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	79da      	ldrb	r2, [r3, #7]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	7a1a      	ldrb	r2, [r3, #8]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	2b09      	cmp	r3, #9
 8008b80:	d95f      	bls.n	8008c42 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b82:	2309      	movs	r3, #9
 8008b84:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b8a:	e051      	b.n	8008c30 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b8c:	f107 0316 	add.w	r3, r7, #22
 8008b90:	4619      	mov	r1, r3
 8008b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b94:	f000 f8e8 	bl	8008d68 <USBH_GetNextDesc>
 8008b98:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d146      	bne.n	8008c30 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ba6:	221a      	movs	r2, #26
 8008ba8:	fb02 f303 	mul.w	r3, r2, r3
 8008bac:	3308      	adds	r3, #8
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8008bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bb8:	69f8      	ldr	r0, [r7, #28]
 8008bba:	f000 f846 	bl	8008c4a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bc8:	e022      	b.n	8008c10 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8008bca:	f107 0316 	add.w	r3, r7, #22
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bd2:	f000 f8c9 	bl	8008d68 <USBH_GetNextDesc>
 8008bd6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	2b05      	cmp	r3, #5
 8008bde:	d117      	bne.n	8008c10 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008be4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008be8:	3201      	adds	r2, #1
 8008bea:	00d2      	lsls	r2, r2, #3
 8008bec:	211a      	movs	r1, #26
 8008bee:	fb01 f303 	mul.w	r3, r1, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8008bfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c00:	69b8      	ldr	r0, [r7, #24]
 8008c02:	f000 f851 	bl	8008ca8 <USBH_ParseEPDesc>
            ep_ix++;
 8008c06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	791b      	ldrb	r3, [r3, #4]
 8008c14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d204      	bcs.n	8008c26 <USBH_ParseCfgDesc+0x120>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	885a      	ldrh	r2, [r3, #2]
 8008c20:	8afb      	ldrh	r3, [r7, #22]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d8d1      	bhi.n	8008bca <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008c26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d804      	bhi.n	8008c42 <USBH_ParseCfgDesc+0x13c>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	885a      	ldrh	r2, [r3, #2]
 8008c3c:	8afb      	ldrh	r3, [r7, #22]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d8a4      	bhi.n	8008b8c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008c42:	bf00      	nop
 8008c44:	3728      	adds	r7, #40	; 0x28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781a      	ldrb	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	785a      	ldrb	r2, [r3, #1]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	789a      	ldrb	r2, [r3, #2]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	78da      	ldrb	r2, [r3, #3]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	791a      	ldrb	r2, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	795a      	ldrb	r2, [r3, #5]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	799a      	ldrb	r2, [r3, #6]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	79da      	ldrb	r2, [r3, #7]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	7a1a      	ldrb	r2, [r3, #8]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	721a      	strb	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	785a      	ldrb	r2, [r3, #1]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	789a      	ldrb	r2, [r3, #2]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	78da      	ldrb	r2, [r3, #3]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	3305      	adds	r3, #5
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	799a      	ldrb	r2, [r3, #6]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	719a      	strb	r2, [r3, #6]
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b087      	sub	sp, #28
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d120      	bne.n	8008d5c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	1e9a      	subs	r2, r3, #2
 8008d20:	88fb      	ldrh	r3, [r7, #6]
 8008d22:	4293      	cmp	r3, r2
 8008d24:	bf28      	it	cs
 8008d26:	4613      	movcs	r3, r2
 8008d28:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d30:	2300      	movs	r3, #0
 8008d32:	82fb      	strh	r3, [r7, #22]
 8008d34:	e00b      	b.n	8008d4e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d36:	8afb      	ldrh	r3, [r7, #22]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	781a      	ldrb	r2, [r3, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d48:	8afb      	ldrh	r3, [r7, #22]
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	82fb      	strh	r3, [r7, #22]
 8008d4e:	8afa      	ldrh	r2, [r7, #22]
 8008d50:	8abb      	ldrh	r3, [r7, #20]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d3ef      	bcc.n	8008d36 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]
  }
}
 8008d5c:	bf00      	nop
 8008d5e:	371c      	adds	r7, #28
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	881a      	ldrh	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008d90:	68fb      	ldr	r3, [r7, #12]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b086      	sub	sp, #24
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008dac:	2301      	movs	r3, #1
 8008dae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	789b      	ldrb	r3, [r3, #2]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d002      	beq.n	8008dbe <USBH_CtlReq+0x20>
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d00f      	beq.n	8008ddc <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8008dbc:	e034      	b.n	8008e28 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	88fa      	ldrh	r2, [r7, #6]
 8008dc8:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	75fb      	strb	r3, [r7, #23]
    break;
 8008dda:	e025      	b.n	8008e28 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 f829 	bl	8008e34 <USBH_HandleControl>
 8008de2:	4603      	mov	r3, r0
 8008de4:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d108      	bne.n	8008dfe <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2201      	movs	r2, #1
 8008df0:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	75fb      	strb	r3, [r7, #23]
    break;
 8008dfc:	e013      	b.n	8008e26 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d108      	bne.n	8008e16 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008e10:	2303      	movs	r3, #3
 8008e12:	75fb      	strb	r3, [r7, #23]
    break;
 8008e14:	e007      	b.n	8008e26 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d104      	bne.n	8008e26 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008e22:	2302      	movs	r3, #2
 8008e24:	75fb      	strb	r3, [r7, #23]
    break;
 8008e26:	bf00      	nop
  }
  return status;
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	7e1b      	ldrb	r3, [r3, #24]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	2b0a      	cmp	r3, #10
 8008e4c:	f200 814c 	bhi.w	80090e8 <USBH_HandleControl+0x2b4>
 8008e50:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <USBH_HandleControl+0x24>)
 8008e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e56:	bf00      	nop
 8008e58:	08008e85 	.word	0x08008e85
 8008e5c:	08008e9f 	.word	0x08008e9f
 8008e60:	08008f09 	.word	0x08008f09
 8008e64:	08008f2f 	.word	0x08008f2f
 8008e68:	08008f67 	.word	0x08008f67
 8008e6c:	08008f93 	.word	0x08008f93
 8008e70:	08008fe5 	.word	0x08008fe5
 8008e74:	08009007 	.word	0x08009007
 8008e78:	08009043 	.word	0x08009043
 8008e7c:	0800906b 	.word	0x0800906b
 8008e80:	080090a9 	.word	0x080090a9
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f103 0110 	add.w	r1, r3, #16
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	795b      	ldrb	r3, [r3, #5]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f939 	bl	8009108 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	761a      	strb	r2, [r3, #24]
    break;
 8008e9c:	e12f      	b.n	80090fe <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	795b      	ldrb	r3, [r3, #5]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f002 fde3 	bl	800ba70 <USBH_LL_GetURBState>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d11e      	bne.n	8008ef2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7c1b      	ldrb	r3, [r3, #16]
 8008eb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ebc:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	8adb      	ldrh	r3, [r3, #22]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8008ec6:	7b7b      	ldrb	r3, [r7, #13]
 8008ec8:	2b80      	cmp	r3, #128	; 0x80
 8008eca:	d103      	bne.n	8008ed4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2203      	movs	r2, #3
 8008ed0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008ed2:	e10b      	b.n	80090ec <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2205      	movs	r2, #5
 8008ed8:	761a      	strb	r2, [r3, #24]
    break;
 8008eda:	e107      	b.n	80090ec <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8008edc:	7b7b      	ldrb	r3, [r7, #13]
 8008ede:	2b80      	cmp	r3, #128	; 0x80
 8008ee0:	d103      	bne.n	8008eea <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2209      	movs	r2, #9
 8008ee6:	761a      	strb	r2, [r3, #24]
    break;
 8008ee8:	e100      	b.n	80090ec <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2207      	movs	r2, #7
 8008eee:	761a      	strb	r2, [r3, #24]
    break;
 8008ef0:	e0fc      	b.n	80090ec <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d003      	beq.n	8008f00 <USBH_HandleControl+0xcc>
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	f040 80f6 	bne.w	80090ec <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	220b      	movs	r2, #11
 8008f04:	761a      	strb	r2, [r3, #24]
    break;
 8008f06:	e0f1      	b.n	80090ec <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6899      	ldr	r1, [r3, #8]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	899a      	ldrh	r2, [r3, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	791b      	ldrb	r3, [r3, #4]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f930 	bl	8009186 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2204      	movs	r2, #4
 8008f2a:	761a      	strb	r2, [r3, #24]
    break;
 8008f2c:	e0e7      	b.n	80090fe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	791b      	ldrb	r3, [r3, #4]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f002 fd9b 	bl	800ba70 <USBH_LL_GetURBState>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d102      	bne.n	8008f4a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2209      	movs	r2, #9
 8008f48:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b05      	cmp	r3, #5
 8008f4e:	d102      	bne.n	8008f56 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008f50:	2303      	movs	r3, #3
 8008f52:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008f54:	e0cc      	b.n	80090f0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	f040 80c9 	bne.w	80090f0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	220b      	movs	r2, #11
 8008f62:	761a      	strb	r2, [r3, #24]
    break;
 8008f64:	e0c4      	b.n	80090f0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6899      	ldr	r1, [r3, #8]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	899a      	ldrh	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	7958      	ldrb	r0, [r3, #5]
 8008f72:	2301      	movs	r3, #1
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	4603      	mov	r3, r0
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f8df 	bl	800913c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2206      	movs	r2, #6
 8008f8e:	761a      	strb	r2, [r3, #24]
    break;
 8008f90:	e0b5      	b.n	80090fe <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	795b      	ldrb	r3, [r3, #5]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f002 fd69 	bl	800ba70 <USBH_LL_GetURBState>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d103      	bne.n	8008fb0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2207      	movs	r2, #7
 8008fac:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008fae:	e0a1      	b.n	80090f4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d105      	bne.n	8008fc2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	220c      	movs	r2, #12
 8008fba:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc0:	e098      	b.n	80090f4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d103      	bne.n	8008fd0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2205      	movs	r2, #5
 8008fcc:	761a      	strb	r2, [r3, #24]
    break;
 8008fce:	e091      	b.n	80090f4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	2b04      	cmp	r3, #4
 8008fd4:	f040 808e 	bne.w	80090f4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	220b      	movs	r2, #11
 8008fdc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe2:	e087      	b.n	80090f4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	791b      	ldrb	r3, [r3, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f8ca 	bl	8009186 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2208      	movs	r2, #8
 8009002:	761a      	strb	r2, [r3, #24]

    break;
 8009004:	e07b      	b.n	80090fe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	791b      	ldrb	r3, [r3, #4]
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f002 fd2f 	bl	800ba70 <USBH_LL_GetURBState>
 8009012:	4603      	mov	r3, r0
 8009014:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8009016:	7bbb      	ldrb	r3, [r7, #14]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d105      	bne.n	8009028 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	220d      	movs	r2, #13
 8009020:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009026:	e067      	b.n	80090f8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	2b04      	cmp	r3, #4
 800902c:	d103      	bne.n	8009036 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	220b      	movs	r2, #11
 8009032:	761a      	strb	r2, [r3, #24]
    break;
 8009034:	e060      	b.n	80090f8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b05      	cmp	r3, #5
 800903a:	d15d      	bne.n	80090f8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800903c:	2303      	movs	r3, #3
 800903e:	73fb      	strb	r3, [r7, #15]
    break;
 8009040:	e05a      	b.n	80090f8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	795a      	ldrb	r2, [r3, #5]
 8009046:	2301      	movs	r3, #1
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	4613      	mov	r3, r2
 800904c:	2200      	movs	r2, #0
 800904e:	2100      	movs	r1, #0
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f873 	bl	800913c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800905c:	b29a      	uxth	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	220a      	movs	r2, #10
 8009066:	761a      	strb	r2, [r3, #24]
    break;
 8009068:	e049      	b.n	80090fe <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	795b      	ldrb	r3, [r3, #5]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f002 fcfd 	bl	800ba70 <USBH_LL_GetURBState>
 8009076:	4603      	mov	r3, r0
 8009078:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d105      	bne.n	800908c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	220d      	movs	r2, #13
 8009088:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800908a:	e037      	b.n	80090fc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d103      	bne.n	800909a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2209      	movs	r2, #9
 8009096:	761a      	strb	r2, [r3, #24]
    break;
 8009098:	e030      	b.n	80090fc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b04      	cmp	r3, #4
 800909e:	d12d      	bne.n	80090fc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	220b      	movs	r2, #11
 80090a4:	761a      	strb	r2, [r3, #24]
    break;
 80090a6:	e029      	b.n	80090fc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7e5b      	ldrb	r3, [r3, #25]
 80090ac:	3301      	adds	r3, #1
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	765a      	strb	r2, [r3, #25]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7e5b      	ldrb	r3, [r3, #25]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d809      	bhi.n	80090d0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f002 fc1c 	bl	800b8fa <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80090ce:	e016      	b.n	80090fe <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80090d6:	2106      	movs	r1, #6
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80090e2:	2302      	movs	r3, #2
 80090e4:	73fb      	strb	r3, [r7, #15]
    break;
 80090e6:	e00a      	b.n	80090fe <USBH_HandleControl+0x2ca>

  default:
    break;
 80090e8:	bf00      	nop
 80090ea:	e008      	b.n	80090fe <USBH_HandleControl+0x2ca>
    break;
 80090ec:	bf00      	nop
 80090ee:	e006      	b.n	80090fe <USBH_HandleControl+0x2ca>
    break;
 80090f0:	bf00      	nop
 80090f2:	e004      	b.n	80090fe <USBH_HandleControl+0x2ca>
    break;
 80090f4:	bf00      	nop
 80090f6:	e002      	b.n	80090fe <USBH_HandleControl+0x2ca>
    break;
 80090f8:	bf00      	nop
 80090fa:	e000      	b.n	80090fe <USBH_HandleControl+0x2ca>
    break;
 80090fc:	bf00      	nop
  }
  return status;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b088      	sub	sp, #32
 800910c:	af04      	add	r7, sp, #16
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	4613      	mov	r3, r2
 8009114:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009116:	79f9      	ldrb	r1, [r7, #7]
 8009118:	2300      	movs	r3, #0
 800911a:	9303      	str	r3, [sp, #12]
 800911c:	2308      	movs	r3, #8
 800911e:	9302      	str	r3, [sp, #8]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	2300      	movs	r3, #0
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	2300      	movs	r3, #0
 800912a:	2200      	movs	r2, #0
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f002 fc6e 	bl	800ba0e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af04      	add	r7, sp, #16
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	4611      	mov	r1, r2
 8009148:	461a      	mov	r2, r3
 800914a:	460b      	mov	r3, r1
 800914c:	80fb      	strh	r3, [r7, #6]
 800914e:	4613      	mov	r3, r2
 8009150:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800915c:	2300      	movs	r3, #0
 800915e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009160:	7979      	ldrb	r1, [r7, #5]
 8009162:	7e3b      	ldrb	r3, [r7, #24]
 8009164:	9303      	str	r3, [sp, #12]
 8009166:	88fb      	ldrh	r3, [r7, #6]
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	2301      	movs	r3, #1
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	2300      	movs	r3, #0
 8009174:	2200      	movs	r2, #0
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f002 fc49 	bl	800ba0e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b088      	sub	sp, #32
 800918a:	af04      	add	r7, sp, #16
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	4611      	mov	r1, r2
 8009192:	461a      	mov	r2, r3
 8009194:	460b      	mov	r3, r1
 8009196:	80fb      	strh	r3, [r7, #6]
 8009198:	4613      	mov	r3, r2
 800919a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800919c:	7979      	ldrb	r1, [r7, #5]
 800919e:	2300      	movs	r3, #0
 80091a0:	9303      	str	r3, [sp, #12]
 80091a2:	88fb      	ldrh	r3, [r7, #6]
 80091a4:	9302      	str	r3, [sp, #8]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	2301      	movs	r3, #1
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	2300      	movs	r3, #0
 80091b0:	2201      	movs	r2, #1
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f002 fc2b 	bl	800ba0e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091b8:	2300      	movs	r3, #0

}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b086      	sub	sp, #24
 80091c6:	af04      	add	r7, sp, #16
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	4608      	mov	r0, r1
 80091cc:	4611      	mov	r1, r2
 80091ce:	461a      	mov	r2, r3
 80091d0:	4603      	mov	r3, r0
 80091d2:	70fb      	strb	r3, [r7, #3]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70bb      	strb	r3, [r7, #2]
 80091d8:	4613      	mov	r3, r2
 80091da:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80091dc:	7878      	ldrb	r0, [r7, #1]
 80091de:	78ba      	ldrb	r2, [r7, #2]
 80091e0:	78f9      	ldrb	r1, [r7, #3]
 80091e2:	8b3b      	ldrh	r3, [r7, #24]
 80091e4:	9302      	str	r3, [sp, #8]
 80091e6:	7d3b      	ldrb	r3, [r7, #20]
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	7c3b      	ldrb	r3, [r7, #16]
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	4603      	mov	r3, r0
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f002 fbdd 	bl	800b9b0 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80091f6:	2300      	movs	r3, #0

}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f831 	bl	8009274 <USBH_GetFreePipe>
 8009212:	4603      	mov	r3, r0
 8009214:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009216:	89fb      	ldrh	r3, [r7, #14]
 8009218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800921c:	4293      	cmp	r3, r2
 800921e:	d007      	beq.n	8009230 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	89fa      	ldrh	r2, [r7, #14]
 8009224:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	32e0      	adds	r2, #224	; 0xe0
 800922c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	b2db      	uxtb	r3, r3
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	2b0a      	cmp	r3, #10
 800924c:	d80b      	bhi.n	8009266 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800924e:	78fa      	ldrb	r2, [r7, #3]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	32e0      	adds	r2, #224	; 0xe0
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	78fa      	ldrb	r2, [r7, #3]
 800925a:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	32e0      	adds	r2, #224	; 0xe0
 8009262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e00e      	b.n	80092a4 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009286:	7bfa      	ldrb	r2, [r7, #15]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	32e0      	adds	r2, #224	; 0xe0
 800928c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	b29b      	uxth	r3, r3
 800929c:	e007      	b.n	80092ae <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	3301      	adds	r3, #1
 80092a2:	73fb      	strb	r3, [r7, #15]
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b0a      	cmp	r3, #10
 80092a8:	d9ed      	bls.n	8009286 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80092aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
	...

080092bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80092c2:	f7f7 f921 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80092c6:	f000 f8ef 	bl	80094a8 <SystemClock_Config>

  //RNG->CR |= RNG_CR_RNGEN;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80092ca:	f001 f87d 	bl	800a3c8 <MX_GPIO_Init>
  MX_ADC3_Init();
 80092ce:	f000 f9a7 	bl	8009620 <MX_ADC3_Init>
  MX_CRC_Init();
 80092d2:	f000 f9f7 	bl	80096c4 <MX_CRC_Init>
  MX_DCMI_Init();
 80092d6:	f000 fa17 	bl	8009708 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80092da:	f000 fa49 	bl	8009770 <MX_DMA2D_Init>
  MX_FMC_Init();
 80092de:	f001 f823 	bl	800a328 <MX_FMC_Init>
  MX_I2C1_Init();
 80092e2:	f000 fa77 	bl	80097d4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80092e6:	f000 fab5 	bl	8009854 <MX_I2C3_Init>
  MX_LTDC_Init();
 80092ea:	f000 faf3 	bl	80098d4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80092ee:	f000 fb73 	bl	80099d8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80092f2:	f000 fbb1 	bl	8009a58 <MX_RTC_Init>
  MX_SAI2_Init();
 80092f6:	f000 fc57 	bl	8009ba8 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 80092fa:	f000 fcfd 	bl	8009cf8 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80092fe:	f000 fd2b 	bl	8009d58 <MX_SPI2_Init>
  MX_TIM1_Init();
 8009302:	f000 fd67 	bl	8009dd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8009306:	f000 fe11 	bl	8009f2c <MX_TIM2_Init>
  MX_TIM3_Init();
 800930a:	f000 fe5b 	bl	8009fc4 <MX_TIM3_Init>
  MX_TIM5_Init();
 800930e:	f000 fecf 	bl	800a0b0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8009312:	f000 ff43 	bl	800a19c <MX_TIM8_Init>
  MX_TIM12_Init();
 8009316:	f000 ff93 	bl	800a240 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800931a:	f000 ffd5 	bl	800a2c8 <MX_USART1_UART_Init>
  MX_RNG_Init();
 800931e:	f000 fb87 	bl	8009a30 <MX_RNG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

    if (round_counter > 4) {
 8009322:	4b59      	ldr	r3, [pc, #356]	; (8009488 <main+0x1cc>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b04      	cmp	r3, #4
 8009328:	d90f      	bls.n	800934a <main+0x8e>
                   round_counter = 0;
 800932a:	4b57      	ldr	r3, [pc, #348]	; (8009488 <main+0x1cc>)
 800932c:	2200      	movs	r2, #0
 800932e:	601a      	str	r2, [r3, #0]
                   HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8009330:	2201      	movs	r2, #1
 8009332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009336:	4855      	ldr	r0, [pc, #340]	; (800948c <main+0x1d0>)
 8009338:	f7f8 f97c 	bl	8001634 <HAL_GPIO_WritePin>
                   HAL_Delay(3000);
 800933c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009340:	f7f7 f910 	bl	8000564 <HAL_Delay>
                   game_state = READY;
 8009344:	4b52      	ldr	r3, [pc, #328]	; (8009490 <main+0x1d4>)
 8009346:	2200      	movs	r2, #0
 8009348:	701a      	strb	r2, [r3, #0]

                   //return;
                 }


    switch (game_state) {
 800934a:	4b51      	ldr	r3, [pc, #324]	; (8009490 <main+0x1d4>)
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	2b04      	cmp	r3, #4
 8009350:	f200 8094 	bhi.w	800947c <main+0x1c0>
 8009354:	a201      	add	r2, pc, #4	; (adr r2, 800935c <main+0xa0>)
 8009356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935a:	bf00      	nop
 800935c:	08009371 	.word	0x08009371
 8009360:	08009385 	.word	0x08009385
 8009364:	0800947d 	.word	0x0800947d
 8009368:	0800941d 	.word	0x0800941d
 800936c:	0800944b 	.word	0x0800944b
    case READY:

         HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8009370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009374:	4845      	ldr	r0, [pc, #276]	; (800948c <main+0x1d0>)
 8009376:	f7f8 f976 	bl	8001666 <HAL_GPIO_TogglePin>
         HAL_Delay(500);
 800937a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800937e:	f7f7 f8f1 	bl	8000564 <HAL_Delay>

         break;
 8009382:	e07e      	b.n	8009482 <main+0x1c6>


    case STEADY:

         HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8009384:	2201      	movs	r2, #1
 8009386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800938a:	4840      	ldr	r0, [pc, #256]	; (800948c <main+0x1d0>)
 800938c:	f7f8 f952 	bl	8001634 <HAL_GPIO_WritePin>

         //read random number from RNG_DR register

         // unsigned int rnd = RNG -> DR;

         delay = 1000 + (HAL_RNG_GetRandomNumber(&hrng) % 9) * 1000;
 8009390:	4840      	ldr	r0, [pc, #256]	; (8009494 <main+0x1d8>)
 8009392:	f7fb fd18 	bl	8004dc6 <HAL_RNG_GetRandomNumber>
 8009396:	4601      	mov	r1, r0
 8009398:	4b3f      	ldr	r3, [pc, #252]	; (8009498 <main+0x1dc>)
 800939a:	fba3 2301 	umull	r2, r3, r3, r1
 800939e:	085a      	lsrs	r2, r3, #1
 80093a0:	4613      	mov	r3, r2
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	1aca      	subs	r2, r1, r3
 80093a8:	1c53      	adds	r3, r2, #1
 80093aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
 80093b2:	4a3a      	ldr	r2, [pc, #232]	; (800949c <main+0x1e0>)
 80093b4:	6013      	str	r3, [r2, #0]

        // HAL_Delay(delay);
           uint32_t tickstart = HAL_GetTick();
 80093b6:	f7f7 f8c9 	bl	800054c <HAL_GetTick>
 80093ba:	6078      	str	r0, [r7, #4]


           /* Add a freq to guarantee minimum wait */
           if (delay < HAL_MAX_DELAY)
 80093bc:	4b37      	ldr	r3, [pc, #220]	; (800949c <main+0x1e0>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c4:	d00c      	beq.n	80093e0 <main+0x124>
           {
             delay += (uint32_t)(uwTickFreq);
 80093c6:	4b36      	ldr	r3, [pc, #216]	; (80094a0 <main+0x1e4>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	4b33      	ldr	r3, [pc, #204]	; (800949c <main+0x1e0>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4413      	add	r3, r2
 80093d2:	4a32      	ldr	r2, [pc, #200]	; (800949c <main+0x1e0>)
 80093d4:	6013      	str	r3, [r2, #0]
           }

           while ((HAL_GetTick() - tickstart) < delay)
 80093d6:	e003      	b.n	80093e0 <main+0x124>
           {
             if (game_state == INVALID) {
 80093d8:	4b2d      	ldr	r3, [pc, #180]	; (8009490 <main+0x1d4>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b04      	cmp	r3, #4
 80093de:	d009      	beq.n	80093f4 <main+0x138>
           while ((HAL_GetTick() - tickstart) < delay)
 80093e0:	f7f7 f8b4 	bl	800054c <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	1ad2      	subs	r2, r2, r3
 80093ea:	4b2c      	ldr	r3, [pc, #176]	; (800949c <main+0x1e0>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d3f2      	bcc.n	80093d8 <main+0x11c>
 80093f2:	e000      	b.n	80093f6 <main+0x13a>
             break;
 80093f4:	bf00      	nop
             }
           }

           if (game_state == INVALID) {
 80093f6:	4b26      	ldr	r3, [pc, #152]	; (8009490 <main+0x1d4>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d040      	beq.n	8009480 <main+0x1c4>
                        break;
                        }

         HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80093fe:	2200      	movs	r2, #0
 8009400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009404:	4821      	ldr	r0, [pc, #132]	; (800948c <main+0x1d0>)
 8009406:	f7f8 f915 	bl	8001634 <HAL_GPIO_WritePin>


         round_start_time = HAL_GetTick();
 800940a:	f7f7 f89f 	bl	800054c <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	4b24      	ldr	r3, [pc, #144]	; (80094a4 <main+0x1e8>)
 8009412:	601a      	str	r2, [r3, #0]

         game_state = GO;
 8009414:	4b1e      	ldr	r3, [pc, #120]	; (8009490 <main+0x1d4>)
 8009416:	2202      	movs	r2, #2
 8009418:	701a      	strb	r2, [r3, #0]

         break;
 800941a:	e032      	b.n	8009482 <main+0x1c6>


    case VALID:
         HAL_GPIO_WritePin(RGB_LED1_G_GPIO_Port, RGB_LED1_G_Pin, GPIO_PIN_RESET);
 800941c:	2200      	movs	r2, #0
 800941e:	2180      	movs	r1, #128	; 0x80
 8009420:	481a      	ldr	r0, [pc, #104]	; (800948c <main+0x1d0>)
 8009422:	f7f8 f907 	bl	8001634 <HAL_GPIO_WritePin>
         HAL_Delay(3000);
 8009426:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800942a:	f7f7 f89b 	bl	8000564 <HAL_Delay>
         HAL_GPIO_WritePin(RGB_LED1_G_GPIO_Port, RGB_LED1_G_Pin, GPIO_PIN_SET);
 800942e:	2201      	movs	r2, #1
 8009430:	2180      	movs	r1, #128	; 0x80
 8009432:	4816      	ldr	r0, [pc, #88]	; (800948c <main+0x1d0>)
 8009434:	f7f8 f8fe 	bl	8001634 <HAL_GPIO_WritePin>

         round_counter = round_counter + 1;
 8009438:	4b13      	ldr	r3, [pc, #76]	; (8009488 <main+0x1cc>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3301      	adds	r3, #1
 800943e:	4a12      	ldr	r2, [pc, #72]	; (8009488 <main+0x1cc>)
 8009440:	6013      	str	r3, [r2, #0]

         game_state = STEADY;
 8009442:	4b13      	ldr	r3, [pc, #76]	; (8009490 <main+0x1d4>)
 8009444:	2201      	movs	r2, #1
 8009446:	701a      	strb	r2, [r3, #0]

         break;
 8009448:	e01b      	b.n	8009482 <main+0x1c6>


    case  INVALID:
         //BSP_LED_On(LED_GREEN);
         HAL_GPIO_WritePin(RGB_LED1_R_GPIO_Port, RGB_LED1_R_Pin, GPIO_PIN_RESET);
 800944a:	2200      	movs	r2, #0
 800944c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009450:	480e      	ldr	r0, [pc, #56]	; (800948c <main+0x1d0>)
 8009452:	f7f8 f8ef 	bl	8001634 <HAL_GPIO_WritePin>
         HAL_Delay(3000);
 8009456:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800945a:	f7f7 f883 	bl	8000564 <HAL_Delay>
         HAL_GPIO_WritePin(RGB_LED1_R_GPIO_Port, RGB_LED1_R_Pin, GPIO_PIN_SET);
 800945e:	2201      	movs	r2, #1
 8009460:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009464:	4809      	ldr	r0, [pc, #36]	; (800948c <main+0x1d0>)
 8009466:	f7f8 f8e5 	bl	8001634 <HAL_GPIO_WritePin>

         round_counter = round_counter + 1;
 800946a:	4b07      	ldr	r3, [pc, #28]	; (8009488 <main+0x1cc>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3301      	adds	r3, #1
 8009470:	4a05      	ldr	r2, [pc, #20]	; (8009488 <main+0x1cc>)
 8009472:	6013      	str	r3, [r2, #0]

         game_state = STEADY;
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <main+0x1d4>)
 8009476:	2201      	movs	r2, #1
 8009478:	701a      	strb	r2, [r3, #0]

         break;
 800947a:	e002      	b.n	8009482 <main+0x1c6>

    default:

      break;
 800947c:	bf00      	nop
 800947e:	e000      	b.n	8009482 <main+0x1c6>
                        break;
 8009480:	bf00      	nop

    }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8009482:	f002 f9c1 	bl	800b808 <MX_USB_HOST_Process>
    if (round_counter > 4) {
 8009486:	e74c      	b.n	8009322 <main+0x66>
 8009488:	20000028 	.word	0x20000028
 800948c:	40021400 	.word	0x40021400
 8009490:	2000002c 	.word	0x2000002c
 8009494:	20000618 	.word	0x20000618
 8009498:	38e38e39 	.word	0x38e38e39
 800949c:	20000628 	.word	0x20000628
 80094a0:	20000000 	.word	0x20000000
 80094a4:	20000768 	.word	0x20000768

080094a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b0b4      	sub	sp, #208	; 0xd0
 80094ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80094ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80094b2:	2230      	movs	r2, #48	; 0x30
 80094b4:	2100      	movs	r1, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 fb72 	bl	800bba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80094bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	605a      	str	r2, [r3, #4]
 80094c6:	609a      	str	r2, [r3, #8]
 80094c8:	60da      	str	r2, [r3, #12]
 80094ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80094cc:	f107 0308 	add.w	r3, r7, #8
 80094d0:	2284      	movs	r2, #132	; 0x84
 80094d2:	2100      	movs	r1, #0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f002 fb63 	bl	800bba0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80094da:	4b4e      	ldr	r3, [pc, #312]	; (8009614 <SystemClock_Config+0x16c>)
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	4a4d      	ldr	r2, [pc, #308]	; (8009614 <SystemClock_Config+0x16c>)
 80094e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094e4:	6413      	str	r3, [r2, #64]	; 0x40
 80094e6:	4b4b      	ldr	r3, [pc, #300]	; (8009614 <SystemClock_Config+0x16c>)
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094ee:	607b      	str	r3, [r7, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80094f2:	4b49      	ldr	r3, [pc, #292]	; (8009618 <SystemClock_Config+0x170>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a48      	ldr	r2, [pc, #288]	; (8009618 <SystemClock_Config+0x170>)
 80094f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	4b46      	ldr	r3, [pc, #280]	; (8009618 <SystemClock_Config+0x170>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800950a:	2309      	movs	r3, #9
 800950c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009518:	2301      	movs	r3, #1
 800951a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800951e:	2302      	movs	r3, #2
 8009520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009524:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009528:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800952c:	2319      	movs	r3, #25
 800952e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8009532:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800953a:	2302      	movs	r3, #2
 800953c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8009540:	2309      	movs	r3, #9
 8009542:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009546:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800954a:	4618      	mov	r0, r3
 800954c:	f7fa fa30 	bl	80039b0 <HAL_RCC_OscConfig>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8009556:	f001 f987 	bl	800a868 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800955a:	f7fa f909 	bl	8003770 <HAL_PWREx_EnableOverDrive>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8009564:	f001 f980 	bl	800a868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009568:	230f      	movs	r3, #15
 800956a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800956e:	2302      	movs	r3, #2
 8009570:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009574:	2300      	movs	r3, #0
 8009576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800957a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800957e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800958a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800958e:	2106      	movs	r1, #6
 8009590:	4618      	mov	r0, r3
 8009592:	f7fa fc7d 	bl	8003e90 <HAL_RCC_ClockConfig>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800959c:	f001 f964 	bl	800a868 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80095a0:	4b1e      	ldr	r3, [pc, #120]	; (800961c <SystemClock_Config+0x174>)
 80095a2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80095a4:	2364      	movs	r3, #100	; 0x64
 80095a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80095a8:	2302      	movs	r3, #2
 80095aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80095ac:	2302      	movs	r3, #2
 80095ae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80095b0:	2302      	movs	r3, #2
 80095b2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80095b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80095b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80095ba:	2305      	movs	r3, #5
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80095be:	2302      	movs	r3, #2
 80095c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80095c2:	2303      	movs	r3, #3
 80095c4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80095c6:	2301      	movs	r3, #1
 80095c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80095ca:	2301      	movs	r3, #1
 80095cc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80095ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80095d2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80095d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095d8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80095da:	2300      	movs	r3, #0
 80095dc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80095de:	2300      	movs	r3, #0
 80095e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80095e2:	2300      	movs	r3, #0
 80095e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80095e6:	2300      	movs	r3, #0
 80095e8:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80095ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80095f2:	2300      	movs	r3, #0
 80095f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fa fe47 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <SystemClock_Config+0x164>
  {
    Error_Handler();
 8009608:	f001 f92e 	bl	800a868 <Error_Handler>
  }
}
 800960c:	bf00      	nop
 800960e:	37d0      	adds	r7, #208	; 0xd0
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	40023800 	.word	0x40023800
 8009618:	40007000 	.word	0x40007000
 800961c:	01b14068 	.word	0x01b14068

08009620 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009626:	463b      	mov	r3, r7
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	605a      	str	r2, [r3, #4]
 800962e:	609a      	str	r2, [r3, #8]
 8009630:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8009632:	4b21      	ldr	r3, [pc, #132]	; (80096b8 <MX_ADC3_Init+0x98>)
 8009634:	4a21      	ldr	r2, [pc, #132]	; (80096bc <MX_ADC3_Init+0x9c>)
 8009636:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009638:	4b1f      	ldr	r3, [pc, #124]	; (80096b8 <MX_ADC3_Init+0x98>)
 800963a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800963e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8009640:	4b1d      	ldr	r3, [pc, #116]	; (80096b8 <MX_ADC3_Init+0x98>)
 8009642:	2200      	movs	r2, #0
 8009644:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009646:	4b1c      	ldr	r3, [pc, #112]	; (80096b8 <MX_ADC3_Init+0x98>)
 8009648:	2200      	movs	r2, #0
 800964a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800964c:	4b1a      	ldr	r3, [pc, #104]	; (80096b8 <MX_ADC3_Init+0x98>)
 800964e:	2200      	movs	r2, #0
 8009650:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8009652:	4b19      	ldr	r3, [pc, #100]	; (80096b8 <MX_ADC3_Init+0x98>)
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800965a:	4b17      	ldr	r3, [pc, #92]	; (80096b8 <MX_ADC3_Init+0x98>)
 800965c:	2200      	movs	r2, #0
 800965e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009660:	4b15      	ldr	r3, [pc, #84]	; (80096b8 <MX_ADC3_Init+0x98>)
 8009662:	4a17      	ldr	r2, [pc, #92]	; (80096c0 <MX_ADC3_Init+0xa0>)
 8009664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009666:	4b14      	ldr	r3, [pc, #80]	; (80096b8 <MX_ADC3_Init+0x98>)
 8009668:	2200      	movs	r2, #0
 800966a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800966c:	4b12      	ldr	r3, [pc, #72]	; (80096b8 <MX_ADC3_Init+0x98>)
 800966e:	2201      	movs	r2, #1
 8009670:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8009672:	4b11      	ldr	r3, [pc, #68]	; (80096b8 <MX_ADC3_Init+0x98>)
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800967a:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <MX_ADC3_Init+0x98>)
 800967c:	2201      	movs	r2, #1
 800967e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009680:	480d      	ldr	r0, [pc, #52]	; (80096b8 <MX_ADC3_Init+0x98>)
 8009682:	f7f6 ff91 	bl	80005a8 <HAL_ADC_Init>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800968c:	f001 f8ec 	bl	800a868 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8009690:	2304      	movs	r3, #4
 8009692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009694:	2301      	movs	r3, #1
 8009696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009698:	2300      	movs	r3, #0
 800969a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800969c:	463b      	mov	r3, r7
 800969e:	4619      	mov	r1, r3
 80096a0:	4805      	ldr	r0, [pc, #20]	; (80096b8 <MX_ADC3_Init+0x98>)
 80096a2:	f7f6 ffc5 	bl	8000630 <HAL_ADC_ConfigChannel>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80096ac:	f001 f8dc 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80096b0:	bf00      	nop
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	200004a0 	.word	0x200004a0
 80096bc:	40012200 	.word	0x40012200
 80096c0:	0f000001 	.word	0x0f000001

080096c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80096c8:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <MX_CRC_Init+0x3c>)
 80096ca:	4a0e      	ldr	r2, [pc, #56]	; (8009704 <MX_CRC_Init+0x40>)
 80096cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80096ce:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <MX_CRC_Init+0x3c>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80096d4:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <MX_CRC_Init+0x3c>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80096da:	4b09      	ldr	r3, [pc, #36]	; (8009700 <MX_CRC_Init+0x3c>)
 80096dc:	2200      	movs	r2, #0
 80096de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80096e0:	4b07      	ldr	r3, [pc, #28]	; (8009700 <MX_CRC_Init+0x3c>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80096e6:	4b06      	ldr	r3, [pc, #24]	; (8009700 <MX_CRC_Init+0x3c>)
 80096e8:	2201      	movs	r2, #1
 80096ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80096ec:	4804      	ldr	r0, [pc, #16]	; (8009700 <MX_CRC_Init+0x3c>)
 80096ee:	f7f7 faaf 	bl	8000c50 <HAL_CRC_Init>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80096f8:	f001 f8b6 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80096fc:	bf00      	nop
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	200002cc 	.word	0x200002cc
 8009704:	40023000 	.word	0x40023000

08009708 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <MX_DCMI_Init+0x60>)
 800970e:	4a17      	ldr	r2, [pc, #92]	; (800976c <MX_DCMI_Init+0x64>)
 8009710:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8009712:	4b15      	ldr	r3, [pc, #84]	; (8009768 <MX_DCMI_Init+0x60>)
 8009714:	2200      	movs	r2, #0
 8009716:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8009718:	4b13      	ldr	r3, [pc, #76]	; (8009768 <MX_DCMI_Init+0x60>)
 800971a:	2200      	movs	r2, #0
 800971c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800971e:	4b12      	ldr	r3, [pc, #72]	; (8009768 <MX_DCMI_Init+0x60>)
 8009720:	2200      	movs	r2, #0
 8009722:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8009724:	4b10      	ldr	r3, [pc, #64]	; (8009768 <MX_DCMI_Init+0x60>)
 8009726:	2200      	movs	r2, #0
 8009728:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800972a:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <MX_DCMI_Init+0x60>)
 800972c:	2200      	movs	r2, #0
 800972e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8009730:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <MX_DCMI_Init+0x60>)
 8009732:	2200      	movs	r2, #0
 8009734:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8009736:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <MX_DCMI_Init+0x60>)
 8009738:	2200      	movs	r2, #0
 800973a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800973c:	4b0a      	ldr	r3, [pc, #40]	; (8009768 <MX_DCMI_Init+0x60>)
 800973e:	2200      	movs	r2, #0
 8009740:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8009742:	4b09      	ldr	r3, [pc, #36]	; (8009768 <MX_DCMI_Init+0x60>)
 8009744:	2200      	movs	r2, #0
 8009746:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8009748:	4b07      	ldr	r3, [pc, #28]	; (8009768 <MX_DCMI_Init+0x60>)
 800974a:	2200      	movs	r2, #0
 800974c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800974e:	4b06      	ldr	r3, [pc, #24]	; (8009768 <MX_DCMI_Init+0x60>)
 8009750:	2200      	movs	r2, #0
 8009752:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8009754:	4804      	ldr	r0, [pc, #16]	; (8009768 <MX_DCMI_Init+0x60>)
 8009756:	f7f7 fb65 	bl	8000e24 <HAL_DCMI_Init>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8009760:	f001 f882 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8009764:	bf00      	nop
 8009766:	bd80      	pop	{r7, pc}
 8009768:	200004e8 	.word	0x200004e8
 800976c:	50050000 	.word	0x50050000

08009770 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8009774:	4b15      	ldr	r3, [pc, #84]	; (80097cc <MX_DMA2D_Init+0x5c>)
 8009776:	4a16      	ldr	r2, [pc, #88]	; (80097d0 <MX_DMA2D_Init+0x60>)
 8009778:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800977a:	4b14      	ldr	r3, [pc, #80]	; (80097cc <MX_DMA2D_Init+0x5c>)
 800977c:	2200      	movs	r2, #0
 800977e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009780:	4b12      	ldr	r3, [pc, #72]	; (80097cc <MX_DMA2D_Init+0x5c>)
 8009782:	2200      	movs	r2, #0
 8009784:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8009786:	4b11      	ldr	r3, [pc, #68]	; (80097cc <MX_DMA2D_Init+0x5c>)
 8009788:	2200      	movs	r2, #0
 800978a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800978c:	4b0f      	ldr	r3, [pc, #60]	; (80097cc <MX_DMA2D_Init+0x5c>)
 800978e:	2200      	movs	r2, #0
 8009790:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8009792:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <MX_DMA2D_Init+0x5c>)
 8009794:	2200      	movs	r2, #0
 8009796:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009798:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <MX_DMA2D_Init+0x5c>)
 800979a:	2200      	movs	r2, #0
 800979c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800979e:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <MX_DMA2D_Init+0x5c>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80097a4:	4809      	ldr	r0, [pc, #36]	; (80097cc <MX_DMA2D_Init+0x5c>)
 80097a6:	f7f7 fbaf 	bl	8000f08 <HAL_DMA2D_Init>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80097b0:	f001 f85a 	bl	800a868 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80097b4:	2101      	movs	r1, #1
 80097b6:	4805      	ldr	r0, [pc, #20]	; (80097cc <MX_DMA2D_Init+0x5c>)
 80097b8:	f7f7 fd00 	bl	80011bc <HAL_DMA2D_ConfigLayer>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80097c2:	f001 f851 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80097c6:	bf00      	nop
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	2000062c 	.word	0x2000062c
 80097d0:	4002b000 	.word	0x4002b000

080097d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80097d8:	4b1b      	ldr	r3, [pc, #108]	; (8009848 <MX_I2C1_Init+0x74>)
 80097da:	4a1c      	ldr	r2, [pc, #112]	; (800984c <MX_I2C1_Init+0x78>)
 80097dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80097de:	4b1a      	ldr	r3, [pc, #104]	; (8009848 <MX_I2C1_Init+0x74>)
 80097e0:	4a1b      	ldr	r2, [pc, #108]	; (8009850 <MX_I2C1_Init+0x7c>)
 80097e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80097e4:	4b18      	ldr	r3, [pc, #96]	; (8009848 <MX_I2C1_Init+0x74>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80097ea:	4b17      	ldr	r3, [pc, #92]	; (8009848 <MX_I2C1_Init+0x74>)
 80097ec:	2201      	movs	r2, #1
 80097ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80097f0:	4b15      	ldr	r3, [pc, #84]	; (8009848 <MX_I2C1_Init+0x74>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80097f6:	4b14      	ldr	r3, [pc, #80]	; (8009848 <MX_I2C1_Init+0x74>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80097fc:	4b12      	ldr	r3, [pc, #72]	; (8009848 <MX_I2C1_Init+0x74>)
 80097fe:	2200      	movs	r2, #0
 8009800:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009802:	4b11      	ldr	r3, [pc, #68]	; (8009848 <MX_I2C1_Init+0x74>)
 8009804:	2200      	movs	r2, #0
 8009806:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <MX_I2C1_Init+0x74>)
 800980a:	2200      	movs	r2, #0
 800980c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800980e:	480e      	ldr	r0, [pc, #56]	; (8009848 <MX_I2C1_Init+0x74>)
 8009810:	f7f9 fb1c 	bl	8002e4c <HAL_I2C_Init>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d001      	beq.n	800981e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800981a:	f001 f825 	bl	800a868 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800981e:	2100      	movs	r1, #0
 8009820:	4809      	ldr	r0, [pc, #36]	; (8009848 <MX_I2C1_Init+0x74>)
 8009822:	f7f9 fba3 	bl	8002f6c <HAL_I2CEx_ConfigAnalogFilter>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800982c:	f001 f81c 	bl	800a868 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009830:	2100      	movs	r1, #0
 8009832:	4805      	ldr	r0, [pc, #20]	; (8009848 <MX_I2C1_Init+0x74>)
 8009834:	f7f9 fbe5 	bl	8003002 <HAL_I2CEx_ConfigDigitalFilter>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800983e:	f001 f813 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009842:	bf00      	nop
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20000280 	.word	0x20000280
 800984c:	40005400 	.word	0x40005400
 8009850:	00c0eaff 	.word	0x00c0eaff

08009854 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8009858:	4b1b      	ldr	r3, [pc, #108]	; (80098c8 <MX_I2C3_Init+0x74>)
 800985a:	4a1c      	ldr	r2, [pc, #112]	; (80098cc <MX_I2C3_Init+0x78>)
 800985c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800985e:	4b1a      	ldr	r3, [pc, #104]	; (80098c8 <MX_I2C3_Init+0x74>)
 8009860:	4a1b      	ldr	r2, [pc, #108]	; (80098d0 <MX_I2C3_Init+0x7c>)
 8009862:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8009864:	4b18      	ldr	r3, [pc, #96]	; (80098c8 <MX_I2C3_Init+0x74>)
 8009866:	2200      	movs	r2, #0
 8009868:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800986a:	4b17      	ldr	r3, [pc, #92]	; (80098c8 <MX_I2C3_Init+0x74>)
 800986c:	2201      	movs	r2, #1
 800986e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009870:	4b15      	ldr	r3, [pc, #84]	; (80098c8 <MX_I2C3_Init+0x74>)
 8009872:	2200      	movs	r2, #0
 8009874:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8009876:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <MX_I2C3_Init+0x74>)
 8009878:	2200      	movs	r2, #0
 800987a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800987c:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <MX_I2C3_Init+0x74>)
 800987e:	2200      	movs	r2, #0
 8009880:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009882:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <MX_I2C3_Init+0x74>)
 8009884:	2200      	movs	r2, #0
 8009886:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009888:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <MX_I2C3_Init+0x74>)
 800988a:	2200      	movs	r2, #0
 800988c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800988e:	480e      	ldr	r0, [pc, #56]	; (80098c8 <MX_I2C3_Init+0x74>)
 8009890:	f7f9 fadc 	bl	8002e4c <HAL_I2C_Init>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800989a:	f000 ffe5 	bl	800a868 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800989e:	2100      	movs	r1, #0
 80098a0:	4809      	ldr	r0, [pc, #36]	; (80098c8 <MX_I2C3_Init+0x74>)
 80098a2:	f7f9 fb63 	bl	8002f6c <HAL_I2CEx_ConfigAnalogFilter>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80098ac:	f000 ffdc 	bl	800a868 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80098b0:	2100      	movs	r1, #0
 80098b2:	4805      	ldr	r0, [pc, #20]	; (80098c8 <MX_I2C3_Init+0x74>)
 80098b4:	f7f9 fba5 	bl	8003002 <HAL_I2CEx_ConfigDigitalFilter>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80098be:	f000 ffd3 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80098c2:	bf00      	nop
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	200000c0 	.word	0x200000c0
 80098cc:	40005c00 	.word	0x40005c00
 80098d0:	00c0eaff 	.word	0x00c0eaff

080098d4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80098da:	1d3b      	adds	r3, r7, #4
 80098dc:	2234      	movs	r2, #52	; 0x34
 80098de:	2100      	movs	r1, #0
 80098e0:	4618      	mov	r0, r3
 80098e2:	f002 f95d 	bl	800bba0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80098e6:	4b3a      	ldr	r3, [pc, #232]	; (80099d0 <MX_LTDC_Init+0xfc>)
 80098e8:	4a3a      	ldr	r2, [pc, #232]	; (80099d4 <MX_LTDC_Init+0x100>)
 80098ea:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80098ec:	4b38      	ldr	r3, [pc, #224]	; (80099d0 <MX_LTDC_Init+0xfc>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80098f2:	4b37      	ldr	r3, [pc, #220]	; (80099d0 <MX_LTDC_Init+0xfc>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80098f8:	4b35      	ldr	r3, [pc, #212]	; (80099d0 <MX_LTDC_Init+0xfc>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80098fe:	4b34      	ldr	r3, [pc, #208]	; (80099d0 <MX_LTDC_Init+0xfc>)
 8009900:	2200      	movs	r2, #0
 8009902:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8009904:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <MX_LTDC_Init+0xfc>)
 8009906:	2228      	movs	r2, #40	; 0x28
 8009908:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800990a:	4b31      	ldr	r3, [pc, #196]	; (80099d0 <MX_LTDC_Init+0xfc>)
 800990c:	2209      	movs	r2, #9
 800990e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8009910:	4b2f      	ldr	r3, [pc, #188]	; (80099d0 <MX_LTDC_Init+0xfc>)
 8009912:	2235      	movs	r2, #53	; 0x35
 8009914:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8009916:	4b2e      	ldr	r3, [pc, #184]	; (80099d0 <MX_LTDC_Init+0xfc>)
 8009918:	220b      	movs	r2, #11
 800991a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800991c:	4b2c      	ldr	r3, [pc, #176]	; (80099d0 <MX_LTDC_Init+0xfc>)
 800991e:	f240 2215 	movw	r2, #533	; 0x215
 8009922:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8009924:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <MX_LTDC_Init+0xfc>)
 8009926:	f240 121b 	movw	r2, #283	; 0x11b
 800992a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800992c:	4b28      	ldr	r3, [pc, #160]	; (80099d0 <MX_LTDC_Init+0xfc>)
 800992e:	f240 2235 	movw	r2, #565	; 0x235
 8009932:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8009934:	4b26      	ldr	r3, [pc, #152]	; (80099d0 <MX_LTDC_Init+0xfc>)
 8009936:	f240 121d 	movw	r2, #285	; 0x11d
 800993a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800993c:	4b24      	ldr	r3, [pc, #144]	; (80099d0 <MX_LTDC_Init+0xfc>)
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8009944:	4b22      	ldr	r3, [pc, #136]	; (80099d0 <MX_LTDC_Init+0xfc>)
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800994c:	4b20      	ldr	r3, [pc, #128]	; (80099d0 <MX_LTDC_Init+0xfc>)
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009954:	481e      	ldr	r0, [pc, #120]	; (80099d0 <MX_LTDC_Init+0xfc>)
 8009956:	f7f9 fba1 	bl	800309c <HAL_LTDC_Init>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8009960:	f000 ff82 	bl	800a868 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8009968:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800996c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8009972:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009976:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8009978:	2302      	movs	r3, #2
 800997a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800997c:	23ff      	movs	r3, #255	; 0xff
 800997e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8009980:	2300      	movs	r3, #0
 8009982:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009984:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009988:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800998a:	2307      	movs	r3, #7
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800998e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8009994:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800999a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800999e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80099b2:	1d3b      	adds	r3, r7, #4
 80099b4:	2200      	movs	r2, #0
 80099b6:	4619      	mov	r1, r3
 80099b8:	4805      	ldr	r0, [pc, #20]	; (80099d0 <MX_LTDC_Init+0xfc>)
 80099ba:	f7f9 fd01 	bl	80033c0 <HAL_LTDC_ConfigLayer>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80099c4:	f000 ff50 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80099c8:	bf00      	nop
 80099ca:	3738      	adds	r7, #56	; 0x38
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	200003f4 	.word	0x200003f4
 80099d4:	40016800 	.word	0x40016800

080099d8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80099dc:	4b12      	ldr	r3, [pc, #72]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 80099de:	4a13      	ldr	r2, [pc, #76]	; (8009a2c <MX_QUADSPI_Init+0x54>)
 80099e0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80099e2:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 80099e4:	22ff      	movs	r2, #255	; 0xff
 80099e6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80099e8:	4b0f      	ldr	r3, [pc, #60]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 80099ea:	2201      	movs	r2, #1
 80099ec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80099ee:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80099f4:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 80099f6:	2201      	movs	r2, #1
 80099f8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80099fa:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8009a00:	4b09      	ldr	r3, [pc, #36]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8009a06:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8009a0c:	4b06      	ldr	r3, [pc, #24]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8009a12:	4805      	ldr	r0, [pc, #20]	; (8009a28 <MX_QUADSPI_Init+0x50>)
 8009a14:	f7f9 fefc 	bl	8003810 <HAL_QSPI_Init>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8009a1e:	f000 ff23 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8009a22:	bf00      	nop
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	2000076c 	.word	0x2000076c
 8009a2c:	a0001000 	.word	0xa0001000

08009a30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8009a34:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <MX_RNG_Init+0x20>)
 8009a36:	4a07      	ldr	r2, [pc, #28]	; (8009a54 <MX_RNG_Init+0x24>)
 8009a38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8009a3a:	4805      	ldr	r0, [pc, #20]	; (8009a50 <MX_RNG_Init+0x20>)
 8009a3c:	f7fb f94a 	bl	8004cd4 <HAL_RNG_Init>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8009a46:	f000 ff0f 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8009a4a:	bf00      	nop
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000618 	.word	0x20000618
 8009a54:	50060800 	.word	0x50060800

08009a58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b092      	sub	sp, #72	; 0x48
 8009a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	605a      	str	r2, [r3, #4]
 8009a68:	609a      	str	r2, [r3, #8]
 8009a6a:	60da      	str	r2, [r3, #12]
 8009a6c:	611a      	str	r2, [r3, #16]
 8009a6e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8009a70:	2300      	movs	r3, #0
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8009a74:	463b      	mov	r3, r7
 8009a76:	222c      	movs	r2, #44	; 0x2c
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f002 f890 	bl	800bba0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8009a80:	4b47      	ldr	r3, [pc, #284]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009a82:	4a48      	ldr	r2, [pc, #288]	; (8009ba4 <MX_RTC_Init+0x14c>)
 8009a84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009a86:	4b46      	ldr	r3, [pc, #280]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009a8c:	4b44      	ldr	r3, [pc, #272]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009a8e:	227f      	movs	r2, #127	; 0x7f
 8009a90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009a92:	4b43      	ldr	r3, [pc, #268]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009a94:	22ff      	movs	r2, #255	; 0xff
 8009a96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009a98:	4b41      	ldr	r3, [pc, #260]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009a9e:	4b40      	ldr	r3, [pc, #256]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009aa4:	4b3e      	ldr	r3, [pc, #248]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009aaa:	483d      	ldr	r0, [pc, #244]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009aac:	f7fb f9a0 	bl	8004df0 <HAL_RTC_Init>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d001      	beq.n	8009aba <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8009ab6:	f000 fed7 	bl	800a868 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009acc:	2300      	movs	r3, #0
 8009ace:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009ad4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ad8:	2201      	movs	r2, #1
 8009ada:	4619      	mov	r1, r3
 8009adc:	4830      	ldr	r0, [pc, #192]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009ade:	f7fb fa03 	bl	8004ee8 <HAL_RTC_SetTime>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8009ae8:	f000 febe 	bl	800a868 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b08:	2201      	movs	r2, #1
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	4824      	ldr	r0, [pc, #144]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009b0e:	f7fb faa9 	bl	8005064 <HAL_RTC_SetDate>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8009b18:	f000 fea6 	bl	800a868 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009b34:	2300      	movs	r3, #0
 8009b36:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8009b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009b4c:	463b      	mov	r3, r7
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4619      	mov	r1, r3
 8009b52:	4813      	ldr	r0, [pc, #76]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009b54:	f7fb fb2e 	bl	80051b4 <HAL_RTC_SetAlarm>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d001      	beq.n	8009b62 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8009b5e:	f000 fe83 	bl	800a868 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8009b62:	2301      	movs	r3, #1
 8009b64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8009b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009b6e:	463b      	mov	r3, r7
 8009b70:	2201      	movs	r2, #1
 8009b72:	4619      	mov	r1, r3
 8009b74:	480a      	ldr	r0, [pc, #40]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009b76:	f7fb fb1d 	bl	80051b4 <HAL_RTC_SetAlarm>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8009b80:	f000 fe72 	bl	800a868 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8009b84:	2202      	movs	r2, #2
 8009b86:	2100      	movs	r1, #0
 8009b88:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <MX_RTC_Init+0x148>)
 8009b8a:	f7fb fc9d 	bl	80054c8 <HAL_RTCEx_SetTimeStamp>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8009b94:	f000 fe68 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009b98:	bf00      	nop
 8009b9a:	3748      	adds	r7, #72	; 0x48
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200005b8 	.word	0x200005b8
 8009ba4:	40002800 	.word	0x40002800

08009ba8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8009bac:	4b4d      	ldr	r3, [pc, #308]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bae:	4a4e      	ldr	r2, [pc, #312]	; (8009ce8 <MX_SAI2_Init+0x140>)
 8009bb0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009bb2:	4b4c      	ldr	r3, [pc, #304]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8009bb8:	4b4a      	ldr	r3, [pc, #296]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8009bbe:	4b49      	ldr	r3, [pc, #292]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bc0:	2240      	movs	r2, #64	; 0x40
 8009bc2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009bc4:	4b47      	ldr	r3, [pc, #284]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009bca:	4b46      	ldr	r3, [pc, #280]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8009bd0:	4b44      	ldr	r3, [pc, #272]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009bd6:	4b43      	ldr	r3, [pc, #268]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009bdc:	4b41      	ldr	r3, [pc, #260]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8009be2:	4b40      	ldr	r3, [pc, #256]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8009be8:	4b3e      	ldr	r3, [pc, #248]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bea:	4a40      	ldr	r2, [pc, #256]	; (8009cec <MX_SAI2_Init+0x144>)
 8009bec:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009bee:	4b3d      	ldr	r3, [pc, #244]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009bf4:	4b3b      	ldr	r3, [pc, #236]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009bfa:	4b3a      	ldr	r3, [pc, #232]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009c00:	4b38      	ldr	r3, [pc, #224]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8009c06:	4b37      	ldr	r3, [pc, #220]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c08:	2208      	movs	r2, #8
 8009c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8009c0c:	4b35      	ldr	r3, [pc, #212]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8009c12:	4b34      	ldr	r3, [pc, #208]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009c18:	4b32      	ldr	r3, [pc, #200]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009c1e:	4b31      	ldr	r3, [pc, #196]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8009c24:	4b2f      	ldr	r3, [pc, #188]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009c2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8009c30:	4b2c      	ldr	r3, [pc, #176]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8009c36:	4b2b      	ldr	r3, [pc, #172]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8009c3c:	4829      	ldr	r0, [pc, #164]	; (8009ce4 <MX_SAI2_Init+0x13c>)
 8009c3e:	f7fb fc99 	bl	8005574 <HAL_SAI_Init>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8009c48:	f000 fe0e 	bl	800a868 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8009c4c:	4b28      	ldr	r3, [pc, #160]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c4e:	4a29      	ldr	r2, [pc, #164]	; (8009cf4 <MX_SAI2_Init+0x14c>)
 8009c50:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009c52:	4b27      	ldr	r3, [pc, #156]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8009c58:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c5a:	2203      	movs	r2, #3
 8009c5c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8009c5e:	4b24      	ldr	r3, [pc, #144]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c60:	2240      	movs	r2, #64	; 0x40
 8009c62:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009c64:	4b22      	ldr	r3, [pc, #136]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009c6a:	4b21      	ldr	r3, [pc, #132]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8009c70:	4b1f      	ldr	r3, [pc, #124]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c72:	2201      	movs	r2, #1
 8009c74:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009c76:	4b1e      	ldr	r3, [pc, #120]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8009c7c:	4b1c      	ldr	r3, [pc, #112]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009c82:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009c88:	4b19      	ldr	r3, [pc, #100]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009c8e:	4b18      	ldr	r3, [pc, #96]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009c94:	4b16      	ldr	r3, [pc, #88]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8009c9a:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8009ca0:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009cac:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8009cb8:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009cbe:	4b0c      	ldr	r3, [pc, #48]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8009cc4:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8009cd0:	4807      	ldr	r0, [pc, #28]	; (8009cf0 <MX_SAI2_Init+0x148>)
 8009cd2:	f7fb fc4f 	bl	8005574 <HAL_SAI_Init>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8009cdc:	f000 fdc4 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8009ce0:	bf00      	nop
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	200001fc 	.word	0x200001fc
 8009ce8:	40015c04 	.word	0x40015c04
 8009cec:	0002ee00 	.word	0x0002ee00
 8009cf0:	2000003c 	.word	0x2000003c
 8009cf4:	40015c24 	.word	0x40015c24

08009cf8 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8009cfc:	4b15      	ldr	r3, [pc, #84]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009cfe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8009d02:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8009d04:	4b13      	ldr	r3, [pc, #76]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8009d0a:	4b12      	ldr	r3, [pc, #72]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8009d10:	4b10      	ldr	r3, [pc, #64]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8009d16:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8009d1c:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8009d22:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8009d2e:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8009d34:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8009d40:	4804      	ldr	r0, [pc, #16]	; (8009d54 <MX_SPDIFRX_Init+0x5c>)
 8009d42:	f7fb fdf3 	bl	800592c <HAL_SPDIFRX_Init>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8009d4c:	f000 fd8c 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8009d50:	bf00      	nop
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	200001b0 	.word	0x200001b0

08009d58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009d5c:	4b1b      	ldr	r3, [pc, #108]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d5e:	4a1c      	ldr	r2, [pc, #112]	; (8009dd0 <MX_SPI2_Init+0x78>)
 8009d60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009d62:	4b1a      	ldr	r3, [pc, #104]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009d68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009d6a:	4b18      	ldr	r3, [pc, #96]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8009d70:	4b16      	ldr	r3, [pc, #88]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009d76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d78:	4b14      	ldr	r3, [pc, #80]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009d7e:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009d84:	4b11      	ldr	r3, [pc, #68]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d8a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d8c:	4b0f      	ldr	r3, [pc, #60]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009d92:	4b0e      	ldr	r3, [pc, #56]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009d98:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d9e:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009da4:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009da6:	2207      	movs	r2, #7
 8009da8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009daa:	4b08      	ldr	r3, [pc, #32]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009db0:	4b06      	ldr	r3, [pc, #24]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009db2:	2208      	movs	r2, #8
 8009db4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009db6:	4805      	ldr	r0, [pc, #20]	; (8009dcc <MX_SPI2_Init+0x74>)
 8009db8:	f7fb fe14 	bl	80059e4 <HAL_SPI_Init>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8009dc2:	f000 fd51 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009dc6:	bf00      	nop
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000010c 	.word	0x2000010c
 8009dd0:	40003800 	.word	0x40003800

08009dd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b09a      	sub	sp, #104	; 0x68
 8009dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009dda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009dde:	2200      	movs	r2, #0
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	605a      	str	r2, [r3, #4]
 8009de4:	609a      	str	r2, [r3, #8]
 8009de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009de8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]
 8009df0:	605a      	str	r2, [r3, #4]
 8009df2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009df4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	605a      	str	r2, [r3, #4]
 8009dfe:	609a      	str	r2, [r3, #8]
 8009e00:	60da      	str	r2, [r3, #12]
 8009e02:	611a      	str	r2, [r3, #16]
 8009e04:	615a      	str	r2, [r3, #20]
 8009e06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009e08:	1d3b      	adds	r3, r7, #4
 8009e0a:	222c      	movs	r2, #44	; 0x2c
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 fec6 	bl	800bba0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009e14:	4b43      	ldr	r3, [pc, #268]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e16:	4a44      	ldr	r2, [pc, #272]	; (8009f28 <MX_TIM1_Init+0x154>)
 8009e18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009e1a:	4b42      	ldr	r3, [pc, #264]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e20:	4b40      	ldr	r3, [pc, #256]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8009e26:	4b3f      	ldr	r3, [pc, #252]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e2c:	4b3d      	ldr	r3, [pc, #244]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009e32:	4b3c      	ldr	r3, [pc, #240]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e38:	4b3a      	ldr	r3, [pc, #232]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009e3e:	4839      	ldr	r0, [pc, #228]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e40:	f7fb fe62 	bl	8005b08 <HAL_TIM_Base_Init>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8009e4a:	f000 fd0d 	bl	800a868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e52:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009e54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4832      	ldr	r0, [pc, #200]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e5c:	f7fc f90c 	bl	8006078 <HAL_TIM_ConfigClockSource>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8009e66:	f000 fcff 	bl	800a868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009e6a:	482e      	ldr	r0, [pc, #184]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e6c:	f7fb fea2 	bl	8005bb4 <HAL_TIM_PWM_Init>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d001      	beq.n	8009e7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8009e76:	f000 fcf7 	bl	800a868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e82:	2300      	movs	r3, #0
 8009e84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009e86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4825      	ldr	r0, [pc, #148]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009e8e:	f7fc fd6d 	bl	800696c <HAL_TIMEx_MasterConfigSynchronization>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8009e98:	f000 fce6 	bl	800a868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e9c:	2360      	movs	r3, #96	; 0x60
 8009e9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4818      	ldr	r0, [pc, #96]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009ec2:	f7fb ffc1 	bl	8005e48 <HAL_TIM_PWM_ConfigChannel>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8009ecc:	f000 fccc 	bl	800a868 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ee8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ef6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009efc:	2300      	movs	r3, #0
 8009efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009f00:	1d3b      	adds	r3, r7, #4
 8009f02:	4619      	mov	r1, r3
 8009f04:	4807      	ldr	r0, [pc, #28]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009f06:	f7fc fd8d 	bl	8006a24 <HAL_TIMEx_ConfigBreakDeadTime>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8009f10:	f000 fcaa 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009f14:	4803      	ldr	r0, [pc, #12]	; (8009f24 <MX_TIM1_Init+0x150>)
 8009f16:	f001 f973 	bl	800b200 <HAL_TIM_MspPostInit>

}
 8009f1a:	bf00      	nop
 8009f1c:	3768      	adds	r7, #104	; 0x68
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	200005d8 	.word	0x200005d8
 8009f28:	40010000 	.word	0x40010000

08009f2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b088      	sub	sp, #32
 8009f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f32:	f107 0310 	add.w	r3, r7, #16
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
 8009f3a:	605a      	str	r2, [r3, #4]
 8009f3c:	609a      	str	r2, [r3, #8]
 8009f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f40:	1d3b      	adds	r3, r7, #4
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	605a      	str	r2, [r3, #4]
 8009f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009f4a:	4b1d      	ldr	r3, [pc, #116]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009f4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009f52:	4b1b      	ldr	r3, [pc, #108]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f58:	4b19      	ldr	r3, [pc, #100]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8009f5e:	4b18      	ldr	r3, [pc, #96]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f64:	4b16      	ldr	r3, [pc, #88]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f6a:	4b15      	ldr	r3, [pc, #84]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009f70:	4813      	ldr	r0, [pc, #76]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009f72:	f7fb fdc9 	bl	8005b08 <HAL_TIM_Base_Init>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8009f7c:	f000 fc74 	bl	800a868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009f86:	f107 0310 	add.w	r3, r7, #16
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	480c      	ldr	r0, [pc, #48]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009f8e:	f7fc f873 	bl	8006078 <HAL_TIM_ConfigClockSource>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8009f98:	f000 fc66 	bl	800a868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009fa4:	1d3b      	adds	r3, r7, #4
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	4805      	ldr	r0, [pc, #20]	; (8009fc0 <MX_TIM2_Init+0x94>)
 8009faa:	f7fc fcdf 	bl	800696c <HAL_TIMEx_MasterConfigSynchronization>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8009fb4:	f000 fc58 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009fb8:	bf00      	nop
 8009fba:	3720      	adds	r7, #32
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	2000066c 	.word	0x2000066c

08009fc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08e      	sub	sp, #56	; 0x38
 8009fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
 8009fd2:	605a      	str	r2, [r3, #4]
 8009fd4:	609a      	str	r2, [r3, #8]
 8009fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fd8:	f107 031c 	add.w	r3, r7, #28
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	605a      	str	r2, [r3, #4]
 8009fec:	609a      	str	r2, [r3, #8]
 8009fee:	60da      	str	r2, [r3, #12]
 8009ff0:	611a      	str	r2, [r3, #16]
 8009ff2:	615a      	str	r2, [r3, #20]
 8009ff4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009ff6:	4b2c      	ldr	r3, [pc, #176]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 8009ff8:	4a2c      	ldr	r2, [pc, #176]	; (800a0ac <MX_TIM3_Init+0xe8>)
 8009ffa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009ffc:	4b2a      	ldr	r3, [pc, #168]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a002:	4b29      	ldr	r3, [pc, #164]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a004:	2200      	movs	r2, #0
 800a006:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800a008:	4b27      	ldr	r3, [pc, #156]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a00e:	4b26      	ldr	r3, [pc, #152]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a010:	2200      	movs	r2, #0
 800a012:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a014:	4b24      	ldr	r3, [pc, #144]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a016:	2200      	movs	r2, #0
 800a018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a01a:	4823      	ldr	r0, [pc, #140]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a01c:	f7fb fd74 	bl	8005b08 <HAL_TIM_Base_Init>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800a026:	f000 fc1f 	bl	800a868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a02a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a02e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a034:	4619      	mov	r1, r3
 800a036:	481c      	ldr	r0, [pc, #112]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a038:	f7fc f81e 	bl	8006078 <HAL_TIM_ConfigClockSource>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800a042:	f000 fc11 	bl	800a868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a046:	4818      	ldr	r0, [pc, #96]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a048:	f7fb fdb4 	bl	8005bb4 <HAL_TIM_PWM_Init>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800a052:	f000 fc09 	bl	800a868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a056:	2300      	movs	r3, #0
 800a058:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a05e:	f107 031c 	add.w	r3, r7, #28
 800a062:	4619      	mov	r1, r3
 800a064:	4810      	ldr	r0, [pc, #64]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a066:	f7fc fc81 	bl	800696c <HAL_TIMEx_MasterConfigSynchronization>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800a070:	f000 fbfa 	bl	800a868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a074:	2360      	movs	r3, #96	; 0x60
 800a076:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a080:	2300      	movs	r3, #0
 800a082:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a084:	463b      	mov	r3, r7
 800a086:	2200      	movs	r2, #0
 800a088:	4619      	mov	r1, r3
 800a08a:	4807      	ldr	r0, [pc, #28]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a08c:	f7fb fedc 	bl	8005e48 <HAL_TIM_PWM_ConfigChannel>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800a096:	f000 fbe7 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a09a:	4803      	ldr	r0, [pc, #12]	; (800a0a8 <MX_TIM3_Init+0xe4>)
 800a09c:	f001 f8b0 	bl	800b200 <HAL_TIM_MspPostInit>

}
 800a0a0:	bf00      	nop
 800a0a2:	3738      	adds	r7, #56	; 0x38
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	200003b4 	.word	0x200003b4
 800a0ac:	40000400 	.word	0x40000400

0800a0b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08e      	sub	sp, #56	; 0x38
 800a0b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a0b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	605a      	str	r2, [r3, #4]
 800a0c0:	609a      	str	r2, [r3, #8]
 800a0c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0c4:	f107 031c 	add.w	r3, r7, #28
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	605a      	str	r2, [r3, #4]
 800a0ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0d0:	463b      	mov	r3, r7
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	605a      	str	r2, [r3, #4]
 800a0d8:	609a      	str	r2, [r3, #8]
 800a0da:	60da      	str	r2, [r3, #12]
 800a0dc:	611a      	str	r2, [r3, #16]
 800a0de:	615a      	str	r2, [r3, #20]
 800a0e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a0e2:	4b2c      	ldr	r3, [pc, #176]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a0e4:	4a2c      	ldr	r2, [pc, #176]	; (800a198 <MX_TIM5_Init+0xe8>)
 800a0e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a0e8:	4b2a      	ldr	r3, [pc, #168]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ee:	4b29      	ldr	r3, [pc, #164]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800a0f4:	4b27      	ldr	r3, [pc, #156]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0fa:	4b26      	ldr	r3, [pc, #152]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a100:	4b24      	ldr	r3, [pc, #144]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a102:	2200      	movs	r2, #0
 800a104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a106:	4823      	ldr	r0, [pc, #140]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a108:	f7fb fcfe 	bl	8005b08 <HAL_TIM_Base_Init>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800a112:	f000 fba9 	bl	800a868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a11a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a11c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a120:	4619      	mov	r1, r3
 800a122:	481c      	ldr	r0, [pc, #112]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a124:	f7fb ffa8 	bl	8006078 <HAL_TIM_ConfigClockSource>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800a12e:	f000 fb9b 	bl	800a868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a132:	4818      	ldr	r0, [pc, #96]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a134:	f7fb fd3e 	bl	8005bb4 <HAL_TIM_PWM_Init>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800a13e:	f000 fb93 	bl	800a868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a142:	2300      	movs	r3, #0
 800a144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a146:	2300      	movs	r3, #0
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a14a:	f107 031c 	add.w	r3, r7, #28
 800a14e:	4619      	mov	r1, r3
 800a150:	4810      	ldr	r0, [pc, #64]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a152:	f7fc fc0b 	bl	800696c <HAL_TIMEx_MasterConfigSynchronization>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800a15c:	f000 fb84 	bl	800a868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a160:	2360      	movs	r3, #96	; 0x60
 800a162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a168:	2300      	movs	r3, #0
 800a16a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a170:	463b      	mov	r3, r7
 800a172:	220c      	movs	r2, #12
 800a174:	4619      	mov	r1, r3
 800a176:	4807      	ldr	r0, [pc, #28]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a178:	f7fb fe66 	bl	8005e48 <HAL_TIM_PWM_ConfigChannel>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800a182:	f000 fb71 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800a186:	4803      	ldr	r0, [pc, #12]	; (800a194 <MX_TIM5_Init+0xe4>)
 800a188:	f001 f83a 	bl	800b200 <HAL_TIM_MspPostInit>

}
 800a18c:	bf00      	nop
 800a18e:	3738      	adds	r7, #56	; 0x38
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20000374 	.word	0x20000374
 800a198:	40000c00 	.word	0x40000c00

0800a19c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a1a2:	f107 0310 	add.w	r3, r7, #16
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	605a      	str	r2, [r3, #4]
 800a1ac:	609a      	str	r2, [r3, #8]
 800a1ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1b0:	1d3b      	adds	r3, r7, #4
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	605a      	str	r2, [r3, #4]
 800a1b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a1ba:	4b1f      	ldr	r3, [pc, #124]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a1bc:	4a1f      	ldr	r2, [pc, #124]	; (800a23c <MX_TIM8_Init+0xa0>)
 800a1be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a1c0:	4b1d      	ldr	r3, [pc, #116]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1c6:	4b1c      	ldr	r3, [pc, #112]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800a1cc:	4b1a      	ldr	r3, [pc, #104]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1d2:	4b19      	ldr	r3, [pc, #100]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a1d8:	4b17      	ldr	r3, [pc, #92]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1de:	4b16      	ldr	r3, [pc, #88]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a1e4:	4814      	ldr	r0, [pc, #80]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a1e6:	f7fb fc8f 	bl	8005b08 <HAL_TIM_Base_Init>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800a1f0:	f000 fb3a 	bl	800a868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a1f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a1fa:	f107 0310 	add.w	r3, r7, #16
 800a1fe:	4619      	mov	r1, r3
 800a200:	480d      	ldr	r0, [pc, #52]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a202:	f7fb ff39 	bl	8006078 <HAL_TIM_ConfigClockSource>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800a20c:	f000 fb2c 	bl	800a868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a210:	2300      	movs	r3, #0
 800a212:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a214:	2300      	movs	r3, #0
 800a216:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a218:	2300      	movs	r3, #0
 800a21a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a21c:	1d3b      	adds	r3, r7, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4805      	ldr	r0, [pc, #20]	; (800a238 <MX_TIM8_Init+0x9c>)
 800a222:	f7fc fba3 	bl	800696c <HAL_TIMEx_MasterConfigSynchronization>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800a22c:	f000 fb1c 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a230:	bf00      	nop
 800a232:	3720      	adds	r7, #32
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	20000170 	.word	0x20000170
 800a23c:	40010400 	.word	0x40010400

0800a240 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800a246:	1d3b      	adds	r3, r7, #4
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	605a      	str	r2, [r3, #4]
 800a24e:	609a      	str	r2, [r3, #8]
 800a250:	60da      	str	r2, [r3, #12]
 800a252:	611a      	str	r2, [r3, #16]
 800a254:	615a      	str	r2, [r3, #20]
 800a256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800a258:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a25a:	4a1a      	ldr	r2, [pc, #104]	; (800a2c4 <MX_TIM12_Init+0x84>)
 800a25c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800a25e:	4b18      	ldr	r3, [pc, #96]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a260:	2200      	movs	r2, #0
 800a262:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a264:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a266:	2200      	movs	r2, #0
 800a268:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800a26a:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a270:	4b13      	ldr	r3, [pc, #76]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a272:	2200      	movs	r2, #0
 800a274:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a276:	4b12      	ldr	r3, [pc, #72]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a278:	2200      	movs	r2, #0
 800a27a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800a27c:	4810      	ldr	r0, [pc, #64]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a27e:	f7fb fc99 	bl	8005bb4 <HAL_TIM_PWM_Init>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800a288:	f000 faee 	bl	800a868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a28c:	2360      	movs	r3, #96	; 0x60
 800a28e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a29c:	1d3b      	adds	r3, r7, #4
 800a29e:	2200      	movs	r2, #0
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4807      	ldr	r0, [pc, #28]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a2a4:	f7fb fdd0 	bl	8005e48 <HAL_TIM_PWM_ConfigChannel>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800a2ae:	f000 fadb 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800a2b2:	4803      	ldr	r0, [pc, #12]	; (800a2c0 <MX_TIM12_Init+0x80>)
 800a2b4:	f000 ffa4 	bl	800b200 <HAL_TIM_MspPostInit>

}
 800a2b8:	bf00      	nop
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	200006ac 	.word	0x200006ac
 800a2c4:	40001800 	.word	0x40001800

0800a2c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a2cc:	4b14      	ldr	r3, [pc, #80]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a2ce:	4a15      	ldr	r2, [pc, #84]	; (800a324 <MX_USART1_UART_Init+0x5c>)
 800a2d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a2d2:	4b13      	ldr	r3, [pc, #76]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a2d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a2d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a2da:	4b11      	ldr	r3, [pc, #68]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a2e0:	4b0f      	ldr	r3, [pc, #60]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a2e6:	4b0e      	ldr	r3, [pc, #56]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a2ec:	4b0c      	ldr	r3, [pc, #48]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a2ee:	220c      	movs	r2, #12
 800a2f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2f2:	4b0b      	ldr	r3, [pc, #44]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2f8:	4b09      	ldr	r3, [pc, #36]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a2fe:	4b08      	ldr	r3, [pc, #32]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a300:	2200      	movs	r2, #0
 800a302:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a304:	4b06      	ldr	r3, [pc, #24]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a306:	2200      	movs	r2, #0
 800a308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a30a:	4805      	ldr	r0, [pc, #20]	; (800a320 <MX_USART1_UART_Init+0x58>)
 800a30c:	f7fc fc26 	bl	8006b5c <HAL_UART_Init>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a316:	f000 faa7 	bl	800a868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a31a:	bf00      	nop
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000538 	.word	0x20000538
 800a324:	40011000 	.word	0x40011000

0800a328 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a32e:	1d3b      	adds	r3, r7, #4
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	609a      	str	r2, [r3, #8]
 800a338:	60da      	str	r2, [r3, #12]
 800a33a:	611a      	str	r2, [r3, #16]
 800a33c:	615a      	str	r2, [r3, #20]
 800a33e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a340:	4b1f      	ldr	r3, [pc, #124]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a342:	4a20      	ldr	r2, [pc, #128]	; (800a3c4 <MX_FMC_Init+0x9c>)
 800a344:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a346:	4b1e      	ldr	r3, [pc, #120]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a348:	2200      	movs	r2, #0
 800a34a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a34c:	4b1c      	ldr	r3, [pc, #112]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a34e:	2200      	movs	r2, #0
 800a350:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800a352:	4b1b      	ldr	r3, [pc, #108]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a354:	2204      	movs	r2, #4
 800a356:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a358:	4b19      	ldr	r3, [pc, #100]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a35a:	2210      	movs	r2, #16
 800a35c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a35e:	4b18      	ldr	r3, [pc, #96]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a360:	2240      	movs	r2, #64	; 0x40
 800a362:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800a364:	4b16      	ldr	r3, [pc, #88]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a366:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a36a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a36e:	2200      	movs	r2, #0
 800a370:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800a372:	4b13      	ldr	r3, [pc, #76]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a378:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a37a:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a380:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a382:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a384:	2200      	movs	r2, #0
 800a386:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800a388:	2302      	movs	r3, #2
 800a38a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800a38c:	2307      	movs	r3, #7
 800a38e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a390:	2304      	movs	r3, #4
 800a392:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800a394:	2307      	movs	r3, #7
 800a396:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800a398:	2303      	movs	r3, #3
 800a39a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800a39c:	2302      	movs	r3, #2
 800a39e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a3a4:	1d3b      	adds	r3, r7, #4
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	4805      	ldr	r0, [pc, #20]	; (800a3c0 <MX_FMC_Init+0x98>)
 800a3aa:	f7fb fa8b 	bl	80058c4 <HAL_SDRAM_Init>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800a3b4:	f000 fa58 	bl	800a868 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800a3b8:	bf00      	nop
 800a3ba:	3720      	adds	r7, #32
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	200006ec 	.word	0x200006ec
 800a3c4:	a0000140 	.word	0xa0000140

0800a3c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b090      	sub	sp, #64	; 0x40
 800a3cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
 800a3d8:	609a      	str	r2, [r3, #8]
 800a3da:	60da      	str	r2, [r3, #12]
 800a3dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a3de:	4baf      	ldr	r3, [pc, #700]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	4aae      	ldr	r2, [pc, #696]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a3e4:	f043 0310 	orr.w	r3, r3, #16
 800a3e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ea:	4bac      	ldr	r3, [pc, #688]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	f003 0310 	and.w	r3, r3, #16
 800a3f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a3f6:	4ba9      	ldr	r3, [pc, #676]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fa:	4aa8      	ldr	r2, [pc, #672]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a400:	6313      	str	r3, [r2, #48]	; 0x30
 800a402:	4ba6      	ldr	r3, [pc, #664]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40a:	627b      	str	r3, [r7, #36]	; 0x24
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a40e:	4ba3      	ldr	r3, [pc, #652]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a412:	4aa2      	ldr	r2, [pc, #648]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	6313      	str	r3, [r2, #48]	; 0x30
 800a41a:	4ba0      	ldr	r3, [pc, #640]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41e:	f003 0302 	and.w	r3, r3, #2
 800a422:	623b      	str	r3, [r7, #32]
 800a424:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a426:	4b9d      	ldr	r3, [pc, #628]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	4a9c      	ldr	r2, [pc, #624]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a42c:	f043 0308 	orr.w	r3, r3, #8
 800a430:	6313      	str	r3, [r2, #48]	; 0x30
 800a432:	4b9a      	ldr	r3, [pc, #616]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a436:	f003 0308 	and.w	r3, r3, #8
 800a43a:	61fb      	str	r3, [r7, #28]
 800a43c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a43e:	4b97      	ldr	r3, [pc, #604]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a442:	4a96      	ldr	r2, [pc, #600]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a444:	f043 0304 	orr.w	r3, r3, #4
 800a448:	6313      	str	r3, [r2, #48]	; 0x30
 800a44a:	4b94      	ldr	r3, [pc, #592]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	61bb      	str	r3, [r7, #24]
 800a454:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a456:	4b91      	ldr	r3, [pc, #580]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45a:	4a90      	ldr	r2, [pc, #576]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a45c:	f043 0301 	orr.w	r3, r3, #1
 800a460:	6313      	str	r3, [r2, #48]	; 0x30
 800a462:	4b8e      	ldr	r3, [pc, #568]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	617b      	str	r3, [r7, #20]
 800a46c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a46e:	4b8b      	ldr	r3, [pc, #556]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a472:	4a8a      	ldr	r2, [pc, #552]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a478:	6313      	str	r3, [r2, #48]	; 0x30
 800a47a:	4b88      	ldr	r3, [pc, #544]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a482:	613b      	str	r3, [r7, #16]
 800a484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a486:	4b85      	ldr	r3, [pc, #532]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	4a84      	ldr	r2, [pc, #528]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a48c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a490:	6313      	str	r3, [r2, #48]	; 0x30
 800a492:	4b82      	ldr	r3, [pc, #520]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800a49e:	4b7f      	ldr	r3, [pc, #508]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a2:	4a7e      	ldr	r2, [pc, #504]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4aa:	4b7c      	ldr	r3, [pc, #496]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4b2:	60bb      	str	r3, [r7, #8]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a4b6:	4b79      	ldr	r3, [pc, #484]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ba:	4a78      	ldr	r2, [pc, #480]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4bc:	f043 0320 	orr.w	r3, r3, #32
 800a4c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4c2:	4b76      	ldr	r3, [pc, #472]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c6:	f003 0320 	and.w	r3, r3, #32
 800a4ca:	607b      	str	r3, [r7, #4]
 800a4cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a4ce:	4b73      	ldr	r3, [pc, #460]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d2:	4a72      	ldr	r2, [pc, #456]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4da:	4b70      	ldr	r3, [pc, #448]	; (800a69c <MX_GPIO_Init+0x2d4>)
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	2120      	movs	r1, #32
 800a4ea:	486d      	ldr	r0, [pc, #436]	; (800a6a0 <MX_GPIO_Init+0x2d8>)
 800a4ec:	f7f7 f8a2 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	210c      	movs	r1, #12
 800a4f4:	486b      	ldr	r0, [pc, #428]	; (800a6a4 <MX_GPIO_Init+0x2dc>)
 800a4f6:	f7f7 f89d 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	2108      	movs	r1, #8
 800a4fe:	486a      	ldr	r0, [pc, #424]	; (800a6a8 <MX_GPIO_Init+0x2e0>)
 800a500:	f7f7 f898 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800a504:	2201      	movs	r2, #1
 800a506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a50a:	4866      	ldr	r0, [pc, #408]	; (800a6a4 <MX_GPIO_Init+0x2dc>)
 800a50c:	f7f7 f892 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800a510:	2200      	movs	r2, #0
 800a512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a516:	4865      	ldr	r0, [pc, #404]	; (800a6ac <MX_GPIO_Init+0x2e4>)
 800a518:	f7f7 f88c 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800a51c:	2200      	movs	r2, #0
 800a51e:	21c8      	movs	r1, #200	; 0xc8
 800a520:	4863      	ldr	r0, [pc, #396]	; (800a6b0 <MX_GPIO_Init+0x2e8>)
 800a522:	f7f7 f887 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RGB_LED1_G_Pin|RGB_LED1_R_Pin|RGB_LED1_B_Pin, GPIO_PIN_SET);
 800a526:	2201      	movs	r2, #1
 800a528:	f44f 7160 	mov.w	r1, #896	; 0x380
 800a52c:	4861      	ldr	r0, [pc, #388]	; (800a6b4 <MX_GPIO_Init+0x2ec>)
 800a52e:	f7f7 f881 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800a532:	2200      	movs	r2, #0
 800a534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a538:	485e      	ldr	r0, [pc, #376]	; (800a6b4 <MX_GPIO_Init+0x2ec>)
 800a53a:	f7f7 f87b 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800a53e:	2308      	movs	r3, #8
 800a540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a542:	2300      	movs	r3, #0
 800a544:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a546:	2300      	movs	r3, #0
 800a548:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a54a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a54e:	4619      	mov	r1, r3
 800a550:	4859      	ldr	r0, [pc, #356]	; (800a6b8 <MX_GPIO_Init+0x2f0>)
 800a552:	f7f6 fec5 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800a556:	f643 4323 	movw	r3, #15395	; 0x3c23
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a55c:	2302      	movs	r3, #2
 800a55e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a560:	2300      	movs	r3, #0
 800a562:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a564:	2303      	movs	r3, #3
 800a566:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a568:	230a      	movs	r3, #10
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a56c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a570:	4619      	mov	r1, r3
 800a572:	4852      	ldr	r0, [pc, #328]	; (800a6bc <MX_GPIO_Init+0x2f4>)
 800a574:	f7f6 feb4 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GAME_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = GAME_BUTTON_1_Pin;
 800a578:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a57e:	4b50      	ldr	r3, [pc, #320]	; (800a6c0 <MX_GPIO_Init+0x2f8>)
 800a580:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a582:	2302      	movs	r3, #2
 800a584:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GAME_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 800a586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a58a:	4619      	mov	r1, r3
 800a58c:	484d      	ldr	r0, [pc, #308]	; (800a6c4 <MX_GPIO_Init+0x2fc>)
 800a58e:	f7f6 fea7 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800a592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a598:	2300      	movs	r3, #0
 800a59a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a59c:	2300      	movs	r3, #0
 800a59e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a5a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4848      	ldr	r0, [pc, #288]	; (800a6c8 <MX_GPIO_Init+0x300>)
 800a5a8:	f7f6 fe9a 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a5ac:	2320      	movs	r3, #32
 800a5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a5bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4837      	ldr	r0, [pc, #220]	; (800a6a0 <MX_GPIO_Init+0x2d8>)
 800a5c4:	f7f6 fe8c 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800a5c8:	f241 030c 	movw	r3, #4108	; 0x100c
 800a5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a5da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4830      	ldr	r0, [pc, #192]	; (800a6a4 <MX_GPIO_Init+0x2dc>)
 800a5e2:	f7f6 fe7d 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800a5e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800a5f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4834      	ldr	r0, [pc, #208]	; (800a6cc <MX_GPIO_Init+0x304>)
 800a5fc:	f7f6 fe70 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800a600:	2308      	movs	r3, #8
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a604:	2301      	movs	r3, #1
 800a606:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a608:	2300      	movs	r3, #0
 800a60a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a60c:	2300      	movs	r3, #0
 800a60e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800a610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a614:	4619      	mov	r1, r3
 800a616:	4824      	ldr	r0, [pc, #144]	; (800a6a8 <MX_GPIO_Init+0x2e0>)
 800a618:	f7f6 fe62 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a61c:	2310      	movs	r3, #16
 800a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a620:	2300      	movs	r3, #0
 800a622:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a624:	2300      	movs	r3, #0
 800a626:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a62c:	4619      	mov	r1, r3
 800a62e:	481c      	ldr	r0, [pc, #112]	; (800a6a0 <MX_GPIO_Init+0x2d8>)
 800a630:	f7f6 fe56 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800a634:	f248 0304 	movw	r3, #32772	; 0x8004
 800a638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a63a:	2300      	movs	r3, #0
 800a63c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a63e:	2300      	movs	r3, #0
 800a640:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a646:	4619      	mov	r1, r3
 800a648:	4818      	ldr	r0, [pc, #96]	; (800a6ac <MX_GPIO_Init+0x2e4>)
 800a64a:	f7f6 fe49 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800a64e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a654:	2301      	movs	r3, #1
 800a656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a658:	2300      	movs	r3, #0
 800a65a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a65c:	2300      	movs	r3, #0
 800a65e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a664:	4619      	mov	r1, r3
 800a666:	4811      	ldr	r0, [pc, #68]	; (800a6ac <MX_GPIO_Init+0x2e4>)
 800a668:	f7f6 fe3a 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800a66c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a672:	4b17      	ldr	r3, [pc, #92]	; (800a6d0 <MX_GPIO_Init+0x308>)
 800a674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a676:	2300      	movs	r3, #0
 800a678:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800a67a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a67e:	4619      	mov	r1, r3
 800a680:	4808      	ldr	r0, [pc, #32]	; (800a6a4 <MX_GPIO_Init+0x2dc>)
 800a682:	f7f6 fe2d 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTER_BUTTON_Pin GAME_BUTTON_2_Pin */
  GPIO_InitStruct.Pin = STARTER_BUTTON_Pin|GAME_BUTTON_2_Pin;
 800a686:	23c0      	movs	r3, #192	; 0xc0
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a68a:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <MX_GPIO_Init+0x2f8>)
 800a68c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a68e:	2302      	movs	r3, #2
 800a690:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a696:	4619      	mov	r1, r3
 800a698:	e01c      	b.n	800a6d4 <MX_GPIO_Init+0x30c>
 800a69a:	bf00      	nop
 800a69c:	40023800 	.word	0x40023800
 800a6a0:	40020c00 	.word	0x40020c00
 800a6a4:	40022000 	.word	0x40022000
 800a6a8:	40022800 	.word	0x40022800
 800a6ac:	40021c00 	.word	0x40021c00
 800a6b0:	40021800 	.word	0x40021800
 800a6b4:	40021400 	.word	0x40021400
 800a6b8:	40021000 	.word	0x40021000
 800a6bc:	40020400 	.word	0x40020400
 800a6c0:	10110000 	.word	0x10110000
 800a6c4:	40020000 	.word	0x40020000
 800a6c8:	40022400 	.word	0x40022400
 800a6cc:	40020800 	.word	0x40020800
 800a6d0:	10120000 	.word	0x10120000
 800a6d4:	4837      	ldr	r0, [pc, #220]	; (800a7b4 <MX_GPIO_Init+0x3ec>)
 800a6d6:	f7f6 fe03 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800a6da:	2310      	movs	r3, #16
 800a6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6de:	2302      	movs	r3, #2
 800a6e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a6ea:	230a      	movs	r3, #10
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800a6ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4830      	ldr	r0, [pc, #192]	; (800a7b8 <MX_GPIO_Init+0x3f0>)
 800a6f6:	f7f6 fdf3 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800a6fa:	23c8      	movs	r3, #200	; 0xc8
 800a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6fe:	2301      	movs	r3, #1
 800a700:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a702:	2300      	movs	r3, #0
 800a704:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a706:	2300      	movs	r3, #0
 800a708:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a70a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a70e:	4619      	mov	r1, r3
 800a710:	482a      	ldr	r0, [pc, #168]	; (800a7bc <MX_GPIO_Init+0x3f4>)
 800a712:	f7f6 fde5 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_LED1_G_Pin RED_LED_Pin RGB_LED1_R_Pin RGB_LED1_B_Pin */
  GPIO_InitStruct.Pin = RGB_LED1_G_Pin|RED_LED_Pin|RGB_LED1_R_Pin|RGB_LED1_B_Pin;
 800a716:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a71c:	2301      	movs	r3, #1
 800a71e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a720:	2300      	movs	r3, #0
 800a722:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a724:	2300      	movs	r3, #0
 800a726:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a72c:	4619      	mov	r1, r3
 800a72e:	4824      	ldr	r0, [pc, #144]	; (800a7c0 <MX_GPIO_Init+0x3f8>)
 800a730:	f7f6 fdd6 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800a734:	2305      	movs	r3, #5
 800a736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a738:	2302      	movs	r3, #2
 800a73a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a740:	2303      	movs	r3, #3
 800a742:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a744:	230a      	movs	r3, #10
 800a746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a74c:	4619      	mov	r1, r3
 800a74e:	4819      	ldr	r0, [pc, #100]	; (800a7b4 <MX_GPIO_Init+0x3ec>)
 800a750:	f7f6 fdc6 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800a754:	2304      	movs	r3, #4
 800a756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a758:	2300      	movs	r3, #0
 800a75a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a75c:	2300      	movs	r3, #0
 800a75e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800a760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a764:	4619      	mov	r1, r3
 800a766:	4815      	ldr	r0, [pc, #84]	; (800a7bc <MX_GPIO_Init+0x3f4>)
 800a768:	f7f6 fdba 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800a76c:	2328      	movs	r3, #40	; 0x28
 800a76e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a770:	2302      	movs	r3, #2
 800a772:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a774:	2300      	movs	r3, #0
 800a776:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a778:	2303      	movs	r3, #3
 800a77a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a77c:	230a      	movs	r3, #10
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a784:	4619      	mov	r1, r3
 800a786:	480f      	ldr	r0, [pc, #60]	; (800a7c4 <MX_GPIO_Init+0x3fc>)
 800a788:	f7f6 fdaa 	bl	80012e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800a78c:	2200      	movs	r2, #0
 800a78e:	2101      	movs	r1, #1
 800a790:	2017      	movs	r0, #23
 800a792:	f7f6 fa33 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a796:	2017      	movs	r0, #23
 800a798:	f7f6 fa4c 	bl	8000c34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800a79c:	2200      	movs	r2, #0
 800a79e:	2101      	movs	r1, #1
 800a7a0:	2028      	movs	r0, #40	; 0x28
 800a7a2:	f7f6 fa2b 	bl	8000bfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a7a6:	2028      	movs	r0, #40	; 0x28
 800a7a8:	f7f6 fa44 	bl	8000c34 <HAL_NVIC_EnableIRQ>

}
 800a7ac:	bf00      	nop
 800a7ae:	3740      	adds	r7, #64	; 0x40
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	40020800 	.word	0x40020800
 800a7b8:	40021c00 	.word	0x40021c00
 800a7bc:	40021800 	.word	0x40021800
 800a7c0:	40021400 	.word	0x40021400
 800a7c4:	40020000 	.word	0x40020000

0800a7c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	80fb      	strh	r3, [r7, #6]

  unsigned int button_press_time;

  switch (GPIO_Pin) {
 800a7d2:	88fb      	ldrh	r3, [r7, #6]
 800a7d4:	2b80      	cmp	r3, #128	; 0x80
 800a7d6:	d003      	beq.n	800a7e0 <HAL_GPIO_EXTI_Callback+0x18>
 800a7d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7dc:	d008      	beq.n	800a7f0 <HAL_GPIO_EXTI_Callback+0x28>

    }
      break;

    default:
      break;
 800a7de:	e024      	b.n	800a82a <HAL_GPIO_EXTI_Callback+0x62>
    if (round_counter == 0){
 800a7e0:	4b14      	ldr	r3, [pc, #80]	; (800a834 <HAL_GPIO_EXTI_Callback+0x6c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d11f      	bne.n	800a828 <HAL_GPIO_EXTI_Callback+0x60>
    game_state = STEADY;
 800a7e8:	4b13      	ldr	r3, [pc, #76]	; (800a838 <HAL_GPIO_EXTI_Callback+0x70>)
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	701a      	strb	r2, [r3, #0]
    break;
 800a7ee:	e01b      	b.n	800a828 <HAL_GPIO_EXTI_Callback+0x60>
   button_press_time = HAL_GetTick();
 800a7f0:	f7f5 feac 	bl	800054c <HAL_GetTick>
 800a7f4:	60f8      	str	r0, [r7, #12]
    reaction_time_1 = button_press_time - round_start_time;
 800a7f6:	4b11      	ldr	r3, [pc, #68]	; (800a83c <HAL_GPIO_EXTI_Callback+0x74>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	4a10      	ldr	r2, [pc, #64]	; (800a840 <HAL_GPIO_EXTI_Callback+0x78>)
 800a800:	6013      	str	r3, [r2, #0]
    switch (game_state){
 800a802:	4b0d      	ldr	r3, [pc, #52]	; (800a838 <HAL_GPIO_EXTI_Callback+0x70>)
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d002      	beq.n	800a810 <HAL_GPIO_EXTI_Callback+0x48>
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d007      	beq.n	800a81e <HAL_GPIO_EXTI_Callback+0x56>
      break;
 800a80e:	e00a      	b.n	800a826 <HAL_GPIO_EXTI_Callback+0x5e>
      reaction_time_1 = 0;
 800a810:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <HAL_GPIO_EXTI_Callback+0x78>)
 800a812:	2200      	movs	r2, #0
 800a814:	601a      	str	r2, [r3, #0]
      game_state = INVALID;
 800a816:	4b08      	ldr	r3, [pc, #32]	; (800a838 <HAL_GPIO_EXTI_Callback+0x70>)
 800a818:	2204      	movs	r2, #4
 800a81a:	701a      	strb	r2, [r3, #0]
      break;
 800a81c:	e003      	b.n	800a826 <HAL_GPIO_EXTI_Callback+0x5e>
      game_state = VALID;
 800a81e:	4b06      	ldr	r3, [pc, #24]	; (800a838 <HAL_GPIO_EXTI_Callback+0x70>)
 800a820:	2203      	movs	r2, #3
 800a822:	701a      	strb	r2, [r3, #0]
      break;
 800a824:	bf00      	nop
      break;
 800a826:	e000      	b.n	800a82a <HAL_GPIO_EXTI_Callback+0x62>
    break;
 800a828:	bf00      	nop
  }

}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20000028 	.word	0x20000028
 800a838:	2000002c 	.word	0x2000002c
 800a83c:	20000768 	.word	0x20000768
 800a840:	2000049c 	.word	0x2000049c

0800a844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a04      	ldr	r2, [pc, #16]	; (800a864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d101      	bne.n	800a85a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a856:	f7f5 fe65 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	40002000 	.word	0x40002000

0800a868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a86c:	bf00      	nop
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
	...

0800a878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a87e:	4b0f      	ldr	r3, [pc, #60]	; (800a8bc <HAL_MspInit+0x44>)
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	4a0e      	ldr	r2, [pc, #56]	; (800a8bc <HAL_MspInit+0x44>)
 800a884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a888:	6413      	str	r3, [r2, #64]	; 0x40
 800a88a:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <HAL_MspInit+0x44>)
 800a88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a892:	607b      	str	r3, [r7, #4]
 800a894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a896:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <HAL_MspInit+0x44>)
 800a898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89a:	4a08      	ldr	r2, [pc, #32]	; (800a8bc <HAL_MspInit+0x44>)
 800a89c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8a0:	6453      	str	r3, [r2, #68]	; 0x44
 800a8a2:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <HAL_MspInit+0x44>)
 800a8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a8ae:	bf00      	nop
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	40023800 	.word	0x40023800

0800a8c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b08a      	sub	sp, #40	; 0x28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8c8:	f107 0314 	add.w	r3, r7, #20
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	605a      	str	r2, [r3, #4]
 800a8d2:	609a      	str	r2, [r3, #8]
 800a8d4:	60da      	str	r2, [r3, #12]
 800a8d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a21      	ldr	r2, [pc, #132]	; (800a964 <HAL_ADC_MspInit+0xa4>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d13b      	bne.n	800a95a <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800a8e2:	4b21      	ldr	r3, [pc, #132]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e6:	4a20      	ldr	r2, [pc, #128]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a8e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a8ee:	4b1e      	ldr	r3, [pc, #120]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8f6:	613b      	str	r3, [r7, #16]
 800a8f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a8fa:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fe:	4a1a      	ldr	r2, [pc, #104]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a900:	f043 0320 	orr.w	r3, r3, #32
 800a904:	6313      	str	r3, [r2, #48]	; 0x30
 800a906:	4b18      	ldr	r3, [pc, #96]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90a:	f003 0320 	and.w	r3, r3, #32
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a912:	4b15      	ldr	r3, [pc, #84]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a916:	4a14      	ldr	r2, [pc, #80]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a918:	f043 0301 	orr.w	r3, r3, #1
 800a91c:	6313      	str	r3, [r2, #48]	; 0x30
 800a91e:	4b12      	ldr	r3, [pc, #72]	; (800a968 <HAL_ADC_MspInit+0xa8>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	60bb      	str	r3, [r7, #8]
 800a928:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PF6     ------> ADC3_IN4
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A5_Pin;
 800a92a:	2340      	movs	r3, #64	; 0x40
 800a92c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a92e:	2303      	movs	r3, #3
 800a930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a932:	2300      	movs	r3, #0
 800a934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A5_GPIO_Port, &GPIO_InitStruct);
 800a936:	f107 0314 	add.w	r3, r7, #20
 800a93a:	4619      	mov	r1, r3
 800a93c:	480b      	ldr	r0, [pc, #44]	; (800a96c <HAL_ADC_MspInit+0xac>)
 800a93e:	f7f6 fccf 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800a942:	2301      	movs	r3, #1
 800a944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a946:	2303      	movs	r3, #3
 800a948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a94a:	2300      	movs	r3, #0
 800a94c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800a94e:	f107 0314 	add.w	r3, r7, #20
 800a952:	4619      	mov	r1, r3
 800a954:	4806      	ldr	r0, [pc, #24]	; (800a970 <HAL_ADC_MspInit+0xb0>)
 800a956:	f7f6 fcc3 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800a95a:	bf00      	nop
 800a95c:	3728      	adds	r7, #40	; 0x28
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	40012200 	.word	0x40012200
 800a968:	40023800 	.word	0x40023800
 800a96c:	40021400 	.word	0x40021400
 800a970:	40020000 	.word	0x40020000

0800a974 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a0a      	ldr	r2, [pc, #40]	; (800a9ac <HAL_CRC_MspInit+0x38>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d10b      	bne.n	800a99e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a986:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <HAL_CRC_MspInit+0x3c>)
 800a988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98a:	4a09      	ldr	r2, [pc, #36]	; (800a9b0 <HAL_CRC_MspInit+0x3c>)
 800a98c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a990:	6313      	str	r3, [r2, #48]	; 0x30
 800a992:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <HAL_CRC_MspInit+0x3c>)
 800a994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800a99e:	bf00      	nop
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	40023000 	.word	0x40023000
 800a9b0:	40023800 	.word	0x40023800

0800a9b4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b08e      	sub	sp, #56	; 0x38
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	605a      	str	r2, [r3, #4]
 800a9c6:	609a      	str	r2, [r3, #8]
 800a9c8:	60da      	str	r2, [r3, #12]
 800a9ca:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a50      	ldr	r2, [pc, #320]	; (800ab14 <HAL_DCMI_MspInit+0x160>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	f040 809a 	bne.w	800ab0c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800a9d8:	4b4f      	ldr	r3, [pc, #316]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800a9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9dc:	4a4e      	ldr	r2, [pc, #312]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800a9de:	f043 0301 	orr.w	r3, r3, #1
 800a9e2:	6353      	str	r3, [r2, #52]	; 0x34
 800a9e4:	4b4c      	ldr	r3, [pc, #304]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800a9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	623b      	str	r3, [r7, #32]
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a9f0:	4b49      	ldr	r3, [pc, #292]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f4:	4a48      	ldr	r2, [pc, #288]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800a9f6:	f043 0310 	orr.w	r3, r3, #16
 800a9fa:	6313      	str	r3, [r2, #48]	; 0x30
 800a9fc:	4b46      	ldr	r3, [pc, #280]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800a9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa00:	f003 0310 	and.w	r3, r3, #16
 800aa04:	61fb      	str	r3, [r7, #28]
 800aa06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa08:	4b43      	ldr	r3, [pc, #268]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0c:	4a42      	ldr	r2, [pc, #264]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa0e:	f043 0308 	orr.w	r3, r3, #8
 800aa12:	6313      	str	r3, [r2, #48]	; 0x30
 800aa14:	4b40      	ldr	r3, [pc, #256]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa18:	f003 0308 	and.w	r3, r3, #8
 800aa1c:	61bb      	str	r3, [r7, #24]
 800aa1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800aa20:	4b3d      	ldr	r3, [pc, #244]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa24:	4a3c      	ldr	r2, [pc, #240]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa2a:	6313      	str	r3, [r2, #48]	; 0x30
 800aa2c:	4b3a      	ldr	r3, [pc, #232]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800aa38:	4b37      	ldr	r3, [pc, #220]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3c:	4a36      	ldr	r2, [pc, #216]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa42:	6313      	str	r3, [r2, #48]	; 0x30
 800aa44:	4b34      	ldr	r3, [pc, #208]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4c:	613b      	str	r3, [r7, #16]
 800aa4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa50:	4b31      	ldr	r3, [pc, #196]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa54:	4a30      	ldr	r2, [pc, #192]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa56:	f043 0301 	orr.w	r3, r3, #1
 800aa5a:	6313      	str	r3, [r2, #48]	; 0x30
 800aa5c:	4b2e      	ldr	r3, [pc, #184]	; (800ab18 <HAL_DCMI_MspInit+0x164>)
 800aa5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	60fb      	str	r3, [r7, #12]
 800aa66:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800aa68:	2360      	movs	r3, #96	; 0x60
 800aa6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa74:	2300      	movs	r3, #0
 800aa76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aa78:	230d      	movs	r3, #13
 800aa7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800aa7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa80:	4619      	mov	r1, r3
 800aa82:	4826      	ldr	r0, [pc, #152]	; (800ab1c <HAL_DCMI_MspInit+0x168>)
 800aa84:	f7f6 fc2c 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800aa88:	2308      	movs	r3, #8
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa90:	2300      	movs	r3, #0
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa94:	2300      	movs	r3, #0
 800aa96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aa98:	230d      	movs	r3, #13
 800aa9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800aa9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	481f      	ldr	r0, [pc, #124]	; (800ab20 <HAL_DCMI_MspInit+0x16c>)
 800aaa4:	f7f6 fc1c 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800aaa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaae:	2302      	movs	r3, #2
 800aab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aab6:	2300      	movs	r3, #0
 800aab8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aaba:	230d      	movs	r3, #13
 800aabc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800aabe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aac2:	4619      	mov	r1, r3
 800aac4:	4817      	ldr	r0, [pc, #92]	; (800ab24 <HAL_DCMI_MspInit+0x170>)
 800aac6:	f7f6 fc0b 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800aaca:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800aace:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aad0:	2302      	movs	r3, #2
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aad4:	2300      	movs	r3, #0
 800aad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aad8:	2300      	movs	r3, #0
 800aada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aadc:	230d      	movs	r3, #13
 800aade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800aae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aae4:	4619      	mov	r1, r3
 800aae6:	4810      	ldr	r0, [pc, #64]	; (800ab28 <HAL_DCMI_MspInit+0x174>)
 800aae8:	f7f6 fbfa 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800aaec:	2350      	movs	r3, #80	; 0x50
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aafc:	230d      	movs	r3, #13
 800aafe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab04:	4619      	mov	r1, r3
 800ab06:	4809      	ldr	r0, [pc, #36]	; (800ab2c <HAL_DCMI_MspInit+0x178>)
 800ab08:	f7f6 fbea 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800ab0c:	bf00      	nop
 800ab0e:	3738      	adds	r7, #56	; 0x38
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	50050000 	.word	0x50050000
 800ab18:	40023800 	.word	0x40023800
 800ab1c:	40021000 	.word	0x40021000
 800ab20:	40020c00 	.word	0x40020c00
 800ab24:	40021800 	.word	0x40021800
 800ab28:	40021c00 	.word	0x40021c00
 800ab2c:	40020000 	.word	0x40020000

0800ab30 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a0d      	ldr	r2, [pc, #52]	; (800ab74 <HAL_DMA2D_MspInit+0x44>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d113      	bne.n	800ab6a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800ab42:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <HAL_DMA2D_MspInit+0x48>)
 800ab44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab46:	4a0c      	ldr	r2, [pc, #48]	; (800ab78 <HAL_DMA2D_MspInit+0x48>)
 800ab48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab4c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab4e:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <HAL_DMA2D_MspInit+0x48>)
 800ab50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	205a      	movs	r0, #90	; 0x5a
 800ab60:	f7f6 f84c 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800ab64:	205a      	movs	r0, #90	; 0x5a
 800ab66:	f7f6 f865 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800ab6a:	bf00      	nop
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	4002b000 	.word	0x4002b000
 800ab78:	40023800 	.word	0x40023800

0800ab7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08c      	sub	sp, #48	; 0x30
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab84:	f107 031c 	add.w	r3, r7, #28
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
 800ab8c:	605a      	str	r2, [r3, #4]
 800ab8e:	609a      	str	r2, [r3, #8]
 800ab90:	60da      	str	r2, [r3, #12]
 800ab92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a2f      	ldr	r2, [pc, #188]	; (800ac58 <HAL_I2C_MspInit+0xdc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d129      	bne.n	800abf2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab9e:	4b2f      	ldr	r3, [pc, #188]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba2:	4a2e      	ldr	r2, [pc, #184]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800aba4:	f043 0302 	orr.w	r3, r3, #2
 800aba8:	6313      	str	r3, [r2, #48]	; 0x30
 800abaa:	4b2c      	ldr	r3, [pc, #176]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800abac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abae:	f003 0302 	and.w	r3, r3, #2
 800abb2:	61bb      	str	r3, [r7, #24]
 800abb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800abb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800abba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800abbc:	2312      	movs	r3, #18
 800abbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800abc0:	2301      	movs	r3, #1
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abc4:	2300      	movs	r3, #0
 800abc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800abc8:	2304      	movs	r3, #4
 800abca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abcc:	f107 031c 	add.w	r3, r7, #28
 800abd0:	4619      	mov	r1, r3
 800abd2:	4823      	ldr	r0, [pc, #140]	; (800ac60 <HAL_I2C_MspInit+0xe4>)
 800abd4:	f7f6 fb84 	bl	80012e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800abd8:	4b20      	ldr	r3, [pc, #128]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abdc:	4a1f      	ldr	r2, [pc, #124]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800abde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abe2:	6413      	str	r3, [r2, #64]	; 0x40
 800abe4:	4b1d      	ldr	r3, [pc, #116]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800abe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abec:	617b      	str	r3, [r7, #20]
 800abee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800abf0:	e02d      	b.n	800ac4e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a1b      	ldr	r2, [pc, #108]	; (800ac64 <HAL_I2C_MspInit+0xe8>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d128      	bne.n	800ac4e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800abfc:	4b17      	ldr	r3, [pc, #92]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800abfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac00:	4a16      	ldr	r2, [pc, #88]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800ac02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac06:	6313      	str	r3, [r2, #48]	; 0x30
 800ac08:	4b14      	ldr	r3, [pc, #80]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800ac0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac10:	613b      	str	r3, [r7, #16]
 800ac12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800ac14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ac18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ac1a:	2312      	movs	r3, #18
 800ac1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac22:	2303      	movs	r3, #3
 800ac24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800ac26:	2304      	movs	r3, #4
 800ac28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ac2a:	f107 031c 	add.w	r3, r7, #28
 800ac2e:	4619      	mov	r1, r3
 800ac30:	480d      	ldr	r0, [pc, #52]	; (800ac68 <HAL_I2C_MspInit+0xec>)
 800ac32:	f7f6 fb55 	bl	80012e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800ac38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3a:	4a08      	ldr	r2, [pc, #32]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800ac3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac40:	6413      	str	r3, [r2, #64]	; 0x40
 800ac42:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <HAL_I2C_MspInit+0xe0>)
 800ac44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
}
 800ac4e:	bf00      	nop
 800ac50:	3730      	adds	r7, #48	; 0x30
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	40005400 	.word	0x40005400
 800ac5c:	40023800 	.word	0x40023800
 800ac60:	40020400 	.word	0x40020400
 800ac64:	40005c00 	.word	0x40005c00
 800ac68:	40021c00 	.word	0x40021c00

0800ac6c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08e      	sub	sp, #56	; 0x38
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	605a      	str	r2, [r3, #4]
 800ac7e:	609a      	str	r2, [r3, #8]
 800ac80:	60da      	str	r2, [r3, #12]
 800ac82:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a55      	ldr	r2, [pc, #340]	; (800ade0 <HAL_LTDC_MspInit+0x174>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	f040 80a3 	bne.w	800add6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800ac90:	4b54      	ldr	r3, [pc, #336]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800ac92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac94:	4a53      	ldr	r2, [pc, #332]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800ac96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac9a:	6453      	str	r3, [r2, #68]	; 0x44
 800ac9c:	4b51      	ldr	r3, [pc, #324]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aca4:	623b      	str	r3, [r7, #32]
 800aca6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800aca8:	4b4e      	ldr	r3, [pc, #312]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	4a4d      	ldr	r2, [pc, #308]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acae:	f043 0310 	orr.w	r3, r3, #16
 800acb2:	6313      	str	r3, [r2, #48]	; 0x30
 800acb4:	4b4b      	ldr	r3, [pc, #300]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb8:	f003 0310 	and.w	r3, r3, #16
 800acbc:	61fb      	str	r3, [r7, #28]
 800acbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800acc0:	4b48      	ldr	r3, [pc, #288]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	4a47      	ldr	r2, [pc, #284]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acca:	6313      	str	r3, [r2, #48]	; 0x30
 800accc:	4b45      	ldr	r3, [pc, #276]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acd4:	61bb      	str	r3, [r7, #24]
 800acd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800acd8:	4b42      	ldr	r3, [pc, #264]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acdc:	4a41      	ldr	r2, [pc, #260]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ace2:	6313      	str	r3, [r2, #48]	; 0x30
 800ace4:	4b3f      	ldr	r3, [pc, #252]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800ace6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acec:	617b      	str	r3, [r7, #20]
 800acee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800acf0:	4b3c      	ldr	r3, [pc, #240]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf4:	4a3b      	ldr	r2, [pc, #236]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acfa:	6313      	str	r3, [r2, #48]	; 0x30
 800acfc:	4b39      	ldr	r3, [pc, #228]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800acfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800ad08:	4b36      	ldr	r3, [pc, #216]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800ad0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0c:	4a35      	ldr	r2, [pc, #212]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800ad0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad12:	6313      	str	r3, [r2, #48]	; 0x30
 800ad14:	4b33      	ldr	r3, [pc, #204]	; (800ade4 <HAL_LTDC_MspInit+0x178>)
 800ad16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800ad20:	2310      	movs	r3, #16
 800ad22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad24:	2302      	movs	r3, #2
 800ad26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ad30:	230e      	movs	r3, #14
 800ad32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800ad34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad38:	4619      	mov	r1, r3
 800ad3a:	482b      	ldr	r0, [pc, #172]	; (800ade8 <HAL_LTDC_MspInit+0x17c>)
 800ad3c:	f7f6 fad0 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800ad40:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800ad44:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad46:	2302      	movs	r3, #2
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ad52:	230e      	movs	r3, #14
 800ad54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800ad56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4823      	ldr	r0, [pc, #140]	; (800adec <HAL_LTDC_MspInit+0x180>)
 800ad5e:	f7f6 fabf 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800ad62:	23f7      	movs	r3, #247	; 0xf7
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad66:	2302      	movs	r3, #2
 800ad68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ad72:	230e      	movs	r3, #14
 800ad74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800ad76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	481c      	ldr	r0, [pc, #112]	; (800adf0 <HAL_LTDC_MspInit+0x184>)
 800ad7e:	f7f6 faaf 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800ad82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad88:	2302      	movs	r3, #2
 800ad8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad90:	2300      	movs	r3, #0
 800ad92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800ad94:	2309      	movs	r3, #9
 800ad96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800ad98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4815      	ldr	r0, [pc, #84]	; (800adf4 <HAL_LTDC_MspInit+0x188>)
 800ada0:	f7f6 fa9e 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800ada4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800ada8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adaa:	2302      	movs	r3, #2
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800adb2:	2300      	movs	r3, #0
 800adb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800adb6:	230e      	movs	r3, #14
 800adb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800adba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adbe:	4619      	mov	r1, r3
 800adc0:	480d      	ldr	r0, [pc, #52]	; (800adf8 <HAL_LTDC_MspInit+0x18c>)
 800adc2:	f7f6 fa8d 	bl	80012e0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800adc6:	2200      	movs	r2, #0
 800adc8:	2100      	movs	r1, #0
 800adca:	2058      	movs	r0, #88	; 0x58
 800adcc:	f7f5 ff16 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800add0:	2058      	movs	r0, #88	; 0x58
 800add2:	f7f5 ff2f 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800add6:	bf00      	nop
 800add8:	3738      	adds	r7, #56	; 0x38
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	40016800 	.word	0x40016800
 800ade4:	40023800 	.word	0x40023800
 800ade8:	40021000 	.word	0x40021000
 800adec:	40022400 	.word	0x40022400
 800adf0:	40022800 	.word	0x40022800
 800adf4:	40021800 	.word	0x40021800
 800adf8:	40022000 	.word	0x40022000

0800adfc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08c      	sub	sp, #48	; 0x30
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae04:	f107 031c 	add.w	r3, r7, #28
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	605a      	str	r2, [r3, #4]
 800ae0e:	609a      	str	r2, [r3, #8]
 800ae10:	60da      	str	r2, [r3, #12]
 800ae12:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a3b      	ldr	r2, [pc, #236]	; (800af08 <HAL_QSPI_MspInit+0x10c>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d170      	bne.n	800af00 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800ae1e:	4b3b      	ldr	r3, [pc, #236]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae22:	4a3a      	ldr	r2, [pc, #232]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae24:	f043 0302 	orr.w	r3, r3, #2
 800ae28:	6393      	str	r3, [r2, #56]	; 0x38
 800ae2a:	4b38      	ldr	r3, [pc, #224]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2e:	f003 0302 	and.w	r3, r3, #2
 800ae32:	61bb      	str	r3, [r7, #24]
 800ae34:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ae36:	4b35      	ldr	r3, [pc, #212]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae3a:	4a34      	ldr	r2, [pc, #208]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae3c:	f043 0310 	orr.w	r3, r3, #16
 800ae40:	6313      	str	r3, [r2, #48]	; 0x30
 800ae42:	4b32      	ldr	r3, [pc, #200]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae46:	f003 0310 	and.w	r3, r3, #16
 800ae4a:	617b      	str	r3, [r7, #20]
 800ae4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae4e:	4b2f      	ldr	r3, [pc, #188]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae52:	4a2e      	ldr	r2, [pc, #184]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae54:	f043 0302 	orr.w	r3, r3, #2
 800ae58:	6313      	str	r3, [r2, #48]	; 0x30
 800ae5a:	4b2c      	ldr	r3, [pc, #176]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5e:	f003 0302 	and.w	r3, r3, #2
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ae66:	4b29      	ldr	r3, [pc, #164]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	4a28      	ldr	r2, [pc, #160]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae6c:	f043 0308 	orr.w	r3, r3, #8
 800ae70:	6313      	str	r3, [r2, #48]	; 0x30
 800ae72:	4b26      	ldr	r3, [pc, #152]	; (800af0c <HAL_QSPI_MspInit+0x110>)
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	f003 0308 	and.w	r3, r3, #8
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800ae7e:	2304      	movs	r3, #4
 800ae80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae82:	2302      	movs	r3, #2
 800ae84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ae8e:	2309      	movs	r3, #9
 800ae90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800ae92:	f107 031c 	add.w	r3, r7, #28
 800ae96:	4619      	mov	r1, r3
 800ae98:	481d      	ldr	r0, [pc, #116]	; (800af10 <HAL_QSPI_MspInit+0x114>)
 800ae9a:	f7f6 fa21 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800ae9e:	2340      	movs	r3, #64	; 0x40
 800aea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aea2:	2302      	movs	r3, #2
 800aea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800aeae:	230a      	movs	r3, #10
 800aeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800aeb2:	f107 031c 	add.w	r3, r7, #28
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	4816      	ldr	r0, [pc, #88]	; (800af14 <HAL_QSPI_MspInit+0x118>)
 800aeba:	f7f6 fa11 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800aebe:	2304      	movs	r3, #4
 800aec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aec2:	2302      	movs	r3, #2
 800aec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aec6:	2300      	movs	r3, #0
 800aec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aeca:	2303      	movs	r3, #3
 800aecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800aece:	2309      	movs	r3, #9
 800aed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aed2:	f107 031c 	add.w	r3, r7, #28
 800aed6:	4619      	mov	r1, r3
 800aed8:	480e      	ldr	r0, [pc, #56]	; (800af14 <HAL_QSPI_MspInit+0x118>)
 800aeda:	f7f6 fa01 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800aede:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800aee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aee4:	2302      	movs	r3, #2
 800aee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aee8:	2300      	movs	r3, #0
 800aeea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aeec:	2303      	movs	r3, #3
 800aeee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800aef0:	2309      	movs	r3, #9
 800aef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aef4:	f107 031c 	add.w	r3, r7, #28
 800aef8:	4619      	mov	r1, r3
 800aefa:	4807      	ldr	r0, [pc, #28]	; (800af18 <HAL_QSPI_MspInit+0x11c>)
 800aefc:	f7f6 f9f0 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800af00:	bf00      	nop
 800af02:	3730      	adds	r7, #48	; 0x30
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	a0001000 	.word	0xa0001000
 800af0c:	40023800 	.word	0x40023800
 800af10:	40021000 	.word	0x40021000
 800af14:	40020400 	.word	0x40020400
 800af18:	40020c00 	.word	0x40020c00

0800af1c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a0a      	ldr	r2, [pc, #40]	; (800af54 <HAL_RNG_MspInit+0x38>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d10b      	bne.n	800af46 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800af2e:	4b0a      	ldr	r3, [pc, #40]	; (800af58 <HAL_RNG_MspInit+0x3c>)
 800af30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af32:	4a09      	ldr	r2, [pc, #36]	; (800af58 <HAL_RNG_MspInit+0x3c>)
 800af34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af38:	6353      	str	r3, [r2, #52]	; 0x34
 800af3a:	4b07      	ldr	r3, [pc, #28]	; (800af58 <HAL_RNG_MspInit+0x3c>)
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800af46:	bf00      	nop
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	50060800 	.word	0x50060800
 800af58:	40023800 	.word	0x40023800

0800af5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a07      	ldr	r2, [pc, #28]	; (800af88 <HAL_RTC_MspInit+0x2c>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d105      	bne.n	800af7a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800af6e:	4b07      	ldr	r3, [pc, #28]	; (800af8c <HAL_RTC_MspInit+0x30>)
 800af70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af72:	4a06      	ldr	r2, [pc, #24]	; (800af8c <HAL_RTC_MspInit+0x30>)
 800af74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af78:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800af7a:	bf00      	nop
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	40002800 	.word	0x40002800
 800af8c:	40023800 	.word	0x40023800

0800af90 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b08a      	sub	sp, #40	; 0x28
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af98:	f107 0314 	add.w	r3, r7, #20
 800af9c:	2200      	movs	r2, #0
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	605a      	str	r2, [r3, #4]
 800afa2:	609a      	str	r2, [r3, #8]
 800afa4:	60da      	str	r2, [r3, #12]
 800afa6:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800afb0:	d127      	bne.n	800b002 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800afb2:	4b16      	ldr	r3, [pc, #88]	; (800b00c <HAL_SPDIFRX_MspInit+0x7c>)
 800afb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb6:	4a15      	ldr	r2, [pc, #84]	; (800b00c <HAL_SPDIFRX_MspInit+0x7c>)
 800afb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afbc:	6413      	str	r3, [r2, #64]	; 0x40
 800afbe:	4b13      	ldr	r3, [pc, #76]	; (800b00c <HAL_SPDIFRX_MspInit+0x7c>)
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afc6:	613b      	str	r3, [r7, #16]
 800afc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800afca:	4b10      	ldr	r3, [pc, #64]	; (800b00c <HAL_SPDIFRX_MspInit+0x7c>)
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	4a0f      	ldr	r2, [pc, #60]	; (800b00c <HAL_SPDIFRX_MspInit+0x7c>)
 800afd0:	f043 0308 	orr.w	r3, r3, #8
 800afd4:	6313      	str	r3, [r2, #48]	; 0x30
 800afd6:	4b0d      	ldr	r3, [pc, #52]	; (800b00c <HAL_SPDIFRX_MspInit+0x7c>)
 800afd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800afe2:	2380      	movs	r3, #128	; 0x80
 800afe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afe6:	2302      	movs	r3, #2
 800afe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afea:	2300      	movs	r3, #0
 800afec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afee:	2300      	movs	r3, #0
 800aff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800aff2:	2308      	movs	r3, #8
 800aff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800aff6:	f107 0314 	add.w	r3, r7, #20
 800affa:	4619      	mov	r1, r3
 800affc:	4804      	ldr	r0, [pc, #16]	; (800b010 <HAL_SPDIFRX_MspInit+0x80>)
 800affe:	f7f6 f96f 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800b002:	bf00      	nop
 800b004:	3728      	adds	r7, #40	; 0x28
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	40023800 	.word	0x40023800
 800b010:	40020c00 	.word	0x40020c00

0800b014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b08a      	sub	sp, #40	; 0x28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b01c:	f107 0314 	add.w	r3, r7, #20
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	605a      	str	r2, [r3, #4]
 800b026:	609a      	str	r2, [r3, #8]
 800b028:	60da      	str	r2, [r3, #12]
 800b02a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a25      	ldr	r2, [pc, #148]	; (800b0c8 <HAL_SPI_MspInit+0xb4>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d144      	bne.n	800b0c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800b036:	4b25      	ldr	r3, [pc, #148]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	4a24      	ldr	r2, [pc, #144]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b03c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b040:	6413      	str	r3, [r2, #64]	; 0x40
 800b042:	4b22      	ldr	r3, [pc, #136]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b04a:	613b      	str	r3, [r7, #16]
 800b04c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800b04e:	4b1f      	ldr	r3, [pc, #124]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b052:	4a1e      	ldr	r2, [pc, #120]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b058:	6313      	str	r3, [r2, #48]	; 0x30
 800b05a:	4b1c      	ldr	r3, [pc, #112]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b066:	4b19      	ldr	r3, [pc, #100]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06a:	4a18      	ldr	r2, [pc, #96]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b06c:	f043 0302 	orr.w	r3, r3, #2
 800b070:	6313      	str	r3, [r2, #48]	; 0x30
 800b072:	4b16      	ldr	r3, [pc, #88]	; (800b0cc <HAL_SPI_MspInit+0xb8>)
 800b074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	60bb      	str	r3, [r7, #8]
 800b07c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800b07e:	2302      	movs	r3, #2
 800b080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b082:	2302      	movs	r3, #2
 800b084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b086:	2300      	movs	r3, #0
 800b088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b08a:	2300      	movs	r3, #0
 800b08c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b08e:	2305      	movs	r3, #5
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800b092:	f107 0314 	add.w	r3, r7, #20
 800b096:	4619      	mov	r1, r3
 800b098:	480d      	ldr	r0, [pc, #52]	; (800b0d0 <HAL_SPI_MspInit+0xbc>)
 800b09a:	f7f6 f921 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800b09e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b0a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800b0b0:	2305      	movs	r3, #5
 800b0b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0b4:	f107 0314 	add.w	r3, r7, #20
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4806      	ldr	r0, [pc, #24]	; (800b0d4 <HAL_SPI_MspInit+0xc0>)
 800b0bc:	f7f6 f910 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800b0c0:	bf00      	nop
 800b0c2:	3728      	adds	r7, #40	; 0x28
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	40003800 	.word	0x40003800
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	40022000 	.word	0x40022000
 800b0d4:	40020400 	.word	0x40020400

0800b0d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b088      	sub	sp, #32
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a31      	ldr	r2, [pc, #196]	; (800b1ac <HAL_TIM_Base_MspInit+0xd4>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d10c      	bne.n	800b104 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b0ea:	4b31      	ldr	r3, [pc, #196]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ee:	4a30      	ldr	r2, [pc, #192]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b0f0:	f043 0301 	orr.w	r3, r3, #1
 800b0f4:	6453      	str	r3, [r2, #68]	; 0x44
 800b0f6:	4b2e      	ldr	r3, [pc, #184]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b0f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	61fb      	str	r3, [r7, #28]
 800b100:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800b102:	e04e      	b.n	800b1a2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b10c:	d10c      	bne.n	800b128 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b10e:	4b28      	ldr	r3, [pc, #160]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b112:	4a27      	ldr	r2, [pc, #156]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	6413      	str	r3, [r2, #64]	; 0x40
 800b11a:	4b25      	ldr	r3, [pc, #148]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	61bb      	str	r3, [r7, #24]
 800b124:	69bb      	ldr	r3, [r7, #24]
}
 800b126:	e03c      	b.n	800b1a2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a21      	ldr	r2, [pc, #132]	; (800b1b4 <HAL_TIM_Base_MspInit+0xdc>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d10c      	bne.n	800b14c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b132:	4b1f      	ldr	r3, [pc, #124]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	4a1e      	ldr	r2, [pc, #120]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b138:	f043 0302 	orr.w	r3, r3, #2
 800b13c:	6413      	str	r3, [r2, #64]	; 0x40
 800b13e:	4b1c      	ldr	r3, [pc, #112]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b142:	f003 0302 	and.w	r3, r3, #2
 800b146:	617b      	str	r3, [r7, #20]
 800b148:	697b      	ldr	r3, [r7, #20]
}
 800b14a:	e02a      	b.n	800b1a2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a19      	ldr	r2, [pc, #100]	; (800b1b8 <HAL_TIM_Base_MspInit+0xe0>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d10c      	bne.n	800b170 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b156:	4b16      	ldr	r3, [pc, #88]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b15c:	f043 0308 	orr.w	r3, r3, #8
 800b160:	6413      	str	r3, [r2, #64]	; 0x40
 800b162:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	f003 0308 	and.w	r3, r3, #8
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	693b      	ldr	r3, [r7, #16]
}
 800b16e:	e018      	b.n	800b1a2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a11      	ldr	r2, [pc, #68]	; (800b1bc <HAL_TIM_Base_MspInit+0xe4>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d113      	bne.n	800b1a2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b17a:	4b0d      	ldr	r3, [pc, #52]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17e:	4a0c      	ldr	r2, [pc, #48]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b180:	f043 0302 	orr.w	r3, r3, #2
 800b184:	6453      	str	r3, [r2, #68]	; 0x44
 800b186:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <HAL_TIM_Base_MspInit+0xd8>)
 800b188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18a:	f003 0302 	and.w	r3, r3, #2
 800b18e:	60fb      	str	r3, [r7, #12]
 800b190:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800b192:	2200      	movs	r2, #0
 800b194:	2100      	movs	r1, #0
 800b196:	202d      	movs	r0, #45	; 0x2d
 800b198:	f7f5 fd30 	bl	8000bfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800b19c:	202d      	movs	r0, #45	; 0x2d
 800b19e:	f7f5 fd49 	bl	8000c34 <HAL_NVIC_EnableIRQ>
}
 800b1a2:	bf00      	nop
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40010000 	.word	0x40010000
 800b1b0:	40023800 	.word	0x40023800
 800b1b4:	40000400 	.word	0x40000400
 800b1b8:	40000c00 	.word	0x40000c00
 800b1bc:	40010400 	.word	0x40010400

0800b1c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a0a      	ldr	r2, [pc, #40]	; (800b1f8 <HAL_TIM_PWM_MspInit+0x38>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d10b      	bne.n	800b1ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800b1d2:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <HAL_TIM_PWM_MspInit+0x3c>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	4a09      	ldr	r2, [pc, #36]	; (800b1fc <HAL_TIM_PWM_MspInit+0x3c>)
 800b1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1dc:	6413      	str	r3, [r2, #64]	; 0x40
 800b1de:	4b07      	ldr	r3, [pc, #28]	; (800b1fc <HAL_TIM_PWM_MspInit+0x3c>)
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	40001800 	.word	0x40001800
 800b1fc:	40023800 	.word	0x40023800

0800b200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b08c      	sub	sp, #48	; 0x30
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b208:	f107 031c 	add.w	r3, r7, #28
 800b20c:	2200      	movs	r2, #0
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	605a      	str	r2, [r3, #4]
 800b212:	609a      	str	r2, [r3, #8]
 800b214:	60da      	str	r2, [r3, #12]
 800b216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a44      	ldr	r2, [pc, #272]	; (800b330 <HAL_TIM_MspPostInit+0x130>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d11d      	bne.n	800b25e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b222:	4b44      	ldr	r3, [pc, #272]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b226:	4a43      	ldr	r2, [pc, #268]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b228:	f043 0301 	orr.w	r3, r3, #1
 800b22c:	6313      	str	r3, [r2, #48]	; 0x30
 800b22e:	4b41      	ldr	r3, [pc, #260]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	61bb      	str	r3, [r7, #24]
 800b238:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800b23a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b23e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b240:	2302      	movs	r3, #2
 800b242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b244:	2300      	movs	r3, #0
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b248:	2300      	movs	r3, #0
 800b24a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b24c:	2301      	movs	r3, #1
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800b250:	f107 031c 	add.w	r3, r7, #28
 800b254:	4619      	mov	r1, r3
 800b256:	4838      	ldr	r0, [pc, #224]	; (800b338 <HAL_TIM_MspPostInit+0x138>)
 800b258:	f7f6 f842 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800b25c:	e064      	b.n	800b328 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a36      	ldr	r2, [pc, #216]	; (800b33c <HAL_TIM_MspPostInit+0x13c>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d11c      	bne.n	800b2a2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b268:	4b32      	ldr	r3, [pc, #200]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26c:	4a31      	ldr	r2, [pc, #196]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b26e:	f043 0302 	orr.w	r3, r3, #2
 800b272:	6313      	str	r3, [r2, #48]	; 0x30
 800b274:	4b2f      	ldr	r3, [pc, #188]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800b280:	2310      	movs	r3, #16
 800b282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b284:	2302      	movs	r3, #2
 800b286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b288:	2300      	movs	r3, #0
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b28c:	2300      	movs	r3, #0
 800b28e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b290:	2302      	movs	r3, #2
 800b292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800b294:	f107 031c 	add.w	r3, r7, #28
 800b298:	4619      	mov	r1, r3
 800b29a:	4829      	ldr	r0, [pc, #164]	; (800b340 <HAL_TIM_MspPostInit+0x140>)
 800b29c:	f7f6 f820 	bl	80012e0 <HAL_GPIO_Init>
}
 800b2a0:	e042      	b.n	800b328 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a27      	ldr	r2, [pc, #156]	; (800b344 <HAL_TIM_MspPostInit+0x144>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d11c      	bne.n	800b2e6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800b2ac:	4b21      	ldr	r3, [pc, #132]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b0:	4a20      	ldr	r2, [pc, #128]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2b6:	6313      	str	r3, [r2, #48]	; 0x30
 800b2b8:	4b1e      	ldr	r3, [pc, #120]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c0:	613b      	str	r3, [r7, #16]
 800b2c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800b2d8:	f107 031c 	add.w	r3, r7, #28
 800b2dc:	4619      	mov	r1, r3
 800b2de:	481a      	ldr	r0, [pc, #104]	; (800b348 <HAL_TIM_MspPostInit+0x148>)
 800b2e0:	f7f5 fffe 	bl	80012e0 <HAL_GPIO_Init>
}
 800b2e4:	e020      	b.n	800b328 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a18      	ldr	r2, [pc, #96]	; (800b34c <HAL_TIM_MspPostInit+0x14c>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d11b      	bne.n	800b328 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800b2f0:	4b10      	ldr	r3, [pc, #64]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f4:	4a0f      	ldr	r2, [pc, #60]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2fa:	6313      	str	r3, [r2, #48]	; 0x30
 800b2fc:	4b0d      	ldr	r3, [pc, #52]	; (800b334 <HAL_TIM_MspPostInit+0x134>)
 800b2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800b308:	2340      	movs	r3, #64	; 0x40
 800b30a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b30c:	2302      	movs	r3, #2
 800b30e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b310:	2300      	movs	r3, #0
 800b312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b314:	2300      	movs	r3, #0
 800b316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800b318:	2309      	movs	r3, #9
 800b31a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800b31c:	f107 031c 	add.w	r3, r7, #28
 800b320:	4619      	mov	r1, r3
 800b322:	480b      	ldr	r0, [pc, #44]	; (800b350 <HAL_TIM_MspPostInit+0x150>)
 800b324:	f7f5 ffdc 	bl	80012e0 <HAL_GPIO_Init>
}
 800b328:	bf00      	nop
 800b32a:	3730      	adds	r7, #48	; 0x30
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	40010000 	.word	0x40010000
 800b334:	40023800 	.word	0x40023800
 800b338:	40020000 	.word	0x40020000
 800b33c:	40000400 	.word	0x40000400
 800b340:	40020400 	.word	0x40020400
 800b344:	40000c00 	.word	0x40000c00
 800b348:	40022000 	.word	0x40022000
 800b34c:	40001800 	.word	0x40001800
 800b350:	40021c00 	.word	0x40021c00

0800b354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b35c:	f107 0314 	add.w	r3, r7, #20
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	605a      	str	r2, [r3, #4]
 800b366:	609a      	str	r2, [r3, #8]
 800b368:	60da      	str	r2, [r3, #12]
 800b36a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a25      	ldr	r2, [pc, #148]	; (800b408 <HAL_UART_MspInit+0xb4>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d144      	bne.n	800b400 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b376:	4b25      	ldr	r3, [pc, #148]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b37a:	4a24      	ldr	r2, [pc, #144]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b37c:	f043 0310 	orr.w	r3, r3, #16
 800b380:	6453      	str	r3, [r2, #68]	; 0x44
 800b382:	4b22      	ldr	r3, [pc, #136]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b386:	f003 0310 	and.w	r3, r3, #16
 800b38a:	613b      	str	r3, [r7, #16]
 800b38c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b38e:	4b1f      	ldr	r3, [pc, #124]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b392:	4a1e      	ldr	r2, [pc, #120]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b394:	f043 0302 	orr.w	r3, r3, #2
 800b398:	6313      	str	r3, [r2, #48]	; 0x30
 800b39a:	4b1c      	ldr	r3, [pc, #112]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b39e:	f003 0302 	and.w	r3, r3, #2
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3a6:	4b19      	ldr	r3, [pc, #100]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3aa:	4a18      	ldr	r2, [pc, #96]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b3ac:	f043 0301 	orr.w	r3, r3, #1
 800b3b0:	6313      	str	r3, [r2, #48]	; 0x30
 800b3b2:	4b16      	ldr	r3, [pc, #88]	; (800b40c <HAL_UART_MspInit+0xb8>)
 800b3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	60bb      	str	r3, [r7, #8]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800b3be:	2380      	movs	r3, #128	; 0x80
 800b3c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b3ce:	2307      	movs	r3, #7
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800b3d2:	f107 0314 	add.w	r3, r7, #20
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	480d      	ldr	r0, [pc, #52]	; (800b410 <HAL_UART_MspInit+0xbc>)
 800b3da:	f7f5 ff81 	bl	80012e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800b3de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b3f0:	2307      	movs	r3, #7
 800b3f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800b3f4:	f107 0314 	add.w	r3, r7, #20
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4806      	ldr	r0, [pc, #24]	; (800b414 <HAL_UART_MspInit+0xc0>)
 800b3fc:	f7f5 ff70 	bl	80012e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800b400:	bf00      	nop
 800b402:	3728      	adds	r7, #40	; 0x28
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	40011000 	.word	0x40011000
 800b40c:	40023800 	.word	0x40023800
 800b410:	40020400 	.word	0x40020400
 800b414:	40020000 	.word	0x40020000

0800b418 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b41e:	1d3b      	adds	r3, r7, #4
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	605a      	str	r2, [r3, #4]
 800b426:	609a      	str	r2, [r3, #8]
 800b428:	60da      	str	r2, [r3, #12]
 800b42a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800b42c:	4b3a      	ldr	r3, [pc, #232]	; (800b518 <HAL_FMC_MspInit+0x100>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d16d      	bne.n	800b510 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800b434:	4b38      	ldr	r3, [pc, #224]	; (800b518 <HAL_FMC_MspInit+0x100>)
 800b436:	2201      	movs	r2, #1
 800b438:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b43a:	4b38      	ldr	r3, [pc, #224]	; (800b51c <HAL_FMC_MspInit+0x104>)
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	4a37      	ldr	r2, [pc, #220]	; (800b51c <HAL_FMC_MspInit+0x104>)
 800b440:	f043 0301 	orr.w	r3, r3, #1
 800b444:	6393      	str	r3, [r2, #56]	; 0x38
 800b446:	4b35      	ldr	r3, [pc, #212]	; (800b51c <HAL_FMC_MspInit+0x104>)
 800b448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44a:	f003 0301 	and.w	r3, r3, #1
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800b452:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b456:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b458:	2302      	movs	r3, #2
 800b45a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b45c:	2300      	movs	r3, #0
 800b45e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b460:	2303      	movs	r3, #3
 800b462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b464:	230c      	movs	r3, #12
 800b466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b468:	1d3b      	adds	r3, r7, #4
 800b46a:	4619      	mov	r1, r3
 800b46c:	482c      	ldr	r0, [pc, #176]	; (800b520 <HAL_FMC_MspInit+0x108>)
 800b46e:	f7f5 ff37 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800b472:	f248 1333 	movw	r3, #33075	; 0x8133
 800b476:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b478:	2302      	movs	r3, #2
 800b47a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b480:	2303      	movs	r3, #3
 800b482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b484:	230c      	movs	r3, #12
 800b486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b488:	1d3b      	adds	r3, r7, #4
 800b48a:	4619      	mov	r1, r3
 800b48c:	4825      	ldr	r0, [pc, #148]	; (800b524 <HAL_FMC_MspInit+0x10c>)
 800b48e:	f7f5 ff27 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800b492:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b496:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b498:	2302      	movs	r3, #2
 800b49a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b4a4:	230c      	movs	r3, #12
 800b4a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b4a8:	1d3b      	adds	r3, r7, #4
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	481e      	ldr	r0, [pc, #120]	; (800b528 <HAL_FMC_MspInit+0x110>)
 800b4ae:	f7f5 ff17 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800b4b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b4b6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b4c4:	230c      	movs	r3, #12
 800b4c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b4c8:	1d3b      	adds	r3, r7, #4
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4817      	ldr	r0, [pc, #92]	; (800b52c <HAL_FMC_MspInit+0x114>)
 800b4ce:	f7f5 ff07 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800b4d2:	2328      	movs	r3, #40	; 0x28
 800b4d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b4e2:	230c      	movs	r3, #12
 800b4e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b4e6:	1d3b      	adds	r3, r7, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4811      	ldr	r0, [pc, #68]	; (800b530 <HAL_FMC_MspInit+0x118>)
 800b4ec:	f7f5 fef8 	bl	80012e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800b4f0:	2308      	movs	r3, #8
 800b4f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b500:	230c      	movs	r3, #12
 800b502:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800b504:	1d3b      	adds	r3, r7, #4
 800b506:	4619      	mov	r1, r3
 800b508:	480a      	ldr	r0, [pc, #40]	; (800b534 <HAL_FMC_MspInit+0x11c>)
 800b50a:	f7f5 fee9 	bl	80012e0 <HAL_GPIO_Init>
 800b50e:	e000      	b.n	800b512 <HAL_FMC_MspInit+0xfa>
    return;
 800b510:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	20000030 	.word	0x20000030
 800b51c:	40023800 	.word	0x40023800
 800b520:	40021000 	.word	0x40021000
 800b524:	40021800 	.word	0x40021800
 800b528:	40020c00 	.word	0x40020c00
 800b52c:	40021400 	.word	0x40021400
 800b530:	40021c00 	.word	0x40021c00
 800b534:	40020800 	.word	0x40020800

0800b538 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b540:	f7ff ff6a 	bl	800b418 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b544:	bf00      	nop
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08a      	sub	sp, #40	; 0x28
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a2b      	ldr	r2, [pc, #172]	; (800b608 <HAL_SAI_MspInit+0xbc>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d124      	bne.n	800b5a8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800b55e:	4b2b      	ldr	r3, [pc, #172]	; (800b60c <HAL_SAI_MspInit+0xc0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10b      	bne.n	800b57e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b566:	4b2a      	ldr	r3, [pc, #168]	; (800b610 <HAL_SAI_MspInit+0xc4>)
 800b568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b56a:	4a29      	ldr	r2, [pc, #164]	; (800b610 <HAL_SAI_MspInit+0xc4>)
 800b56c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b570:	6453      	str	r3, [r2, #68]	; 0x44
 800b572:	4b27      	ldr	r3, [pc, #156]	; (800b610 <HAL_SAI_MspInit+0xc4>)
 800b574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b57a:	613b      	str	r3, [r7, #16]
 800b57c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800b57e:	4b23      	ldr	r3, [pc, #140]	; (800b60c <HAL_SAI_MspInit+0xc0>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3301      	adds	r3, #1
 800b584:	4a21      	ldr	r2, [pc, #132]	; (800b60c <HAL_SAI_MspInit+0xc0>)
 800b586:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800b588:	23f0      	movs	r3, #240	; 0xf0
 800b58a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b58c:	2302      	movs	r3, #2
 800b58e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b590:	2300      	movs	r3, #0
 800b592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b594:	2300      	movs	r3, #0
 800b596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b598:	230a      	movs	r3, #10
 800b59a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b59c:	f107 0314 	add.w	r3, r7, #20
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	481c      	ldr	r0, [pc, #112]	; (800b614 <HAL_SAI_MspInit+0xc8>)
 800b5a4:	f7f5 fe9c 	bl	80012e0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a1a      	ldr	r2, [pc, #104]	; (800b618 <HAL_SAI_MspInit+0xcc>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d125      	bne.n	800b5fe <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800b5b2:	4b16      	ldr	r3, [pc, #88]	; (800b60c <HAL_SAI_MspInit+0xc0>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10b      	bne.n	800b5d2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b5ba:	4b15      	ldr	r3, [pc, #84]	; (800b610 <HAL_SAI_MspInit+0xc4>)
 800b5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5be:	4a14      	ldr	r2, [pc, #80]	; (800b610 <HAL_SAI_MspInit+0xc4>)
 800b5c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b5c4:	6453      	str	r3, [r2, #68]	; 0x44
 800b5c6:	4b12      	ldr	r3, [pc, #72]	; (800b610 <HAL_SAI_MspInit+0xc4>)
 800b5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800b5d2:	4b0e      	ldr	r3, [pc, #56]	; (800b60c <HAL_SAI_MspInit+0xc0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	4a0c      	ldr	r2, [pc, #48]	; (800b60c <HAL_SAI_MspInit+0xc0>)
 800b5da:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800b5dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b5ee:	230a      	movs	r3, #10
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800b5f2:	f107 0314 	add.w	r3, r7, #20
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	4808      	ldr	r0, [pc, #32]	; (800b61c <HAL_SAI_MspInit+0xd0>)
 800b5fa:	f7f5 fe71 	bl	80012e0 <HAL_GPIO_Init>

    }
}
 800b5fe:	bf00      	nop
 800b600:	3728      	adds	r7, #40	; 0x28
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	40015c04 	.word	0x40015c04
 800b60c:	20000034 	.word	0x20000034
 800b610:	40023800 	.word	0x40023800
 800b614:	40022000 	.word	0x40022000
 800b618:	40015c24 	.word	0x40015c24
 800b61c:	40021800 	.word	0x40021800

0800b620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08c      	sub	sp, #48	; 0x30
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 800b630:	2200      	movs	r2, #0
 800b632:	6879      	ldr	r1, [r7, #4]
 800b634:	202d      	movs	r0, #45	; 0x2d
 800b636:	f7f5 fae1 	bl	8000bfc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 800b63a:	202d      	movs	r0, #45	; 0x2d
 800b63c:	f7f5 fafa 	bl	8000c34 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800b640:	4b1f      	ldr	r3, [pc, #124]	; (800b6c0 <HAL_InitTick+0xa0>)
 800b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b644:	4a1e      	ldr	r2, [pc, #120]	; (800b6c0 <HAL_InitTick+0xa0>)
 800b646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b64a:	6413      	str	r3, [r2, #64]	; 0x40
 800b64c:	4b1c      	ldr	r3, [pc, #112]	; (800b6c0 <HAL_InitTick+0xa0>)
 800b64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b658:	f107 0210 	add.w	r2, r7, #16
 800b65c:	f107 0314 	add.w	r3, r7, #20
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f7f8 fde2 	bl	800422c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b668:	f7f8 fdb8 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 800b66c:	4603      	mov	r3, r0
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	4a13      	ldr	r2, [pc, #76]	; (800b6c4 <HAL_InitTick+0xa4>)
 800b676:	fba2 2303 	umull	r2, r3, r2, r3
 800b67a:	0c9b      	lsrs	r3, r3, #18
 800b67c:	3b01      	subs	r3, #1
 800b67e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800b680:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <HAL_InitTick+0xa8>)
 800b682:	4a12      	ldr	r2, [pc, #72]	; (800b6cc <HAL_InitTick+0xac>)
 800b684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 800b686:	4b10      	ldr	r3, [pc, #64]	; (800b6c8 <HAL_InitTick+0xa8>)
 800b688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b68c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800b68e:	4a0e      	ldr	r2, [pc, #56]	; (800b6c8 <HAL_InitTick+0xa8>)
 800b690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b692:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800b694:	4b0c      	ldr	r3, [pc, #48]	; (800b6c8 <HAL_InitTick+0xa8>)
 800b696:	2200      	movs	r2, #0
 800b698:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <HAL_InitTick+0xa8>)
 800b69c:	2200      	movs	r2, #0
 800b69e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800b6a0:	4809      	ldr	r0, [pc, #36]	; (800b6c8 <HAL_InitTick+0xa8>)
 800b6a2:	f7fa fa31 	bl	8005b08 <HAL_TIM_Base_Init>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d104      	bne.n	800b6b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800b6ac:	4806      	ldr	r0, [pc, #24]	; (800b6c8 <HAL_InitTick+0xa8>)
 800b6ae:	f7fa fa57 	bl	8005b60 <HAL_TIM_Base_Start_IT>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	e000      	b.n	800b6b8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3730      	adds	r7, #48	; 0x30
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	40023800 	.word	0x40023800
 800b6c4:	431bde83 	.word	0x431bde83
 800b6c8:	200007b8 	.word	0x200007b8
 800b6cc:	40002000 	.word	0x40002000

0800b6d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b6d4:	bf00      	nop
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b6e2:	e7fe      	b.n	800b6e2 <HardFault_Handler+0x4>

0800b6e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b6e8:	e7fe      	b.n	800b6e8 <MemManage_Handler+0x4>

0800b6ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b6ee:	e7fe      	b.n	800b6ee <BusFault_Handler+0x4>

0800b6f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b6f4:	e7fe      	b.n	800b6f4 <UsageFault_Handler+0x4>

0800b6f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b6fa:	bf00      	nop
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b708:	bf00      	nop
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b712:	b480      	push	{r7}
 800b714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b716:	bf00      	nop
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800b724:	2040      	movs	r0, #64	; 0x40
 800b726:	f7f5 ffb9 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800b72a:	2080      	movs	r0, #128	; 0x80
 800b72c:	f7f5 ffb6 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b730:	bf00      	nop
 800b732:	bd80      	pop	{r7, pc}

0800b734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800b738:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b73c:	f7f5 ffae 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b740:	bf00      	nop
 800b742:	bd80      	pop	{r7, pc}

0800b744 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800b748:	4803      	ldr	r0, [pc, #12]	; (800b758 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800b74a:	f7fa fa5e 	bl	8005c0a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800b74e:	4803      	ldr	r0, [pc, #12]	; (800b75c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800b750:	f7fa fa5b 	bl	8005c0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800b754:	bf00      	nop
 800b756:	bd80      	pop	{r7, pc}
 800b758:	20000170 	.word	0x20000170
 800b75c:	200007b8 	.word	0x200007b8

0800b760 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b764:	4802      	ldr	r0, [pc, #8]	; (800b770 <OTG_FS_IRQHandler+0x10>)
 800b766:	f7f6 f9b1 	bl	8001acc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b76a:	bf00      	nop
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	20000bc4 	.word	0x20000bc4

0800b774 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800b778:	4802      	ldr	r0, [pc, #8]	; (800b784 <LTDC_IRQHandler+0x10>)
 800b77a:	f7f7 fd5f 	bl	800323c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800b77e:	bf00      	nop
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	200003f4 	.word	0x200003f4

0800b788 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b78c:	4802      	ldr	r0, [pc, #8]	; (800b798 <DMA2D_IRQHandler+0x10>)
 800b78e:	f7f5 fc05 	bl	8000f9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800b792:	bf00      	nop
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	2000062c 	.word	0x2000062c

0800b79c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b79c:	b480      	push	{r7}
 800b79e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b7a0:	4b15      	ldr	r3, [pc, #84]	; (800b7f8 <SystemInit+0x5c>)
 800b7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a6:	4a14      	ldr	r2, [pc, #80]	; (800b7f8 <SystemInit+0x5c>)
 800b7a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b7b0:	4b12      	ldr	r3, [pc, #72]	; (800b7fc <SystemInit+0x60>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a11      	ldr	r2, [pc, #68]	; (800b7fc <SystemInit+0x60>)
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b7bc:	4b0f      	ldr	r3, [pc, #60]	; (800b7fc <SystemInit+0x60>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b7c2:	4b0e      	ldr	r3, [pc, #56]	; (800b7fc <SystemInit+0x60>)
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	490d      	ldr	r1, [pc, #52]	; (800b7fc <SystemInit+0x60>)
 800b7c8:	4b0d      	ldr	r3, [pc, #52]	; (800b800 <SystemInit+0x64>)
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b7ce:	4b0b      	ldr	r3, [pc, #44]	; (800b7fc <SystemInit+0x60>)
 800b7d0:	4a0c      	ldr	r2, [pc, #48]	; (800b804 <SystemInit+0x68>)
 800b7d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b7d4:	4b09      	ldr	r3, [pc, #36]	; (800b7fc <SystemInit+0x60>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a08      	ldr	r2, [pc, #32]	; (800b7fc <SystemInit+0x60>)
 800b7da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b7e0:	4b06      	ldr	r3, [pc, #24]	; (800b7fc <SystemInit+0x60>)
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b7e6:	4b04      	ldr	r3, [pc, #16]	; (800b7f8 <SystemInit+0x5c>)
 800b7e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b7ec:	609a      	str	r2, [r3, #8]
#endif
}
 800b7ee:	bf00      	nop
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	e000ed00 	.word	0xe000ed00
 800b7fc:	40023800 	.word	0x40023800
 800b800:	fef6ffff 	.word	0xfef6ffff
 800b804:	24003010 	.word	0x24003010

0800b808 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b80c:	4802      	ldr	r0, [pc, #8]	; (800b818 <MX_USB_HOST_Process+0x10>)
 800b80e:	f7fc fcab 	bl	8008168 <USBH_Process>
}
 800b812:	bf00      	nop
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	200007f8 	.word	0x200007f8

0800b81c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fc ff3e 	bl	80086ac <USBH_LL_IncTimer>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b846:	4618      	mov	r0, r3
 800b848:	f7fc ff83 	bl	8008752 <USBH_LL_Connect>
}
 800b84c:	bf00      	nop
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b862:	4618      	mov	r0, r3
 800b864:	f7fc ff9b 	bl	800879e <USBH_LL_Disconnect>
}
 800b868:	bf00      	nop
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	70fb      	strb	r3, [r7, #3]
 800b87c:	4613      	mov	r3, r2
 800b87e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fc ff30 	bl	8008700 <USBH_LL_PortEnabled>
} 
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fc ff30 	bl	800871c <USBH_LL_PortDisabled>
} 
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7f6 f9fc 	bl	8001cd8 <HAL_HCD_Start>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 f8e0 	bl	800baac <USBH_Get_USB_Status>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b084      	sub	sp, #16
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b910:	4618      	mov	r0, r3
 800b912:	f7f6 fa04 	bl	8001d1e <HAL_HCD_Stop>
 800b916:	4603      	mov	r3, r0
 800b918:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f000 f8c5 	bl	800baac <USBH_Get_USB_Status>
 800b922:	4603      	mov	r3, r0
 800b924:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b926:	7bbb      	ldrb	r3, [r7, #14]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b938:	2301      	movs	r3, #1
 800b93a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b942:	4618      	mov	r0, r3
 800b944:	f7f6 fa2b 	bl	8001d9e <HAL_HCD_GetCurrentSpeed>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d007      	beq.n	800b95e <USBH_LL_GetSpeed+0x2e>
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d302      	bcc.n	800b958 <USBH_LL_GetSpeed+0x28>
 800b952:	2b02      	cmp	r3, #2
 800b954:	d006      	beq.n	800b964 <USBH_LL_GetSpeed+0x34>
 800b956:	e008      	b.n	800b96a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b958:	2300      	movs	r3, #0
 800b95a:	73fb      	strb	r3, [r7, #15]
    break;
 800b95c:	e008      	b.n	800b970 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b95e:	2301      	movs	r3, #1
 800b960:	73fb      	strb	r3, [r7, #15]
    break;
 800b962:	e005      	b.n	800b970 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b964:	2302      	movs	r3, #2
 800b966:	73fb      	strb	r3, [r7, #15]
    break;
 800b968:	e002      	b.n	800b970 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b96a:	2301      	movs	r3, #1
 800b96c:	73fb      	strb	r3, [r7, #15]
    break;
 800b96e:	bf00      	nop
  }
  return  speed;
 800b970:	7bfb      	ldrb	r3, [r7, #15]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b990:	4618      	mov	r0, r3
 800b992:	f7f6 f9e1 	bl	8001d58 <HAL_HCD_ResetPort>
 800b996:	4603      	mov	r3, r0
 800b998:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 f885 	bl	800baac <USBH_Get_USB_Status>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9b0:	b590      	push	{r4, r7, lr}
 800b9b2:	b089      	sub	sp, #36	; 0x24
 800b9b4:	af04      	add	r7, sp, #16
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	461a      	mov	r2, r3
 800b9be:	4603      	mov	r3, r0
 800b9c0:	70fb      	strb	r3, [r7, #3]
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	70bb      	strb	r3, [r7, #2]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b9d8:	787c      	ldrb	r4, [r7, #1]
 800b9da:	78ba      	ldrb	r2, [r7, #2]
 800b9dc:	78f9      	ldrb	r1, [r7, #3]
 800b9de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b9e0:	9302      	str	r3, [sp, #8]
 800b9e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	4623      	mov	r3, r4
 800b9f0:	f7f5 fe6c 	bl	80016cc <HAL_HCD_HC_Init>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 f856 	bl	800baac <USBH_Get_USB_Status>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd90      	pop	{r4, r7, pc}

0800ba0e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ba0e:	b590      	push	{r4, r7, lr}
 800ba10:	b089      	sub	sp, #36	; 0x24
 800ba12:	af04      	add	r7, sp, #16
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	4608      	mov	r0, r1
 800ba18:	4611      	mov	r1, r2
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	70fb      	strb	r3, [r7, #3]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70bb      	strb	r3, [r7, #2]
 800ba24:	4613      	mov	r3, r2
 800ba26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800ba36:	787c      	ldrb	r4, [r7, #1]
 800ba38:	78ba      	ldrb	r2, [r7, #2]
 800ba3a:	78f9      	ldrb	r1, [r7, #3]
 800ba3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ba40:	9303      	str	r3, [sp, #12]
 800ba42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ba44:	9302      	str	r3, [sp, #8]
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	4623      	mov	r3, r4
 800ba52:	f7f5 fed3 	bl	80017fc <HAL_HCD_HC_SubmitRequest>
 800ba56:	4603      	mov	r3, r0
 800ba58:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 f825 	bl	800baac <USBH_Get_USB_Status>
 800ba62:	4603      	mov	r3, r0
 800ba64:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd90      	pop	{r4, r7, pc}

0800ba70 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba82:	78fa      	ldrb	r2, [r7, #3]
 800ba84:	4611      	mov	r1, r2
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f6 f974 	bl	8001d74 <HAL_HCD_HC_GetURBState>
 800ba8c:	4603      	mov	r3, r0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b082      	sub	sp, #8
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7f4 fd60 	bl	8000564 <HAL_Delay>
}
 800baa4:	bf00      	nop
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	4603      	mov	r3, r0
 800bab4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bab6:	2300      	movs	r3, #0
 800bab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800baba:	79fb      	ldrb	r3, [r7, #7]
 800babc:	2b03      	cmp	r3, #3
 800babe:	d817      	bhi.n	800baf0 <USBH_Get_USB_Status+0x44>
 800bac0:	a201      	add	r2, pc, #4	; (adr r2, 800bac8 <USBH_Get_USB_Status+0x1c>)
 800bac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac6:	bf00      	nop
 800bac8:	0800bad9 	.word	0x0800bad9
 800bacc:	0800badf 	.word	0x0800badf
 800bad0:	0800bae5 	.word	0x0800bae5
 800bad4:	0800baeb 	.word	0x0800baeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]
    break;
 800badc:	e00b      	b.n	800baf6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bade:	2302      	movs	r3, #2
 800bae0:	73fb      	strb	r3, [r7, #15]
    break;
 800bae2:	e008      	b.n	800baf6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bae4:	2301      	movs	r3, #1
 800bae6:	73fb      	strb	r3, [r7, #15]
    break;
 800bae8:	e005      	b.n	800baf6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800baea:	2302      	movs	r3, #2
 800baec:	73fb      	strb	r3, [r7, #15]
    break;
 800baee:	e002      	b.n	800baf6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800baf0:	2302      	movs	r3, #2
 800baf2:	73fb      	strb	r3, [r7, #15]
    break;
 800baf4:	bf00      	nop
  }
  return usb_status;
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bb04:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bb08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bb0a:	e003      	b.n	800bb14 <LoopCopyDataInit>

0800bb0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bb0c:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bb0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bb10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bb12:	3104      	adds	r1, #4

0800bb14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bb14:	480b      	ldr	r0, [pc, #44]	; (800bb44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bb16:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bb18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bb1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bb1c:	d3f6      	bcc.n	800bb0c <CopyDataInit>
  ldr  r2, =_sbss
 800bb1e:	4a0b      	ldr	r2, [pc, #44]	; (800bb4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bb20:	e002      	b.n	800bb28 <LoopFillZerobss>

0800bb22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bb22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bb24:	f842 3b04 	str.w	r3, [r2], #4

0800bb28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bb28:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bb2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bb2c:	d3f9      	bcc.n	800bb22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800bb2e:	f7ff fe35 	bl	800b79c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bb32:	f000 f811 	bl	800bb58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb36:	f7fd fbc1 	bl	80092bc <main>
  bx  lr    
 800bb3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bb3c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800bb40:	0800bbf0 	.word	0x0800bbf0
  ldr  r0, =_sdata
 800bb44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bb48:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800bb4c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 800bb50:	20000e88 	.word	0x20000e88

0800bb54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb54:	e7fe      	b.n	800bb54 <ADC_IRQHandler>
	...

0800bb58 <__libc_init_array>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	4e0d      	ldr	r6, [pc, #52]	; (800bb90 <__libc_init_array+0x38>)
 800bb5c:	4c0d      	ldr	r4, [pc, #52]	; (800bb94 <__libc_init_array+0x3c>)
 800bb5e:	1ba4      	subs	r4, r4, r6
 800bb60:	10a4      	asrs	r4, r4, #2
 800bb62:	2500      	movs	r5, #0
 800bb64:	42a5      	cmp	r5, r4
 800bb66:	d109      	bne.n	800bb7c <__libc_init_array+0x24>
 800bb68:	4e0b      	ldr	r6, [pc, #44]	; (800bb98 <__libc_init_array+0x40>)
 800bb6a:	4c0c      	ldr	r4, [pc, #48]	; (800bb9c <__libc_init_array+0x44>)
 800bb6c:	f000 f820 	bl	800bbb0 <_init>
 800bb70:	1ba4      	subs	r4, r4, r6
 800bb72:	10a4      	asrs	r4, r4, #2
 800bb74:	2500      	movs	r5, #0
 800bb76:	42a5      	cmp	r5, r4
 800bb78:	d105      	bne.n	800bb86 <__libc_init_array+0x2e>
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}
 800bb7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb80:	4798      	blx	r3
 800bb82:	3501      	adds	r5, #1
 800bb84:	e7ee      	b.n	800bb64 <__libc_init_array+0xc>
 800bb86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb8a:	4798      	blx	r3
 800bb8c:	3501      	adds	r5, #1
 800bb8e:	e7f2      	b.n	800bb76 <__libc_init_array+0x1e>
 800bb90:	0800bbe8 	.word	0x0800bbe8
 800bb94:	0800bbe8 	.word	0x0800bbe8
 800bb98:	0800bbe8 	.word	0x0800bbe8
 800bb9c:	0800bbec 	.word	0x0800bbec

0800bba0 <memset>:
 800bba0:	4402      	add	r2, r0
 800bba2:	4603      	mov	r3, r0
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d100      	bne.n	800bbaa <memset+0xa>
 800bba8:	4770      	bx	lr
 800bbaa:	f803 1b01 	strb.w	r1, [r3], #1
 800bbae:	e7f9      	b.n	800bba4 <memset+0x4>

0800bbb0 <_init>:
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbb2:	bf00      	nop
 800bbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbb6:	bc08      	pop	{r3}
 800bbb8:	469e      	mov	lr, r3
 800bbba:	4770      	bx	lr

0800bbbc <_fini>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	bf00      	nop
 800bbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc2:	bc08      	pop	{r3}
 800bbc4:	469e      	mov	lr, r3
 800bbc6:	4770      	bx	lr
