
reaction_tester_single_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d954  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b8c  0800db24  0800db24  0001db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6b0  0800f6b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6b0  0800f6b0  0001f6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6b8  0800f6b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6b8  0800f6b8  0001f6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6bc  0800f6bc  0001f6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  20000074  0800f734  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001158  0800f734  00021158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031a39  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005af1  00000000  00000000  00051add  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027b8  00000000  00000000  000575d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002518  00000000  00000000  00059d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a0b8  00000000  00000000  0005c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027c1a  00000000  00000000  00066358  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001200b6  00000000  00000000  0008df72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ae028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad90  00000000  00000000  001ae0a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800db0c 	.word	0x0800db0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800db0c 	.word	0x0800db0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <BSP_LCD_Init+0xcc>)
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <BSP_LCD_Init+0xcc>)
 80005bc:	2209      	movs	r2, #9
 80005be:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <BSP_LCD_Init+0xcc>)
 80005c2:	2235      	movs	r2, #53	; 0x35
 80005c4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <BSP_LCD_Init+0xcc>)
 80005c8:	220b      	movs	r2, #11
 80005ca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <BSP_LCD_Init+0xcc>)
 80005ce:	f240 121b 	movw	r2, #283	; 0x11b
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <BSP_LCD_Init+0xcc>)
 80005d6:	f240 2215 	movw	r2, #533	; 0x215
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <BSP_LCD_Init+0xcc>)
 80005de:	f240 121d 	movw	r2, #285	; 0x11d
 80005e2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <BSP_LCD_Init+0xcc>)
 80005e6:	f240 2235 	movw	r2, #565	; 0x235
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4823      	ldr	r0, [pc, #140]	; (800067c <BSP_LCD_Init+0xcc>)
 80005f0:	f000 fba2 	bl	8000d38 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <BSP_LCD_Init+0xcc>)
 80005f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005fa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <BSP_LCD_Init+0xcc>)
 80005fe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000602:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <BSP_LCD_Init+0xcc>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <BSP_LCD_Init+0xcc>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <BSP_LCD_Init+0xcc>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <BSP_LCD_Init+0xcc>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <BSP_LCD_Init+0xcc>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <BSP_LCD_Init+0xcc>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <BSP_LCD_Init+0xcc>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <BSP_LCD_Init+0xcc>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <BSP_LCD_Init+0xd0>)
 8000638:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <BSP_LCD_Init+0xcc>)
 800063c:	f004 f958 	bl	80048f0 <HAL_LTDC_GetState>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d103      	bne.n	800064e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000646:	2100      	movs	r1, #0
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <BSP_LCD_Init+0xcc>)
 800064a:	f000 fa9b 	bl	8000b84 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <BSP_LCD_Init+0xcc>)
 8000650:	f003 ff7e 	bl	8004550 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <BSP_LCD_Init+0xd4>)
 800065c:	f002 fa44 	bl	8002ae8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <BSP_LCD_Init+0xd8>)
 8000666:	f002 fa3f 	bl	8002ae8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800066a:	f000 fc85 	bl	8000f78 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <BSP_LCD_Init+0xdc>)
 8000670:	f000 f8d8 	bl	8000824 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000220 	.word	0x20000220
 8000680:	40016800 	.word	0x40016800
 8000684:	40022000 	.word	0x40022000
 8000688:	40022800 	.word	0x40022800
 800068c:	20000000 	.word	0x20000000

08000690 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <BSP_LCD_GetXSize+0x20>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <BSP_LCD_GetXSize+0x24>)
 800069a:	2134      	movs	r1, #52	; 0x34
 800069c:	fb01 f303 	mul.w	r3, r1, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	3360      	adds	r3, #96	; 0x60
 80006a4:	681b      	ldr	r3, [r3, #0]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	20000220 	.word	0x20000220

080006b8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <BSP_LCD_GetYSize+0x20>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <BSP_LCD_GetYSize+0x24>)
 80006c2:	2134      	movs	r1, #52	; 0x34
 80006c4:	fb01 f303 	mul.w	r3, r1, r3
 80006c8:	4413      	add	r3, r2
 80006ca:	3364      	adds	r3, #100	; 0x64
 80006cc:	681b      	ldr	r3, [r3, #0]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	200000d0 	.word	0x200000d0
 80006dc:	20000220 	.word	0x20000220

080006e0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b090      	sub	sp, #64	; 0x40
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80006f0:	f7ff ffce 	bl	8000690 <BSP_LCD_GetXSize>
 80006f4:	4603      	mov	r3, r0
 80006f6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80006fc:	f7ff ffdc 	bl	80006b8 <BSP_LCD_GetYSize>
 8000700:	4603      	mov	r3, r0
 8000702:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800070c:	23ff      	movs	r3, #255	; 0xff
 800070e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000726:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800072c:	2307      	movs	r3, #7
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000730:	f7ff ffae 	bl	8000690 <BSP_LCD_GetXSize>
 8000734:	4603      	mov	r3, r0
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000738:	f7ff ffbe 	bl	80006b8 <BSP_LCD_GetYSize>
 800073c:	4603      	mov	r3, r0
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <BSP_LCD_LayerDefaultInit+0xb4>)
 800074a:	f004 f893 	bl	8004874 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	4911      	ldr	r1, [pc, #68]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	440b      	add	r3, r1
 800075c:	3304      	adds	r3, #4
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000764:	88fa      	ldrh	r2, [r7, #6]
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	440b      	add	r3, r1
 8000772:	3308      	adds	r3, #8
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000776:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000778:	88fa      	ldrh	r2, [r7, #6]
 800077a:	4907      	ldr	r1, [pc, #28]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	3740      	adds	r7, #64	; 0x40
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000220 	.word	0x20000220
 8000798:	200000d4 	.word	0x200000d4
 800079c:	20000000 	.word	0x20000000

080007a0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <BSP_LCD_SelectLayer+0x1c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
} 
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200000d0 	.word	0x200000d0

080007c0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <BSP_LCD_SetTextColor+0x28>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4907      	ldr	r1, [pc, #28]	; (80007ec <BSP_LCD_SetTextColor+0x2c>)
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200000d0 	.word	0x200000d0
 80007ec:	200000d4 	.word	0x200000d4

080007f0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <BSP_LCD_SetBackColor+0x2c>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4908      	ldr	r1, [pc, #32]	; (8000820 <BSP_LCD_SetBackColor+0x30>)
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	3304      	adds	r3, #4
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200000d0 	.word	0x200000d0
 8000820:	200000d4 	.word	0x200000d4

08000824 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <BSP_LCD_SetFont+0x2c>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4908      	ldr	r1, [pc, #32]	; (8000854 <BSP_LCD_SetFont+0x30>)
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	440b      	add	r3, r1
 800083c:	3308      	adds	r3, #8
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	200000d0 	.word	0x200000d0
 8000854:	200000d4 	.word	0x200000d4

08000858 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <BSP_LCD_Clear+0x48>)
 8000862:	681c      	ldr	r4, [r3, #0]
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <BSP_LCD_Clear+0x48>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <BSP_LCD_Clear+0x4c>)
 800086a:	2134      	movs	r1, #52	; 0x34
 800086c:	fb01 f303 	mul.w	r3, r1, r3
 8000870:	4413      	add	r3, r2
 8000872:	335c      	adds	r3, #92	; 0x5c
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	461d      	mov	r5, r3
 8000878:	f7ff ff0a 	bl	8000690 <BSP_LCD_GetXSize>
 800087c:	4606      	mov	r6, r0
 800087e:	f7ff ff1b 	bl	80006b8 <BSP_LCD_GetYSize>
 8000882:	4602      	mov	r2, r0
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	2300      	movs	r3, #0
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	4613      	mov	r3, r2
 800088e:	4632      	mov	r2, r6
 8000890:	4629      	mov	r1, r5
 8000892:	4620      	mov	r0, r4
 8000894:	f000 fb24 	bl	8000ee0 <LL_FillBuffer>
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	200000d0 	.word	0x200000d0
 80008a4:	20000220 	.word	0x20000220

080008a8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
 80008b2:	460b      	mov	r3, r1
 80008b4:	80bb      	strh	r3, [r7, #4]
 80008b6:	4613      	mov	r3, r2
 80008b8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <BSP_LCD_DisplayChar+0x80>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	491b      	ldr	r1, [pc, #108]	; (800092c <BSP_LCD_DisplayChar+0x84>)
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	440b      	add	r3, r1
 80008ca:	3308      	adds	r3, #8
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	6819      	ldr	r1, [r3, #0]
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <BSP_LCD_DisplayChar+0x80>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4c14      	ldr	r4, [pc, #80]	; (800092c <BSP_LCD_DisplayChar+0x84>)
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4423      	add	r3, r4
 80008e6:	3308      	adds	r3, #8
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80008ec:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <BSP_LCD_DisplayChar+0x80>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4c0d      	ldr	r4, [pc, #52]	; (800092c <BSP_LCD_DisplayChar+0x84>)
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4423      	add	r3, r4
 8000900:	3308      	adds	r3, #8
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	889b      	ldrh	r3, [r3, #4]
 8000906:	3307      	adds	r3, #7
 8000908:	2b00      	cmp	r3, #0
 800090a:	da00      	bge.n	800090e <BSP_LCD_DisplayChar+0x66>
 800090c:	3307      	adds	r3, #7
 800090e:	10db      	asrs	r3, r3, #3
 8000910:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000914:	18ca      	adds	r2, r1, r3
 8000916:	88b9      	ldrh	r1, [r7, #4]
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fa28 	bl	8000d70 <DrawChar>
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	200000d0 	.word	0x200000d0
 800092c:	200000d4 	.word	0x200000d4

08000930 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000930:	b5b0      	push	{r4, r5, r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	60ba      	str	r2, [r7, #8]
 8000938:	461a      	mov	r2, r3
 800093a:	4603      	mov	r3, r0
 800093c:	81fb      	strh	r3, [r7, #14]
 800093e:	460b      	mov	r3, r1
 8000940:	81bb      	strh	r3, [r7, #12]
 8000942:	4613      	mov	r3, r2
 8000944:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8000946:	2301      	movs	r3, #1
 8000948:	83fb      	strh	r3, [r7, #30]
 800094a:	2300      	movs	r3, #0
 800094c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800095a:	e002      	b.n	8000962 <BSP_LCD_DisplayStringAt+0x32>
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	3301      	adds	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	617a      	str	r2, [r7, #20]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1f6      	bne.n	800095c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800096e:	f7ff fe8f 	bl	8000690 <BSP_LCD_GetXSize>
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x180>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	494f      	ldr	r1, [pc, #316]	; (8000ab4 <BSP_LCD_DisplayStringAt+0x184>)
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	3308      	adds	r3, #8
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	889b      	ldrh	r3, [r3, #4]
 8000988:	fbb0 f3f3 	udiv	r3, r0, r3
 800098c:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d01c      	beq.n	80009ce <BSP_LCD_DisplayStringAt+0x9e>
 8000994:	2b03      	cmp	r3, #3
 8000996:	d017      	beq.n	80009c8 <BSP_LCD_DisplayStringAt+0x98>
 8000998:	2b01      	cmp	r3, #1
 800099a:	d12e      	bne.n	80009fa <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	1ad1      	subs	r1, r2, r3
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x180>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4843      	ldr	r0, [pc, #268]	; (8000ab4 <BSP_LCD_DisplayStringAt+0x184>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4403      	add	r3, r0
 80009b2:	3308      	adds	r3, #8
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	889b      	ldrh	r3, [r3, #4]
 80009b8:	fb03 f301 	mul.w	r3, r3, r1
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	b29a      	uxth	r2, r3
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	4413      	add	r3, r2
 80009c4:	83fb      	strh	r3, [r7, #30]
      break;
 80009c6:	e01b      	b.n	8000a00 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80009c8:	89fb      	ldrh	r3, [r7, #14]
 80009ca:	83fb      	strh	r3, [r7, #30]
      break;
 80009cc:	e018      	b.n	8000a00 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	b299      	uxth	r1, r3
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x180>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4836      	ldr	r0, [pc, #216]	; (8000ab4 <BSP_LCD_DisplayStringAt+0x184>)
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4403      	add	r3, r0
 80009e6:	3308      	adds	r3, #8
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	889b      	ldrh	r3, [r3, #4]
 80009ec:	fb11 f303 	smulbb	r3, r1, r3
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	83fb      	strh	r3, [r7, #30]
      break;
 80009f8:	e002      	b.n	8000a00 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80009fa:	89fb      	ldrh	r3, [r7, #14]
 80009fc:	83fb      	strh	r3, [r7, #30]
      break;
 80009fe:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8000a00:	8bfb      	ldrh	r3, [r7, #30]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <BSP_LCD_DisplayStringAt+0xde>
 8000a06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da1d      	bge.n	8000a4a <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000a12:	e01a      	b.n	8000a4a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	89b9      	ldrh	r1, [r7, #12]
 8000a1a:	8bfb      	ldrh	r3, [r7, #30]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff43 	bl	80008a8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x180>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	4923      	ldr	r1, [pc, #140]	; (8000ab4 <BSP_LCD_DisplayStringAt+0x184>)
 8000a28:	4613      	mov	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	440b      	add	r3, r1
 8000a32:	3308      	adds	r3, #8
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	889a      	ldrh	r2, [r3, #4]
 8000a38:	8bfb      	ldrh	r3, [r7, #30]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
    i++;
 8000a44:	8bbb      	ldrh	r3, [r7, #28]
 8000a46:	3301      	adds	r3, #1
 8000a48:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bf14      	ite	ne
 8000a52:	2301      	movne	r3, #1
 8000a54:	2300      	moveq	r3, #0
 8000a56:	b2dc      	uxtb	r4, r3
 8000a58:	f7ff fe1a 	bl	8000690 <BSP_LCD_GetXSize>
 8000a5c:	4605      	mov	r5, r0
 8000a5e:	8bb9      	ldrh	r1, [r7, #28]
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x180>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <BSP_LCD_DisplayStringAt+0x184>)
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4403      	add	r3, r0
 8000a70:	3308      	adds	r3, #8
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	889b      	ldrh	r3, [r3, #4]
 8000a76:	fb03 f301 	mul.w	r3, r3, r1
 8000a7a:	1aeb      	subs	r3, r5, r3
 8000a7c:	b299      	uxth	r1, r3
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <BSP_LCD_DisplayStringAt+0x180>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <BSP_LCD_DisplayStringAt+0x184>)
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4403      	add	r3, r0
 8000a8e:	3308      	adds	r3, #8
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	889b      	ldrh	r3, [r3, #4]
 8000a94:	4299      	cmp	r1, r3
 8000a96:	bf2c      	ite	cs
 8000a98:	2301      	movcs	r3, #1
 8000a9a:	2300      	movcc	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4023      	ands	r3, r4
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d1b6      	bne.n	8000a14 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bdb0      	pop	{r4, r5, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000d0 	.word	0x200000d0
 8000ab4:	200000d4 	.word	0x200000d4

08000ab8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	603a      	str	r2, [r7, #0]
 8000ac2:	80fb      	strh	r3, [r7, #6]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <BSP_LCD_DrawPixel+0x88>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <BSP_LCD_DrawPixel+0x8c>)
 8000ace:	2134      	movs	r1, #52	; 0x34
 8000ad0:	fb01 f303 	mul.w	r3, r1, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	3348      	adds	r3, #72	; 0x48
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d116      	bne.n	8000b0c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <BSP_LCD_DrawPixel+0x88>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <BSP_LCD_DrawPixel+0x8c>)
 8000ae4:	2134      	movs	r1, #52	; 0x34
 8000ae6:	fb01 f303 	mul.w	r3, r1, r3
 8000aea:	4413      	add	r3, r2
 8000aec:	335c      	adds	r3, #92	; 0x5c
 8000aee:	681c      	ldr	r4, [r3, #0]
 8000af0:	88bd      	ldrh	r5, [r7, #4]
 8000af2:	f7ff fdcd 	bl	8000690 <BSP_LCD_GetXSize>
 8000af6:	4603      	mov	r3, r0
 8000af8:	fb03 f205 	mul.w	r2, r3, r5
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	4413      	add	r3, r2
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	4423      	add	r3, r4
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	b292      	uxth	r2, r2
 8000b08:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8000b0a:	e015      	b.n	8000b38 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <BSP_LCD_DrawPixel+0x88>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <BSP_LCD_DrawPixel+0x8c>)
 8000b12:	2134      	movs	r1, #52	; 0x34
 8000b14:	fb01 f303 	mul.w	r3, r1, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	335c      	adds	r3, #92	; 0x5c
 8000b1c:	681c      	ldr	r4, [r3, #0]
 8000b1e:	88bd      	ldrh	r5, [r7, #4]
 8000b20:	f7ff fdb6 	bl	8000690 <BSP_LCD_GetXSize>
 8000b24:	4603      	mov	r3, r0
 8000b26:	fb03 f205 	mul.w	r2, r3, r5
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	4423      	add	r3, r4
 8000b32:	461a      	mov	r2, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b40:	200000d0 	.word	0x200000d0
 8000b44:	20000220 	.word	0x20000220

08000b48 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <BSP_LCD_DisplayOn+0x30>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <BSP_LCD_DisplayOn+0x30>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 0201 	orr.w	r2, r2, #1
 8000b5a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <BSP_LCD_DisplayOn+0x34>)
 8000b64:	f001 ffc0 	bl	8002ae8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2108      	movs	r1, #8
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <BSP_LCD_DisplayOn+0x38>)
 8000b6e:	f001 ffbb 	bl	8002ae8 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000220 	.word	0x20000220
 8000b7c:	40022000 	.word	0x40022000
 8000b80:	40022800 	.word	0x40022800

08000b84 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b090      	sub	sp, #64	; 0x40
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b8e:	4b64      	ldr	r3, [pc, #400]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a63      	ldr	r2, [pc, #396]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000b94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b61      	ldr	r3, [pc, #388]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ba6:	4b5e      	ldr	r3, [pc, #376]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a5d      	ldr	r2, [pc, #372]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b5b      	ldr	r3, [pc, #364]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4b58      	ldr	r3, [pc, #352]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a57      	ldr	r2, [pc, #348]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b55      	ldr	r3, [pc, #340]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b4f      	ldr	r3, [pc, #316]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bee:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a4b      	ldr	r2, [pc, #300]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c06:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a45      	ldr	r2, [pc, #276]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c1e:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a3f      	ldr	r2, [pc, #252]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a39      	ldr	r2, [pc, #228]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000c4e:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <BSP_LCD_MspInit+0x19c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000c66:	2310      	movs	r3, #16
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000c72:	2302      	movs	r3, #2
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000c76:	230e      	movs	r3, #14
 8000c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4828      	ldr	r0, [pc, #160]	; (8000d24 <BSP_LCD_MspInit+0x1a0>)
 8000c82:	f001 fd87 	bl	8002794 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000c90:	2309      	movs	r3, #9
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4823      	ldr	r0, [pc, #140]	; (8000d28 <BSP_LCD_MspInit+0x1a4>)
 8000c9c:	f001 fd7a 	bl	8002794 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000ca0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000caa:	230e      	movs	r3, #14
 8000cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481d      	ldr	r0, [pc, #116]	; (8000d2c <BSP_LCD_MspInit+0x1a8>)
 8000cb6:	f001 fd6d 	bl	8002794 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000cba:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000cc4:	230e      	movs	r3, #14
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4818      	ldr	r0, [pc, #96]	; (8000d30 <BSP_LCD_MspInit+0x1ac>)
 8000cd0:	f001 fd60 	bl	8002794 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000cd4:	23f7      	movs	r3, #247	; 0xf7
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000cdc:	230e      	movs	r3, #14
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4813      	ldr	r0, [pc, #76]	; (8000d34 <BSP_LCD_MspInit+0x1b0>)
 8000ce8:	f001 fd54 	bl	8002794 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480b      	ldr	r0, [pc, #44]	; (8000d2c <BSP_LCD_MspInit+0x1a8>)
 8000cfe:	f001 fd49 	bl	8002794 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000d02:	2308      	movs	r3, #8
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4808      	ldr	r0, [pc, #32]	; (8000d34 <BSP_LCD_MspInit+0x1b0>)
 8000d12:	f001 fd3f 	bl	8002794 <HAL_GPIO_Init>
}
 8000d16:	bf00      	nop
 8000d18:	3740      	adds	r7, #64	; 0x40
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40021800 	.word	0x40021800
 8000d2c:	40022000 	.word	0x40022000
 8000d30:	40022400 	.word	0x40022400
 8000d34:	40022800 	.word	0x40022800

08000d38 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <BSP_LCD_ClockConfig+0x34>)
 8000d44:	2208      	movs	r2, #8
 8000d46:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <BSP_LCD_ClockConfig+0x34>)
 8000d4a:	22c0      	movs	r2, #192	; 0xc0
 8000d4c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <BSP_LCD_ClockConfig+0x34>)
 8000d50:	2205      	movs	r2, #5
 8000d52:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <BSP_LCD_ClockConfig+0x34>)
 8000d56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <BSP_LCD_ClockConfig+0x34>)
 8000d5e:	f004 fcff 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000ec 	.word	0x200000ec

08000d70 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	603a      	str	r2, [r7, #0]
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8000d88:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <DrawChar+0x168>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4953      	ldr	r1, [pc, #332]	; (8000edc <DrawChar+0x16c>)
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	3308      	adds	r3, #8
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	88db      	ldrh	r3, [r3, #6]
 8000d9e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <DrawChar+0x168>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	494d      	ldr	r1, [pc, #308]	; (8000edc <DrawChar+0x16c>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	3308      	adds	r3, #8
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	889b      	ldrh	r3, [r3, #4]
 8000db6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8000db8:	8a3b      	ldrh	r3, [r7, #16]
 8000dba:	3307      	adds	r3, #7
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	da00      	bge.n	8000dc2 <DrawChar+0x52>
 8000dc0:	3307      	adds	r3, #7
 8000dc2:	10db      	asrs	r3, r3, #3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	8a3b      	ldrh	r3, [r7, #16]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	e076      	b.n	8000ec6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000dd8:	8a3b      	ldrh	r3, [r7, #16]
 8000dda:	3307      	adds	r3, #7
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	da00      	bge.n	8000de2 <DrawChar+0x72>
 8000de0:	3307      	adds	r3, #7
 8000de2:	10db      	asrs	r3, r3, #3
 8000de4:	461a      	mov	r2, r3
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fb03 f302 	mul.w	r3, r3, r2
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8000df2:	8a3b      	ldrh	r3, [r7, #16]
 8000df4:	3307      	adds	r3, #7
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	da00      	bge.n	8000dfc <DrawChar+0x8c>
 8000dfa:	3307      	adds	r3, #7
 8000dfc:	10db      	asrs	r3, r3, #3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d002      	beq.n	8000e08 <DrawChar+0x98>
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d004      	beq.n	8000e10 <DrawChar+0xa0>
 8000e06:	e00c      	b.n	8000e22 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	617b      	str	r3, [r7, #20]
      break;
 8000e0e:	e016      	b.n	8000e3e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	3201      	adds	r2, #1
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
      break;
 8000e20:	e00d      	b.n	8000e3e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	041a      	lsls	r2, r3, #16
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	4313      	orrs	r3, r2
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	3202      	adds	r2, #2
 8000e36:	7812      	ldrb	r2, [r2, #0]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
      break;
 8000e3c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	e036      	b.n	8000eb2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8000e44:	8a3a      	ldrh	r2, [r7, #16]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	1ad2      	subs	r2, r2, r3
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	2201      	movs	r2, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d012      	beq.n	8000e86 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4413      	add	r3, r2
 8000e68:	b298      	uxth	r0, r3
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <DrawChar+0x168>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	491b      	ldr	r1, [pc, #108]	; (8000edc <DrawChar+0x16c>)
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	88bb      	ldrh	r3, [r7, #4]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fe1a 	bl	8000ab8 <BSP_LCD_DrawPixel>
 8000e84:	e012      	b.n	8000eac <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b298      	uxth	r0, r3
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <DrawChar+0x168>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4911      	ldr	r1, [pc, #68]	; (8000edc <DrawChar+0x16c>)
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	88bb      	ldrh	r3, [r7, #4]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fe06 	bl	8000ab8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	8a3b      	ldrh	r3, [r7, #16]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d3c4      	bcc.n	8000e44 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	8a7b      	ldrh	r3, [r7, #18]
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d384      	bcc.n	8000dd8 <DrawChar+0x68>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000d0 	.word	0x200000d0
 8000edc:	200000d4 	.word	0x200000d4

08000ee0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <LL_FillBuffer+0x88>)
 8000ef0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ef4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <LL_FillBuffer+0x8c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <LL_FillBuffer+0x90>)
 8000efc:	2134      	movs	r1, #52	; 0x34
 8000efe:	fb01 f303 	mul.w	r3, r1, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	3348      	adds	r3, #72	; 0x48
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d103      	bne.n	8000f14 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <LL_FillBuffer+0x88>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	e002      	b.n	8000f1a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <LL_FillBuffer+0x88>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <LL_FillBuffer+0x88>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <LL_FillBuffer+0x88>)
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <LL_FillBuffer+0x94>)
 8000f24:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000f26:	4810      	ldr	r0, [pc, #64]	; (8000f68 <LL_FillBuffer+0x88>)
 8000f28:	f001 f898 	bl	800205c <HAL_DMA2D_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d115      	bne.n	8000f5e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	480c      	ldr	r0, [pc, #48]	; (8000f68 <LL_FillBuffer+0x88>)
 8000f36:	f001 faff 	bl	8002538 <HAL_DMA2D_ConfigLayer>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10e      	bne.n	8000f5e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69f9      	ldr	r1, [r7, #28]
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <LL_FillBuffer+0x88>)
 8000f4c:	f001 f8d0 	bl	80020f0 <HAL_DMA2D_Start>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000f56:	210a      	movs	r1, #10
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <LL_FillBuffer+0x88>)
 8000f5a:	f001 f8f4 	bl	8002146 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000090 	.word	0x20000090
 8000f6c:	200000d0 	.word	0x200000d0
 8000f70:	20000220 	.word	0x20000220
 8000f74:	4002b000 	.word	0x4002b000

08000f78 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000f7e:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <BSP_SDRAM_Init+0xb0>)
 8000f80:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <BSP_SDRAM_Init+0xb4>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <BSP_SDRAM_Init+0xb4>)
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <BSP_SDRAM_Init+0xb4>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <BSP_SDRAM_Init+0xb4>)
 8000f96:	2207      	movs	r2, #7
 8000f98:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <BSP_SDRAM_Init+0xb4>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <BSP_SDRAM_Init+0xb4>)
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <BSP_SDRAM_Init+0xb4>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fc6:	2240      	movs	r2, #64	; 0x40
 8000fc8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fde:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fe2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000fee:	2100      	movs	r1, #0
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000ff2:	f000 f87f 	bl	80010f4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <BSP_SDRAM_Init+0xb4>)
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <BSP_SDRAM_Init+0xac>)
 8000ffa:	f005 fecb 	bl	8006d94 <HAL_SDRAM_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <BSP_SDRAM_Init+0xb8>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e002      	b.n	8001012 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <BSP_SDRAM_Init+0xb8>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001012:	f240 6003 	movw	r0, #1539	; 0x603
 8001016:	f000 f80d 	bl	8001034 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800101a:	4b05      	ldr	r3, [pc, #20]	; (8001030 <BSP_SDRAM_Init+0xb8>)
 800101c:	781b      	ldrb	r3, [r3, #0]
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200002c8 	.word	0x200002c8
 8001028:	a0000140 	.word	0xa0000140
 800102c:	20000170 	.word	0x20000170
 8001030:	20000008 	.word	0x20000008

08001034 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001048:	2210      	movs	r2, #16
 800104a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800104e:	2201      	movs	r2, #1
 8001050:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105c:	4923      	ldr	r1, [pc, #140]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800105e:	4824      	ldr	r0, [pc, #144]	; (80010f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001060:	f005 fecc 	bl	8006dfc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f000 f96b 	bl	8001340 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800106c:	2202      	movs	r2, #2
 800106e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001072:	2210      	movs	r2, #16
 8001074:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001078:	2201      	movs	r2, #1
 800107a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001086:	4919      	ldr	r1, [pc, #100]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001088:	4819      	ldr	r0, [pc, #100]	; (80010f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800108a:	f005 feb7 	bl	8006dfc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001090:	2203      	movs	r2, #3
 8001092:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001096:	2210      	movs	r2, #16
 8001098:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 800109c:	2208      	movs	r2, #8
 800109e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010aa:	4910      	ldr	r1, [pc, #64]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010ac:	4810      	ldr	r0, [pc, #64]	; (80010f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80010ae:	f005 fea5 	bl	8006dfc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80010b2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80010b6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010c0:	2210      	movs	r2, #16
 80010c2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010ce:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80010d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d4:	4905      	ldr	r1, [pc, #20]	; (80010ec <BSP_SDRAM_Initialization_sequence+0xb8>)
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80010d8:	f005 fe90 	bl	8006dfc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80010e0:	f005 feb7 	bl	8006e52 <HAL_SDRAM_ProgramRefreshRate>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000018c 	.word	0x2000018c
 80010f0:	200002c8 	.word	0x200002c8

080010f4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b090      	sub	sp, #64	; 0x40
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80010fe:	4b70      	ldr	r3, [pc, #448]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001102:	4a6f      	ldr	r2, [pc, #444]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6393      	str	r3, [r2, #56]	; 0x38
 800110a:	4b6d      	ldr	r3, [pc, #436]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 800110c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
 8001114:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001116:	4b6a      	ldr	r3, [pc, #424]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a69      	ldr	r2, [pc, #420]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 800111c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b67      	ldr	r3, [pc, #412]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a63      	ldr	r2, [pc, #396]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001146:	4b5e      	ldr	r3, [pc, #376]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a5d      	ldr	r2, [pc, #372]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800115e:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a57      	ldr	r2, [pc, #348]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001176:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a51      	ldr	r2, [pc, #324]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 800117c:	f043 0320 	orr.w	r3, r3, #32
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800118e:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 8001194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 80011ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <BSP_SDRAM_MspInit+0x1cc>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80011c6:	2302      	movs	r3, #2
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80011ca:	230c      	movs	r3, #12
 80011cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80011ce:	2308      	movs	r3, #8
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80011d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d6:	4619      	mov	r1, r3
 80011d8:	483a      	ldr	r0, [pc, #232]	; (80012c4 <BSP_SDRAM_MspInit+0x1d0>)
 80011da:	f001 fadb 	bl	8002794 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80011de:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80011e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e8:	4619      	mov	r1, r3
 80011ea:	4837      	ldr	r0, [pc, #220]	; (80012c8 <BSP_SDRAM_MspInit+0x1d4>)
 80011ec:	f001 fad2 	bl	8002794 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80011f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80011f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fa:	4619      	mov	r1, r3
 80011fc:	4833      	ldr	r0, [pc, #204]	; (80012cc <BSP_SDRAM_MspInit+0x1d8>)
 80011fe:	f001 fac9 	bl	8002794 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001202:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120c:	4619      	mov	r1, r3
 800120e:	4830      	ldr	r0, [pc, #192]	; (80012d0 <BSP_SDRAM_MspInit+0x1dc>)
 8001210:	f001 fac0 	bl	8002794 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001214:	f248 1333 	movw	r3, #33075	; 0x8133
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	4619      	mov	r1, r3
 8001220:	482c      	ldr	r0, [pc, #176]	; (80012d4 <BSP_SDRAM_MspInit+0x1e0>)
 8001222:	f001 fab7 	bl	8002794 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001226:	2328      	movs	r3, #40	; 0x28
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800122a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122e:	4619      	mov	r1, r3
 8001230:	4829      	ldr	r0, [pc, #164]	; (80012d8 <BSP_SDRAM_MspInit+0x1e4>)
 8001232:	f001 faaf 	bl	8002794 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800123c:	4b27      	ldr	r3, [pc, #156]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001248:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 800124c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001250:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001254:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001258:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 800125c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001260:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 800126a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800126e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001278:	2203      	movs	r2, #3
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 800127e:	2200      	movs	r2, #0
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001284:	2200      	movs	r2, #0
 8001286:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <BSP_SDRAM_MspInit+0x1ec>)
 800128c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
 8001294:	4a11      	ldr	r2, [pc, #68]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800129a:	4810      	ldr	r0, [pc, #64]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 800129c:	f000 fdd0 	bl	8001e40 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80012a0:	480e      	ldr	r0, [pc, #56]	; (80012dc <BSP_SDRAM_MspInit+0x1e8>)
 80012a2:	f000 fd1f 	bl	8001ce4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	210f      	movs	r1, #15
 80012aa:	2038      	movs	r0, #56	; 0x38
 80012ac:	f000 fb94 	bl	80019d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80012b0:	2038      	movs	r0, #56	; 0x38
 80012b2:	f000 fbad 	bl	8001a10 <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3740      	adds	r7, #64	; 0x40
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	2000019c 	.word	0x2000019c
 80012e0:	40026410 	.word	0x40026410

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 fb6a 	bl	80019c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f00b fd0c 	bl	800cd0c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f00a fe36 	bl	800bf64 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000009 	.word	0x20000009
 8001324:	200002fc 	.word	0x200002fc

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200002fc 	.word	0x200002fc

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_Delay+0x40>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000009 	.word	0x20000009

08001384 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e031      	b.n	80013fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f00a fe02 	bl	800bfac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_ADC_Init+0x84>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	f043 0202 	orr.w	r2, r3, #2
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f94e 	bl	8001674 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f023 0303 	bic.w	r3, r3, #3
 80013e6:	f043 0201 	orr.w	r2, r3, #1
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	; 0x40
 80013ee:	e001      	b.n	80013f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	ffffeefd 	.word	0xffffeefd

0800140c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1c>
 8001424:	2302      	movs	r3, #2
 8001426:	e115      	b.n	8001654 <HAL_ADC_ConfigChannel+0x248>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b09      	cmp	r3, #9
 8001436:	d935      	bls.n	80014a4 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68d9      	ldr	r1, [r3, #12]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	3b1e      	subs	r3, #30
 800144e:	2207      	movs	r2, #7
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43da      	mvns	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	400a      	ands	r2, r1
 800145c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7f      	ldr	r2, [pc, #508]	; (8001660 <HAL_ADC_ConfigChannel+0x254>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d10a      	bne.n	800147e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	061a      	lsls	r2, r3, #24
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	e035      	b.n	80014ea <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68d9      	ldr	r1, [r3, #12]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	4603      	mov	r3, r0
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4403      	add	r3, r0
 8001496:	3b1e      	subs	r3, #30
 8001498:	409a      	lsls	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e022      	b.n	80014ea <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	2207      	movs	r2, #7
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6919      	ldr	r1, [r3, #16]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	4603      	mov	r3, r0
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4403      	add	r3, r0
 80014e0:	409a      	lsls	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d824      	bhi.n	800153c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b05      	subs	r3, #5
 8001504:	221f      	movs	r2, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	3b05      	subs	r3, #5
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
 800153a:	e04c      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d824      	bhi.n	800158e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b23      	subs	r3, #35	; 0x23
 8001556:	221f      	movs	r2, #31
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43da      	mvns	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	400a      	ands	r2, r1
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b23      	subs	r3, #35	; 0x23
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	e023      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b41      	subs	r3, #65	; 0x41
 80015a0:	221f      	movs	r2, #31
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	400a      	ands	r2, r1
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b41      	subs	r3, #65	; 0x41
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a22      	ldr	r2, [pc, #136]	; (8001664 <HAL_ADC_ConfigChannel+0x258>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d109      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1e8>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b12      	cmp	r3, #18
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_ADC_ConfigChannel+0x25c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <HAL_ADC_ConfigChannel+0x25c>)
 80015ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015f2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <HAL_ADC_ConfigChannel+0x258>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d125      	bne.n	800164a <HAL_ADC_ConfigChannel+0x23e>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_ADC_ConfigChannel+0x254>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d003      	beq.n	8001610 <HAL_ADC_ConfigChannel+0x204>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b11      	cmp	r3, #17
 800160e:	d11c      	bne.n	800164a <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_ADC_ConfigChannel+0x25c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_ADC_ConfigChannel+0x25c>)
 8001616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800161a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_ADC_ConfigChannel+0x254>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d111      	bne.n	800164a <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_ADC_ConfigChannel+0x260>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <HAL_ADC_ConfigChannel+0x264>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	0c9a      	lsrs	r2, r3, #18
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800163c:	e002      	b.n	8001644 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3b01      	subs	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	10000012 	.word	0x10000012
 8001664:	40012000 	.word	0x40012000
 8001668:	40012300 	.word	0x40012300
 800166c:	2000000c 	.word	0x2000000c
 8001670:	431bde83 	.word	0x431bde83

08001674 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800167c:	4b78      	ldr	r3, [pc, #480]	; (8001860 <ADC_Init+0x1ec>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a77      	ldr	r2, [pc, #476]	; (8001860 <ADC_Init+0x1ec>)
 8001682:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001686:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001688:	4b75      	ldr	r3, [pc, #468]	; (8001860 <ADC_Init+0x1ec>)
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4973      	ldr	r1, [pc, #460]	; (8001860 <ADC_Init+0x1ec>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	021a      	lsls	r2, r3, #8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	4a58      	ldr	r2, [pc, #352]	; (8001864 <ADC_Init+0x1f0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d022      	beq.n	800174e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001716:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6899      	ldr	r1, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e00f      	b.n	800176e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800175c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0202 	bic.w	r2, r2, #2
 800177c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	005a      	lsls	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	3b01      	subs	r3, #1
 80017c8:	035a      	lsls	r2, r3, #13
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e007      	b.n	80017e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	3b01      	subs	r3, #1
 8001800:	051a      	lsls	r2, r3, #20
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001826:	025a      	lsls	r2, r3, #9
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800183e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	029a      	lsls	r2, r3, #10
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	0f000001 	.word	0x0f000001

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <__NVIC_SetPriorityGrouping+0x40>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	4313      	orrs	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	05fa0000 	.word	0x05fa0000

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff4c 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ea:	f7ff ff61 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 80019ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	6978      	ldr	r0, [r7, #20]
 80019f6:	f7ff ffb1 	bl	800195c <NVIC_EncodePriority>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff80 	bl	8001908 <__NVIC_SetPriority>
}
 8001a08:	bf00      	nop
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff54 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e054      	b.n	8001ae8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7f5b      	ldrb	r3, [r3, #29]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f00a fb06 	bl	800c060 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	791b      	ldrb	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10c      	bne.n	8001a7c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <HAL_CRC_Init+0xc4>)
 8001a68:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0218 	bic.w	r2, r2, #24
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	e00c      	b.n	8001a96 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	461a      	mov	r2, r3
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f834 	bl	8001af4 <HAL_CRCEx_Polynomial_Set>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e028      	b.n	8001ae8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	795b      	ldrb	r3, [r3, #5]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d105      	bne.n	8001aaa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa6:	611a      	str	r2, [r3, #16]
 8001aa8:	e004      	b.n	8001ab4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6912      	ldr	r2, [r2, #16]
 8001ab2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	04c11db7 	.word	0x04c11db7

08001af4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001b04:	231f      	movs	r3, #31
 8001b06:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001b08:	bf00      	nop
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1e5a      	subs	r2, r3, #1
 8001b0e:	613a      	str	r2, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_CRCEx_Polynomial_Set+0x34>
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b18      	cmp	r3, #24
 8001b2c:	d846      	bhi.n	8001bbc <HAL_CRCEx_Polynomial_Set+0xc8>
 8001b2e:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b34:	08001bc3 	.word	0x08001bc3
 8001b38:	08001bbd 	.word	0x08001bbd
 8001b3c:	08001bbd 	.word	0x08001bbd
 8001b40:	08001bbd 	.word	0x08001bbd
 8001b44:	08001bbd 	.word	0x08001bbd
 8001b48:	08001bbd 	.word	0x08001bbd
 8001b4c:	08001bbd 	.word	0x08001bbd
 8001b50:	08001bbd 	.word	0x08001bbd
 8001b54:	08001bb1 	.word	0x08001bb1
 8001b58:	08001bbd 	.word	0x08001bbd
 8001b5c:	08001bbd 	.word	0x08001bbd
 8001b60:	08001bbd 	.word	0x08001bbd
 8001b64:	08001bbd 	.word	0x08001bbd
 8001b68:	08001bbd 	.word	0x08001bbd
 8001b6c:	08001bbd 	.word	0x08001bbd
 8001b70:	08001bbd 	.word	0x08001bbd
 8001b74:	08001ba5 	.word	0x08001ba5
 8001b78:	08001bbd 	.word	0x08001bbd
 8001b7c:	08001bbd 	.word	0x08001bbd
 8001b80:	08001bbd 	.word	0x08001bbd
 8001b84:	08001bbd 	.word	0x08001bbd
 8001b88:	08001bbd 	.word	0x08001bbd
 8001b8c:	08001bbd 	.word	0x08001bbd
 8001b90:	08001bbd 	.word	0x08001bbd
 8001b94:	08001b99 	.word	0x08001b99
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d913      	bls.n	8001bc6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ba2:	e010      	b.n	8001bc6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	d90f      	bls.n	8001bca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001bae:	e00c      	b.n	8001bca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	d90b      	bls.n	8001bce <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001bba:	e008      	b.n	8001bce <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8001bc0:	e006      	b.n	8001bd0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bc2:	bf00      	nop
 8001bc4:	e004      	b.n	8001bd0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bc6:	bf00      	nop
 8001bc8:	e002      	b.n	8001bd0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bca:	bf00      	nop
 8001bcc:	e000      	b.n	8001bd0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001bce:	bf00      	nop
  }
  if (status == HAL_OK)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 0118 	bic.w	r1, r3, #24
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e062      	b.n	8001cd8 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f00a fa3e 	bl	800c0a0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <HAL_DCMI_Init+0xe0>)
 8001c38:	400b      	ands	r3, r1
 8001c3a:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001c50:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001c5c:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001c68:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001c74:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001c80:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d112      	bne.n	8001cb8 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7f1b      	ldrb	r3, [r3, #28]
 8001c96:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7f5b      	ldrb	r3, [r3, #29]
 8001c9c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001c9e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7f9b      	ldrb	r3, [r3, #30]
 8001ca4:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001ca6:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7fdb      	ldrb	r3, [r3, #31]
 8001cae:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001cb4:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001cb6:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 021e 	orr.w	r2, r2, #30
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	ffe0f007 	.word	0xffe0f007

08001ce4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff fb1a 	bl	8001328 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e099      	b.n	8001e34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d20:	e00f      	b.n	8001d42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d22:	f7ff fb01 	bl	8001328 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d908      	bls.n	8001d42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2220      	movs	r2, #32
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e078      	b.n	8001e34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1e8      	bne.n	8001d22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <HAL_DMA_Init+0x158>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d107      	bne.n	8001dac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4313      	orrs	r3, r2
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f023 0307 	bic.w	r3, r3, #7
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d117      	bne.n	8001e06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00e      	beq.n	8001e06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f8bd 	bl	8001f68 <DMA_CheckFifoParam>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2240      	movs	r2, #64	; 0x40
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e02:	2301      	movs	r3, #1
 8001e04:	e016      	b.n	8001e34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f874 	bl	8001efc <DMA_CalcBaseAndBitshift>
 8001e14:	4603      	mov	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	223f      	movs	r2, #63	; 0x3f
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	f010803f 	.word	0xf010803f

08001e40 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e050      	b.n	8001ef4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e048      	b.n	8001ef4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2221      	movs	r2, #33	; 0x21
 8001ea0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f82a 	bl	8001efc <DMA_CalcBaseAndBitshift>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	223f      	movs	r2, #63	; 0x3f
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3b10      	subs	r3, #16
 8001f0c:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <DMA_CalcBaseAndBitshift+0x60>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <DMA_CalcBaseAndBitshift+0x64>)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d908      	bls.n	8001f3c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <DMA_CalcBaseAndBitshift+0x68>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	1d1a      	adds	r2, r3, #4
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	659a      	str	r2, [r3, #88]	; 0x58
 8001f3a:	e006      	b.n	8001f4a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <DMA_CalcBaseAndBitshift+0x68>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	aaaaaaab 	.word	0xaaaaaaab
 8001f60:	0800f65c 	.word	0x0800f65c
 8001f64:	fffffc00 	.word	0xfffffc00

08001f68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11f      	bne.n	8001fc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d855      	bhi.n	8002034 <DMA_CheckFifoParam+0xcc>
 8001f88:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <DMA_CheckFifoParam+0x28>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fb3 	.word	0x08001fb3
 8001f98:	08001fa1 	.word	0x08001fa1
 8001f9c:	08002035 	.word	0x08002035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d045      	beq.n	8002038 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb0:	e042      	b.n	8002038 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fba:	d13f      	bne.n	800203c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc0:	e03c      	b.n	800203c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fca:	d121      	bne.n	8002010 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d836      	bhi.n	8002040 <DMA_CheckFifoParam+0xd8>
 8001fd2:	a201      	add	r2, pc, #4	; (adr r2, 8001fd8 <DMA_CheckFifoParam+0x70>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08001fe9 	.word	0x08001fe9
 8001fdc:	08001fef 	.word	0x08001fef
 8001fe0:	08001fe9 	.word	0x08001fe9
 8001fe4:	08002001 	.word	0x08002001
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
      break;
 8001fec:	e02f      	b.n	800204e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d024      	beq.n	8002044 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ffe:	e021      	b.n	8002044 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002008:	d11e      	bne.n	8002048 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800200e:	e01b      	b.n	8002048 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d902      	bls.n	800201c <DMA_CheckFifoParam+0xb4>
 8002016:	2b03      	cmp	r3, #3
 8002018:	d003      	beq.n	8002022 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800201a:	e018      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
      break;
 8002020:	e015      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00e      	beq.n	800204c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
      break;
 8002032:	e00b      	b.n	800204c <DMA_CheckFifoParam+0xe4>
      break;
 8002034:	bf00      	nop
 8002036:	e00a      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      break;
 8002038:	bf00      	nop
 800203a:	e008      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      break;
 800203c:	bf00      	nop
 800203e:	e006      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      break;
 8002040:	bf00      	nop
 8002042:	e004      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      break;
 8002044:	bf00      	nop
 8002046:	e002      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      break;   
 8002048:	bf00      	nop
 800204a:	e000      	b.n	800204e <DMA_CheckFifoParam+0xe6>
      break;
 800204c:	bf00      	nop
    }
  } 
  
  return status; 
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e039      	b.n	80020e2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f00a f8ca 	bl	800c21c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	f023 0107 	bic.w	r1, r3, #7
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_DMA2D_Init+0x90>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68d1      	ldr	r1, [r2, #12]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	430b      	orrs	r3, r1
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	ffffc000 	.word	0xffffc000

080020f0 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_DMA2D_Start+0x1c>
 8002108:	2302      	movs	r3, #2
 800210a:	e018      	b.n	800213e <HAL_DMA2D_Start+0x4e>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fa98 	bl	800265c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d056      	beq.n	8002210 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002162:	f7ff f8e1 	bl	8001328 <HAL_GetTick>
 8002166:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002168:	e04b      	b.n	8002202 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	f043 0202 	orr.w	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2221      	movs	r2, #33	; 0x21
 80021ae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2204      	movs	r2, #4
 80021b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0a5      	b.n	8002310 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ca:	d01a      	beq.n	8002202 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80021cc:	f7ff f8ac 	bl	8001328 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <HAL_DMA2D_PollForTransfer+0x9c>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10f      	bne.n	8002202 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	f043 0220 	orr.w	r2, r3, #32
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2203      	movs	r2, #3
 80021f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e086      	b.n	8002310 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ac      	beq.n	800216a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d061      	beq.n	80022f6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002232:	f7ff f879 	bl	8001328 <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002238:	e056      	b.n	80022e8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002248:	2b00      	cmp	r3, #0
 800224a:	d02e      	beq.n	80022aa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225a:	f043 0204 	orr.w	r2, r3, #4
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	f043 0202 	orr.w	r2, r3, #2
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2229      	movs	r2, #41	; 0x29
 8002294:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2204      	movs	r2, #4
 800229a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e032      	b.n	8002310 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d01a      	beq.n	80022e8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80022b2:	f7ff f839 	bl	8001328 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <HAL_DMA2D_PollForTransfer+0x182>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2203      	movs	r2, #3
 80022d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e013      	b.n	8002310 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0a1      	beq.n	800223a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2212      	movs	r2, #18
 80022fc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d026      	beq.n	8002388 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d021      	beq.n	8002388 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002352:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	f043 0201 	orr.w	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2204      	movs	r2, #4
 800236c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d026      	beq.n	80023e0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d021      	beq.n	80023e0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023aa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2220      	movs	r2, #32
 80023b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	f043 0202 	orr.w	r2, r3, #2
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d026      	beq.n	8002438 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d021      	beq.n	8002438 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002402:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2208      	movs	r2, #8
 800240a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2204      	movs	r2, #4
 800241c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d013      	beq.n	800246a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00e      	beq.n	800246a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2204      	movs	r2, #4
 8002462:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f853 	bl	8002510 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d024      	beq.n	80024be <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01f      	beq.n	80024be <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800248c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2202      	movs	r2, #2
 8002494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01f      	beq.n	8002508 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01a      	beq.n	8002508 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024e0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2210      	movs	r2, #16
 80024e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f80e 	bl	8002524 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_DMA2D_ConfigLayer+0x20>
 8002554:	2302      	movs	r3, #2
 8002556:	e079      	b.n	800264c <HAL_DMA2D_ConfigLayer+0x114>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	3318      	adds	r3, #24
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002582:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_DMA2D_ConfigLayer+0x120>)
 8002584:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b0a      	cmp	r3, #10
 800258c:	d003      	beq.n	8002596 <HAL_DMA2D_ConfigLayer+0x5e>
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b09      	cmp	r3, #9
 8002594:	d107      	bne.n	80025a6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e005      	b.n	80025b2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d120      	bne.n	80025fa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	ea02 0103 	and.w	r1, r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b0a      	cmp	r3, #10
 80025e0:	d003      	beq.n	80025ea <HAL_DMA2D_ConfigLayer+0xb2>
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b09      	cmp	r3, #9
 80025e8:	d127      	bne.n	800263a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
 80025f8:	e01f      	b.n	800263a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	ea02 0103 	and.w	r1, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	430a      	orrs	r2, r1
 8002610:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b0a      	cmp	r3, #10
 8002622:	d003      	beq.n	800262c <HAL_DMA2D_ConfigLayer+0xf4>
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b09      	cmp	r3, #9
 800262a:	d106      	bne.n	800263a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002638:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	ff03000f 	.word	0xff03000f

0800265c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800265c:	b480      	push	{r7}
 800265e:	b08b      	sub	sp, #44	; 0x2c
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	041a      	lsls	r2, r3, #16
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	431a      	orrs	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002694:	d174      	bne.n	8002780 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800269c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80026ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d108      	bne.n	80026ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	431a      	orrs	r2, r3
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	e053      	b.n	8002776 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4313      	orrs	r3, r2
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	e048      	b.n	8002776 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d111      	bne.n	8002710 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	0cdb      	lsrs	r3, r3, #19
 80026f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	0a9b      	lsrs	r3, r3, #10
 80026f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	08db      	lsrs	r3, r3, #3
 80026fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	02db      	lsls	r3, r3, #11
 8002706:	4313      	orrs	r3, r2
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	e032      	b.n	8002776 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d117      	bne.n	8002748 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	0fdb      	lsrs	r3, r3, #31
 800271c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	0cdb      	lsrs	r3, r3, #19
 8002722:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	0adb      	lsrs	r3, r3, #11
 8002728:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	029b      	lsls	r3, r3, #10
 8002738:	431a      	orrs	r2, r3
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	03db      	lsls	r3, r3, #15
 800273e:	4313      	orrs	r3, r2
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	e016      	b.n	8002776 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	0f1b      	lsrs	r3, r3, #28
 800274c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	0d1b      	lsrs	r3, r3, #20
 8002752:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	0b1b      	lsrs	r3, r3, #12
 8002758:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	011a      	lsls	r2, r3, #4
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	431a      	orrs	r2, r3
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	031b      	lsls	r3, r3, #12
 800276e:	4313      	orrs	r3, r2
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800277e:	e003      	b.n	8002788 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	60da      	str	r2, [r3, #12]
}
 8002788:	bf00      	nop
 800278a:	372c      	adds	r7, #44	; 0x2c
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e175      	b.n	8002aa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 8164 	bne.w	8002a9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x4e>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b12      	cmp	r3, #18
 80027e0:	d123      	bne.n	800282a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	69b9      	ldr	r1, [r7, #24]
 8002826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0203 	and.w	r2, r3, #3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d00b      	beq.n	800287e <HAL_GPIO_Init+0xea>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002872:	2b11      	cmp	r3, #17
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b12      	cmp	r3, #18
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80be 	beq.w	8002a9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_GPIO_Init+0x320>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a64      	ldr	r2, [pc, #400]	; (8002ab4 <HAL_GPIO_Init+0x320>)
 8002924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b62      	ldr	r3, [pc, #392]	; (8002ab4 <HAL_GPIO_Init+0x320>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002936:	4a60      	ldr	r2, [pc, #384]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a57      	ldr	r2, [pc, #348]	; (8002abc <HAL_GPIO_Init+0x328>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d037      	beq.n	80029d2 <HAL_GPIO_Init+0x23e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <HAL_GPIO_Init+0x32c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_GPIO_Init+0x23a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a55      	ldr	r2, [pc, #340]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02b      	beq.n	80029ca <HAL_GPIO_Init+0x236>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a54      	ldr	r2, [pc, #336]	; (8002ac8 <HAL_GPIO_Init+0x334>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d025      	beq.n	80029c6 <HAL_GPIO_Init+0x232>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a53      	ldr	r2, [pc, #332]	; (8002acc <HAL_GPIO_Init+0x338>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01f      	beq.n	80029c2 <HAL_GPIO_Init+0x22e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_GPIO_Init+0x33c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d019      	beq.n	80029be <HAL_GPIO_Init+0x22a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a51      	ldr	r2, [pc, #324]	; (8002ad4 <HAL_GPIO_Init+0x340>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_GPIO_Init+0x226>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a50      	ldr	r2, [pc, #320]	; (8002ad8 <HAL_GPIO_Init+0x344>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00d      	beq.n	80029b6 <HAL_GPIO_Init+0x222>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a4f      	ldr	r2, [pc, #316]	; (8002adc <HAL_GPIO_Init+0x348>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <HAL_GPIO_Init+0x21e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <HAL_GPIO_Init+0x34c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_GPIO_Init+0x21a>
 80029aa:	2309      	movs	r3, #9
 80029ac:	e012      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029ae:	230a      	movs	r3, #10
 80029b0:	e010      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029b2:	2308      	movs	r3, #8
 80029b4:	e00e      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029b6:	2307      	movs	r3, #7
 80029b8:	e00c      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029ba:	2306      	movs	r3, #6
 80029bc:	e00a      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029be:	2305      	movs	r3, #5
 80029c0:	e008      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029c2:	2304      	movs	r3, #4
 80029c4:	e006      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029c6:	2303      	movs	r3, #3
 80029c8:	e004      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e002      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_GPIO_Init+0x240>
 80029d2:	2300      	movs	r3, #0
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	f002 0203 	and.w	r2, r2, #3
 80029da:	0092      	lsls	r2, r2, #2
 80029dc:	4093      	lsls	r3, r2
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029e4:	4934      	ldr	r1, [pc, #208]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f2:	4b3c      	ldr	r3, [pc, #240]	; (8002ae4 <HAL_GPIO_Init+0x350>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a16:	4a33      	ldr	r2, [pc, #204]	; (8002ae4 <HAL_GPIO_Init+0x350>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a1c:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_GPIO_Init+0x350>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a40:	4a28      	ldr	r2, [pc, #160]	; (8002ae4 <HAL_GPIO_Init+0x350>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_GPIO_Init+0x350>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <HAL_GPIO_Init+0x350>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a70:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_GPIO_Init+0x350>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a94:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <HAL_GPIO_Init+0x350>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	f67f ae86 	bls.w	80027b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3724      	adds	r7, #36	; 0x24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40013800 	.word	0x40013800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40021400 	.word	0x40021400
 8002ad4:	40021800 	.word	0x40021800
 8002ad8:	40021c00 	.word	0x40021c00
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40022400 	.word	0x40022400
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
 8002af4:	4613      	mov	r3, r2
 8002af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b04:	e003      	b.n	8002b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	041a      	lsls	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d104      	bne.n	8002b3e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	041a      	lsls	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b3c:	e002      	b.n	8002b44 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f009 f99c 	bl	800beac <HAL_GPIO_EXTI_Callback>
  }
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40013c00 	.word	0x40013c00

08002b80 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af04      	add	r7, sp, #16
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	70fb      	strb	r3, [r7, #3]
 8002b92:	460b      	mov	r3, r1
 8002b94:	70bb      	strb	r3, [r7, #2]
 8002b96:	4613      	mov	r3, r2
 8002b98:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_HCD_HC_Init+0x28>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e07f      	b.n	8002ca8 <HAL_HCD_HC_Init+0x128>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	333d      	adds	r3, #61	; 0x3d
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3338      	adds	r3, #56	; 0x38
 8002bd4:	787a      	ldrb	r2, [r7, #1]
 8002bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3340      	adds	r3, #64	; 0x40
 8002be8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002bea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3339      	adds	r3, #57	; 0x39
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	333f      	adds	r3, #63	; 0x3f
 8002c10:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002c14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	78bb      	ldrb	r3, [r7, #2]
 8002c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c1e:	b2d8      	uxtb	r0, r3
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	333a      	adds	r3, #58	; 0x3a
 8002c2e:	4602      	mov	r2, r0
 8002c30:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002c32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	da0a      	bge.n	8002c50 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	333b      	adds	r3, #59	; 0x3b
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e009      	b.n	8002c64 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	333b      	adds	r3, #59	; 0x3b
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	333c      	adds	r3, #60	; 0x3c
 8002c74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c78:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	787c      	ldrb	r4, [r7, #1]
 8002c80:	78ba      	ldrb	r2, [r7, #2]
 8002c82:	78f9      	ldrb	r1, [r7, #3]
 8002c84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c86:	9302      	str	r3, [sp, #8]
 8002c88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4623      	mov	r3, r4
 8002c96:	f006 f8e5 	bl	8008e64 <USB_HC_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd90      	pop	{r4, r7, pc}

08002cb0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	4608      	mov	r0, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	70fb      	strb	r3, [r7, #3]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	70bb      	strb	r3, [r7, #2]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	333b      	adds	r3, #59	; 0x3b
 8002cda:	78ba      	ldrb	r2, [r7, #2]
 8002cdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	333f      	adds	r3, #63	; 0x3f
 8002cee:	787a      	ldrb	r2, [r7, #1]
 8002cf0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cf2:	7c3b      	ldrb	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	3342      	adds	r3, #66	; 0x42
 8002d08:	2203      	movs	r2, #3
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	e009      	b.n	8002d22 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3342      	adds	r3, #66	; 0x42
 8002d1e:	2202      	movs	r2, #2
 8002d20:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d22:	787b      	ldrb	r3, [r7, #1]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	f200 80d6 	bhi.w	8002ed6 <HAL_HCD_HC_SubmitRequest+0x226>
 8002d2a:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002ec1 	.word	0x08002ec1
 8002d38:	08002dad 	.word	0x08002dad
 8002d3c:	08002e37 	.word	0x08002e37
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002d40:	7c3b      	ldrb	r3, [r7, #16]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	f040 80c9 	bne.w	8002eda <HAL_HCD_HC_SubmitRequest+0x22a>
 8002d48:	78bb      	ldrb	r3, [r7, #2]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 80c5 	bne.w	8002eda <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002d50:	8b3b      	ldrh	r3, [r7, #24]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	3351      	adds	r3, #81	; 0x51
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d6a:	78fa      	ldrb	r2, [r7, #3]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	3351      	adds	r3, #81	; 0x51
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3342      	adds	r3, #66	; 0x42
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d94:	e0a1      	b.n	8002eda <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	3342      	adds	r3, #66	; 0x42
 8002da6:	2202      	movs	r2, #2
 8002da8:	701a      	strb	r2, [r3, #0]
      break;
 8002daa:	e096      	b.n	8002eda <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002dac:	78bb      	ldrb	r3, [r7, #2]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d120      	bne.n	8002df4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3351      	adds	r3, #81	; 0x51
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3342      	adds	r3, #66	; 0x42
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ddc:	e07e      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	3342      	adds	r3, #66	; 0x42
 8002dee:	2202      	movs	r2, #2
 8002df0:	701a      	strb	r2, [r3, #0]
      break;
 8002df2:	e073      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3350      	adds	r3, #80	; 0x50
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	3342      	adds	r3, #66	; 0x42
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
      break;
 8002e1e:	e05d      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3342      	adds	r3, #66	; 0x42
 8002e30:	2202      	movs	r2, #2
 8002e32:	701a      	strb	r2, [r3, #0]
      break;
 8002e34:	e052      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e36:	78bb      	ldrb	r3, [r7, #2]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d120      	bne.n	8002e7e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3351      	adds	r3, #81	; 0x51
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	3342      	adds	r3, #66	; 0x42
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e66:	e039      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	3342      	adds	r3, #66	; 0x42
 8002e78:	2202      	movs	r2, #2
 8002e7a:	701a      	strb	r2, [r3, #0]
      break;
 8002e7c:	e02e      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3350      	adds	r3, #80	; 0x50
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3342      	adds	r3, #66	; 0x42
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
      break;
 8002ea8:	e018      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3342      	adds	r3, #66	; 0x42
 8002eba:	2202      	movs	r2, #2
 8002ebc:	701a      	strb	r2, [r3, #0]
      break;
 8002ebe:	e00d      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	3342      	adds	r3, #66	; 0x42
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
      break;
 8002ed4:	e002      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e000      	b.n	8002edc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002eda:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	3344      	adds	r3, #68	; 0x44
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	8b39      	ldrh	r1, [r7, #24]
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4403      	add	r3, r0
 8002f00:	3348      	adds	r3, #72	; 0x48
 8002f02:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	335c      	adds	r3, #92	; 0x5c
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	334c      	adds	r3, #76	; 0x4c
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	3339      	adds	r3, #57	; 0x39
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	335d      	adds	r3, #93	; 0x5d
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	3338      	adds	r3, #56	; 0x38
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	18d1      	adds	r1, r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f006 f882 	bl	8009078 <USB_HC_StartXfer>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop

08002f80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f005 fea1 	bl	8008cde <USB_GetMode>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f040 80f1 	bne.w	8003186 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f005 fe85 	bl	8008cb8 <USB_ReadInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80e7 	beq.w	8003184 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f005 fe7c 	bl	8008cb8 <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fca:	d104      	bne.n	8002fd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002fd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f005 fe6c 	bl	8008cb8 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fea:	d104      	bne.n	8002ff6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ff4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f005 fe5c 	bl	8008cb8 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003006:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800300a:	d104      	bne.n	8003016 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003014:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f005 fe4c 	bl	8008cb8 <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d103      	bne.n	8003032 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2202      	movs	r2, #2
 8003030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f005 fe3e 	bl	8008cb8 <USB_ReadInterrupts>
 800303c:	4603      	mov	r3, r0
 800303e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003046:	d117      	bne.n	8003078 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003056:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800305a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f009 ff9b 	bl	800cf98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	4618      	mov	r0, r3
 800306a:	f005 fe46 	bl	8008cfa <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f005 fe1b 	bl	8008cb8 <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800308c:	d102      	bne.n	8003094 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f001 f8a6 	bl	80041e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f005 fe0d 	bl	8008cb8 <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d106      	bne.n	80030b6 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f009 ff59 	bl	800cf60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2208      	movs	r2, #8
 80030b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f005 fdfc 	bl	8008cb8 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ca:	d138      	bne.n	800313e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f006 f915 	bl	8009300 <USB_HC_ReadInterrupt>
 80030d6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e025      	b.n	800312a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d018      	beq.n	8003124 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003108:	d106      	bne.n	8003118 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4619      	mov	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8ac 	bl	800326e <HCD_HC_IN_IRQHandler>
 8003116:	e005      	b.n	8003124 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fc3c 	bl	800399c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3301      	adds	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	d3d4      	bcc.n	80030de <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f005 fdb8 	bl	8008cb8 <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b10      	cmp	r3, #16
 8003150:	d101      	bne.n	8003156 <HAL_HCD_IRQHandler+0x1d6>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_HCD_IRQHandler+0x1d8>
 8003156:	2300      	movs	r3, #0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d014      	beq.n	8003186 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0210 	bic.w	r2, r2, #16
 800316a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 ff8b 	bl	8004088 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0210 	orr.w	r2, r2, #16
 8003180:	619a      	str	r2, [r3, #24]
 8003182:	e000      	b.n	8003186 <HAL_HCD_IRQHandler+0x206>
      return;
 8003184:	bf00      	nop
    }
  }
}
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_HCD_Start+0x16>
 800319e:	2302      	movs	r3, #2
 80031a0:	e013      	b.n	80031ca <HAL_HCD_Start+0x3e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f005 fcba 	bl	8008b28 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f005 fe01 	bl	8008dc2 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_HCD_Stop+0x16>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e00d      	b.n	8003204 <HAL_HCD_Stop+0x32>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f006 f9cf 	bl	8009598 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f005 fda8 	bl	8008d6e <USB_ResetPort>
 800321e:	4603      	mov	r3, r0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	335c      	adds	r3, #92	; 0x5c
 8003244:	781b      	ldrb	r3, [r3, #0]
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f005 fde8 	bl	8008e34 <USB_GetHostSpeed>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d119      	bne.n	80032d2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032aa:	461a      	mov	r2, r3
 80032ac:	2304      	movs	r3, #4
 80032ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	0151      	lsls	r1, r2, #5
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	440a      	add	r2, r1
 80032c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	60d3      	str	r3, [r2, #12]
 80032d0:	e095      	b.n	80033fe <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d109      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	461a      	mov	r2, r3
 80032f6:	2320      	movs	r3, #32
 80032f8:	6093      	str	r3, [r2, #8]
 80032fa:	e080      	b.n	80033fe <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d134      	bne.n	800337c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	0151      	lsls	r1, r2, #5
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	440a      	add	r2, r1
 8003328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	440b      	add	r3, r1
 8003340:	335d      	adds	r3, #93	; 0x5d
 8003342:	2205      	movs	r2, #5
 8003344:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	2310      	movs	r3, #16
 8003356:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	461a      	mov	r2, r3
 8003366:	2308      	movs	r3, #8
 8003368:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f005 ffd4 	bl	8009322 <USB_HC_Halt>
 800337a:	e040      	b.n	80033fe <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003392:	d134      	bne.n	80033fe <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f005 ffaf 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	2310      	movs	r3, #16
 80033d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	335d      	adds	r3, #93	; 0x5d
 80033e6:	2208      	movs	r2, #8
 80033e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003414:	d122      	bne.n	800345c <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	0151      	lsls	r1, r2, #5
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	440a      	add	r2, r1
 800342c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f005 ff6e 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	461a      	mov	r2, r3
 8003454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003458:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800345a:	e29b      	b.n	8003994 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 80c1 	bne.w	80035f6 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	440b      	add	r3, r1
 800348a:	3348      	adds	r3, #72	; 0x48
 800348c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	440b      	add	r3, r1
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80034a0:	1ad1      	subs	r1, r2, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4403      	add	r3, r0
 80034b0:	334c      	adds	r3, #76	; 0x4c
 80034b2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	335d      	adds	r3, #93	; 0x5d
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3358      	adds	r3, #88	; 0x58
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	2301      	movs	r3, #1
 80034ec:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	333f      	adds	r3, #63	; 0x3f
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	333f      	adds	r3, #63	; 0x3f
 8003514:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003516:	2b02      	cmp	r3, #2
 8003518:	d121      	bne.n	800355e <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4413      	add	r3, r2
 8003522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	0151      	lsls	r1, r2, #5
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	440a      	add	r2, r1
 8003530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003534:	f043 0302 	orr.w	r3, r3, #2
 8003538:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f005 feec 	bl	8009322 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	461a      	mov	r2, r3
 8003558:	2310      	movs	r3, #16
 800355a:	6093      	str	r3, [r2, #8]
 800355c:	e034      	b.n	80035c8 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	333f      	adds	r3, #63	; 0x3f
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d129      	bne.n	80035c8 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	0151      	lsls	r1, r2, #5
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	440a      	add	r2, r1
 800358a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800358e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003592:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	440b      	add	r3, r1
 80035a2:	335c      	adds	r3, #92	; 0x5c
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	b2d8      	uxtb	r0, r3
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	335c      	adds	r3, #92	; 0x5c
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	4601      	mov	r1, r0
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f009 fcf6 	bl	800cfb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	3350      	adds	r3, #80	; 0x50
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2d8      	uxtb	r0, r3
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	440b      	add	r3, r1
 80035ee:	3350      	adds	r3, #80	; 0x50
 80035f0:	4602      	mov	r2, r0
 80035f2:	701a      	strb	r2, [r3, #0]
}
 80035f4:	e1ce      	b.n	8003994 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b02      	cmp	r3, #2
 800360a:	f040 80f1 	bne.w	80037f0 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	440a      	add	r2, r1
 8003624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003628:	f023 0302 	bic.w	r3, r3, #2
 800362c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	440b      	add	r3, r1
 800363c:	335d      	adds	r3, #93	; 0x5d
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10a      	bne.n	800365a <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	440b      	add	r3, r1
 8003652:	335c      	adds	r3, #92	; 0x5c
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e0b0      	b.n	80037bc <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	440b      	add	r3, r1
 8003668:	335d      	adds	r3, #93	; 0x5d
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d10a      	bne.n	8003686 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	335c      	adds	r3, #92	; 0x5c
 8003680:	2205      	movs	r2, #5
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e09a      	b.n	80037bc <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	440b      	add	r3, r1
 8003694:	335d      	adds	r3, #93	; 0x5d
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b06      	cmp	r3, #6
 800369a:	d00a      	beq.n	80036b2 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	440b      	add	r3, r1
 80036aa:	335d      	adds	r3, #93	; 0x5d
 80036ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d156      	bne.n	8003760 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	440b      	add	r3, r1
 80036c0:	3358      	adds	r3, #88	; 0x58
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4403      	add	r3, r0
 80036d4:	3358      	adds	r3, #88	; 0x58
 80036d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	440b      	add	r3, r1
 80036e6:	3358      	adds	r3, #88	; 0x58
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d914      	bls.n	8003718 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	3358      	adds	r3, #88	; 0x58
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	335c      	adds	r3, #92	; 0x5c
 8003712:	2204      	movs	r2, #4
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e009      	b.n	800372c <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	335c      	adds	r3, #92	; 0x5c
 8003728:	2202      	movs	r2, #2
 800372a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003742:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800374a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e02d      	b.n	80037bc <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	440b      	add	r3, r1
 800376e:	335d      	adds	r3, #93	; 0x5d
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d122      	bne.n	80037bc <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	335c      	adds	r3, #92	; 0x5c
 8003786:	2202      	movs	r2, #2
 8003788:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037a0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037a8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2302      	movs	r3, #2
 80037cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	b2d8      	uxtb	r0, r3
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	335c      	adds	r3, #92	; 0x5c
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	4601      	mov	r1, r0
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f009 fbe3 	bl	800cfb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037ee:	e0d1      	b.n	8003994 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d13e      	bne.n	8003884 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	0151      	lsls	r1, r2, #5
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	440a      	add	r2, r1
 800381c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	440b      	add	r3, r1
 8003834:	3358      	adds	r3, #88	; 0x58
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	1c59      	adds	r1, r3, #1
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4403      	add	r3, r0
 8003848:	3358      	adds	r3, #88	; 0x58
 800384a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	335d      	adds	r3, #93	; 0x5d
 800385c:	2206      	movs	r2, #6
 800385e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f005 fd59 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387c:	461a      	mov	r2, r3
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	6093      	str	r3, [r2, #8]
}
 8003882:	e087      	b.n	8003994 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b10      	cmp	r3, #16
 8003898:	d17c      	bne.n	8003994 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	333f      	adds	r3, #63	; 0x3f
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d122      	bne.n	80038f6 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	440b      	add	r3, r1
 80038be:	3358      	adds	r3, #88	; 0x58
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	0151      	lsls	r1, r2, #5
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	440a      	add	r2, r1
 80038da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038de:	f043 0302 	orr.w	r3, r3, #2
 80038e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f005 fd17 	bl	8009322 <USB_HC_Halt>
 80038f4:	e045      	b.n	8003982 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	333f      	adds	r3, #63	; 0x3f
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	333f      	adds	r3, #63	; 0x3f
 800391c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800391e:	2b02      	cmp	r3, #2
 8003920:	d12f      	bne.n	8003982 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	3358      	adds	r3, #88	; 0x58
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d121      	bne.n	8003982 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	335d      	adds	r3, #93	; 0x5d
 800394e:	2203      	movs	r2, #3
 8003950:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	0151      	lsls	r1, r2, #5
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	440a      	add	r2, r1
 8003968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f005 fcd0 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	461a      	mov	r2, r3
 8003990:	2310      	movs	r3, #16
 8003992:	6093      	str	r3, [r2, #8]
}
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d119      	bne.n	8003a00 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	2304      	movs	r3, #4
 80039dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	0151      	lsls	r1, r2, #5
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	440a      	add	r2, r1
 80039f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80039fe:	e33e      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d141      	bne.n	8003a9a <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a22:	461a      	mov	r2, r3
 8003a24:	2320      	movs	r3, #32
 8003a26:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	333d      	adds	r3, #61	; 0x3d
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f040 831f 	bne.w	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	333d      	adds	r3, #61	; 0x3d
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	335c      	adds	r3, #92	; 0x5c
 8003a64:	2202      	movs	r2, #2
 8003a66:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a82:	f043 0302 	orr.w	r3, r3, #2
 8003a86:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f005 fc45 	bl	8009322 <USB_HC_Halt>
}
 8003a98:	e2f1      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d13f      	bne.n	8003b30 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	440b      	add	r3, r1
 8003abe:	335d      	adds	r3, #93	; 0x5d
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	440b      	add	r3, r1
 8003ad2:	333d      	adds	r3, #61	; 0x3d
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3358      	adds	r3, #88	; 0x58
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	0151      	lsls	r1, r2, #5
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	440a      	add	r2, r1
 8003b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b06:	f043 0302 	orr.w	r3, r3, #2
 8003b0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f005 fc03 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	6093      	str	r3, [r2, #8]
}
 8003b2e:	e2a6      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b46:	d122      	bne.n	8003b8e <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b62:	f043 0302 	orr.w	r3, r3, #2
 8003b66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f005 fbd5 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b84:	461a      	mov	r2, r3
 8003b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b8a:	6093      	str	r3, [r2, #8]
}
 8003b8c:	e277      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d135      	bne.n	8003c10 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3358      	adds	r3, #88	; 0x58
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
 8003bd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	4611      	mov	r1, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f005 fb9d 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	440b      	add	r3, r1
 8003c08:	335d      	adds	r3, #93	; 0x5d
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
}
 8003c0e:	e236      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d12b      	bne.n	8003c7e <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c32:	461a      	mov	r2, r3
 8003c34:	2308      	movs	r3, #8
 8003c36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c52:	f043 0302 	orr.w	r3, r3, #2
 8003c56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f005 fb5d 	bl	8009322 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	440b      	add	r3, r1
 8003c76:	335d      	adds	r3, #93	; 0x5d
 8003c78:	2205      	movs	r2, #5
 8003c7a:	701a      	strb	r2, [r3, #0]
}
 8003c7c:	e1ff      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d155      	bne.n	8003d40 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3358      	adds	r3, #88	; 0x58
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	440b      	add	r3, r1
 8003cb6:	335d      	adds	r3, #93	; 0x5d
 8003cb8:	2203      	movs	r2, #3
 8003cba:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	440b      	add	r3, r1
 8003cca:	333d      	adds	r3, #61	; 0x3d
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d114      	bne.n	8003cfc <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	440b      	add	r3, r1
 8003ce0:	333c      	adds	r3, #60	; 0x3c
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	440b      	add	r3, r1
 8003cf6:	333d      	adds	r3, #61	; 0x3d
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d16:	f043 0302 	orr.w	r3, r3, #2
 8003d1a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 fafb 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2310      	movs	r3, #16
 8003d3c:	6093      	str	r3, [r2, #8]
}
 8003d3e:	e19e      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d12b      	bne.n	8003dae <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d70:	f043 0302 	orr.w	r3, r3, #2
 8003d74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f005 face 	bl	8009322 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	335d      	adds	r3, #93	; 0x5d
 8003d96:	2206      	movs	r2, #6
 8003d98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	461a      	mov	r2, r3
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	6093      	str	r3, [r2, #8]
}
 8003dac:	e167      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc4:	d135      	bne.n	8003e32 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f005 fa96 	bl	8009322 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	461a      	mov	r2, r3
 8003e04:	2310      	movs	r3, #16
 8003e06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e14:	461a      	mov	r2, r3
 8003e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	335d      	adds	r3, #93	; 0x5d
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	701a      	strb	r2, [r3, #0]
}
 8003e30:	e125      	b.n	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	f040 811a 	bne.w	800407e <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e64:	f023 0302 	bic.w	r3, r3, #2
 8003e68:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	440b      	add	r3, r1
 8003e78:	335d      	adds	r3, #93	; 0x5d
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d137      	bne.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	335c      	adds	r3, #92	; 0x5c
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	333f      	adds	r3, #63	; 0x3f
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d00b      	beq.n	8003ec2 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	440b      	add	r3, r1
 8003eb8:	333f      	adds	r3, #63	; 0x3f
 8003eba:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	f040 80c5 	bne.w	800404c <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	440b      	add	r3, r1
 8003ed0:	3351      	adds	r3, #81	; 0x51
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	f083 0301 	eor.w	r3, r3, #1
 8003ed8:	b2d8      	uxtb	r0, r3
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3351      	adds	r3, #81	; 0x51
 8003eea:	4602      	mov	r2, r0
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e0ad      	b.n	800404c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	440b      	add	r3, r1
 8003efe:	335d      	adds	r3, #93	; 0x5d
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d10a      	bne.n	8003f1c <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	440b      	add	r3, r1
 8003f14:	335c      	adds	r3, #92	; 0x5c
 8003f16:	2202      	movs	r2, #2
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e097      	b.n	800404c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	335d      	adds	r3, #93	; 0x5d
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d10a      	bne.n	8003f48 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	440b      	add	r3, r1
 8003f40:	335c      	adds	r3, #92	; 0x5c
 8003f42:	2202      	movs	r2, #2
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e081      	b.n	800404c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	440b      	add	r3, r1
 8003f56:	335d      	adds	r3, #93	; 0x5d
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b05      	cmp	r3, #5
 8003f5c:	d10a      	bne.n	8003f74 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	440b      	add	r3, r1
 8003f6c:	335c      	adds	r3, #92	; 0x5c
 8003f6e:	2205      	movs	r2, #5
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	e06b      	b.n	800404c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	440b      	add	r3, r1
 8003f82:	335d      	adds	r3, #93	; 0x5d
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d00a      	beq.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	335d      	adds	r3, #93	; 0x5d
 8003f9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d155      	bne.n	800404c <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	440b      	add	r3, r1
 8003fae:	3358      	adds	r3, #88	; 0x58
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4403      	add	r3, r0
 8003fc2:	3358      	adds	r3, #88	; 0x58
 8003fc4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3358      	adds	r3, #88	; 0x58
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d914      	bls.n	8004006 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	440b      	add	r3, r1
 8003fea:	3358      	adds	r3, #88	; 0x58
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	440b      	add	r3, r1
 8003ffe:	335c      	adds	r3, #92	; 0x5c
 8004000:	2204      	movs	r2, #4
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e009      	b.n	800401a <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	440b      	add	r3, r1
 8004014:	335c      	adds	r3, #92	; 0x5c
 8004016:	2202      	movs	r2, #2
 8004018:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004030:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004038:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004046:	461a      	mov	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004058:	461a      	mov	r2, r3
 800405a:	2302      	movs	r3, #2
 800405c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	b2d8      	uxtb	r0, r3
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	440b      	add	r3, r1
 8004070:	335c      	adds	r3, #92	; 0x5c
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	4601      	mov	r1, r0
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f008 ff9b 	bl	800cfb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800407e:	bf00      	nop
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	0c5b      	lsrs	r3, r3, #17
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d003      	beq.n	80040cc <HCD_RXQLVL_IRQHandler+0x44>
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	f000 8082 	beq.w	80041ce <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040ca:	e083      	b.n	80041d4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d07f      	beq.n	80041d2 <HCD_RXQLVL_IRQHandler+0x14a>
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	3344      	adds	r3, #68	; 0x44
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d074      	beq.n	80041d2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	3344      	adds	r3, #68	; 0x44
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	b292      	uxth	r2, r2
 8004102:	4619      	mov	r1, r3
 8004104:	f004 fdaf 	bl	8008c66 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	440b      	add	r3, r1
 8004116:	3344      	adds	r3, #68	; 0x44
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	18d1      	adds	r1, r2, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4403      	add	r3, r0
 800412c:	3344      	adds	r3, #68	; 0x44
 800412e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	334c      	adds	r3, #76	; 0x4c
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	18d1      	adds	r1, r2, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4403      	add	r3, r0
 8004154:	334c      	adds	r3, #76	; 0x4c
 8004156:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <HCD_RXQLVL_IRQHandler+0x154>)
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d031      	beq.n	80041d2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004184:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800418c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	440b      	add	r3, r1
 80041ae:	3350      	adds	r3, #80	; 0x50
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f083 0301 	eor.w	r3, r3, #1
 80041b6:	b2d8      	uxtb	r0, r3
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	440b      	add	r3, r1
 80041c6:	3350      	adds	r3, #80	; 0x50
 80041c8:	4602      	mov	r2, r0
 80041ca:	701a      	strb	r2, [r3, #0]
      break;
 80041cc:	e001      	b.n	80041d2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80041d2:	bf00      	nop
  }
}
 80041d4:	bf00      	nop
 80041d6:	3728      	adds	r7, #40	; 0x28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	1ff80000 	.word	0x1ff80000

080041e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800420c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b02      	cmp	r3, #2
 8004216:	d113      	bne.n	8004240 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10a      	bne.n	8004238 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004230:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f008 fea2 	bl	800cf7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f043 0302 	orr.w	r3, r3, #2
 800423e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b08      	cmp	r3, #8
 8004248:	d147      	bne.n	80042da <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0308 	orr.w	r3, r3, #8
 8004250:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d129      	bne.n	80042b0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d113      	bne.n	800428c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800426a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426e:	d106      	bne.n	800427e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f004 fd3f 	bl	8008cfa <USB_InitFSLSPClkSel>
 800427c:	e011      	b.n	80042a2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f004 fd38 	bl	8008cfa <USB_InitFSLSPClkSel>
 800428a:	e00a      	b.n	80042a2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d106      	bne.n	80042a2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800429a:	461a      	mov	r2, r3
 800429c:	f64e 2360 	movw	r3, #60000	; 0xea60
 80042a0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f008 fe94 	bl	800cfd0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f008 fe67 	bl	800cf7c <HAL_HCD_Connect_Callback>
 80042ae:	e014      	b.n	80042da <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f008 fe9b 	bl	800cfec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80042c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042c8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80042d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d103      	bne.n	80042ec <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f043 0320 	orr.w	r3, r3, #32
 80042ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6013      	str	r3, [r2, #0]
}
 80042f8:	bf00      	nop
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e07f      	b.n	8004412 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f007 ff9e 	bl	800c268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004350:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004360:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	e006      	b.n	8004388 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004386:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d104      	bne.n	800439a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_I2C_Init+0x11c>)
 80043a6:	430b      	orrs	r3, r1
 80043a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	ea42 0103 	orr.w	r1, r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69d9      	ldr	r1, [r3, #28]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1a      	ldr	r2, [r3, #32]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	02008000 	.word	0x02008000

08004420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b20      	cmp	r3, #32
 8004434:	d138      	bne.n	80044a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004440:	2302      	movs	r3, #2
 8004442:	e032      	b.n	80044aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	; 0x24
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	e000      	b.n	80044aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d139      	bne.n	8004540 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e033      	b.n	8004542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2224      	movs	r2, #36	; 0x24
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004508:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0bf      	b.n	80046e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f007 feee 	bl	800c358 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004592:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6899      	ldr	r1, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b4a      	ldr	r3, [pc, #296]	; (80046ec <HAL_LTDC_Init+0x19c>)
 80045c4:	400b      	ands	r3, r1
 80045c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68d9      	ldr	r1, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_LTDC_Init+0x19c>)
 80045f2:	400b      	ands	r3, r1
 80045f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6919      	ldr	r1, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b33      	ldr	r3, [pc, #204]	; (80046ec <HAL_LTDC_Init+0x19c>)
 8004620:	400b      	ands	r3, r1
 8004622:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6919      	ldr	r1, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6959      	ldr	r1, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_LTDC_Init+0x19c>)
 800464e:	400b      	ands	r3, r1
 8004650:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6959      	ldr	r1, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0206 	orr.w	r2, r2, #6
 80046be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	f000f800 	.word	0xf000f800

080046f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d023      	beq.n	800475a <HAL_LTDC_IRQHandler+0x6a>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01e      	beq.n	800475a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2204      	movs	r2, #4
 8004732:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2204      	movs	r2, #4
 8004748:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f86f 	bl	8004838 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d023      	beq.n	80047ac <HAL_LTDC_IRQHandler+0xbc>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01e      	beq.n	80047ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0202 	bic.w	r2, r2, #2
 800477c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800478c:	f043 0202 	orr.w	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2204      	movs	r2, #4
 800479a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f846 	bl	8004838 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01b      	beq.n	80047ee <HAL_LTDC_IRQHandler+0xfe>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d016      	beq.n	80047ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f82f 	bl	800484c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <HAL_LTDC_IRQHandler+0x140>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2208      	movs	r2, #8
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f818 	bl	8004860 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004874:	b5b0      	push	{r4, r5, r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_LTDC_ConfigLayer+0x1a>
 800488a:	2302      	movs	r3, #2
 800488c:	e02c      	b.n	80048e8 <HAL_LTDC_ConfigLayer+0x74>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2134      	movs	r1, #52	; 0x34
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	4413      	add	r3, r2
 80048aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4614      	mov	r4, r2
 80048b2:	461d      	mov	r5, r3
 80048b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f81f 	bl	800490c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bdb0      	pop	{r4, r5, r7, pc}

080048f0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80048fe:	b2db      	uxtb	r3, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	; 0x24
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	4413      	add	r3, r2
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	01db      	lsls	r3, r3, #7
 8004938:	4413      	add	r3, r2
 800493a:	3384      	adds	r3, #132	; 0x84
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	4611      	mov	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	01d2      	lsls	r2, r2, #7
 8004948:	440a      	add	r2, r1
 800494a:	3284      	adds	r2, #132	; 0x84
 800494c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004950:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004962:	4413      	add	r3, r2
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4619      	mov	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	01db      	lsls	r3, r3, #7
 8004970:	440b      	add	r3, r1
 8004972:	3384      	adds	r3, #132	; 0x84
 8004974:	4619      	mov	r1, r3
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800498a:	4413      	add	r3, r2
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	01db      	lsls	r3, r3, #7
 800499a:	4413      	add	r3, r2
 800499c:	3384      	adds	r3, #132	; 0x84
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	4611      	mov	r1, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	01d2      	lsls	r2, r2, #7
 80049aa:	440a      	add	r2, r1
 80049ac:	3284      	adds	r2, #132	; 0x84
 80049ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80049b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c2:	4413      	add	r3, r2
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	01db      	lsls	r3, r3, #7
 80049d0:	440b      	add	r3, r1
 80049d2:	3384      	adds	r3, #132	; 0x84
 80049d4:	4619      	mov	r1, r3
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	01db      	lsls	r3, r3, #7
 80049e6:	4413      	add	r3, r2
 80049e8:	3384      	adds	r3, #132	; 0x84
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	4611      	mov	r1, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	01d2      	lsls	r2, r2, #7
 80049f6:	440a      	add	r2, r1
 80049f8:	3284      	adds	r2, #132	; 0x84
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	01db      	lsls	r3, r3, #7
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3384      	adds	r3, #132	; 0x84
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	061b      	lsls	r3, r3, #24
 8004a30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	01db      	lsls	r3, r3, #7
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3384      	adds	r3, #132	; 0x84
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3384      	adds	r3, #132	; 0x84
 8004a50:	461a      	mov	r2, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	01db      	lsls	r3, r3, #7
 8004a70:	440b      	add	r3, r1
 8004a72:	3384      	adds	r3, #132	; 0x84
 8004a74:	4619      	mov	r1, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	01db      	lsls	r3, r3, #7
 8004a86:	4413      	add	r3, r2
 8004a88:	3384      	adds	r3, #132	; 0x84
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	4611      	mov	r1, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	01d2      	lsls	r2, r2, #7
 8004a96:	440a      	add	r2, r1
 8004a98:	3284      	adds	r2, #132	; 0x84
 8004a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	01db      	lsls	r3, r3, #7
 8004aaa:	4413      	add	r3, r2
 8004aac:	3384      	adds	r3, #132	; 0x84
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	01db      	lsls	r3, r3, #7
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3384      	adds	r3, #132	; 0x84
 8004ac4:	69da      	ldr	r2, [r3, #28]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	01db      	lsls	r3, r3, #7
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3384      	adds	r3, #132	; 0x84
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4b58      	ldr	r3, [pc, #352]	; (8004c38 <LTDC_SetConfig+0x32c>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	6809      	ldr	r1, [r1, #0]
 8004ae8:	4608      	mov	r0, r1
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	01c9      	lsls	r1, r1, #7
 8004aee:	4401      	add	r1, r0
 8004af0:	3184      	adds	r1, #132	; 0x84
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	01db      	lsls	r3, r3, #7
 8004b00:	4413      	add	r3, r2
 8004b02:	3384      	adds	r3, #132	; 0x84
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	01db      	lsls	r3, r3, #7
 8004b10:	4413      	add	r3, r2
 8004b12:	3384      	adds	r3, #132	; 0x84
 8004b14:	461a      	mov	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	01db      	lsls	r3, r3, #7
 8004b24:	4413      	add	r3, r2
 8004b26:	3384      	adds	r3, #132	; 0x84
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004b38:	2304      	movs	r3, #4
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	e01b      	b.n	8004b76 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d102      	bne.n	8004b4c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004b46:	2303      	movs	r3, #3
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	e014      	b.n	8004b76 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d00b      	beq.n	8004b6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d007      	beq.n	8004b6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d003      	beq.n	8004b6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b68:	2b07      	cmp	r3, #7
 8004b6a:	d102      	bne.n	8004b72 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	e001      	b.n	8004b76 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	01db      	lsls	r3, r3, #7
 8004b80:	4413      	add	r3, r2
 8004b82:	3384      	adds	r3, #132	; 0x84
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	01d2      	lsls	r2, r2, #7
 8004b90:	440a      	add	r2, r1
 8004b92:	3284      	adds	r2, #132	; 0x84
 8004b94:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004b98:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	fb02 f303 	mul.w	r3, r2, r3
 8004ba4:	041a      	lsls	r2, r3, #16
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1acb      	subs	r3, r1, r3
 8004bb0:	69f9      	ldr	r1, [r7, #28]
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	3303      	adds	r3, #3
 8004bb8:	68f9      	ldr	r1, [r7, #12]
 8004bba:	6809      	ldr	r1, [r1, #0]
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	01c9      	lsls	r1, r1, #7
 8004bc2:	4401      	add	r1, r0
 8004bc4:	3184      	adds	r1, #132	; 0x84
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	01db      	lsls	r3, r3, #7
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3384      	adds	r3, #132	; 0x84
 8004bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	01db      	lsls	r3, r3, #7
 8004be4:	440b      	add	r3, r1
 8004be6:	3384      	adds	r3, #132	; 0x84
 8004be8:	4619      	mov	r1, r3
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <LTDC_SetConfig+0x330>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	01db      	lsls	r3, r3, #7
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3384      	adds	r3, #132	; 0x84
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	01db      	lsls	r3, r3, #7
 8004c10:	4413      	add	r3, r2
 8004c12:	3384      	adds	r3, #132	; 0x84
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	01d2      	lsls	r2, r2, #7
 8004c20:	440a      	add	r2, r1
 8004c22:	3284      	adds	r2, #132	; 0x84
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	6013      	str	r3, [r2, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3724      	adds	r7, #36	; 0x24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	fffff8f8 	.word	0xfffff8f8
 8004c3c:	fffff800 	.word	0xfffff800

08004c40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c4a:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6413      	str	r3, [r2, #64]	; 0x40
 8004c56:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004c62:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c6e:	f7fc fb5b 	bl	8001328 <HAL_GetTick>
 8004c72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c74:	e009      	b.n	8004c8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c76:	f7fc fb57 	bl	8001328 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c84:	d901      	bls.n	8004c8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e022      	b.n	8004cd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c96:	d1ee      	bne.n	8004c76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ca2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ca4:	f7fc fb40 	bl	8001328 <HAL_GetTick>
 8004ca8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004caa:	e009      	b.n	8004cc0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cac:	f7fc fb3c 	bl	8001328 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cba:	d901      	bls.n	8004cc0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e007      	b.n	8004cd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ccc:	d1ee      	bne.n	8004cac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40007000 	.word	0x40007000

08004ce0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004cec:	f7fc fb1c 	bl	8001328 <HAL_GetTick>
 8004cf0:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e073      	b.n	8004de4 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_QSPI_Init+0x2c>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e06b      	b.n	8004de4 <HAL_QSPI_Init+0x104>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10b      	bne.n	8004d38 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f007 fbdd 	bl	800c4e8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004d2e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f85e 	bl	8004df4 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	021a      	lsls	r2, r3, #8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2120      	movs	r1, #32
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f856 	bl	8004e10 <QSPI_WaitFlagStateUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d135      	bne.n	8004dda <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b1d      	ldr	r3, [pc, #116]	; (8004dec <HAL_QSPI_Init+0x10c>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6852      	ldr	r2, [r2, #4]
 8004d7c:	0611      	lsls	r1, r2, #24
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	4311      	orrs	r1, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	69d2      	ldr	r2, [r2, #28]
 8004d88:	4311      	orrs	r1, r2
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6a12      	ldr	r2, [r2, #32]
 8004d8e:	4311      	orrs	r1, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <HAL_QSPI_Init+0x110>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6912      	ldr	r2, [r2, #16]
 8004da6:	0411      	lsls	r1, r2, #16
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6952      	ldr	r2, [r2, #20]
 8004dac:	4311      	orrs	r1, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6992      	ldr	r2, [r2, #24]
 8004db2:	4311      	orrs	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	00ffff2f 	.word	0x00ffff2f
 8004df0:	ffe0f8fe 	.word	0xffe0f8fe

08004df4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004e20:	e01a      	b.n	8004e58 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d016      	beq.n	8004e58 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004e30:	f7fc fa7a 	bl	8001328 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d20b      	bcs.n	8004e58 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2204      	movs	r2, #4
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e00e      	b.n	8004e76 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf14      	ite	ne
 8004e66:	2301      	movne	r3, #1
 8004e68:	2300      	moveq	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1d6      	bne.n	8004e22 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e25c      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8087 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ea4:	4b96      	ldr	r3, [pc, #600]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d00c      	beq.n	8004eca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb0:	4b93      	ldr	r3, [pc, #588]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d112      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x62>
 8004ebc:	4b90      	ldr	r3, [pc, #576]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eca:	4b8d      	ldr	r3, [pc, #564]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d06c      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x130>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d168      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e236      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eea:	d106      	bne.n	8004efa <HAL_RCC_OscConfig+0x7a>
 8004eec:	4b84      	ldr	r3, [pc, #528]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a83      	ldr	r2, [pc, #524]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e02e      	b.n	8004f58 <HAL_RCC_OscConfig+0xd8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x9c>
 8004f02:	4b7f      	ldr	r3, [pc, #508]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7e      	ldr	r2, [pc, #504]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b7c      	ldr	r3, [pc, #496]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7b      	ldr	r2, [pc, #492]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e01d      	b.n	8004f58 <HAL_RCC_OscConfig+0xd8>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0xc0>
 8004f26:	4b76      	ldr	r3, [pc, #472]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a75      	ldr	r2, [pc, #468]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b73      	ldr	r3, [pc, #460]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a72      	ldr	r2, [pc, #456]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0xd8>
 8004f40:	4b6f      	ldr	r3, [pc, #444]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a6e      	ldr	r2, [pc, #440]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b6c      	ldr	r3, [pc, #432]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a6b      	ldr	r2, [pc, #428]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fc f9e2 	bl	8001328 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fc f9de 	bl	8001328 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e1ea      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b61      	ldr	r3, [pc, #388]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0xe8>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fc f9ce 	bl	8001328 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7fc f9ca 	bl	8001328 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1d6      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	4b57      	ldr	r3, [pc, #348]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x110>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d069      	beq.n	8005092 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fbe:	4b50      	ldr	r3, [pc, #320]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b4d      	ldr	r3, [pc, #308]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x190>
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x17a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1aa      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b41      	ldr	r3, [pc, #260]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	493d      	ldr	r1, [pc, #244]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e040      	b.n	8005092 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d023      	beq.n	8005060 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b39      	ldr	r3, [pc, #228]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a38      	ldr	r2, [pc, #224]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fc f980 	bl	8001328 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800502c:	f7fc f97c 	bl	8001328 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e188      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503e:	4b30      	ldr	r3, [pc, #192]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504a:	4b2d      	ldr	r3, [pc, #180]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4929      	ldr	r1, [pc, #164]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]
 800505e:	e018      	b.n	8005092 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005060:	4b27      	ldr	r3, [pc, #156]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fc f95c 	bl	8001328 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005074:	f7fc f958 	bl	8001328 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e164      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005086:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d038      	beq.n	8005110 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d019      	beq.n	80050da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	4a15      	ldr	r2, [pc, #84]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b2:	f7fc f939 	bl	8001328 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ba:	f7fc f935 	bl	8001328 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e141      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 80050ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x23a>
 80050d8:	e01a      	b.n	8005110 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050da:	4b09      	ldr	r3, [pc, #36]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 80050dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050de:	4a08      	ldr	r2, [pc, #32]	; (8005100 <HAL_RCC_OscConfig+0x280>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e6:	f7fc f91f 	bl	8001328 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ec:	e00a      	b.n	8005104 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ee:	f7fc f91b 	bl	8001328 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d903      	bls.n	8005104 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e127      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
 8005100:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005104:	4b94      	ldr	r3, [pc, #592]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ee      	bne.n	80050ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80a4 	beq.w	8005266 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800511e:	4b8e      	ldr	r3, [pc, #568]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10d      	bne.n	8005146 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800512a:	4b8b      	ldr	r3, [pc, #556]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a8a      	ldr	r2, [pc, #552]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	4b88      	ldr	r3, [pc, #544]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005146:	4b85      	ldr	r3, [pc, #532]	; (800535c <HAL_RCC_OscConfig+0x4dc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d118      	bne.n	8005184 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005152:	4b82      	ldr	r3, [pc, #520]	; (800535c <HAL_RCC_OscConfig+0x4dc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a81      	ldr	r2, [pc, #516]	; (800535c <HAL_RCC_OscConfig+0x4dc>)
 8005158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800515e:	f7fc f8e3 	bl	8001328 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005166:	f7fc f8df 	bl	8001328 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b64      	cmp	r3, #100	; 0x64
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e0eb      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005178:	4b78      	ldr	r3, [pc, #480]	; (800535c <HAL_RCC_OscConfig+0x4dc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d106      	bne.n	800519a <HAL_RCC_OscConfig+0x31a>
 800518c:	4b72      	ldr	r3, [pc, #456]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4a71      	ldr	r2, [pc, #452]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	6713      	str	r3, [r2, #112]	; 0x70
 8005198:	e02d      	b.n	80051f6 <HAL_RCC_OscConfig+0x376>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10c      	bne.n	80051bc <HAL_RCC_OscConfig+0x33c>
 80051a2:	4b6d      	ldr	r3, [pc, #436]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	4a6c      	ldr	r2, [pc, #432]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051a8:	f023 0301 	bic.w	r3, r3, #1
 80051ac:	6713      	str	r3, [r2, #112]	; 0x70
 80051ae:	4b6a      	ldr	r3, [pc, #424]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	4a69      	ldr	r2, [pc, #420]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051b4:	f023 0304 	bic.w	r3, r3, #4
 80051b8:	6713      	str	r3, [r2, #112]	; 0x70
 80051ba:	e01c      	b.n	80051f6 <HAL_RCC_OscConfig+0x376>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2b05      	cmp	r3, #5
 80051c2:	d10c      	bne.n	80051de <HAL_RCC_OscConfig+0x35e>
 80051c4:	4b64      	ldr	r3, [pc, #400]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	4a63      	ldr	r2, [pc, #396]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051ca:	f043 0304 	orr.w	r3, r3, #4
 80051ce:	6713      	str	r3, [r2, #112]	; 0x70
 80051d0:	4b61      	ldr	r3, [pc, #388]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	4a60      	ldr	r2, [pc, #384]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	6713      	str	r3, [r2, #112]	; 0x70
 80051dc:	e00b      	b.n	80051f6 <HAL_RCC_OscConfig+0x376>
 80051de:	4b5e      	ldr	r3, [pc, #376]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	4a5d      	ldr	r2, [pc, #372]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	6713      	str	r3, [r2, #112]	; 0x70
 80051ea:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4a5a      	ldr	r2, [pc, #360]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80051f0:	f023 0304 	bic.w	r3, r3, #4
 80051f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d015      	beq.n	800522a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fe:	f7fc f893 	bl	8001328 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005204:	e00a      	b.n	800521c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fc f88f 	bl	8001328 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e099      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521c:	4b4e      	ldr	r3, [pc, #312]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ee      	beq.n	8005206 <HAL_RCC_OscConfig+0x386>
 8005228:	e014      	b.n	8005254 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fc f87d 	bl	8001328 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005230:	e00a      	b.n	8005248 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005232:	f7fc f879 	bl	8001328 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e083      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005248:	4b43      	ldr	r3, [pc, #268]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1ee      	bne.n	8005232 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800525a:	4b3f      	ldr	r3, [pc, #252]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	4a3e      	ldr	r2, [pc, #248]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005264:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d06f      	beq.n	800534e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800526e:	4b3a      	ldr	r3, [pc, #232]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b08      	cmp	r3, #8
 8005278:	d067      	beq.n	800534a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d149      	bne.n	8005316 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005282:	4b35      	ldr	r3, [pc, #212]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a34      	ldr	r2, [pc, #208]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005288:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800528c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528e:	f7fc f84b 	bl	8001328 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005296:	f7fc f847 	bl	8001328 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e053      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f0      	bne.n	8005296 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	019b      	lsls	r3, r3, #6
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	4313      	orrs	r3, r2
 80052da:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80052dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052e0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052e2:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 80052e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ee:	f7fc f81b 	bl	8001328 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fc f817 	bl	8001328 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e023      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCC_OscConfig+0x476>
 8005314:	e01b      	b.n	800534e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005316:	4b10      	ldr	r3, [pc, #64]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a0f      	ldr	r2, [pc, #60]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 800531c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fc f801 	bl	8001328 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800532a:	f7fb fffd 	bl	8001328 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e009      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_RCC_OscConfig+0x4d8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0x4aa>
 8005348:	e001      	b.n	800534e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40023800 	.word	0x40023800
 800535c:	40007000 	.word	0x40007000

08005360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0ce      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005378:	4b69      	ldr	r3, [pc, #420]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d910      	bls.n	80053a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b66      	ldr	r3, [pc, #408]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f023 020f 	bic.w	r2, r3, #15
 800538e:	4964      	ldr	r1, [pc, #400]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b62      	ldr	r3, [pc, #392]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0b6      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d020      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c0:	4b58      	ldr	r3, [pc, #352]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4a57      	ldr	r2, [pc, #348]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d8:	4b52      	ldr	r3, [pc, #328]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4a51      	ldr	r2, [pc, #324]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e4:	4b4f      	ldr	r3, [pc, #316]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	494c      	ldr	r1, [pc, #304]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d040      	beq.n	8005484 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	4b46      	ldr	r3, [pc, #280]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d115      	bne.n	8005442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e07d      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d107      	bne.n	8005432 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005422:	4b40      	ldr	r3, [pc, #256]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e071      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005432:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e069      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005442:	4b38      	ldr	r3, [pc, #224]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f023 0203 	bic.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4935      	ldr	r1, [pc, #212]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005454:	f7fb ff68 	bl	8001328 <HAL_GetTick>
 8005458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	e00a      	b.n	8005472 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545c:	f7fb ff64 	bl	8001328 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	f241 3288 	movw	r2, #5000	; 0x1388
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e051      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	4b2c      	ldr	r3, [pc, #176]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 020c 	and.w	r2, r3, #12
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	429a      	cmp	r2, r3
 8005482:	d1eb      	bne.n	800545c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005484:	4b26      	ldr	r3, [pc, #152]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d210      	bcs.n	80054b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b23      	ldr	r3, [pc, #140]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 020f 	bic.w	r2, r3, #15
 800549a:	4921      	ldr	r1, [pc, #132]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <HAL_RCC_ClockConfig+0x1c0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e030      	b.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c0:	4b18      	ldr	r3, [pc, #96]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4915      	ldr	r1, [pc, #84]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054de:	4b11      	ldr	r3, [pc, #68]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	490d      	ldr	r1, [pc, #52]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054f2:	f000 f81d 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 80054f6:	4601      	mov	r1, r0
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005504:	5cd3      	ldrb	r3, [r2, r3]
 8005506:	fa21 f303 	lsr.w	r3, r1, r3
 800550a:	4a08      	ldr	r2, [pc, #32]	; (800552c <HAL_RCC_ClockConfig+0x1cc>)
 800550c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800550e:	2000      	movs	r0, #0
 8005510:	f007 fbfc 	bl	800cd0c <HAL_InitTick>

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40023c00 	.word	0x40023c00
 8005524:	40023800 	.word	0x40023800
 8005528:	0800f664 	.word	0x0800f664
 800552c:	2000000c 	.word	0x2000000c

08005530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	2300      	movs	r3, #0
 8005540:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005546:	4b50      	ldr	r3, [pc, #320]	; (8005688 <HAL_RCC_GetSysClockFreq+0x158>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b04      	cmp	r3, #4
 8005550:	d007      	beq.n	8005562 <HAL_RCC_GetSysClockFreq+0x32>
 8005552:	2b08      	cmp	r3, #8
 8005554:	d008      	beq.n	8005568 <HAL_RCC_GetSysClockFreq+0x38>
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 808d 	bne.w	8005676 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800555c:	4b4b      	ldr	r3, [pc, #300]	; (800568c <HAL_RCC_GetSysClockFreq+0x15c>)
 800555e:	60bb      	str	r3, [r7, #8]
       break;
 8005560:	e08c      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005562:	4b4b      	ldr	r3, [pc, #300]	; (8005690 <HAL_RCC_GetSysClockFreq+0x160>)
 8005564:	60bb      	str	r3, [r7, #8]
      break;
 8005566:	e089      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005568:	4b47      	ldr	r3, [pc, #284]	; (8005688 <HAL_RCC_GetSysClockFreq+0x158>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005570:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005572:	4b45      	ldr	r3, [pc, #276]	; (8005688 <HAL_RCC_GetSysClockFreq+0x158>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d023      	beq.n	80055c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800557e:	4b42      	ldr	r3, [pc, #264]	; (8005688 <HAL_RCC_GetSysClockFreq+0x158>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	099b      	lsrs	r3, r3, #6
 8005584:	f04f 0400 	mov.w	r4, #0
 8005588:	f240 11ff 	movw	r1, #511	; 0x1ff
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	ea03 0501 	and.w	r5, r3, r1
 8005594:	ea04 0602 	and.w	r6, r4, r2
 8005598:	4a3d      	ldr	r2, [pc, #244]	; (8005690 <HAL_RCC_GetSysClockFreq+0x160>)
 800559a:	fb02 f106 	mul.w	r1, r2, r6
 800559e:	2200      	movs	r2, #0
 80055a0:	fb02 f205 	mul.w	r2, r2, r5
 80055a4:	440a      	add	r2, r1
 80055a6:	493a      	ldr	r1, [pc, #232]	; (8005690 <HAL_RCC_GetSysClockFreq+0x160>)
 80055a8:	fba5 0101 	umull	r0, r1, r5, r1
 80055ac:	1853      	adds	r3, r2, r1
 80055ae:	4619      	mov	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	461a      	mov	r2, r3
 80055b8:	4623      	mov	r3, r4
 80055ba:	f7fa fe79 	bl	80002b0 <__aeabi_uldivmod>
 80055be:	4603      	mov	r3, r0
 80055c0:	460c      	mov	r4, r1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	e049      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c6:	4b30      	ldr	r3, [pc, #192]	; (8005688 <HAL_RCC_GetSysClockFreq+0x158>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	f04f 0400 	mov.w	r4, #0
 80055d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	ea03 0501 	and.w	r5, r3, r1
 80055dc:	ea04 0602 	and.w	r6, r4, r2
 80055e0:	4629      	mov	r1, r5
 80055e2:	4632      	mov	r2, r6
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	f04f 0400 	mov.w	r4, #0
 80055ec:	0154      	lsls	r4, r2, #5
 80055ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055f2:	014b      	lsls	r3, r1, #5
 80055f4:	4619      	mov	r1, r3
 80055f6:	4622      	mov	r2, r4
 80055f8:	1b49      	subs	r1, r1, r5
 80055fa:	eb62 0206 	sbc.w	r2, r2, r6
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	f04f 0400 	mov.w	r4, #0
 8005606:	0194      	lsls	r4, r2, #6
 8005608:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800560c:	018b      	lsls	r3, r1, #6
 800560e:	1a5b      	subs	r3, r3, r1
 8005610:	eb64 0402 	sbc.w	r4, r4, r2
 8005614:	f04f 0100 	mov.w	r1, #0
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	00e2      	lsls	r2, r4, #3
 800561e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005622:	00d9      	lsls	r1, r3, #3
 8005624:	460b      	mov	r3, r1
 8005626:	4614      	mov	r4, r2
 8005628:	195b      	adds	r3, r3, r5
 800562a:	eb44 0406 	adc.w	r4, r4, r6
 800562e:	f04f 0100 	mov.w	r1, #0
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	02a2      	lsls	r2, r4, #10
 8005638:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800563c:	0299      	lsls	r1, r3, #10
 800563e:	460b      	mov	r3, r1
 8005640:	4614      	mov	r4, r2
 8005642:	4618      	mov	r0, r3
 8005644:	4621      	mov	r1, r4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f04f 0400 	mov.w	r4, #0
 800564c:	461a      	mov	r2, r3
 800564e:	4623      	mov	r3, r4
 8005650:	f7fa fe2e 	bl	80002b0 <__aeabi_uldivmod>
 8005654:	4603      	mov	r3, r0
 8005656:	460c      	mov	r4, r1
 8005658:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_GetSysClockFreq+0x158>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	3301      	adds	r3, #1
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	60bb      	str	r3, [r7, #8]
      break;
 8005674:	e002      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005678:	60bb      	str	r3, [r7, #8]
      break;
 800567a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567c:	68bb      	ldr	r3, [r7, #8]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	017d7840 	.word	0x017d7840

08005694 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	2000000c 	.word	0x2000000c

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4601      	mov	r1, r0
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a9b      	lsrs	r3, r3, #10
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4a03      	ldr	r2, [pc, #12]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c2:	5cd3      	ldrb	r3, [r2, r3]
 80056c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40023800 	.word	0x40023800
 80056d0:	0800f674 	.word	0x0800f674

080056d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d8:	f7ff ffdc 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056dc:	4601      	mov	r1, r0
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0b5b      	lsrs	r3, r3, #13
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4a03      	ldr	r2, [pc, #12]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40023800 	.word	0x40023800
 80056f8:	0800f674 	.word	0x0800f674

080056fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	220f      	movs	r2, #15
 800570a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800570c:	4b12      	ldr	r3, [pc, #72]	; (8005758 <HAL_RCC_GetClockConfig+0x5c>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0203 	and.w	r2, r3, #3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005718:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <HAL_RCC_GetClockConfig+0x5c>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005724:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <HAL_RCC_GetClockConfig+0x5c>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005730:	4b09      	ldr	r3, [pc, #36]	; (8005758 <HAL_RCC_GetClockConfig+0x5c>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	08db      	lsrs	r3, r3, #3
 8005736:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <HAL_RCC_GetClockConfig+0x60>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 020f 	and.w	r2, r3, #15
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	40023c00 	.word	0x40023c00

08005760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d012      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005788:	4b69      	ldr	r3, [pc, #420]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4a68      	ldr	r2, [pc, #416]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005792:	6093      	str	r3, [r2, #8]
 8005794:	4b66      	ldr	r3, [pc, #408]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	4964      	ldr	r1, [pc, #400]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057aa:	2301      	movs	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d017      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057ba:	4b5d      	ldr	r3, [pc, #372]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	4959      	ldr	r1, [pc, #356]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d8:	d101      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80057da:	2301      	movs	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d017      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057f6:	4b4e      	ldr	r3, [pc, #312]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	494a      	ldr	r1, [pc, #296]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005814:	d101      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005816:	2301      	movs	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005822:	2301      	movs	r3, #1
 8005824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 808b 	beq.w	800595a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005844:	4b3a      	ldr	r3, [pc, #232]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	4a39      	ldr	r2, [pc, #228]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	6413      	str	r3, [r2, #64]	; 0x40
 8005850:	4b37      	ldr	r3, [pc, #220]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800585c:	4b35      	ldr	r3, [pc, #212]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a34      	ldr	r2, [pc, #208]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005868:	f7fb fd5e 	bl	8001328 <HAL_GetTick>
 800586c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005870:	f7fb fd5a 	bl	8001328 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e355      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005882:	4b2c      	ldr	r3, [pc, #176]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800588e:	4b28      	ldr	r3, [pc, #160]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005896:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d035      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d02e      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ac:	4b20      	ldr	r3, [pc, #128]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058b6:	4b1e      	ldr	r3, [pc, #120]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a1a      	ldr	r2, [pc, #104]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058d4:	4b16      	ldr	r3, [pc, #88]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d114      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fb fd22 	bl	8001328 <HAL_GetTick>
 80058e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e6:	e00a      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e8:	f7fb fd1e 	bl	8001328 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e317      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ee      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005916:	d111      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005926:	400b      	ands	r3, r1
 8005928:	4901      	ldr	r1, [pc, #4]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592a:	4313      	orrs	r3, r2
 800592c:	608b      	str	r3, [r1, #8]
 800592e:	e00b      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005930:	40023800 	.word	0x40023800
 8005934:	40007000 	.word	0x40007000
 8005938:	0ffffcff 	.word	0x0ffffcff
 800593c:	4bb0      	ldr	r3, [pc, #704]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4aaf      	ldr	r2, [pc, #700]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005942:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005946:	6093      	str	r3, [r2, #8]
 8005948:	4bad      	ldr	r3, [pc, #692]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800594a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005954:	49aa      	ldr	r1, [pc, #680]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005956:	4313      	orrs	r3, r2
 8005958:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005966:	4ba6      	ldr	r3, [pc, #664]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800596c:	4aa4      	ldr	r2, [pc, #656]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800596e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005972:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005976:	4ba2      	ldr	r3, [pc, #648]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005978:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	499f      	ldr	r1, [pc, #636]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005994:	4b9a      	ldr	r3, [pc, #616]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a2:	4997      	ldr	r1, [pc, #604]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059b6:	4b92      	ldr	r3, [pc, #584]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c4:	498e      	ldr	r1, [pc, #568]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059d8:	4b89      	ldr	r3, [pc, #548]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e6:	4986      	ldr	r1, [pc, #536]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059fa:	4b81      	ldr	r3, [pc, #516]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a08:	497d      	ldr	r1, [pc, #500]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a1c:	4b78      	ldr	r3, [pc, #480]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	f023 0203 	bic.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	4975      	ldr	r1, [pc, #468]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a3e:	4b70      	ldr	r3, [pc, #448]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a44:	f023 020c 	bic.w	r2, r3, #12
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4c:	496c      	ldr	r1, [pc, #432]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a60:	4b67      	ldr	r3, [pc, #412]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	4964      	ldr	r1, [pc, #400]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a82:	4b5f      	ldr	r3, [pc, #380]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a90:	495b      	ldr	r1, [pc, #364]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aa4:	4b56      	ldr	r3, [pc, #344]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	4953      	ldr	r1, [pc, #332]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ac6:	4b4e      	ldr	r3, [pc, #312]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005acc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad4:	494a      	ldr	r1, [pc, #296]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ae8:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	4942      	ldr	r1, [pc, #264]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b0a:	4b3d      	ldr	r3, [pc, #244]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b18:	4939      	ldr	r1, [pc, #228]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b2c:	4b34      	ldr	r3, [pc, #208]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b3a:	4931      	ldr	r1, [pc, #196]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d011      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b4e:	4b2c      	ldr	r3, [pc, #176]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5c:	4928      	ldr	r1, [pc, #160]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b8e:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9c:	4918      	ldr	r1, [pc, #96]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bb0:	4b13      	ldr	r3, [pc, #76]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bc0:	490f      	ldr	r1, [pc, #60]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d005      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bd6:	f040 80d8 	bne.w	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a08      	ldr	r2, [pc, #32]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005be0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be6:	f7fb fb9f 	bl	8001328 <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bee:	f7fb fb9b 	bl	8001328 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b64      	cmp	r3, #100	; 0x64
 8005bfa:	d903      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e196      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c04:	4b6c      	ldr	r3, [pc, #432]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1ee      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d021      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11d      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c24:	4b64      	ldr	r3, [pc, #400]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c32:	4b61      	ldr	r3, [pc, #388]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c38:	0e1b      	lsrs	r3, r3, #24
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	019a      	lsls	r2, r3, #6
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	061b      	lsls	r3, r3, #24
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	071b      	lsls	r3, r3, #28
 8005c58:	4957      	ldr	r1, [pc, #348]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c74:	d00a      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d02e      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c8a:	d129      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c8c:	4b4a      	ldr	r3, [pc, #296]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c92:	0c1b      	lsrs	r3, r3, #16
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c9a:	4b47      	ldr	r3, [pc, #284]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca0:	0f1b      	lsrs	r3, r3, #28
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	019a      	lsls	r2, r3, #6
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	041b      	lsls	r3, r3, #16
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	061b      	lsls	r3, r3, #24
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	071b      	lsls	r3, r3, #28
 8005cc0:	493d      	ldr	r1, [pc, #244]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cce:	f023 021f 	bic.w	r2, r3, #31
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	4937      	ldr	r1, [pc, #220]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01d      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cec:	4b32      	ldr	r3, [pc, #200]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf2:	0e1b      	lsrs	r3, r3, #24
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cfa:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d00:	0f1b      	lsrs	r3, r3, #28
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	019a      	lsls	r2, r3, #6
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	431a      	orrs	r2, r3
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	061b      	lsls	r3, r3, #24
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	071b      	lsls	r3, r3, #28
 8005d20:	4925      	ldr	r1, [pc, #148]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d011      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	019a      	lsls	r2, r3, #6
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	041b      	lsls	r3, r3, #16
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	071b      	lsls	r3, r3, #28
 8005d50:	4919      	ldr	r1, [pc, #100]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d58:	4b17      	ldr	r3, [pc, #92]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d64:	f7fb fae0 	bl	8001328 <HAL_GetTick>
 8005d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d6c:	f7fb fadc 	bl	8001328 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b64      	cmp	r3, #100	; 0x64
 8005d78:	d901      	bls.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e0d7      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d7e:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	f040 80cd 	bne.w	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9e:	f7fb fac3 	bl	8001328 <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005da4:	e00a      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005da6:	f7fb fabf 	bl	8001328 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b64      	cmp	r3, #100	; 0x64
 8005db2:	d903      	bls.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e0ba      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005db8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dbc:	4b5e      	ldr	r3, [pc, #376]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc8:	d0ed      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02e      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d12a      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005df2:	4b51      	ldr	r3, [pc, #324]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e00:	4b4d      	ldr	r3, [pc, #308]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	0f1b      	lsrs	r3, r3, #28
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	019a      	lsls	r2, r3, #6
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	071b      	lsls	r3, r3, #28
 8005e26:	4944      	ldr	r1, [pc, #272]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e2e:	4b42      	ldr	r3, [pc, #264]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	493d      	ldr	r1, [pc, #244]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d022      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e5c:	d11d      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e5e:	4b36      	ldr	r3, [pc, #216]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	0e1b      	lsrs	r3, r3, #24
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	0f1b      	lsrs	r3, r3, #28
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	019a      	lsls	r2, r3, #6
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	431a      	orrs	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	061b      	lsls	r3, r3, #24
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	071b      	lsls	r3, r3, #28
 8005e92:	4929      	ldr	r1, [pc, #164]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d028      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ea6:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	0e1b      	lsrs	r3, r3, #24
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005eb4:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	0c1b      	lsrs	r3, r3, #16
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	019a      	lsls	r2, r3, #6
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	061b      	lsls	r3, r3, #24
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	071b      	lsls	r3, r3, #28
 8005eda:	4917      	ldr	r1, [pc, #92]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	4911      	ldr	r1, [pc, #68]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a0e      	ldr	r2, [pc, #56]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f04:	f7fb fa10 	bl	8001328 <HAL_GetTick>
 8005f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f0c:	f7fb fa0c 	bl	8001328 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	; 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e007      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f2a:	d1ef      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40023800 	.word	0x40023800

08005f3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f5a:	f040 8086 	bne.w	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005f5e:	4b8d      	ldr	r3, [pc, #564]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f64:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f6c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f74:	d03e      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8005f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f7a:	d073      	beq.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d000      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005f80:	e074      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f82:	4b84      	ldr	r3, [pc, #528]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d108      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f8e:	4b81      	ldr	r3, [pc, #516]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f96:	4a80      	ldr	r2, [pc, #512]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	e007      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005fa0:	4b7c      	ldr	r3, [pc, #496]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa8:	4a7c      	ldr	r2, [pc, #496]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005fb0:	4b78      	ldr	r3, [pc, #480]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	0e1b      	lsrs	r3, r3, #24
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005fbe:	4b75      	ldr	r3, [pc, #468]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc4:	099b      	lsrs	r3, r3, #6
 8005fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	fb02 f203 	mul.w	r2, r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005fd8:	4b6e      	ldr	r3, [pc, #440]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]
        break;
 8005ff2:	e03b      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005ff4:	4b67      	ldr	r3, [pc, #412]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d108      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006000:	4b64      	ldr	r3, [pc, #400]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006008:	4a63      	ldr	r2, [pc, #396]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800600a:	fbb2 f3f3 	udiv	r3, r2, r3
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	e007      	b.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006012:	4b60      	ldr	r3, [pc, #384]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800601a:	4a60      	ldr	r2, [pc, #384]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006022:	4b5c      	ldr	r3, [pc, #368]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006028:	0e1b      	lsrs	r3, r3, #24
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006030:	4b58      	ldr	r3, [pc, #352]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	fb02 f203 	mul.w	r2, r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800604a:	4b52      	ldr	r3, [pc, #328]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800604c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]
        break;
 8006062:	e003      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006064:	4b4e      	ldr	r3, [pc, #312]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006066:	617b      	str	r3, [r7, #20]
        break;
 8006068:	e000      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800606a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006072:	f040 8086 	bne.w	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006076:	4b47      	ldr	r3, [pc, #284]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800607c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006084:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800608c:	d03e      	beq.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800608e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006092:	d073      	beq.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d000      	beq.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006098:	e074      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800609a:	4b3e      	ldr	r3, [pc, #248]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d108      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060a6:	4b3b      	ldr	r3, [pc, #236]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ae:	4a3a      	ldr	r2, [pc, #232]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80060b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	e007      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80060b8:	4b36      	ldr	r3, [pc, #216]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c0:	4a36      	ldr	r2, [pc, #216]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80060c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80060c8:	4b32      	ldr	r3, [pc, #200]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	0e1b      	lsrs	r3, r3, #24
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80060d6:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	099b      	lsrs	r3, r3, #6
 80060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	fb02 f203 	mul.w	r2, r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ee:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80060f0:	4b28      	ldr	r3, [pc, #160]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	f003 031f 	and.w	r3, r3, #31
 80060fc:	3301      	adds	r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	fbb2 f3f3 	udiv	r3, r2, r3
 8006108:	617b      	str	r3, [r7, #20]
        break;
 800610a:	e03b      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800610c:	4b21      	ldr	r3, [pc, #132]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d108      	bne.n	800612a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006118:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006120:	4a1d      	ldr	r2, [pc, #116]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006122:	fbb2 f3f3 	udiv	r3, r2, r3
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	e007      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800612a:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800613a:	4b16      	ldr	r3, [pc, #88]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800613c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006140:	0e1b      	lsrs	r3, r3, #24
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006148:	4b12      	ldr	r3, [pc, #72]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800614a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614e:	099b      	lsrs	r3, r3, #6
 8006150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	fb02 f203 	mul.w	r2, r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	3301      	adds	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
        break;
 800617a:	e003      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800617c:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800617e:	617b      	str	r3, [r7, #20]
        break;
 8006180:	e000      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006182:	bf00      	nop

  return frequency;
 8006184:	697b      	ldr	r3, [r7, #20]
}
 8006186:	4618      	mov	r0, r3
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40023800 	.word	0x40023800
 8006198:	00f42400 	.word	0x00f42400
 800619c:	017d7840 	.word	0x017d7840
 80061a0:	00bb8000 	.word	0x00bb8000

080061a4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e01c      	b.n	80061f0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	795b      	ldrb	r3, [r3, #5]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f006 fa1e 	bl	800c608 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0204 	orr.w	r2, r2, #4
 80061e0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	791b      	ldrb	r3, [r3, #4]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_RNG_GenerateRandomNumber+0x1a>
 800620e:	2302      	movs	r3, #2
 8006210:	e03d      	b.n	800628e <HAL_RNG_GenerateRandomNumber+0x96>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	795b      	ldrb	r3, [r3, #5]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b01      	cmp	r3, #1
 8006220:	d12c      	bne.n	800627c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006228:	f7fb f87e 	bl	8001328 <HAL_GetTick>
 800622c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800622e:	e011      	b.n	8006254 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006230:	f7fb f87a 	bl	8001328 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d90a      	bls.n	8006254 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e01c      	b.n	800628e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b01      	cmp	r3, #1
 8006260:	d1e6      	bne.n	8006230 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	715a      	strb	r2, [r3, #5]
 800627a:	e004      	b.n	8006286 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2204      	movs	r2, #4
 8006280:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	711a      	strb	r2, [r3, #4]

  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	330c      	adds	r3, #12
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff ffa7 	bl	80061f8 <HAL_RNG_GenerateRandomNumber>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	e000      	b.n	80062b8 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 80062b6:	2300      	movs	r3, #0
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e06b      	b.n	80063aa <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7f5b      	ldrb	r3, [r3, #29]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f006 f9b0 	bl	800c648 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	22ca      	movs	r2, #202	; 0xca
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2253      	movs	r2, #83	; 0x53
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fb00 	bl	8006904 <RTC_EnterInitMode>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	22ff      	movs	r2, #255	; 0xff
 8006310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2204      	movs	r2, #4
 8006316:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e046      	b.n	80063aa <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4b23      	ldr	r3, [pc, #140]	; (80063b4 <HAL_RTC_Init+0xf4>)
 8006328:	400b      	ands	r3, r1
 800632a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6899      	ldr	r1, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	68d2      	ldr	r2, [r2, #12]
 8006352:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6919      	ldr	r1, [r3, #16]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	041a      	lsls	r2, r3, #16
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006376:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0208 	bic.w	r2, r2, #8
 8006386:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	22ff      	movs	r2, #255	; 0xff
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80063a8:	2300      	movs	r3, #0
  }
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	ff8fffbf 	.word	0xff8fffbf

080063b8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063b8:	b590      	push	{r4, r7, lr}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	7f1b      	ldrb	r3, [r3, #28]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_RTC_SetTime+0x1c>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0a8      	b.n	8006526 <HAL_RTC_SetTime+0x16e>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2202      	movs	r2, #2
 80063de:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d126      	bne.n	8006434 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 faac 	bl	800695c <RTC_ByteToBcd2>
 8006404:	4603      	mov	r3, r0
 8006406:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 faa5 	bl	800695c <RTC_ByteToBcd2>
 8006412:	4603      	mov	r3, r0
 8006414:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8006416:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	789b      	ldrb	r3, [r3, #2]
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fa9d 	bl	800695c <RTC_ByteToBcd2>
 8006422:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8006424:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	7b1b      	ldrb	r3, [r3, #12]
 800642c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	e018      	b.n	8006466 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006454:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800645a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	7b1b      	ldrb	r3, [r3, #12]
 8006460:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	22ca      	movs	r2, #202	; 0xca
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2253      	movs	r2, #83	; 0x53
 8006474:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa44 	bl	8006904 <RTC_EnterInitMode>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2204      	movs	r2, #4
 800648e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e045      	b.n	8006526 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	6979      	ldr	r1, [r7, #20]
 80064a0:	4b23      	ldr	r3, [pc, #140]	; (8006530 <HAL_RTC_SetTime+0x178>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6899      	ldr	r1, [r3, #8]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d111      	bne.n	8006510 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f9e1 	bl	80068b4 <HAL_RTC_WaitForSynchro>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	22ff      	movs	r2, #255	; 0xff
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2204      	movs	r2, #4
 8006504:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e00a      	b.n	8006526 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	22ff      	movs	r2, #255	; 0xff
 8006516:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006524:	2300      	movs	r3, #0
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd90      	pop	{r4, r7, pc}
 800652e:	bf00      	nop
 8006530:	007f7f7f 	.word	0x007f7f7f

08006534 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8006540:	2300      	movs	r3, #0
 8006542:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7f1b      	ldrb	r3, [r3, #28]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_RTC_SetDate+0x1c>
 800654c:	2302      	movs	r3, #2
 800654e:	e092      	b.n	8006676 <HAL_RTC_SetDate+0x142>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2202      	movs	r2, #2
 800655a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10e      	bne.n	8006580 <HAL_RTC_SetDate+0x4c>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	785b      	ldrb	r3, [r3, #1]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	f023 0310 	bic.w	r3, r3, #16
 8006576:	b2db      	uxtb	r3, r3
 8006578:	330a      	adds	r3, #10
 800657a:	b2da      	uxtb	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d11c      	bne.n	80065c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	78db      	ldrb	r3, [r3, #3]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 f9e6 	bl	800695c <RTC_ByteToBcd2>
 8006590:	4603      	mov	r3, r0
 8006592:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	785b      	ldrb	r3, [r3, #1]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 f9df 	bl	800695c <RTC_ByteToBcd2>
 800659e:	4603      	mov	r3, r0
 80065a0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80065a2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	789b      	ldrb	r3, [r3, #2]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f9d7 	bl	800695c <RTC_ByteToBcd2>
 80065ae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80065b0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e00e      	b.n	80065de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	78db      	ldrb	r3, [r3, #3]
 80065c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80065cc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80065d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	22ca      	movs	r2, #202	; 0xca
 80065e4:	625a      	str	r2, [r3, #36]	; 0x24
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2253      	movs	r2, #83	; 0x53
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f988 	bl	8006904 <RTC_EnterInitMode>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2204      	movs	r2, #4
 8006606:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e031      	b.n	8006676 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	4b19      	ldr	r3, [pc, #100]	; (8006680 <HAL_RTC_SetDate+0x14c>)
 800661a:	400b      	ands	r3, r1
 800661c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d111      	bne.n	8006660 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f939 	bl	80068b4 <HAL_RTC_WaitForSynchro>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	22ff      	movs	r2, #255	; 0xff
 800664e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2204      	movs	r2, #4
 8006654:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e00a      	b.n	8006676 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	22ff      	movs	r2, #255	; 0xff
 8006666:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006674:	2300      	movs	r3, #0
  }
}
 8006676:	4618      	mov	r0, r3
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	bd90      	pop	{r4, r7, pc}
 800667e:	bf00      	nop
 8006680:	00ffff3f 	.word	0x00ffff3f

08006684 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b089      	sub	sp, #36	; 0x24
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	7f1b      	ldrb	r3, [r3, #28]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_RTC_SetAlarm+0x24>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e101      	b.n	80068ac <HAL_RTC_SetAlarm+0x228>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2202      	movs	r2, #2
 80066b2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d137      	bne.n	800672a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f942 	bl	800695c <RTC_ByteToBcd2>
 80066d8:	4603      	mov	r3, r0
 80066da:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 f93b 	bl	800695c <RTC_ByteToBcd2>
 80066e6:	4603      	mov	r3, r0
 80066e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80066ea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	789b      	ldrb	r3, [r3, #2]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 f933 	bl	800695c <RTC_ByteToBcd2>
 80066f6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80066f8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	7b1b      	ldrb	r3, [r3, #12]
 8006700:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006702:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800670c:	4618      	mov	r0, r3
 800670e:	f000 f925 	bl	800695c <RTC_ByteToBcd2>
 8006712:	4603      	mov	r3, r0
 8006714:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006716:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800671e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006724:	4313      	orrs	r3, r2
 8006726:	61fb      	str	r3, [r7, #28]
 8006728:	e023      	b.n	8006772 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800674a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006750:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	7b1b      	ldrb	r3, [r3, #12]
 8006756:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006758:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006760:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006762:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006768:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800676e:	4313      	orrs	r3, r2
 8006770:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	22ca      	movs	r2, #202	; 0xca
 8006784:	625a      	str	r2, [r3, #36]	; 0x24
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2253      	movs	r2, #83	; 0x53
 800678c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006796:	d13f      	bne.n	8006818 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067a6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067b6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067b8:	f7fa fdb6 	bl	8001328 <HAL_GetTick>
 80067bc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80067be:	e013      	b.n	80067e8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067c0:	f7fa fdb2 	bl	8001328 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ce:	d90b      	bls.n	80067e8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	22ff      	movs	r2, #255	; 0xff
 80067d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2203      	movs	r2, #3
 80067dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e061      	b.n	80068ac <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0e4      	beq.n	80067c0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006814:	609a      	str	r2, [r3, #8]
 8006816:	e03e      	b.n	8006896 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006826:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006836:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006838:	f7fa fd76 	bl	8001328 <HAL_GetTick>
 800683c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800683e:	e013      	b.n	8006868 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006840:	f7fa fd72 	bl	8001328 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800684e:	d90b      	bls.n	8006868 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2203      	movs	r2, #3
 800685c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e021      	b.n	80068ac <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0e4      	beq.n	8006840 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006894:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	22ff      	movs	r2, #255	; 0xff
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3724      	adds	r7, #36	; 0x24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd90      	pop	{r4, r7, pc}

080068b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068d0:	f7fa fd2a 	bl	8001328 <HAL_GetTick>
 80068d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80068d6:	e009      	b.n	80068ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80068d8:	f7fa fd26 	bl	8001328 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068e6:	d901      	bls.n	80068ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e007      	b.n	80068fc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0ee      	beq.n	80068d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d119      	bne.n	8006952 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006928:	f7fa fcfe 	bl	8001328 <HAL_GetTick>
 800692c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800692e:	e009      	b.n	8006944 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006930:	f7fa fcfa 	bl	8001328 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800693e:	d901      	bls.n	8006944 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e007      	b.n	8006954 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0ee      	beq.n	8006930 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800696a:	e005      	b.n	8006978 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	3b0a      	subs	r3, #10
 8006976:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	2b09      	cmp	r3, #9
 800697c:	d8f6      	bhi.n	800696c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	b2da      	uxtb	r2, r3
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	4313      	orrs	r3, r2
 800698a:	b2db      	uxtb	r3, r3
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	7f1b      	ldrb	r3, [r3, #28]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_RTCEx_SetTimeStamp+0x1c>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e03e      	b.n	8006a32 <HAL_RTCEx_SetTimeStamp+0x9a>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2202      	movs	r2, #2
 80069be:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	4b1e      	ldr	r3, [pc, #120]	; (8006a40 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	22ca      	movs	r2, #202	; 0xca
 80069da:	625a      	str	r2, [r3, #36]	; 0x24
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2253      	movs	r2, #83	; 0x53
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0206 	bic.w	r2, r2, #6
 80069f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a1a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	22ff      	movs	r2, #255	; 0xff
 8006a22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	fffff7f7 	.word	0xfffff7f7

08006a44 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e149      	b.n	8006cf6 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f006 f8de 	bl	800cc38 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f94f 	bl	8006d28 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d007      	beq.n	8006aa2 <HAL_SAI_Init+0x5e>
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d302      	bcc.n	8006a9c <HAL_SAI_Init+0x58>
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d006      	beq.n	8006aa8 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8006a9a:	e008      	b.n	8006aae <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61fb      	str	r3, [r7, #28]
      break;
 8006aa0:	e005      	b.n	8006aae <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	61fb      	str	r3, [r7, #28]
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	61fb      	str	r3, [r7, #28]
      break;
 8006aac:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d81d      	bhi.n	8006af2 <HAL_SAI_Init+0xae>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <HAL_SAI_Init+0x78>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006ad3 	.word	0x08006ad3
 8006ac4:	08006adb 	.word	0x08006adb
 8006ac8:	08006ae3 	.word	0x08006ae3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
      }
      break;
 8006ad0:	e010      	b.n	8006af4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8006ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ad6:	617b      	str	r3, [r7, #20]
      }
      break;
 8006ad8:	e00c      	b.n	8006af4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ade:	617b      	str	r3, [r7, #20]
      }
      break;
 8006ae0:	e008      	b.n	8006af4 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006ae2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ae6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	61fb      	str	r3, [r7, #28]
      }
      break;
 8006af0:	e000      	b.n	8006af4 <HAL_SAI_Init+0xb0>
  default:
    break;
 8006af2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a81      	ldr	r2, [pc, #516]	; (8006d00 <HAL_SAI_Init+0x2bc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_SAI_Init+0xc4>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a80      	ldr	r2, [pc, #512]	; (8006d04 <HAL_SAI_Init+0x2c0>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d103      	bne.n	8006b10 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8006b08:	4a7f      	ldr	r2, [pc, #508]	; (8006d08 <HAL_SAI_Init+0x2c4>)
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	e002      	b.n	8006b16 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006b10:	4a7e      	ldr	r2, [pc, #504]	; (8006d0c <HAL_SAI_Init+0x2c8>)
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d043      	beq.n	8006ba6 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a76      	ldr	r2, [pc, #472]	; (8006d00 <HAL_SAI_Init+0x2bc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_SAI_Init+0xf2>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a74      	ldr	r2, [pc, #464]	; (8006d04 <HAL_SAI_Init+0x2c0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d104      	bne.n	8006b40 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006b36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006b3a:	f7ff f9ff 	bl	8005f3c <HAL_RCCEx_GetPeriphCLKFreq>
 8006b3e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a72      	ldr	r2, [pc, #456]	; (8006d10 <HAL_SAI_Init+0x2cc>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_SAI_Init+0x110>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a71      	ldr	r2, [pc, #452]	; (8006d14 <HAL_SAI_Init+0x2d0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d104      	bne.n	8006b5e <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006b54:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006b58:	f7ff f9f0 	bl	8005f3c <HAL_RCCEx_GetPeriphCLKFreq>
 8006b5c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4613      	mov	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	461a      	mov	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	025b      	lsls	r3, r3, #9
 8006b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b74:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a67      	ldr	r2, [pc, #412]	; (8006d18 <HAL_SAI_Init+0x2d4>)
 8006b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7e:	08da      	lsrs	r2, r3, #3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8006b84:	68f9      	ldr	r1, [r7, #12]
 8006b86:	4b64      	ldr	r3, [pc, #400]	; (8006d18 <HAL_SAI_Init+0x2d4>)
 8006b88:	fba3 2301 	umull	r2, r3, r3, r1
 8006b8c:	08da      	lsrs	r2, r3, #3
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	1aca      	subs	r2, r1, r3
 8006b98:	2a08      	cmp	r2, #8
 8006b9a:	d904      	bls.n	8006ba6 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_SAI_Init+0x172>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d109      	bne.n	8006bca <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_SAI_Init+0x17e>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e001      	b.n	8006bc6 <HAL_SAI_Init+0x182>
 8006bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e008      	b.n	8006bdc <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d102      	bne.n	8006bd8 <HAL_SAI_Init+0x194>
 8006bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bd6:	e000      	b.n	8006bda <HAL_SAI_Init+0x196>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b4d      	ldr	r3, [pc, #308]	; (8006d1c <HAL_SAI_Init+0x2d8>)
 8006be8:	400b      	ands	r3, r1
 8006bea:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6819      	ldr	r1, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c00:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	431a      	orrs	r2, r3
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8006c14:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006c20:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	051b      	lsls	r3, r3, #20
 8006c28:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6859      	ldr	r1, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	4b38      	ldr	r3, [pc, #224]	; (8006d20 <HAL_SAI_Init+0x2dc>)
 8006c3e:	400b      	ands	r3, r1
 8006c40:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6899      	ldr	r1, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b2e      	ldr	r3, [pc, #184]	; (8006d24 <HAL_SAI_Init+0x2e0>)
 8006c6c:	400b      	ands	r3, r1
 8006c6e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6899      	ldr	r1, [r3, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006c80:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8006c86:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8006c8c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c92:	3b01      	subs	r3, #1
 8006c94:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8006c96:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68d9      	ldr	r1, [r3, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006cae:	400b      	ands	r3, r1
 8006cb0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68d9      	ldr	r1, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40015804 	.word	0x40015804
 8006d04:	40015824 	.word	0x40015824
 8006d08:	40015800 	.word	0x40015800
 8006d0c:	40015c00 	.word	0x40015c00
 8006d10:	40015c04 	.word	0x40015c04
 8006d14:	40015c24 	.word	0x40015c24
 8006d18:	cccccccd 	.word	0xcccccccd
 8006d1c:	ff05c010 	.word	0xff05c010
 8006d20:	ffff1ff0 	.word	0xffff1ff0
 8006d24:	fff88000 	.word	0xfff88000

08006d28 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006d28:	b490      	push	{r4, r7}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006d30:	4b16      	ldr	r3, [pc, #88]	; (8006d8c <SAI_Disable+0x64>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <SAI_Disable+0x68>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	0b1b      	lsrs	r3, r3, #12
 8006d3c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d50:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006d52:	4623      	mov	r3, r4
 8006d54:	1e5c      	subs	r4, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6e:	e006      	b.n	8006d7e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e9      	bne.n	8006d52 <SAI_Disable+0x2a>

  return status;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc90      	pop	{r4, r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	2000000c 	.word	0x2000000c
 8006d90:	95cbec1b 	.word	0x95cbec1b

08006d94 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e025      	b.n	8006df4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f005 ff31 	bl	800cc24 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f001 fd81 	bl	80088dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	f001 fdeb 	bl	80089c0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d101      	bne.n	8006e18 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
 8006e16:	e018      	b.n	8006e4a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	68b9      	ldr	r1, [r7, #8]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 fe49 	bl	8008ac0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d104      	bne.n	8006e40 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2205      	movs	r2, #5
 8006e3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006e3e:	e003      	b.n	8006e48 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d101      	bne.n	8006e6c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e00e      	b.n	8006e8a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f001 fe41 	bl	8008b02 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e04c      	b.n	8006f40 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f005 fbde 	bl	800c67c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0203 	bic.w	r2, r2, #3
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4b19      	ldr	r3, [pc, #100]	; (8006f48 <HAL_SPDIFRX_Init+0xb4>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8006ef0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8006ef6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8006efc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8006f02:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8006f08:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8006f0e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8006f14:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8006f1a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8006f20:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	fff88407 	.word	0xfff88407

08006f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e084      	b.n	8007068 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f005 fbc1 	bl	800c700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f94:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f9e:	d902      	bls.n	8006fa6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	e002      	b.n	8006fac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006faa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006fb4:	d007      	beq.n	8006fc6 <HAL_SPI_Init+0x7a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10b      	bne.n	8006fe6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fd6:	d903      	bls.n	8006fe0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8006fde:	e002      	b.n	8006fe6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	ea42 0103 	orr.w	r1, r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	f003 0204 	and.w	r2, r3, #4
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007034:	431a      	orrs	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	ea42 0103 	orr.w	r1, r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69da      	ldr	r2, [r3, #28]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007056:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e01d      	b.n	80070be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f005 fb94 	bl	800c7c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4619      	mov	r1, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	f000 fb78 	bl	80077a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <HAL_TIM_Base_Start_IT+0x50>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b06      	cmp	r3, #6
 80070f0:	d00b      	beq.n	800710a <HAL_TIM_Base_Start_IT+0x42>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070f8:	d007      	beq.n	800710a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0201 	orr.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	00010007 	.word	0x00010007

0800711c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e01d      	b.n	800716a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f005 fbb2 	bl	800c8ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f000 fb22 	bl	80077a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b02      	cmp	r3, #2
 8007186:	d122      	bne.n	80071ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d11b      	bne.n	80071ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f06f 0202 	mvn.w	r2, #2
 800719e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f003 0303 	and.w	r3, r3, #3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fad7 	bl	8007768 <HAL_TIM_IC_CaptureCallback>
 80071ba:	e005      	b.n	80071c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fac9 	bl	8007754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fada 	bl	800777c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d122      	bne.n	8007222 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 0304 	and.w	r3, r3, #4
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d11b      	bne.n	8007222 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f06f 0204 	mvn.w	r2, #4
 80071f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 faad 	bl	8007768 <HAL_TIM_IC_CaptureCallback>
 800720e:	e005      	b.n	800721c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fa9f 	bl	8007754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fab0 	bl	800777c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b08      	cmp	r3, #8
 800722e:	d122      	bne.n	8007276 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b08      	cmp	r3, #8
 800723c:	d11b      	bne.n	8007276 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f06f 0208 	mvn.w	r2, #8
 8007246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2204      	movs	r2, #4
 800724c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa83 	bl	8007768 <HAL_TIM_IC_CaptureCallback>
 8007262:	e005      	b.n	8007270 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa75 	bl	8007754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa86 	bl	800777c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b10      	cmp	r3, #16
 8007282:	d122      	bne.n	80072ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	2b10      	cmp	r3, #16
 8007290:	d11b      	bne.n	80072ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f06f 0210 	mvn.w	r2, #16
 800729a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2208      	movs	r2, #8
 80072a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fa59 	bl	8007768 <HAL_TIM_IC_CaptureCallback>
 80072b6:	e005      	b.n	80072c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fa4b 	bl	8007754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa5c 	bl	800777c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d10e      	bne.n	80072f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d107      	bne.n	80072f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f06f 0201 	mvn.w	r2, #1
 80072ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f004 fe1d 	bl	800bf30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007300:	2b80      	cmp	r3, #128	; 0x80
 8007302:	d10e      	bne.n	8007322 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730e:	2b80      	cmp	r3, #128	; 0x80
 8007310:	d107      	bne.n	8007322 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800731a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 febd 	bl	800809c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007330:	d10e      	bne.n	8007350 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d107      	bne.n	8007350 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 feb0 	bl	80080b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d10e      	bne.n	800737c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007368:	2b40      	cmp	r3, #64	; 0x40
 800736a:	d107      	bne.n	800737c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa0a 	bl	8007790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b20      	cmp	r3, #32
 8007388:	d10e      	bne.n	80073a8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b20      	cmp	r3, #32
 8007396:	d107      	bne.n	80073a8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0220 	mvn.w	r2, #32
 80073a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fe70 	bl	8008088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e105      	b.n	80075d6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b14      	cmp	r3, #20
 80073de:	f200 80f0 	bhi.w	80075c2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	080075c3 	.word	0x080075c3
 80073f0:	080075c3 	.word	0x080075c3
 80073f4:	080075c3 	.word	0x080075c3
 80073f8:	0800747d 	.word	0x0800747d
 80073fc:	080075c3 	.word	0x080075c3
 8007400:	080075c3 	.word	0x080075c3
 8007404:	080075c3 	.word	0x080075c3
 8007408:	080074bf 	.word	0x080074bf
 800740c:	080075c3 	.word	0x080075c3
 8007410:	080075c3 	.word	0x080075c3
 8007414:	080075c3 	.word	0x080075c3
 8007418:	080074ff 	.word	0x080074ff
 800741c:	080075c3 	.word	0x080075c3
 8007420:	080075c3 	.word	0x080075c3
 8007424:	080075c3 	.word	0x080075c3
 8007428:	08007541 	.word	0x08007541
 800742c:	080075c3 	.word	0x080075c3
 8007430:	080075c3 	.word	0x080075c3
 8007434:	080075c3 	.word	0x080075c3
 8007438:	08007581 	.word	0x08007581
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fa4e 	bl	80078e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699a      	ldr	r2, [r3, #24]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0208 	orr.w	r2, r2, #8
 8007456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0204 	bic.w	r2, r2, #4
 8007466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6999      	ldr	r1, [r3, #24]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	619a      	str	r2, [r3, #24]
      break;
 800747a:	e0a3      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 faa0 	bl	80079c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699a      	ldr	r2, [r3, #24]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6999      	ldr	r1, [r3, #24]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	021a      	lsls	r2, r3, #8
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	619a      	str	r2, [r3, #24]
      break;
 80074bc:	e082      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 faf7 	bl	8007ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69da      	ldr	r2, [r3, #28]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0208 	orr.w	r2, r2, #8
 80074d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0204 	bic.w	r2, r2, #4
 80074e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69d9      	ldr	r1, [r3, #28]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	61da      	str	r2, [r3, #28]
      break;
 80074fc:	e062      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	4618      	mov	r0, r3
 8007506:	f000 fb4d 	bl	8007ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69d9      	ldr	r1, [r3, #28]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	021a      	lsls	r2, r3, #8
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	61da      	str	r2, [r3, #28]
      break;
 800753e:	e041      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fb84 	bl	8007c54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0208 	orr.w	r2, r2, #8
 800755a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0204 	bic.w	r2, r2, #4
 800756a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691a      	ldr	r2, [r3, #16]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800757e:	e021      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fbb6 	bl	8007cf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800759a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	021a      	lsls	r2, r3, #8
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075c0:	e000      	b.n	80075c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80075c2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop

080075e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_TIM_ConfigClockSource+0x18>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e0a6      	b.n	8007746 <HAL_TIM_ConfigClockSource+0x166>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4b4f      	ldr	r3, [pc, #316]	; (8007750 <HAL_TIM_ConfigClockSource+0x170>)
 8007614:	4013      	ands	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800761e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b40      	cmp	r3, #64	; 0x40
 800762e:	d067      	beq.n	8007700 <HAL_TIM_ConfigClockSource+0x120>
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d80b      	bhi.n	800764c <HAL_TIM_ConfigClockSource+0x6c>
 8007634:	2b10      	cmp	r3, #16
 8007636:	d073      	beq.n	8007720 <HAL_TIM_ConfigClockSource+0x140>
 8007638:	2b10      	cmp	r3, #16
 800763a:	d802      	bhi.n	8007642 <HAL_TIM_ConfigClockSource+0x62>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d06f      	beq.n	8007720 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007640:	e078      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007642:	2b20      	cmp	r3, #32
 8007644:	d06c      	beq.n	8007720 <HAL_TIM_ConfigClockSource+0x140>
 8007646:	2b30      	cmp	r3, #48	; 0x30
 8007648:	d06a      	beq.n	8007720 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800764a:	e073      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800764c:	2b70      	cmp	r3, #112	; 0x70
 800764e:	d00d      	beq.n	800766c <HAL_TIM_ConfigClockSource+0x8c>
 8007650:	2b70      	cmp	r3, #112	; 0x70
 8007652:	d804      	bhi.n	800765e <HAL_TIM_ConfigClockSource+0x7e>
 8007654:	2b50      	cmp	r3, #80	; 0x50
 8007656:	d033      	beq.n	80076c0 <HAL_TIM_ConfigClockSource+0xe0>
 8007658:	2b60      	cmp	r3, #96	; 0x60
 800765a:	d041      	beq.n	80076e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800765c:	e06a      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800765e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007662:	d066      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x152>
 8007664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007668:	d017      	beq.n	800769a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800766a:	e063      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	6899      	ldr	r1, [r3, #8]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f000 fc0a 	bl	8007e94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800768e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	609a      	str	r2, [r3, #8]
      break;
 8007698:	e04c      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6899      	ldr	r1, [r3, #8]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f000 fbf3 	bl	8007e94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076bc:	609a      	str	r2, [r3, #8]
      break;
 80076be:	e039      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	6859      	ldr	r1, [r3, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	461a      	mov	r2, r3
 80076ce:	f000 fb67 	bl	8007da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2150      	movs	r1, #80	; 0x50
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fbc0 	bl	8007e5e <TIM_ITRx_SetConfig>
      break;
 80076de:	e029      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	6859      	ldr	r1, [r3, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	461a      	mov	r2, r3
 80076ee:	f000 fb86 	bl	8007dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2160      	movs	r1, #96	; 0x60
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fbb0 	bl	8007e5e <TIM_ITRx_SetConfig>
      break;
 80076fe:	e019      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	6859      	ldr	r1, [r3, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	461a      	mov	r2, r3
 800770e:	f000 fb47 	bl	8007da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2140      	movs	r1, #64	; 0x40
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fba0 	bl	8007e5e <TIM_ITRx_SetConfig>
      break;
 800771e:	e009      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f000 fb97 	bl	8007e5e <TIM_ITRx_SetConfig>
      break;
 8007730:	e000      	b.n	8007734 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	fffeff88 	.word	0xfffeff88

08007754 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a40      	ldr	r2, [pc, #256]	; (80078b8 <TIM_Base_SetConfig+0x114>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d013      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d00f      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a3d      	ldr	r2, [pc, #244]	; (80078bc <TIM_Base_SetConfig+0x118>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a3c      	ldr	r2, [pc, #240]	; (80078c0 <TIM_Base_SetConfig+0x11c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d007      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a3b      	ldr	r2, [pc, #236]	; (80078c4 <TIM_Base_SetConfig+0x120>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a3a      	ldr	r2, [pc, #232]	; (80078c8 <TIM_Base_SetConfig+0x124>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d108      	bne.n	80077f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a2f      	ldr	r2, [pc, #188]	; (80078b8 <TIM_Base_SetConfig+0x114>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d02b      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007804:	d027      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <TIM_Base_SetConfig+0x118>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d023      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a2b      	ldr	r2, [pc, #172]	; (80078c0 <TIM_Base_SetConfig+0x11c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d01f      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <TIM_Base_SetConfig+0x120>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d01b      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a29      	ldr	r2, [pc, #164]	; (80078c8 <TIM_Base_SetConfig+0x124>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d017      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a28      	ldr	r2, [pc, #160]	; (80078cc <TIM_Base_SetConfig+0x128>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d013      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <TIM_Base_SetConfig+0x12c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00f      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a26      	ldr	r2, [pc, #152]	; (80078d4 <TIM_Base_SetConfig+0x130>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00b      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a25      	ldr	r2, [pc, #148]	; (80078d8 <TIM_Base_SetConfig+0x134>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d007      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a24      	ldr	r2, [pc, #144]	; (80078dc <TIM_Base_SetConfig+0x138>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d003      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <TIM_Base_SetConfig+0x13c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d108      	bne.n	8007868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a0a      	ldr	r2, [pc, #40]	; (80078b8 <TIM_Base_SetConfig+0x114>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_Base_SetConfig+0xf8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a0c      	ldr	r2, [pc, #48]	; (80078c8 <TIM_Base_SetConfig+0x124>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d103      	bne.n	80078a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	615a      	str	r2, [r3, #20]
}
 80078aa:	bf00      	nop
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	40010000 	.word	0x40010000
 80078bc:	40000400 	.word	0x40000400
 80078c0:	40000800 	.word	0x40000800
 80078c4:	40000c00 	.word	0x40000c00
 80078c8:	40010400 	.word	0x40010400
 80078cc:	40014000 	.word	0x40014000
 80078d0:	40014400 	.word	0x40014400
 80078d4:	40014800 	.word	0x40014800
 80078d8:	40001800 	.word	0x40001800
 80078dc:	40001c00 	.word	0x40001c00
 80078e0:	40002000 	.word	0x40002000

080078e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f023 0201 	bic.w	r2, r3, #1
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <TIM_OC1_SetConfig+0xd8>)
 8007910:	4013      	ands	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f023 0302 	bic.w	r3, r3, #2
 800792c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a21      	ldr	r2, [pc, #132]	; (80079c0 <TIM_OC1_SetConfig+0xdc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d003      	beq.n	8007948 <TIM_OC1_SetConfig+0x64>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a20      	ldr	r2, [pc, #128]	; (80079c4 <TIM_OC1_SetConfig+0xe0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d10c      	bne.n	8007962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0308 	bic.w	r3, r3, #8
 800794e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f023 0304 	bic.w	r3, r3, #4
 8007960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a16      	ldr	r2, [pc, #88]	; (80079c0 <TIM_OC1_SetConfig+0xdc>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <TIM_OC1_SetConfig+0x8e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <TIM_OC1_SetConfig+0xe0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d111      	bne.n	8007996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	621a      	str	r2, [r3, #32]
}
 80079b0:	bf00      	nop
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	fffeff8f 	.word	0xfffeff8f
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40010400 	.word	0x40010400

080079c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0210 	bic.w	r2, r3, #16
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4b2e      	ldr	r3, [pc, #184]	; (8007aac <TIM_OC2_SetConfig+0xe4>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f023 0320 	bic.w	r3, r3, #32
 8007a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a23      	ldr	r2, [pc, #140]	; (8007ab0 <TIM_OC2_SetConfig+0xe8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC2_SetConfig+0x68>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a22      	ldr	r2, [pc, #136]	; (8007ab4 <TIM_OC2_SetConfig+0xec>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10d      	bne.n	8007a4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	; (8007ab0 <TIM_OC2_SetConfig+0xe8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d003      	beq.n	8007a5c <TIM_OC2_SetConfig+0x94>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a17      	ldr	r2, [pc, #92]	; (8007ab4 <TIM_OC2_SetConfig+0xec>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d113      	bne.n	8007a84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	feff8fff 	.word	0xfeff8fff
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b2d      	ldr	r3, [pc, #180]	; (8007b98 <TIM_OC3_SetConfig+0xe0>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a22      	ldr	r2, [pc, #136]	; (8007b9c <TIM_OC3_SetConfig+0xe4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_OC3_SetConfig+0x66>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a21      	ldr	r2, [pc, #132]	; (8007ba0 <TIM_OC3_SetConfig+0xe8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d10d      	bne.n	8007b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a17      	ldr	r2, [pc, #92]	; (8007b9c <TIM_OC3_SetConfig+0xe4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_OC3_SetConfig+0x92>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a16      	ldr	r2, [pc, #88]	; (8007ba0 <TIM_OC3_SetConfig+0xe8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d113      	bne.n	8007b72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	621a      	str	r2, [r3, #32]
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	fffeff8f 	.word	0xfffeff8f
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40010400 	.word	0x40010400

08007ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <TIM_OC4_SetConfig+0xa4>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	031b      	lsls	r3, r3, #12
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <TIM_OC4_SetConfig+0xa8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d003      	beq.n	8007c0c <TIM_OC4_SetConfig+0x68>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a12      	ldr	r2, [pc, #72]	; (8007c50 <TIM_OC4_SetConfig+0xac>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d109      	bne.n	8007c20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	019b      	lsls	r3, r3, #6
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	feff8fff 	.word	0xfeff8fff
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40010400 	.word	0x40010400

08007c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <TIM_OC5_SetConfig+0x98>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	041b      	lsls	r3, r3, #16
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a12      	ldr	r2, [pc, #72]	; (8007cf0 <TIM_OC5_SetConfig+0x9c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC5_SetConfig+0x5e>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a11      	ldr	r2, [pc, #68]	; (8007cf4 <TIM_OC5_SetConfig+0xa0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d109      	bne.n	8007cc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	621a      	str	r2, [r3, #32]
}
 8007ce0:	bf00      	nop
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	fffeff8f 	.word	0xfffeff8f
 8007cf0:	40010000 	.word	0x40010000
 8007cf4:	40010400 	.word	0x40010400

08007cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <TIM_OC6_SetConfig+0x9c>)
 8007d24:	4013      	ands	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	051b      	lsls	r3, r3, #20
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a13      	ldr	r2, [pc, #76]	; (8007d98 <TIM_OC6_SetConfig+0xa0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC6_SetConfig+0x60>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a12      	ldr	r2, [pc, #72]	; (8007d9c <TIM_OC6_SetConfig+0xa4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d109      	bne.n	8007d6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	029b      	lsls	r3, r3, #10
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	feff8fff 	.word	0xfeff8fff
 8007d98:	40010000 	.word	0x40010000
 8007d9c:	40010400 	.word	0x40010400

08007da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f023 0201 	bic.w	r2, r3, #1
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f023 030a 	bic.w	r3, r3, #10
 8007ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b087      	sub	sp, #28
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	f023 0210 	bic.w	r2, r3, #16
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	031b      	lsls	r3, r3, #12
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	f043 0307 	orr.w	r3, r3, #7
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	609a      	str	r2, [r3, #8]
}
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	021a      	lsls	r2, r3, #8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	609a      	str	r2, [r3, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e045      	b.n	8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1c      	ldr	r2, [pc, #112]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d108      	bne.n	8007f32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f4a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40010400 	.word	0x40010400

08007f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e065      	b.n	8008074 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a16      	ldr	r2, [pc, #88]	; (8008080 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d004      	beq.n	8008036 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a14      	ldr	r2, [pc, #80]	; (8008084 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d115      	bne.n	8008062 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	051b      	lsls	r3, r3, #20
 8008042:	4313      	orrs	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	4313      	orrs	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	40010000 	.word	0x40010000
 8008084:	40010400 	.word	0x40010400

08008088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e040      	b.n	8008158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f004 fcaa 	bl	800ca40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2224      	movs	r2, #36	; 0x24
 80080f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0201 	bic.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f82c 	bl	8008160 <UART_SetConfig>
 8008108:	4603      	mov	r3, r0
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e022      	b.n	8008158 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fac4 	bl	80086a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800812e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800813e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fb4b 	bl	80087ec <UART_CheckIdleState>
 8008156:	4603      	mov	r3, r0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008168:	2300      	movs	r3, #0
 800816a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4bb1      	ldr	r3, [pc, #708]	; (8008454 <UART_SetConfig+0x2f4>)
 8008190:	4013      	ands	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	6939      	ldr	r1, [r7, #16]
 8008198:	430b      	orrs	r3, r1
 800819a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a9f      	ldr	r2, [pc, #636]	; (8008458 <UART_SetConfig+0x2f8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d121      	bne.n	8008224 <UART_SetConfig+0xc4>
 80081e0:	4b9e      	ldr	r3, [pc, #632]	; (800845c <UART_SetConfig+0x2fc>)
 80081e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d816      	bhi.n	800821c <UART_SetConfig+0xbc>
 80081ee:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <UART_SetConfig+0x94>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008205 	.word	0x08008205
 80081f8:	08008211 	.word	0x08008211
 80081fc:	0800820b 	.word	0x0800820b
 8008200:	08008217 	.word	0x08008217
 8008204:	2301      	movs	r3, #1
 8008206:	77fb      	strb	r3, [r7, #31]
 8008208:	e151      	b.n	80084ae <UART_SetConfig+0x34e>
 800820a:	2302      	movs	r3, #2
 800820c:	77fb      	strb	r3, [r7, #31]
 800820e:	e14e      	b.n	80084ae <UART_SetConfig+0x34e>
 8008210:	2304      	movs	r3, #4
 8008212:	77fb      	strb	r3, [r7, #31]
 8008214:	e14b      	b.n	80084ae <UART_SetConfig+0x34e>
 8008216:	2308      	movs	r3, #8
 8008218:	77fb      	strb	r3, [r7, #31]
 800821a:	e148      	b.n	80084ae <UART_SetConfig+0x34e>
 800821c:	2310      	movs	r3, #16
 800821e:	77fb      	strb	r3, [r7, #31]
 8008220:	bf00      	nop
 8008222:	e144      	b.n	80084ae <UART_SetConfig+0x34e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a8d      	ldr	r2, [pc, #564]	; (8008460 <UART_SetConfig+0x300>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d134      	bne.n	8008298 <UART_SetConfig+0x138>
 800822e:	4b8b      	ldr	r3, [pc, #556]	; (800845c <UART_SetConfig+0x2fc>)
 8008230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008234:	f003 030c 	and.w	r3, r3, #12
 8008238:	2b0c      	cmp	r3, #12
 800823a:	d829      	bhi.n	8008290 <UART_SetConfig+0x130>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <UART_SetConfig+0xe4>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	08008279 	.word	0x08008279
 8008248:	08008291 	.word	0x08008291
 800824c:	08008291 	.word	0x08008291
 8008250:	08008291 	.word	0x08008291
 8008254:	08008285 	.word	0x08008285
 8008258:	08008291 	.word	0x08008291
 800825c:	08008291 	.word	0x08008291
 8008260:	08008291 	.word	0x08008291
 8008264:	0800827f 	.word	0x0800827f
 8008268:	08008291 	.word	0x08008291
 800826c:	08008291 	.word	0x08008291
 8008270:	08008291 	.word	0x08008291
 8008274:	0800828b 	.word	0x0800828b
 8008278:	2300      	movs	r3, #0
 800827a:	77fb      	strb	r3, [r7, #31]
 800827c:	e117      	b.n	80084ae <UART_SetConfig+0x34e>
 800827e:	2302      	movs	r3, #2
 8008280:	77fb      	strb	r3, [r7, #31]
 8008282:	e114      	b.n	80084ae <UART_SetConfig+0x34e>
 8008284:	2304      	movs	r3, #4
 8008286:	77fb      	strb	r3, [r7, #31]
 8008288:	e111      	b.n	80084ae <UART_SetConfig+0x34e>
 800828a:	2308      	movs	r3, #8
 800828c:	77fb      	strb	r3, [r7, #31]
 800828e:	e10e      	b.n	80084ae <UART_SetConfig+0x34e>
 8008290:	2310      	movs	r3, #16
 8008292:	77fb      	strb	r3, [r7, #31]
 8008294:	bf00      	nop
 8008296:	e10a      	b.n	80084ae <UART_SetConfig+0x34e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a71      	ldr	r2, [pc, #452]	; (8008464 <UART_SetConfig+0x304>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d120      	bne.n	80082e4 <UART_SetConfig+0x184>
 80082a2:	4b6e      	ldr	r3, [pc, #440]	; (800845c <UART_SetConfig+0x2fc>)
 80082a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082ac:	2b10      	cmp	r3, #16
 80082ae:	d00f      	beq.n	80082d0 <UART_SetConfig+0x170>
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d802      	bhi.n	80082ba <UART_SetConfig+0x15a>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d005      	beq.n	80082c4 <UART_SetConfig+0x164>
 80082b8:	e010      	b.n	80082dc <UART_SetConfig+0x17c>
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d005      	beq.n	80082ca <UART_SetConfig+0x16a>
 80082be:	2b30      	cmp	r3, #48	; 0x30
 80082c0:	d009      	beq.n	80082d6 <UART_SetConfig+0x176>
 80082c2:	e00b      	b.n	80082dc <UART_SetConfig+0x17c>
 80082c4:	2300      	movs	r3, #0
 80082c6:	77fb      	strb	r3, [r7, #31]
 80082c8:	e0f1      	b.n	80084ae <UART_SetConfig+0x34e>
 80082ca:	2302      	movs	r3, #2
 80082cc:	77fb      	strb	r3, [r7, #31]
 80082ce:	e0ee      	b.n	80084ae <UART_SetConfig+0x34e>
 80082d0:	2304      	movs	r3, #4
 80082d2:	77fb      	strb	r3, [r7, #31]
 80082d4:	e0eb      	b.n	80084ae <UART_SetConfig+0x34e>
 80082d6:	2308      	movs	r3, #8
 80082d8:	77fb      	strb	r3, [r7, #31]
 80082da:	e0e8      	b.n	80084ae <UART_SetConfig+0x34e>
 80082dc:	2310      	movs	r3, #16
 80082de:	77fb      	strb	r3, [r7, #31]
 80082e0:	bf00      	nop
 80082e2:	e0e4      	b.n	80084ae <UART_SetConfig+0x34e>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a5f      	ldr	r2, [pc, #380]	; (8008468 <UART_SetConfig+0x308>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d120      	bne.n	8008330 <UART_SetConfig+0x1d0>
 80082ee:	4b5b      	ldr	r3, [pc, #364]	; (800845c <UART_SetConfig+0x2fc>)
 80082f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082f8:	2b40      	cmp	r3, #64	; 0x40
 80082fa:	d00f      	beq.n	800831c <UART_SetConfig+0x1bc>
 80082fc:	2b40      	cmp	r3, #64	; 0x40
 80082fe:	d802      	bhi.n	8008306 <UART_SetConfig+0x1a6>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <UART_SetConfig+0x1b0>
 8008304:	e010      	b.n	8008328 <UART_SetConfig+0x1c8>
 8008306:	2b80      	cmp	r3, #128	; 0x80
 8008308:	d005      	beq.n	8008316 <UART_SetConfig+0x1b6>
 800830a:	2bc0      	cmp	r3, #192	; 0xc0
 800830c:	d009      	beq.n	8008322 <UART_SetConfig+0x1c2>
 800830e:	e00b      	b.n	8008328 <UART_SetConfig+0x1c8>
 8008310:	2300      	movs	r3, #0
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	e0cb      	b.n	80084ae <UART_SetConfig+0x34e>
 8008316:	2302      	movs	r3, #2
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e0c8      	b.n	80084ae <UART_SetConfig+0x34e>
 800831c:	2304      	movs	r3, #4
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e0c5      	b.n	80084ae <UART_SetConfig+0x34e>
 8008322:	2308      	movs	r3, #8
 8008324:	77fb      	strb	r3, [r7, #31]
 8008326:	e0c2      	b.n	80084ae <UART_SetConfig+0x34e>
 8008328:	2310      	movs	r3, #16
 800832a:	77fb      	strb	r3, [r7, #31]
 800832c:	bf00      	nop
 800832e:	e0be      	b.n	80084ae <UART_SetConfig+0x34e>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a4d      	ldr	r2, [pc, #308]	; (800846c <UART_SetConfig+0x30c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d124      	bne.n	8008384 <UART_SetConfig+0x224>
 800833a:	4b48      	ldr	r3, [pc, #288]	; (800845c <UART_SetConfig+0x2fc>)
 800833c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008348:	d012      	beq.n	8008370 <UART_SetConfig+0x210>
 800834a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834e:	d802      	bhi.n	8008356 <UART_SetConfig+0x1f6>
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <UART_SetConfig+0x204>
 8008354:	e012      	b.n	800837c <UART_SetConfig+0x21c>
 8008356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800835a:	d006      	beq.n	800836a <UART_SetConfig+0x20a>
 800835c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008360:	d009      	beq.n	8008376 <UART_SetConfig+0x216>
 8008362:	e00b      	b.n	800837c <UART_SetConfig+0x21c>
 8008364:	2300      	movs	r3, #0
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	e0a1      	b.n	80084ae <UART_SetConfig+0x34e>
 800836a:	2302      	movs	r3, #2
 800836c:	77fb      	strb	r3, [r7, #31]
 800836e:	e09e      	b.n	80084ae <UART_SetConfig+0x34e>
 8008370:	2304      	movs	r3, #4
 8008372:	77fb      	strb	r3, [r7, #31]
 8008374:	e09b      	b.n	80084ae <UART_SetConfig+0x34e>
 8008376:	2308      	movs	r3, #8
 8008378:	77fb      	strb	r3, [r7, #31]
 800837a:	e098      	b.n	80084ae <UART_SetConfig+0x34e>
 800837c:	2310      	movs	r3, #16
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	bf00      	nop
 8008382:	e094      	b.n	80084ae <UART_SetConfig+0x34e>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a39      	ldr	r2, [pc, #228]	; (8008470 <UART_SetConfig+0x310>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d124      	bne.n	80083d8 <UART_SetConfig+0x278>
 800838e:	4b33      	ldr	r3, [pc, #204]	; (800845c <UART_SetConfig+0x2fc>)
 8008390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800839c:	d012      	beq.n	80083c4 <UART_SetConfig+0x264>
 800839e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a2:	d802      	bhi.n	80083aa <UART_SetConfig+0x24a>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d007      	beq.n	80083b8 <UART_SetConfig+0x258>
 80083a8:	e012      	b.n	80083d0 <UART_SetConfig+0x270>
 80083aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ae:	d006      	beq.n	80083be <UART_SetConfig+0x25e>
 80083b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083b4:	d009      	beq.n	80083ca <UART_SetConfig+0x26a>
 80083b6:	e00b      	b.n	80083d0 <UART_SetConfig+0x270>
 80083b8:	2301      	movs	r3, #1
 80083ba:	77fb      	strb	r3, [r7, #31]
 80083bc:	e077      	b.n	80084ae <UART_SetConfig+0x34e>
 80083be:	2302      	movs	r3, #2
 80083c0:	77fb      	strb	r3, [r7, #31]
 80083c2:	e074      	b.n	80084ae <UART_SetConfig+0x34e>
 80083c4:	2304      	movs	r3, #4
 80083c6:	77fb      	strb	r3, [r7, #31]
 80083c8:	e071      	b.n	80084ae <UART_SetConfig+0x34e>
 80083ca:	2308      	movs	r3, #8
 80083cc:	77fb      	strb	r3, [r7, #31]
 80083ce:	e06e      	b.n	80084ae <UART_SetConfig+0x34e>
 80083d0:	2310      	movs	r3, #16
 80083d2:	77fb      	strb	r3, [r7, #31]
 80083d4:	bf00      	nop
 80083d6:	e06a      	b.n	80084ae <UART_SetConfig+0x34e>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a25      	ldr	r2, [pc, #148]	; (8008474 <UART_SetConfig+0x314>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d124      	bne.n	800842c <UART_SetConfig+0x2cc>
 80083e2:	4b1e      	ldr	r3, [pc, #120]	; (800845c <UART_SetConfig+0x2fc>)
 80083e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80083ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f0:	d012      	beq.n	8008418 <UART_SetConfig+0x2b8>
 80083f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f6:	d802      	bhi.n	80083fe <UART_SetConfig+0x29e>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <UART_SetConfig+0x2ac>
 80083fc:	e012      	b.n	8008424 <UART_SetConfig+0x2c4>
 80083fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008402:	d006      	beq.n	8008412 <UART_SetConfig+0x2b2>
 8008404:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008408:	d009      	beq.n	800841e <UART_SetConfig+0x2be>
 800840a:	e00b      	b.n	8008424 <UART_SetConfig+0x2c4>
 800840c:	2300      	movs	r3, #0
 800840e:	77fb      	strb	r3, [r7, #31]
 8008410:	e04d      	b.n	80084ae <UART_SetConfig+0x34e>
 8008412:	2302      	movs	r3, #2
 8008414:	77fb      	strb	r3, [r7, #31]
 8008416:	e04a      	b.n	80084ae <UART_SetConfig+0x34e>
 8008418:	2304      	movs	r3, #4
 800841a:	77fb      	strb	r3, [r7, #31]
 800841c:	e047      	b.n	80084ae <UART_SetConfig+0x34e>
 800841e:	2308      	movs	r3, #8
 8008420:	77fb      	strb	r3, [r7, #31]
 8008422:	e044      	b.n	80084ae <UART_SetConfig+0x34e>
 8008424:	2310      	movs	r3, #16
 8008426:	77fb      	strb	r3, [r7, #31]
 8008428:	bf00      	nop
 800842a:	e040      	b.n	80084ae <UART_SetConfig+0x34e>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a11      	ldr	r2, [pc, #68]	; (8008478 <UART_SetConfig+0x318>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d139      	bne.n	80084aa <UART_SetConfig+0x34a>
 8008436:	4b09      	ldr	r3, [pc, #36]	; (800845c <UART_SetConfig+0x2fc>)
 8008438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008444:	d027      	beq.n	8008496 <UART_SetConfig+0x336>
 8008446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800844a:	d817      	bhi.n	800847c <UART_SetConfig+0x31c>
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01c      	beq.n	800848a <UART_SetConfig+0x32a>
 8008450:	e027      	b.n	80084a2 <UART_SetConfig+0x342>
 8008452:	bf00      	nop
 8008454:	efff69f3 	.word	0xefff69f3
 8008458:	40011000 	.word	0x40011000
 800845c:	40023800 	.word	0x40023800
 8008460:	40004400 	.word	0x40004400
 8008464:	40004800 	.word	0x40004800
 8008468:	40004c00 	.word	0x40004c00
 800846c:	40005000 	.word	0x40005000
 8008470:	40011400 	.word	0x40011400
 8008474:	40007800 	.word	0x40007800
 8008478:	40007c00 	.word	0x40007c00
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008480:	d006      	beq.n	8008490 <UART_SetConfig+0x330>
 8008482:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008486:	d009      	beq.n	800849c <UART_SetConfig+0x33c>
 8008488:	e00b      	b.n	80084a2 <UART_SetConfig+0x342>
 800848a:	2300      	movs	r3, #0
 800848c:	77fb      	strb	r3, [r7, #31]
 800848e:	e00e      	b.n	80084ae <UART_SetConfig+0x34e>
 8008490:	2302      	movs	r3, #2
 8008492:	77fb      	strb	r3, [r7, #31]
 8008494:	e00b      	b.n	80084ae <UART_SetConfig+0x34e>
 8008496:	2304      	movs	r3, #4
 8008498:	77fb      	strb	r3, [r7, #31]
 800849a:	e008      	b.n	80084ae <UART_SetConfig+0x34e>
 800849c:	2308      	movs	r3, #8
 800849e:	77fb      	strb	r3, [r7, #31]
 80084a0:	e005      	b.n	80084ae <UART_SetConfig+0x34e>
 80084a2:	2310      	movs	r3, #16
 80084a4:	77fb      	strb	r3, [r7, #31]
 80084a6:	bf00      	nop
 80084a8:	e001      	b.n	80084ae <UART_SetConfig+0x34e>
 80084aa:	2310      	movs	r3, #16
 80084ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b6:	d17c      	bne.n	80085b2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80084b8:	7ffb      	ldrb	r3, [r7, #31]
 80084ba:	2b08      	cmp	r3, #8
 80084bc:	d859      	bhi.n	8008572 <UART_SetConfig+0x412>
 80084be:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <UART_SetConfig+0x364>)
 80084c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c4:	080084e9 	.word	0x080084e9
 80084c8:	08008507 	.word	0x08008507
 80084cc:	08008525 	.word	0x08008525
 80084d0:	08008573 	.word	0x08008573
 80084d4:	0800853d 	.word	0x0800853d
 80084d8:	08008573 	.word	0x08008573
 80084dc:	08008573 	.word	0x08008573
 80084e0:	08008573 	.word	0x08008573
 80084e4:	0800855b 	.word	0x0800855b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80084e8:	f7fd f8e0 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80084ec:	4603      	mov	r3, r0
 80084ee:	005a      	lsls	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	085b      	lsrs	r3, r3, #1
 80084f6:	441a      	add	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008500:	b29b      	uxth	r3, r3
 8008502:	61bb      	str	r3, [r7, #24]
        break;
 8008504:	e038      	b.n	8008578 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008506:	f7fd f8e5 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 800850a:	4603      	mov	r3, r0
 800850c:	005a      	lsls	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	441a      	add	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	fbb2 f3f3 	udiv	r3, r2, r3
 800851e:	b29b      	uxth	r3, r3
 8008520:	61bb      	str	r3, [r7, #24]
        break;
 8008522:	e029      	b.n	8008578 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	085a      	lsrs	r2, r3, #1
 800852a:	4b5d      	ldr	r3, [pc, #372]	; (80086a0 <UART_SetConfig+0x540>)
 800852c:	4413      	add	r3, r2
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	6852      	ldr	r2, [r2, #4]
 8008532:	fbb3 f3f2 	udiv	r3, r3, r2
 8008536:	b29b      	uxth	r3, r3
 8008538:	61bb      	str	r3, [r7, #24]
        break;
 800853a:	e01d      	b.n	8008578 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800853c:	f7fc fff8 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 8008540:	4603      	mov	r3, r0
 8008542:	005a      	lsls	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	085b      	lsrs	r3, r3, #1
 800854a:	441a      	add	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	fbb2 f3f3 	udiv	r3, r2, r3
 8008554:	b29b      	uxth	r3, r3
 8008556:	61bb      	str	r3, [r7, #24]
        break;
 8008558:	e00e      	b.n	8008578 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	fbb2 f3f3 	udiv	r3, r2, r3
 800856c:	b29b      	uxth	r3, r3
 800856e:	61bb      	str	r3, [r7, #24]
        break;
 8008570:	e002      	b.n	8008578 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	75fb      	strb	r3, [r7, #23]
        break;
 8008576:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	2b0f      	cmp	r3, #15
 800857c:	d916      	bls.n	80085ac <UART_SetConfig+0x44c>
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008584:	d212      	bcs.n	80085ac <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	b29b      	uxth	r3, r3
 800858a:	f023 030f 	bic.w	r3, r3, #15
 800858e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	b29b      	uxth	r3, r3
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	b29a      	uxth	r2, r3
 800859c:	89fb      	ldrh	r3, [r7, #14]
 800859e:	4313      	orrs	r3, r2
 80085a0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	89fa      	ldrh	r2, [r7, #14]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	e06e      	b.n	800868a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
 80085b0:	e06b      	b.n	800868a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80085b2:	7ffb      	ldrb	r3, [r7, #31]
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d857      	bhi.n	8008668 <UART_SetConfig+0x508>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <UART_SetConfig+0x460>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085e5 	.word	0x080085e5
 80085c4:	08008601 	.word	0x08008601
 80085c8:	0800861d 	.word	0x0800861d
 80085cc:	08008669 	.word	0x08008669
 80085d0:	08008635 	.word	0x08008635
 80085d4:	08008669 	.word	0x08008669
 80085d8:	08008669 	.word	0x08008669
 80085dc:	08008669 	.word	0x08008669
 80085e0:	08008651 	.word	0x08008651
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80085e4:	f7fd f862 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80085e8:	4602      	mov	r2, r0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	441a      	add	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	61bb      	str	r3, [r7, #24]
        break;
 80085fe:	e036      	b.n	800866e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008600:	f7fd f868 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8008604:	4602      	mov	r2, r0
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	085b      	lsrs	r3, r3, #1
 800860c:	441a      	add	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	fbb2 f3f3 	udiv	r3, r2, r3
 8008616:	b29b      	uxth	r3, r3
 8008618:	61bb      	str	r3, [r7, #24]
        break;
 800861a:	e028      	b.n	800866e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	085a      	lsrs	r2, r3, #1
 8008622:	4b20      	ldr	r3, [pc, #128]	; (80086a4 <UART_SetConfig+0x544>)
 8008624:	4413      	add	r3, r2
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6852      	ldr	r2, [r2, #4]
 800862a:	fbb3 f3f2 	udiv	r3, r3, r2
 800862e:	b29b      	uxth	r3, r3
 8008630:	61bb      	str	r3, [r7, #24]
        break;
 8008632:	e01c      	b.n	800866e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008634:	f7fc ff7c 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 8008638:	4602      	mov	r2, r0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	441a      	add	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	fbb2 f3f3 	udiv	r3, r2, r3
 800864a:	b29b      	uxth	r3, r3
 800864c:	61bb      	str	r3, [r7, #24]
        break;
 800864e:	e00e      	b.n	800866e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008662:	b29b      	uxth	r3, r3
 8008664:	61bb      	str	r3, [r7, #24]
        break;
 8008666:	e002      	b.n	800866e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	75fb      	strb	r3, [r7, #23]
        break;
 800866c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b0f      	cmp	r3, #15
 8008672:	d908      	bls.n	8008686 <UART_SetConfig+0x526>
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867a:	d204      	bcs.n	8008686 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	60da      	str	r2, [r3, #12]
 8008684:	e001      	b.n	800868a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3720      	adds	r7, #32
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	01e84800 	.word	0x01e84800
 80086a4:	00f42400 	.word	0x00f42400

080086a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00a      	beq.n	8008716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	430a      	orrs	r2, r1
 8008736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00a      	beq.n	800875a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01a      	beq.n	80087be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a6:	d10a      	bne.n	80087be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	605a      	str	r2, [r3, #4]
  }
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80087fa:	f7f8 fd95 	bl	8001328 <HAL_GetTick>
 80087fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b08      	cmp	r3, #8
 800880c:	d10e      	bne.n	800882c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800880e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2200      	movs	r2, #0
 8008818:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f814 	bl	800884a <UART_WaitOnFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e00a      	b.n	8008842 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2220      	movs	r2, #32
 8008836:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b084      	sub	sp, #16
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	603b      	str	r3, [r7, #0]
 8008856:	4613      	mov	r3, r2
 8008858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800885a:	e02a      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008862:	d026      	beq.n	80088b2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008864:	f7f8 fd60 	bl	8001328 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	429a      	cmp	r2, r3
 8008872:	d302      	bcc.n	800887a <UART_WaitOnFlagUntilTimeout+0x30>
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d11b      	bne.n	80088b2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008888:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2220      	movs	r2, #32
 800889e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e00f      	b.n	80088d2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4013      	ands	r3, r2
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	429a      	cmp	r2, r3
 80088c0:	bf0c      	ite	eq
 80088c2:	2301      	moveq	r3, #1
 80088c4:	2300      	movne	r3, #0
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d0c5      	beq.n	800885c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d027      	beq.n	8008946 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4b2f      	ldr	r3, [pc, #188]	; (80089bc <FMC_SDRAM_Init+0xe0>)
 8008900:	4013      	ands	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800890c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008912:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008918:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800891e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008924:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800892a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008930:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008936:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	e032      	b.n	80089ac <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008952:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800895c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008962:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4313      	orrs	r3, r2
 8008968:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	4b12      	ldr	r3, [pc, #72]	; (80089bc <FMC_SDRAM_Init+0xe0>)
 8008974:	4013      	ands	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008980:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008986:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800898c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008992:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008998:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	4313      	orrs	r3, r2
 800899e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	ffff8000 	.word	0xffff8000

080089c0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d02e      	beq.n	8008a38 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80089e6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80089f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008a00:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008a0a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008a14:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008a1e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	609a      	str	r2, [r3, #8]
 8008a36:	e039      	b.n	8008aac <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <FMC_SDRAM_Timing_Init+0xfc>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008a56:	4313      	orrs	r3, r2
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a6a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008a7a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008a84:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008a8e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	ff0f0fff 	.word	0xff0f0fff

08008ac0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008ad8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008ae2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	695a      	ldr	r2, [r3, #20]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f043 0201 	orr.w	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f023 0201 	bic.w	r2, r3, #1
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	019b      	lsls	r3, r3, #6
 8008b7e:	f043 0220 	orr.w	r2, r3, #32
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a09      	ldr	r2, [pc, #36]	; (8008bb4 <USB_FlushTxFifo+0x48>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d901      	bls.n	8008b98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e006      	b.n	8008ba6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d0f0      	beq.n	8008b86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	00030d40 	.word	0x00030d40

08008bb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2210      	movs	r2, #16
 8008bc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <USB_FlushRxFifo+0x40>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d901      	bls.n	8008bdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e006      	b.n	8008bea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b10      	cmp	r3, #16
 8008be6:	d0f0      	beq.n	8008bca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	00030d40 	.word	0x00030d40

08008bfc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b089      	sub	sp, #36	; 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4611      	mov	r1, r2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	71fb      	strb	r3, [r7, #7]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d11a      	bne.n	8008c58 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c22:	88bb      	ldrh	r3, [r7, #4]
 8008c24:	3303      	adds	r3, #3
 8008c26:	089b      	lsrs	r3, r3, #2
 8008c28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	e00f      	b.n	8008c50 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8008c30:	79fb      	ldrb	r3, [r7, #7]
 8008c32:	031a      	lsls	r2, r3, #12
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	3304      	adds	r3, #4
 8008c48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	61bb      	str	r3, [r7, #24]
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d3eb      	bcc.n	8008c30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3724      	adds	r7, #36	; 0x24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b089      	sub	sp, #36	; 0x24
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	4613      	mov	r3, r2
 8008c72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	3303      	adds	r3, #3
 8008c80:	089b      	lsrs	r3, r3, #2
 8008c82:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008c84:	2300      	movs	r3, #0
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	e00b      	b.n	8008ca2 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	61bb      	str	r3, [r7, #24]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d3ef      	bcc.n	8008c8a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008caa:	69fb      	ldr	r3, [r7, #28]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3724      	adds	r7, #36	; 0x24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	f003 0301 	and.w	r3, r3, #1
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d18:	f023 0303 	bic.w	r3, r3, #3
 8008d1c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	68f9      	ldr	r1, [r7, #12]
 8008d2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d32:	4313      	orrs	r3, r2
 8008d34:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d107      	bne.n	8008d4c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d42:	461a      	mov	r2, r3
 8008d44:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008d48:	6053      	str	r3, [r2, #4]
 8008d4a:	e009      	b.n	8008d60 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d106      	bne.n	8008d60 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f241 7370 	movw	r3, #6000	; 0x1770
 8008d5e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d8e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d9c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d9e:	2064      	movs	r0, #100	; 0x64
 8008da0:	f7f8 face 	bl	8001340 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008db0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008db2:	200a      	movs	r0, #10
 8008db4:	f7f8 fac4 	bl	8001340 <HAL_Delay>

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008de6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d109      	bne.n	8008e06 <USB_DriveVbus+0x44>
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d106      	bne.n	8008e06 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e04:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e10:	d109      	bne.n	8008e26 <USB_DriveVbus+0x64>
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d106      	bne.n	8008e26 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e24:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	0c5b      	lsrs	r3, r3, #17
 8008e52:	f003 0303 	and.w	r3, r3, #3
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
	...

08008e64 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	4611      	mov	r1, r2
 8008e70:	461a      	mov	r2, r3
 8008e72:	4603      	mov	r3, r0
 8008e74:	70fb      	strb	r3, [r7, #3]
 8008e76:	460b      	mov	r3, r1
 8008e78:	70bb      	strb	r3, [r7, #2]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e92:	461a      	mov	r2, r3
 8008e94:	f04f 33ff 	mov.w	r3, #4294967295
 8008e98:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d87e      	bhi.n	8008fa0 <USB_HC_Init+0x13c>
 8008ea2:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <USB_HC_Init+0x44>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008eb9 	.word	0x08008eb9
 8008eac:	08008f63 	.word	0x08008f63
 8008eb0:	08008eb9 	.word	0x08008eb9
 8008eb4:	08008f25 	.word	0x08008f25
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	f240 439d 	movw	r3, #1181	; 0x49d
 8008eca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ecc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	da10      	bge.n	8008ef6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008ef4:	e057      	b.n	8008fa6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d051      	beq.n	8008fa6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	78fa      	ldrb	r2, [r7, #3]
 8008f12:	0151      	lsls	r1, r2, #5
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	440a      	add	r2, r1
 8008f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f1c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f20:	60d3      	str	r3, [r2, #12]
      break;
 8008f22:	e040      	b.n	8008fa6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f30:	461a      	mov	r2, r3
 8008f32:	f240 639d 	movw	r3, #1693	; 0x69d
 8008f36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	da34      	bge.n	8008faa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	78fa      	ldrb	r2, [r7, #3]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f5e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f60:	e023      	b.n	8008faa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f240 2325 	movw	r3, #549	; 0x225
 8008f74:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	da17      	bge.n	8008fae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f7e:	78fb      	ldrb	r3, [r7, #3]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	0151      	lsls	r1, r2, #5
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	440a      	add	r2, r1
 8008f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f98:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008f9c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f9e:	e006      	b.n	8008fae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa4:	e004      	b.n	8008fb0 <USB_HC_Init+0x14c>
      break;
 8008fa6:	bf00      	nop
 8008fa8:	e002      	b.n	8008fb0 <USB_HC_Init+0x14c>
      break;
 8008faa:	bf00      	nop
 8008fac:	e000      	b.n	8008fb0 <USB_HC_Init+0x14c>
      break;
 8008fae:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb6:	699a      	ldr	r2, [r3, #24]
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	f003 030f 	and.w	r3, r3, #15
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008fda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	da03      	bge.n	8008fea <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fe6:	613b      	str	r3, [r7, #16]
 8008fe8:	e001      	b.n	8008fee <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d103      	bne.n	8008ffe <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	e001      	b.n	8009002 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009002:	787b      	ldrb	r3, [r7, #1]
 8009004:	059b      	lsls	r3, r3, #22
 8009006:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800900a:	78bb      	ldrb	r3, [r7, #2]
 800900c:	02db      	lsls	r3, r3, #11
 800900e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009012:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009014:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009018:	049b      	lsls	r3, r3, #18
 800901a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800901e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009020:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009022:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009026:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	0159      	lsls	r1, r3, #5
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	440b      	add	r3, r1
 8009034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009038:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800903e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009040:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009044:	2b03      	cmp	r3, #3
 8009046:	d10f      	bne.n	8009068 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	4413      	add	r3, r2
 8009050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	440a      	add	r2, r1
 800905e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009066:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009068:	7dfb      	ldrb	r3, [r7, #23]
}
 800906a:	4618      	mov	r0, r3
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop

08009078 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08c      	sub	sp, #48	; 0x30
 800907c:	af02      	add	r7, sp, #8
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	785b      	ldrb	r3, [r3, #1]
 800908e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009094:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d028      	beq.n	80090f4 <USB_HC_StartXfer+0x7c>
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	791b      	ldrb	r3, [r3, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d124      	bne.n	80090f4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10b      	bne.n	80090c8 <USB_HC_StartXfer+0x50>
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	795b      	ldrb	r3, [r3, #5]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d107      	bne.n	80090c8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	785b      	ldrb	r3, [r3, #1]
 80090bc:	4619      	mov	r1, r3
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fa2e 	bl	8009520 <USB_DoPing>
      return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e112      	b.n	80092ee <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d112      	bne.n	80090f4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	0151      	lsls	r1, r2, #5
 80090e0:	6a3a      	ldr	r2, [r7, #32]
 80090e2:	440a      	add	r2, r1
 80090e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090e8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80090ec:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2200      	movs	r2, #0
 80090f2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d018      	beq.n	800912e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	8912      	ldrh	r2, [r2, #8]
 8009104:	4413      	add	r3, r2
 8009106:	3b01      	subs	r3, #1
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	8912      	ldrh	r2, [r2, #8]
 800910c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009110:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009112:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009114:	8b7b      	ldrh	r3, [r7, #26]
 8009116:	429a      	cmp	r2, r3
 8009118:	d90b      	bls.n	8009132 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800911a:	8b7b      	ldrh	r3, [r7, #26]
 800911c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800911e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	8912      	ldrh	r2, [r2, #8]
 8009124:	fb02 f203 	mul.w	r2, r2, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	611a      	str	r2, [r3, #16]
 800912c:	e001      	b.n	8009132 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800912e:	2301      	movs	r3, #1
 8009130:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	78db      	ldrb	r3, [r3, #3]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800913a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	8912      	ldrh	r2, [r2, #8]
 8009140:	fb02 f203 	mul.w	r2, r2, r3
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009152:	04d9      	lsls	r1, r3, #19
 8009154:	4b68      	ldr	r3, [pc, #416]	; (80092f8 <USB_HC_StartXfer+0x280>)
 8009156:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009158:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	7a9b      	ldrb	r3, [r3, #10]
 800915e:	075b      	lsls	r3, r3, #29
 8009160:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009164:	69f9      	ldr	r1, [r7, #28]
 8009166:	0148      	lsls	r0, r1, #5
 8009168:	6a39      	ldr	r1, [r7, #32]
 800916a:	4401      	add	r1, r0
 800916c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009170:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009172:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	68d9      	ldr	r1, [r3, #12]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	6a3b      	ldr	r3, [r7, #32]
 8009184:	4413      	add	r3, r2
 8009186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918a:	460a      	mov	r2, r1
 800918c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	bf0c      	ite	eq
 800919e:	2301      	moveq	r3, #1
 80091a0:	2300      	movne	r3, #0
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	6a3a      	ldr	r2, [r7, #32]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	7e7b      	ldrb	r3, [r7, #25]
 80091d6:	075b      	lsls	r3, r3, #29
 80091d8:	69f9      	ldr	r1, [r7, #28]
 80091da:	0148      	lsls	r0, r1, #5
 80091dc:	6a39      	ldr	r1, [r7, #32]
 80091de:	4401      	add	r1, r0
 80091e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80091e4:	4313      	orrs	r3, r2
 80091e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a41      	ldr	r2, [pc, #260]	; (80092fc <USB_HC_StartXfer+0x284>)
 80091f8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091fa:	4b40      	ldr	r3, [pc, #256]	; (80092fc <USB_HC_StartXfer+0x284>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009202:	4a3e      	ldr	r2, [pc, #248]	; (80092fc <USB_HC_StartXfer+0x284>)
 8009204:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	78db      	ldrb	r3, [r3, #3]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d006      	beq.n	800921c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800920e:	4b3b      	ldr	r3, [pc, #236]	; (80092fc <USB_HC_StartXfer+0x284>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009216:	4a39      	ldr	r2, [pc, #228]	; (80092fc <USB_HC_StartXfer+0x284>)
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	e005      	b.n	8009228 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800921c:	4b37      	ldr	r3, [pc, #220]	; (80092fc <USB_HC_StartXfer+0x284>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009224:	4a35      	ldr	r2, [pc, #212]	; (80092fc <USB_HC_StartXfer+0x284>)
 8009226:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009228:	4b34      	ldr	r3, [pc, #208]	; (80092fc <USB_HC_StartXfer+0x284>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009230:	4a32      	ldr	r2, [pc, #200]	; (80092fc <USB_HC_StartXfer+0x284>)
 8009232:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	4413      	add	r3, r2
 800923c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009240:	461a      	mov	r2, r3
 8009242:	4b2e      	ldr	r3, [pc, #184]	; (80092fc <USB_HC_StartXfer+0x284>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d14e      	bne.n	80092ec <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	78db      	ldrb	r3, [r3, #3]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d14a      	bne.n	80092ec <USB_HC_StartXfer+0x274>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d046      	beq.n	80092ec <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	79db      	ldrb	r3, [r3, #7]
 8009262:	2b03      	cmp	r3, #3
 8009264:	d830      	bhi.n	80092c8 <USB_HC_StartXfer+0x250>
 8009266:	a201      	add	r2, pc, #4	; (adr r2, 800926c <USB_HC_StartXfer+0x1f4>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	0800927d 	.word	0x0800927d
 8009270:	080092a1 	.word	0x080092a1
 8009274:	0800927d 	.word	0x0800927d
 8009278:	080092a1 	.word	0x080092a1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	3303      	adds	r3, #3
 8009282:	089b      	lsrs	r3, r3, #2
 8009284:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009286:	8afa      	ldrh	r2, [r7, #22]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	b29b      	uxth	r3, r3
 800928e:	429a      	cmp	r2, r3
 8009290:	d91c      	bls.n	80092cc <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f043 0220 	orr.w	r2, r3, #32
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	619a      	str	r2, [r3, #24]
          }
          break;
 800929e:	e015      	b.n	80092cc <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	3303      	adds	r3, #3
 80092a6:	089b      	lsrs	r3, r3, #2
 80092a8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80092aa:	8afa      	ldrh	r2, [r7, #22]
 80092ac:	6a3b      	ldr	r3, [r7, #32]
 80092ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d90a      	bls.n	80092d0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	619a      	str	r2, [r3, #24]
          }
          break;
 80092c6:	e003      	b.n	80092d0 <USB_HC_StartXfer+0x258>

        default:
          break;
 80092c8:	bf00      	nop
 80092ca:	e002      	b.n	80092d2 <USB_HC_StartXfer+0x25a>
          break;
 80092cc:	bf00      	nop
 80092ce:	e000      	b.n	80092d2 <USB_HC_StartXfer+0x25a>
          break;
 80092d0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	68d9      	ldr	r1, [r3, #12]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	785a      	ldrb	r2, [r3, #1]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	b298      	uxth	r0, r3
 80092e0:	2300      	movs	r3, #0
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	4603      	mov	r3, r0
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7ff fc88 	bl	8008bfc <USB_WritePacket>
    }
  }

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3728      	adds	r7, #40	; 0x28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	1ff80000 	.word	0x1ff80000
 80092fc:	200001fc 	.word	0x200001fc

08009300 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	b29b      	uxth	r3, r3
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009322:	b480      	push	{r7}
 8009324:	b087      	sub	sp, #28
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009332:	78fb      	ldrb	r3, [r7, #3]
 8009334:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	4413      	add	r3, r2
 8009342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	0c9b      	lsrs	r3, r3, #18
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <USB_HC_Halt+0x3a>
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b02      	cmp	r3, #2
 800935a:	d16c      	bne.n	8009436 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	4413      	add	r3, r2
 8009364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	440a      	add	r2, r1
 8009372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009376:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800937a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d143      	bne.n	8009410 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4413      	add	r3, r2
 8009390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	440a      	add	r2, r1
 800939e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	0151      	lsls	r1, r2, #5
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	440a      	add	r2, r1
 80093de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	3301      	adds	r3, #1
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093f4:	d81d      	bhi.n	8009432 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800940c:	d0ec      	beq.n	80093e8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800940e:	e080      	b.n	8009512 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	4413      	add	r3, r2
 8009418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	440a      	add	r2, r1
 8009426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800942a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800942e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009430:	e06f      	b.n	8009512 <USB_HC_Halt+0x1f0>
          break;
 8009432:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009434:	e06d      	b.n	8009512 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	4413      	add	r3, r2
 800943e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	440a      	add	r2, r1
 800944c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009450:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009454:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d143      	bne.n	80094ee <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4413      	add	r3, r2
 800946e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	440a      	add	r2, r1
 800947c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009480:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009484:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	015a      	lsls	r2, r3, #5
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	4413      	add	r3, r2
 800948e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	0151      	lsls	r1, r2, #5
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	440a      	add	r2, r1
 800949c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094a4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	0151      	lsls	r1, r2, #5
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	440a      	add	r2, r1
 80094bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094c4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	3301      	adds	r3, #1
 80094ca:	617b      	str	r3, [r7, #20]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094d2:	d81d      	bhi.n	8009510 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094ea:	d0ec      	beq.n	80094c6 <USB_HC_Halt+0x1a4>
 80094ec:	e011      	b.n	8009512 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	0151      	lsls	r1, r2, #5
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	440a      	add	r2, r1
 8009504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	e000      	b.n	8009512 <USB_HC_Halt+0x1f0>
          break;
 8009510:	bf00      	nop
    }
  }

  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	371c      	adds	r7, #28
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009520:	b480      	push	{r7}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009534:	2301      	movs	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	04da      	lsls	r2, r3, #19
 800953c:	4b15      	ldr	r3, [pc, #84]	; (8009594 <USB_DoPing+0x74>)
 800953e:	4013      	ands	r3, r2
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	0151      	lsls	r1, r2, #5
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	440a      	add	r2, r1
 8009548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800954c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009550:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	4413      	add	r3, r2
 800955a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009568:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009570:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	4413      	add	r3, r2
 800957a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800957e:	461a      	mov	r2, r3
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	1ff80000 	.word	0x1ff80000

08009598 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff face 	bl	8008b4a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80095ae:	2110      	movs	r1, #16
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff fadb 	bl	8008b6c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff fafe 	bl	8008bb8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80095bc:	2300      	movs	r3, #0
 80095be:	613b      	str	r3, [r7, #16]
 80095c0:	e01f      	b.n	8009602 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	015a      	lsls	r2, r3, #5
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	4413      	add	r3, r2
 80095ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f6:	461a      	mov	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	3301      	adds	r3, #1
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b0f      	cmp	r3, #15
 8009606:	d9dc      	bls.n	80095c2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	e034      	b.n	8009678 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	4413      	add	r3, r2
 8009616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009624:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800962c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009634:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009642:	461a      	mov	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	3301      	adds	r3, #1
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009654:	d80c      	bhi.n	8009670 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4413      	add	r3, r2
 800965e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800966c:	d0ec      	beq.n	8009648 <USB_StopHost+0xb0>
 800966e:	e000      	b.n	8009672 <USB_StopHost+0xda>
        break;
 8009670:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	3301      	adds	r3, #1
 8009676:	613b      	str	r3, [r7, #16]
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	2b0f      	cmp	r3, #15
 800967c:	d9c7      	bls.n	800960e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009684:	461a      	mov	r2, r3
 8009686:	f04f 33ff 	mov.w	r3, #4294967295
 800968a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f04f 32ff 	mov.w	r2, #4294967295
 8009692:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff fa47 	bl	8008b28 <USB_EnableGlobalInt>

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80096b0:	e008      	b.n	80096c4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	32e0      	adds	r2, #224	; 0xe0
 80096b8:	2100      	movs	r1, #0
 80096ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3301      	adds	r3, #1
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b0e      	cmp	r3, #14
 80096c8:	d9f3      	bls.n	80096b2 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
 80096ce:	e009      	b.n	80096e4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096ea:	d3f1      	bcc.n	80096d0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2240      	movs	r2, #64	; 0x40
 8009710:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
	...

08009738 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af04      	add	r7, sp, #16
 800973e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009740:	2302      	movs	r3, #2
 8009742:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fadd 	bl	8009d08 <USBH_IsPortEnabled>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10c      	bne.n	800976e <USBH_Process+0x36>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d007      	beq.n	800976e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b03      	cmp	r3, #3
 8009766:	d002      	beq.n	800976e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2203      	movs	r2, #3
 800976c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b0b      	cmp	r3, #11
 8009776:	f200 814c 	bhi.w	8009a12 <USBH_Process+0x2da>
 800977a:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <USBH_Process+0x48>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	080097b1 	.word	0x080097b1
 8009784:	080097d3 	.word	0x080097d3
 8009788:	080097e7 	.word	0x080097e7
 800978c:	080099ed 	.word	0x080099ed
 8009790:	08009a13 	.word	0x08009a13
 8009794:	08009875 	.word	0x08009875
 8009798:	080099a3 	.word	0x080099a3
 800979c:	080098a5 	.word	0x080098a5
 80097a0:	080098c5 	.word	0x080098c5
 80097a4:	080098e5 	.word	0x080098e5
 80097a8:	08009913 	.word	0x08009913
 80097ac:	080099d5 	.word	0x080099d5
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 812c 	beq.w	8009a16 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80097c4:	20c8      	movs	r0, #200	; 0xc8
 80097c6:	f003 fd08 	bl	800d1da <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f003 fc77 	bl	800d0be <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80097d0:	e121      	b.n	8009a16 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097d8:	2b01      	cmp	r3, #1
 80097da:	f040 811e 	bne.w	8009a1a <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2202      	movs	r2, #2
 80097e2:	701a      	strb	r2, [r3, #0]
    }
    break;
 80097e4:	e119      	b.n	8009a1a <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80097e6:	2064      	movs	r0, #100	; 0x64
 80097e8:	f003 fcf7 	bl	800d1da <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f003 fc41 	bl	800d074 <USBH_LL_GetSpeed>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2205      	movs	r2, #5
 8009800:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8009802:	2100      	movs	r1, #0
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 ffe3 	bl	800a7d0 <USBH_AllocPipe>
 800980a:	4603      	mov	r3, r0
 800980c:	461a      	mov	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8009812:	2180      	movs	r1, #128	; 0x80
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 ffdb 	bl	800a7d0 <USBH_AllocPipe>
 800981a:	4603      	mov	r3, r0
 800981c:	461a      	mov	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7919      	ldrb	r1, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8009836:	b292      	uxth	r2, r2
 8009838:	9202      	str	r2, [sp, #8]
 800983a:	2200      	movs	r2, #0
 800983c:	9201      	str	r2, [sp, #4]
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	4603      	mov	r3, r0
 8009842:	2280      	movs	r2, #128	; 0x80
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 ffa4 	bl	800a792 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7959      	ldrb	r1, [r3, #5]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800985e:	b292      	uxth	r2, r2
 8009860:	9202      	str	r2, [sp, #8]
 8009862:	2200      	movs	r2, #0
 8009864:	9201      	str	r2, [sp, #4]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	2200      	movs	r2, #0
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 ff90 	bl	800a792 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009872:	e0e3      	b.n	8009a3c <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f8e7 	bl	8009a48 <USBH_HandleEnum>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 80ce 	bne.w	8009a1e <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8009890:	2b01      	cmp	r3, #1
 8009892:	d103      	bne.n	800989c <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2208      	movs	r2, #8
 8009898:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800989a:	e0c0      	b.n	8009a1e <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2207      	movs	r2, #7
 80098a0:	701a      	strb	r2, [r3, #0]
    break;
 80098a2:	e0bc      	b.n	8009a1e <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 80b9 	beq.w	8009a22 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098b6:	2101      	movs	r1, #1
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2208      	movs	r2, #8
 80098c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80098c2:	e0ae      	b.n	8009a22 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fb4a 	bl	8009f68 <USBH_SetCfg>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f040 80a5 	bne.w	8009a26 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2209      	movs	r2, #9
 80098e0:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80098e2:	e0a0      	b.n	8009a26 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80098f2:	2101      	movs	r1, #1
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fb5a 	bl	8009fae <USBH_SetFeature>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f040 8094 	bne.w	8009a2a <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	220a      	movs	r2, #10
 8009906:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009908:	e08f      	b.n	8009a2a <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	220a      	movs	r2, #10
 800990e:	701a      	strb	r2, [r3, #0]
    break;
 8009910:	e08b      	b.n	8009a2a <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8088 	beq.w	8009a2e <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]
 800992a:	e017      	b.n	800995c <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	33dc      	adds	r3, #220	; 0xdc
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	4413      	add	r3, r2
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	791a      	ldrb	r2, [r3, #4]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8009940:	429a      	cmp	r2, r3
 8009942:	d108      	bne.n	8009956 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	33dc      	adds	r3, #220	; 0xdc
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	3301      	adds	r3, #1
 800995a:	73fb      	strb	r3, [r7, #15]
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d0e4      	beq.n	800992c <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009968:	2b00      	cmp	r3, #0
 800996a:	d016      	beq.n	800999a <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	4798      	blx	r3
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d109      	bne.n	8009992 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2206      	movs	r2, #6
 8009982:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800998a:	2103      	movs	r1, #3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009990:	e04d      	b.n	8009a2e <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	220d      	movs	r2, #13
 8009996:	701a      	strb	r2, [r3, #0]
    break;
 8009998:	e049      	b.n	8009a2e <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	220d      	movs	r2, #13
 800999e:	701a      	strb	r2, [r3, #0]
    break;
 80099a0:	e045      	b.n	8009a2e <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00f      	beq.n	80099cc <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	4798      	blx	r3
 80099b8:	4603      	mov	r3, r0
 80099ba:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d136      	bne.n	8009a32 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	220b      	movs	r2, #11
 80099c8:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80099ca:	e032      	b.n	8009a32 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	220d      	movs	r2, #13
 80099d0:	701a      	strb	r2, [r3, #0]
    break;
 80099d2:	e02e      	b.n	8009a32 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d02b      	beq.n	8009a36 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	4798      	blx	r3
    }
    break;
 80099ea:	e024      	b.n	8009a36 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff fe59 	bl	80096a4 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d01e      	beq.n	8009a3a <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8009a10:	e013      	b.n	8009a3a <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8009a12:	bf00      	nop
 8009a14:	e012      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a16:	bf00      	nop
 8009a18:	e010      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a1a:	bf00      	nop
 8009a1c:	e00e      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a1e:	bf00      	nop
 8009a20:	e00c      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a22:	bf00      	nop
 8009a24:	e00a      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a26:	bf00      	nop
 8009a28:	e008      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a2a:	bf00      	nop
 8009a2c:	e006      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a2e:	bf00      	nop
 8009a30:	e004      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a32:	bf00      	nop
 8009a34:	e002      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a36:	bf00      	nop
 8009a38:	e000      	b.n	8009a3c <USBH_Process+0x304>
    break;
 8009a3a:	bf00      	nop
  }
 return USBH_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop

08009a48 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af04      	add	r7, sp, #16
 8009a4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009a50:	2301      	movs	r3, #1
 8009a52:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	785b      	ldrb	r3, [r3, #1]
 8009a58:	2b07      	cmp	r3, #7
 8009a5a:	f200 80f8 	bhi.w	8009c4e <USBH_HandleEnum+0x206>
 8009a5e:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <USBH_HandleEnum+0x1c>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009a85 	.word	0x08009a85
 8009a68:	08009af7 	.word	0x08009af7
 8009a6c:	08009b0f 	.word	0x08009b0f
 8009a70:	08009b85 	.word	0x08009b85
 8009a74:	08009b9b 	.word	0x08009b9b
 8009a78:	08009bb7 	.word	0x08009bb7
 8009a7c:	08009beb 	.word	0x08009beb
 8009a80:	08009c1f 	.word	0x08009c1f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8009a84:	2108      	movs	r1, #8
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f99e 	bl	8009dc8 <USBH_Get_DevDesc>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f040 80df 	bne.w	8009c52 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7919      	ldrb	r1, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009ab8:	b292      	uxth	r2, r2
 8009aba:	9202      	str	r2, [sp, #8]
 8009abc:	2200      	movs	r2, #0
 8009abe:	9201      	str	r2, [sp, #4]
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2280      	movs	r2, #128	; 0x80
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fe63 	bl	800a792 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	7959      	ldrb	r1, [r3, #5]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009ae0:	b292      	uxth	r2, r2
 8009ae2:	9202      	str	r2, [sp, #8]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	9201      	str	r2, [sp, #4]
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	4603      	mov	r3, r0
 8009aec:	2200      	movs	r2, #0
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fe4f 	bl	800a792 <USBH_OpenPipe>

    }
    break;
 8009af4:	e0ad      	b.n	8009c52 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009af6:	2112      	movs	r1, #18
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 f965 	bl	8009dc8 <USBH_Get_DevDesc>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 80a8 	bne.w	8009c56 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	705a      	strb	r2, [r3, #1]

    }
    break;
 8009b0c:	e0a3      	b.n	8009c56 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009b0e:	2101      	movs	r1, #1
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fa05 	bl	8009f20 <USBH_SetAddress>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f040 809e 	bne.w	8009c5a <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8009b1e:	2002      	movs	r0, #2
 8009b20:	f003 fb5b 	bl	800d1da <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2203      	movs	r2, #3
 8009b30:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	7919      	ldrb	r1, [r3, #4]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009b46:	b292      	uxth	r2, r2
 8009b48:	9202      	str	r2, [sp, #8]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	9201      	str	r2, [sp, #4]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	4603      	mov	r3, r0
 8009b52:	2280      	movs	r2, #128	; 0x80
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fe1c 	bl	800a792 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	7959      	ldrb	r1, [r3, #5]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009b6e:	b292      	uxth	r2, r2
 8009b70:	9202      	str	r2, [sp, #8]
 8009b72:	2200      	movs	r2, #0
 8009b74:	9201      	str	r2, [sp, #4]
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fe08 	bl	800a792 <USBH_OpenPipe>
    }
    break;
 8009b82:	e06a      	b.n	8009c5a <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8009b84:	2109      	movs	r1, #9
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f946 	bl	8009e18 <USBH_Get_CfgDesc>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d165      	bne.n	8009c5e <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2204      	movs	r2, #4
 8009b96:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009b98:	e061      	b.n	8009c5e <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f938 	bl	8009e18 <USBH_Get_CfgDesc>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d159      	bne.n	8009c62 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2205      	movs	r2, #5
 8009bb2:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009bb4:	e055      	b.n	8009c62 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d010      	beq.n	8009be2 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009bcc:	23ff      	movs	r3, #255	; 0xff
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f946 	bl	8009e60 <USBH_Get_StringDesc>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d145      	bne.n	8009c66 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2206      	movs	r2, #6
 8009bde:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009be0:	e041      	b.n	8009c66 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2206      	movs	r2, #6
 8009be6:	705a      	strb	r2, [r3, #1]
    break;
 8009be8:	e03d      	b.n	8009c66 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d010      	beq.n	8009c16 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009c00:	23ff      	movs	r3, #255	; 0xff
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f92c 	bl	8009e60 <USBH_Get_StringDesc>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d12d      	bne.n	8009c6a <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2207      	movs	r2, #7
 8009c12:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009c14:	e029      	b.n	8009c6a <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2207      	movs	r2, #7
 8009c1a:	705a      	strb	r2, [r3, #1]
    break;
 8009c1c:	e025      	b.n	8009c6a <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00f      	beq.n	8009c48 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009c34:	23ff      	movs	r3, #255	; 0xff
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f912 	bl	8009e60 <USBH_Get_StringDesc>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d115      	bne.n	8009c6e <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009c46:	e012      	b.n	8009c6e <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4c:	e00f      	b.n	8009c6e <USBH_HandleEnum+0x226>

  default:
    break;
 8009c4e:	bf00      	nop
 8009c50:	e00e      	b.n	8009c70 <USBH_HandleEnum+0x228>
    break;
 8009c52:	bf00      	nop
 8009c54:	e00c      	b.n	8009c70 <USBH_HandleEnum+0x228>
    break;
 8009c56:	bf00      	nop
 8009c58:	e00a      	b.n	8009c70 <USBH_HandleEnum+0x228>
    break;
 8009c5a:	bf00      	nop
 8009c5c:	e008      	b.n	8009c70 <USBH_HandleEnum+0x228>
    break;
 8009c5e:	bf00      	nop
 8009c60:	e006      	b.n	8009c70 <USBH_HandleEnum+0x228>
    break;
 8009c62:	bf00      	nop
 8009c64:	e004      	b.n	8009c70 <USBH_HandleEnum+0x228>
    break;
 8009c66:	bf00      	nop
 8009c68:	e002      	b.n	8009c70 <USBH_HandleEnum+0x228>
    break;
 8009c6a:	bf00      	nop
 8009c6c:	e000      	b.n	8009c70 <USBH_HandleEnum+0x228>
    break;
 8009c6e:	bf00      	nop
  }
  return Status;
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop

08009c7c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f804 	bl	8009ca0 <USBH_HandleSof>
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b0b      	cmp	r3, #11
 8009cb0:	d10a      	bne.n	8009cc8 <USBH_HandleSof+0x28>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d005      	beq.n	8009cc8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
  }
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009ce0:	bf00      	nop
}
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009cfc:	bf00      	nop
}
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10f      	bne.n	8009d54 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00e      	beq.n	8009d64 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	4798      	blx	r3
 8009d52:	e007      	b.n	8009d64 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d102      	bne.n	8009d64 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2202      	movs	r2, #2
 8009d62:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b082      	sub	sp, #8
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f003 f961 	bl	800d03e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	791b      	ldrb	r3, [r3, #4]
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fd42 	bl	800a80c <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	795b      	ldrb	r3, [r3, #5]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fd3c 	bl	800a80c <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d005      	beq.n	8009db2 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009dac:	2105      	movs	r1, #5
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f003 f928 	bl	800d008 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009dda:	78fb      	ldrb	r3, [r7, #3]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	4613      	mov	r3, r2
 8009de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009de6:	2100      	movs	r1, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f864 	bl	8009eb6 <USBH_GetDescriptor>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f203 3022 	addw	r0, r3, #802	; 0x322
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e04:	78fa      	ldrb	r2, [r7, #3]
 8009e06:	b292      	uxth	r2, r2
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f000 f8f4 	bl	8009ff6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	331c      	adds	r3, #28
 8009e28:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8009e2a:	887b      	ldrh	r3, [r7, #2]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e34:	2100      	movs	r1, #0
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f83d 	bl	8009eb6 <USBH_GetDescriptor>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	72fb      	strb	r3, [r7, #11]
 8009e40:	7afb      	ldrb	r3, [r7, #11]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d107      	bne.n	8009e56 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009e4c:	887a      	ldrh	r2, [r7, #2]
 8009e4e:	68f9      	ldr	r1, [r7, #12]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 f940 	bl	800a0d6 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8009e56:	7afb      	ldrb	r3, [r7, #11]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	607a      	str	r2, [r7, #4]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	72fb      	strb	r3, [r7, #11]
 8009e70:	4613      	mov	r3, r2
 8009e72:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e7c:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009e84:	893b      	ldrh	r3, [r7, #8]
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 f812 	bl	8009eb6 <USBH_GetDescriptor>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75fb      	strb	r3, [r7, #23]
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d107      	bne.n	8009eac <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ea2:	893a      	ldrh	r2, [r7, #8]
 8009ea4:	6879      	ldr	r1, [r7, #4]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fa13 	bl	800a2d2 <USBH_ParseStringDesc>
  }
  return status;
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	607b      	str	r3, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	72fb      	strb	r3, [r7, #11]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	789b      	ldrb	r3, [r3, #2]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d11c      	bne.n	8009f0a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ed0:	7afb      	ldrb	r3, [r7, #11]
 8009ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2206      	movs	r2, #6
 8009ee0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	893a      	ldrh	r2, [r7, #8]
 8009ee6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ee8:	893b      	ldrh	r3, [r7, #8]
 8009eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ef2:	d104      	bne.n	8009efe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f240 4209 	movw	r2, #1033	; 0x409
 8009efa:	829a      	strh	r2, [r3, #20]
 8009efc:	e002      	b.n	8009f04 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	8b3a      	ldrh	r2, [r7, #24]
 8009f08:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009f0a:	8b3b      	ldrh	r3, [r7, #24]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 fa2c 	bl	800a36e <USBH_CtlReq>
 8009f16:	4603      	mov	r3, r0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	789b      	ldrb	r3, [r3, #2]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d10f      	bne.n	8009f54 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2205      	movs	r2, #5
 8009f3e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009f54:	2200      	movs	r2, #0
 8009f56:	2100      	movs	r1, #0
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fa08 	bl	800a36e <USBH_CtlReq>
 8009f5e:	4603      	mov	r3, r0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	789b      	ldrb	r3, [r3, #2]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d10e      	bne.n	8009f9a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2209      	movs	r2, #9
 8009f86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	887a      	ldrh	r2, [r7, #2]
 8009f8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f9e5 	bl	800a36e <USBH_CtlReq>
 8009fa4:	4603      	mov	r3, r0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	789b      	ldrb	r3, [r3, #2]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d10f      	bne.n	8009fe2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2203      	movs	r2, #3
 8009fcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f9c1 	bl	800a36e <USBH_CtlReq>
 8009fec:	4603      	mov	r3, r0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b085      	sub	sp, #20
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	60f8      	str	r0, [r7, #12]
 8009ffe:	60b9      	str	r1, [r7, #8]
 800a000:	4613      	mov	r3, r2
 800a002:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	781a      	ldrb	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	785a      	ldrb	r2, [r3, #1]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	3302      	adds	r3, #2
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	3303      	adds	r3, #3
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b29b      	uxth	r3, r3
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	b29b      	uxth	r3, r3
 800a028:	4313      	orrs	r3, r2
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	791a      	ldrb	r2, [r3, #4]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	795a      	ldrb	r2, [r3, #5]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	799a      	ldrb	r2, [r3, #6]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	79da      	ldrb	r2, [r3, #7]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a050:	88fb      	ldrh	r3, [r7, #6]
 800a052:	2b08      	cmp	r3, #8
 800a054:	d939      	bls.n	800a0ca <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	3308      	adds	r3, #8
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	3309      	adds	r3, #9
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	b29b      	uxth	r3, r3
 800a066:	021b      	lsls	r3, r3, #8
 800a068:	b29b      	uxth	r3, r3
 800a06a:	4313      	orrs	r3, r2
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	330a      	adds	r3, #10
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	330b      	adds	r3, #11
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	b29b      	uxth	r3, r3
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	b29b      	uxth	r3, r3
 800a086:	4313      	orrs	r3, r2
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	330c      	adds	r3, #12
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	b29a      	uxth	r2, r3
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	330d      	adds	r3, #13
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	7b9a      	ldrb	r2, [r3, #14]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	7bda      	ldrb	r2, [r3, #15]
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	7c1a      	ldrb	r2, [r3, #16]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	7c5a      	ldrb	r2, [r3, #17]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	745a      	strb	r2, [r3, #17]
  }
}
 800a0ca:	bf00      	nop
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b08a      	sub	sp, #40	; 0x28
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	785a      	ldrb	r2, [r3, #1]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	3302      	adds	r3, #2
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	3303      	adds	r3, #3
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	b29b      	uxth	r3, r3
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	4313      	orrs	r3, r2
 800a11e:	b29a      	uxth	r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	791a      	ldrb	r2, [r3, #4]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	795a      	ldrb	r2, [r3, #5]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	799a      	ldrb	r2, [r3, #6]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	79da      	ldrb	r2, [r3, #7]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	7a1a      	ldrb	r2, [r3, #8]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a14c:	88fb      	ldrh	r3, [r7, #6]
 800a14e:	2b09      	cmp	r3, #9
 800a150:	d95f      	bls.n	800a212 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a152:	2309      	movs	r3, #9
 800a154:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a156:	2300      	movs	r3, #0
 800a158:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a15a:	e051      	b.n	800a200 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a15c:	f107 0316 	add.w	r3, r7, #22
 800a160:	4619      	mov	r1, r3
 800a162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a164:	f000 f8e8 	bl	800a338 <USBH_GetNextDesc>
 800a168:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	785b      	ldrb	r3, [r3, #1]
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d146      	bne.n	800a200 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a176:	221a      	movs	r2, #26
 800a178:	fb02 f303 	mul.w	r3, r2, r3
 800a17c:	3308      	adds	r3, #8
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4413      	add	r3, r2
 800a182:	3302      	adds	r3, #2
 800a184:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800a186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a188:	69f8      	ldr	r0, [r7, #28]
 800a18a:	f000 f846 	bl	800a21a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a194:	2300      	movs	r3, #0
 800a196:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a198:	e022      	b.n	800a1e0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800a19a:	f107 0316 	add.w	r3, r7, #22
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1a2:	f000 f8c9 	bl	800a338 <USBH_GetNextDesc>
 800a1a6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	2b05      	cmp	r3, #5
 800a1ae:	d117      	bne.n	800a1e0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a1b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a1b8:	3201      	adds	r2, #1
 800a1ba:	00d2      	lsls	r2, r2, #3
 800a1bc:	211a      	movs	r1, #26
 800a1be:	fb01 f303 	mul.w	r3, r1, r3
 800a1c2:	4413      	add	r3, r2
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800a1ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1d0:	69b8      	ldr	r0, [r7, #24]
 800a1d2:	f000 f851 	bl	800a278 <USBH_ParseEPDesc>
            ep_ix++;
 800a1d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a1da:	3301      	adds	r3, #1
 800a1dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d204      	bcs.n	800a1f6 <USBH_ParseCfgDesc+0x120>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	885a      	ldrh	r2, [r3, #2]
 800a1f0:	8afb      	ldrh	r3, [r7, #22]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d8d1      	bhi.n	800a19a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a1f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a204:	2b01      	cmp	r3, #1
 800a206:	d804      	bhi.n	800a212 <USBH_ParseCfgDesc+0x13c>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	885a      	ldrh	r2, [r3, #2]
 800a20c:	8afb      	ldrh	r3, [r7, #22]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d8a4      	bhi.n	800a15c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a212:	bf00      	nop
 800a214:	3728      	adds	r7, #40	; 0x28
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781a      	ldrb	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	785a      	ldrb	r2, [r3, #1]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	789a      	ldrb	r2, [r3, #2]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	78da      	ldrb	r2, [r3, #3]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	791a      	ldrb	r2, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	795a      	ldrb	r2, [r3, #5]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	799a      	ldrb	r2, [r3, #6]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	79da      	ldrb	r2, [r3, #7]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	7a1a      	ldrb	r2, [r3, #8]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	721a      	strb	r2, [r3, #8]
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781a      	ldrb	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	785a      	ldrb	r2, [r3, #1]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	789a      	ldrb	r2, [r3, #2]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	78da      	ldrb	r2, [r3, #3]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	3305      	adds	r3, #5
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	799a      	ldrb	r2, [r3, #6]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	719a      	strb	r2, [r3, #6]
}
 800a2c6:	bf00      	nop
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b087      	sub	sp, #28
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	60f8      	str	r0, [r7, #12]
 800a2da:	60b9      	str	r1, [r7, #8]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d120      	bne.n	800a32c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	1e9a      	subs	r2, r3, #2
 800a2f0:	88fb      	ldrh	r3, [r7, #6]
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	bf28      	it	cs
 800a2f6:	4613      	movcs	r3, r2
 800a2f8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	3302      	adds	r3, #2
 800a2fe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a300:	2300      	movs	r3, #0
 800a302:	82fb      	strh	r3, [r7, #22]
 800a304:	e00b      	b.n	800a31e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a306:	8afb      	ldrh	r3, [r7, #22]
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	4413      	add	r3, r2
 800a30c:	781a      	ldrb	r2, [r3, #0]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	3301      	adds	r3, #1
 800a316:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a318:	8afb      	ldrh	r3, [r7, #22]
 800a31a:	3302      	adds	r3, #2
 800a31c:	82fb      	strh	r3, [r7, #22]
 800a31e:	8afa      	ldrh	r2, [r7, #22]
 800a320:	8abb      	ldrh	r3, [r7, #20]
 800a322:	429a      	cmp	r2, r3
 800a324:	d3ef      	bcc.n	800a306 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2200      	movs	r2, #0
 800a32a:	701a      	strb	r2, [r3, #0]
  }
}
 800a32c:	bf00      	nop
 800a32e:	371c      	adds	r7, #28
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	881a      	ldrh	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	b29a      	uxth	r2, r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4413      	add	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800a360:	68fb      	ldr	r3, [r7, #12]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b086      	sub	sp, #24
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	4613      	mov	r3, r2
 800a37a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a37c:	2301      	movs	r3, #1
 800a37e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	789b      	ldrb	r3, [r3, #2]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d002      	beq.n	800a38e <USBH_CtlReq+0x20>
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d00f      	beq.n	800a3ac <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800a38c:	e034      	b.n	800a3f8 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	88fa      	ldrh	r2, [r7, #6]
 800a398:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2201      	movs	r2, #1
 800a39e:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
    break;
 800a3aa:	e025      	b.n	800a3f8 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f829 	bl	800a404 <USBH_HandleControl>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d108      	bne.n	800a3ce <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	75fb      	strb	r3, [r7, #23]
    break;
 800a3cc:	e013      	b.n	800a3f6 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d108      	bne.n	800a3e6 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	75fb      	strb	r3, [r7, #23]
    break;
 800a3e4:	e007      	b.n	800a3f6 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d104      	bne.n	800a3f6 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	75fb      	strb	r3, [r7, #23]
    break;
 800a3f6:	bf00      	nop
  }
  return status;
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
	...

0800a404 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af02      	add	r7, sp, #8
 800a40a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a410:	2300      	movs	r3, #0
 800a412:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	7e1b      	ldrb	r3, [r3, #24]
 800a418:	3b01      	subs	r3, #1
 800a41a:	2b0a      	cmp	r3, #10
 800a41c:	f200 814c 	bhi.w	800a6b8 <USBH_HandleControl+0x2b4>
 800a420:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <USBH_HandleControl+0x24>)
 800a422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a426:	bf00      	nop
 800a428:	0800a455 	.word	0x0800a455
 800a42c:	0800a46f 	.word	0x0800a46f
 800a430:	0800a4d9 	.word	0x0800a4d9
 800a434:	0800a4ff 	.word	0x0800a4ff
 800a438:	0800a537 	.word	0x0800a537
 800a43c:	0800a563 	.word	0x0800a563
 800a440:	0800a5b5 	.word	0x0800a5b5
 800a444:	0800a5d7 	.word	0x0800a5d7
 800a448:	0800a613 	.word	0x0800a613
 800a44c:	0800a63b 	.word	0x0800a63b
 800a450:	0800a679 	.word	0x0800a679
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f103 0110 	add.w	r1, r3, #16
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	795b      	ldrb	r3, [r3, #5]
 800a45e:	461a      	mov	r2, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f939 	bl	800a6d8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2202      	movs	r2, #2
 800a46a:	761a      	strb	r2, [r3, #24]
    break;
 800a46c:	e12f      	b.n	800a6ce <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	795b      	ldrb	r3, [r3, #5]
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f002 fe9d 	bl	800d1b4 <USBH_LL_GetURBState>
 800a47a:	4603      	mov	r3, r0
 800a47c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d11e      	bne.n	800a4c2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7c1b      	ldrb	r3, [r3, #16]
 800a488:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a48c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	8adb      	ldrh	r3, [r3, #22]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00a      	beq.n	800a4ac <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800a496:	7b7b      	ldrb	r3, [r7, #13]
 800a498:	2b80      	cmp	r3, #128	; 0x80
 800a49a:	d103      	bne.n	800a4a4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2203      	movs	r2, #3
 800a4a0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a4a2:	e10b      	b.n	800a6bc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2205      	movs	r2, #5
 800a4a8:	761a      	strb	r2, [r3, #24]
    break;
 800a4aa:	e107      	b.n	800a6bc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800a4ac:	7b7b      	ldrb	r3, [r7, #13]
 800a4ae:	2b80      	cmp	r3, #128	; 0x80
 800a4b0:	d103      	bne.n	800a4ba <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2209      	movs	r2, #9
 800a4b6:	761a      	strb	r2, [r3, #24]
    break;
 800a4b8:	e100      	b.n	800a6bc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2207      	movs	r2, #7
 800a4be:	761a      	strb	r2, [r3, #24]
    break;
 800a4c0:	e0fc      	b.n	800a6bc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	2b04      	cmp	r3, #4
 800a4c6:	d003      	beq.n	800a4d0 <USBH_HandleControl+0xcc>
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	f040 80f6 	bne.w	800a6bc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	220b      	movs	r2, #11
 800a4d4:	761a      	strb	r2, [r3, #24]
    break;
 800a4d6:	e0f1      	b.n	800a6bc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6899      	ldr	r1, [r3, #8]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	899a      	ldrh	r2, [r3, #12]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	791b      	ldrb	r3, [r3, #4]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f930 	bl	800a756 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2204      	movs	r2, #4
 800a4fa:	761a      	strb	r2, [r3, #24]
    break;
 800a4fc:	e0e7      	b.n	800a6ce <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	791b      	ldrb	r3, [r3, #4]
 800a502:	4619      	mov	r1, r3
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f002 fe55 	bl	800d1b4 <USBH_LL_GetURBState>
 800a50a:	4603      	mov	r3, r0
 800a50c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d102      	bne.n	800a51a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2209      	movs	r2, #9
 800a518:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	2b05      	cmp	r3, #5
 800a51e:	d102      	bne.n	800a526 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a520:	2303      	movs	r3, #3
 800a522:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a524:	e0cc      	b.n	800a6c0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b04      	cmp	r3, #4
 800a52a:	f040 80c9 	bne.w	800a6c0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	220b      	movs	r2, #11
 800a532:	761a      	strb	r2, [r3, #24]
    break;
 800a534:	e0c4      	b.n	800a6c0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6899      	ldr	r1, [r3, #8]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	899a      	ldrh	r2, [r3, #12]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7958      	ldrb	r0, [r3, #5]
 800a542:	2301      	movs	r3, #1
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	4603      	mov	r3, r0
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f8df 	bl	800a70c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a554:	b29a      	uxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2206      	movs	r2, #6
 800a55e:	761a      	strb	r2, [r3, #24]
    break;
 800a560:	e0b5      	b.n	800a6ce <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	795b      	ldrb	r3, [r3, #5]
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f002 fe23 	bl	800d1b4 <USBH_LL_GetURBState>
 800a56e:	4603      	mov	r3, r0
 800a570:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d103      	bne.n	800a580 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2207      	movs	r2, #7
 800a57c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a57e:	e0a1      	b.n	800a6c4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800a580:	7bbb      	ldrb	r3, [r7, #14]
 800a582:	2b05      	cmp	r3, #5
 800a584:	d105      	bne.n	800a592 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	220c      	movs	r2, #12
 800a58a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a58c:	2303      	movs	r3, #3
 800a58e:	73fb      	strb	r3, [r7, #15]
    break;
 800a590:	e098      	b.n	800a6c4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d103      	bne.n	800a5a0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2205      	movs	r2, #5
 800a59c:	761a      	strb	r2, [r3, #24]
    break;
 800a59e:	e091      	b.n	800a6c4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800a5a0:	7bbb      	ldrb	r3, [r7, #14]
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	f040 808e 	bne.w	800a6c4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	220b      	movs	r2, #11
 800a5ac:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5b2:	e087      	b.n	800a6c4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	791b      	ldrb	r3, [r3, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 f8ca 	bl	800a756 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2208      	movs	r2, #8
 800a5d2:	761a      	strb	r2, [r3, #24]

    break;
 800a5d4:	e07b      	b.n	800a6ce <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	791b      	ldrb	r3, [r3, #4]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f002 fde9 	bl	800d1b4 <USBH_LL_GetURBState>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d105      	bne.n	800a5f8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	220d      	movs	r2, #13
 800a5f0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a5f6:	e067      	b.n	800a6c8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d103      	bne.n	800a606 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	220b      	movs	r2, #11
 800a602:	761a      	strb	r2, [r3, #24]
    break;
 800a604:	e060      	b.n	800a6c8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800a606:	7bbb      	ldrb	r3, [r7, #14]
 800a608:	2b05      	cmp	r3, #5
 800a60a:	d15d      	bne.n	800a6c8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800a60c:	2303      	movs	r3, #3
 800a60e:	73fb      	strb	r3, [r7, #15]
    break;
 800a610:	e05a      	b.n	800a6c8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	795a      	ldrb	r2, [r3, #5]
 800a616:	2301      	movs	r3, #1
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	4613      	mov	r3, r2
 800a61c:	2200      	movs	r2, #0
 800a61e:	2100      	movs	r1, #0
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f873 	bl	800a70c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	220a      	movs	r2, #10
 800a636:	761a      	strb	r2, [r3, #24]
    break;
 800a638:	e049      	b.n	800a6ce <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	795b      	ldrb	r3, [r3, #5]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f002 fdb7 	bl	800d1b4 <USBH_LL_GetURBState>
 800a646:	4603      	mov	r3, r0
 800a648:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800a64a:	7bbb      	ldrb	r3, [r7, #14]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d105      	bne.n	800a65c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	220d      	movs	r2, #13
 800a658:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800a65a:	e037      	b.n	800a6cc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d103      	bne.n	800a66a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2209      	movs	r2, #9
 800a666:	761a      	strb	r2, [r3, #24]
    break;
 800a668:	e030      	b.n	800a6cc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b04      	cmp	r3, #4
 800a66e:	d12d      	bne.n	800a6cc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	220b      	movs	r2, #11
 800a674:	761a      	strb	r2, [r3, #24]
    break;
 800a676:	e029      	b.n	800a6cc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	7e5b      	ldrb	r3, [r3, #25]
 800a67c:	3301      	adds	r3, #1
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	765a      	strb	r2, [r3, #25]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	7e5b      	ldrb	r3, [r3, #25]
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d809      	bhi.n	800a6a0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f002 fcd6 	bl	800d03e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2201      	movs	r2, #1
 800a696:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800a69e:	e016      	b.n	800a6ce <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a6a6:	2106      	movs	r1, #6
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a6b6:	e00a      	b.n	800a6ce <USBH_HandleControl+0x2ca>

  default:
    break;
 800a6b8:	bf00      	nop
 800a6ba:	e008      	b.n	800a6ce <USBH_HandleControl+0x2ca>
    break;
 800a6bc:	bf00      	nop
 800a6be:	e006      	b.n	800a6ce <USBH_HandleControl+0x2ca>
    break;
 800a6c0:	bf00      	nop
 800a6c2:	e004      	b.n	800a6ce <USBH_HandleControl+0x2ca>
    break;
 800a6c4:	bf00      	nop
 800a6c6:	e002      	b.n	800a6ce <USBH_HandleControl+0x2ca>
    break;
 800a6c8:	bf00      	nop
 800a6ca:	e000      	b.n	800a6ce <USBH_HandleControl+0x2ca>
    break;
 800a6cc:	bf00      	nop
  }
  return status;
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af04      	add	r7, sp, #16
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a6e6:	79f9      	ldrb	r1, [r7, #7]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9303      	str	r3, [sp, #12]
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	9302      	str	r3, [sp, #8]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f002 fd28 	bl	800d152 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af04      	add	r7, sp, #16
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	4611      	mov	r1, r2
 800a718:	461a      	mov	r2, r3
 800a71a:	460b      	mov	r3, r1
 800a71c:	80fb      	strh	r3, [r7, #6]
 800a71e:	4613      	mov	r3, r2
 800a720:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a730:	7979      	ldrb	r1, [r7, #5]
 800a732:	7e3b      	ldrb	r3, [r7, #24]
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	88fb      	ldrh	r3, [r7, #6]
 800a738:	9302      	str	r3, [sp, #8]
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	2301      	movs	r3, #1
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	2300      	movs	r3, #0
 800a744:	2200      	movs	r2, #0
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f002 fd03 	bl	800d152 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b088      	sub	sp, #32
 800a75a:	af04      	add	r7, sp, #16
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	4611      	mov	r1, r2
 800a762:	461a      	mov	r2, r3
 800a764:	460b      	mov	r3, r1
 800a766:	80fb      	strh	r3, [r7, #6]
 800a768:	4613      	mov	r3, r2
 800a76a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a76c:	7979      	ldrb	r1, [r7, #5]
 800a76e:	2300      	movs	r3, #0
 800a770:	9303      	str	r3, [sp, #12]
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	9302      	str	r3, [sp, #8]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	2301      	movs	r3, #1
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	2300      	movs	r3, #0
 800a780:	2201      	movs	r2, #1
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f002 fce5 	bl	800d152 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a788:	2300      	movs	r3, #0

}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b086      	sub	sp, #24
 800a796:	af04      	add	r7, sp, #16
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	4608      	mov	r0, r1
 800a79c:	4611      	mov	r1, r2
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	70fb      	strb	r3, [r7, #3]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70bb      	strb	r3, [r7, #2]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800a7ac:	7878      	ldrb	r0, [r7, #1]
 800a7ae:	78ba      	ldrb	r2, [r7, #2]
 800a7b0:	78f9      	ldrb	r1, [r7, #3]
 800a7b2:	8b3b      	ldrh	r3, [r7, #24]
 800a7b4:	9302      	str	r3, [sp, #8]
 800a7b6:	7d3b      	ldrb	r3, [r7, #20]
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	7c3b      	ldrb	r3, [r7, #16]
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	4603      	mov	r3, r0
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f002 fc97 	bl	800d0f4 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800a7c6:	2300      	movs	r3, #0

}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f831 	bl	800a844 <USBH_GetFreePipe>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a7e6:	89fb      	ldrh	r3, [r7, #14]
 800a7e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d007      	beq.n	800a800 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	89fa      	ldrh	r2, [r7, #14]
 800a7f4:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	32e0      	adds	r2, #224	; 0xe0
 800a7fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800a800:	89fb      	ldrh	r3, [r7, #14]
 800a802:	b2db      	uxtb	r3, r3
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	2b0a      	cmp	r3, #10
 800a81c:	d80b      	bhi.n	800a836 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	32e0      	adds	r2, #224	; 0xe0
 800a824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a828:	78fa      	ldrb	r2, [r7, #3]
 800a82a:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	32e0      	adds	r2, #224	; 0xe0
 800a832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a850:	2300      	movs	r3, #0
 800a852:	73fb      	strb	r3, [r7, #15]
 800a854:	e00e      	b.n	800a874 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a856:	7bfa      	ldrb	r2, [r7, #15]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	32e0      	adds	r2, #224	; 0xe0
 800a85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	e007      	b.n	800a87e <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
 800a870:	3301      	adds	r3, #1
 800a872:	73fb      	strb	r3, [r7, #15]
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	2b0a      	cmp	r3, #10
 800a878:	d9ed      	bls.n	800a856 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800a87a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
	...

0800a88c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a892:	f7f6 fd27 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a896:	f000 f979 	bl	800ab8c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  BSP_LCD_Init();
 800a89a:	f7f5 fe89 	bl	80005b0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800a89e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	f7f5 ff1c 	bl	80006e0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800a8a8:	2001      	movs	r0, #1
 800a8aa:	f7f5 ff79 	bl	80007a0 <BSP_LCD_SelectLayer>
  //BSP_LCD_SetLayerVisible(1, 1);
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a8ae:	48a4      	ldr	r0, [pc, #656]	; (800ab40 <main+0x2b4>)
 800a8b0:	f7f5 ffb8 	bl	8000824 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800a8b4:	48a3      	ldr	r0, [pc, #652]	; (800ab44 <main+0x2b8>)
 800a8b6:	f7f5 ff9b 	bl	80007f0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800a8ba:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800a8be:	f7f5 ff7f 	bl	80007c0 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayOn();
 800a8c2:	f7f6 f941 	bl	8000b48 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800a8c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a8ca:	f7f5 ffc5 	bl	8000858 <BSP_LCD_Clear>

  //RNG->CR |= RNG_CR_RNGEN;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a8ce:	f001 f8ed 	bl	800baac <MX_GPIO_Init>
  MX_ADC3_Init();
 800a8d2:	f000 fa17 	bl	800ad04 <MX_ADC3_Init>
  MX_CRC_Init();
 800a8d6:	f000 fa67 	bl	800ada8 <MX_CRC_Init>
  MX_DCMI_Init();
 800a8da:	f000 fa87 	bl	800adec <MX_DCMI_Init>
  MX_DMA2D_Init();
 800a8de:	f000 fab9 	bl	800ae54 <MX_DMA2D_Init>
  MX_FMC_Init();
 800a8e2:	f001 f893 	bl	800ba0c <MX_FMC_Init>
  MX_I2C1_Init();
 800a8e6:	f000 fae7 	bl	800aeb8 <MX_I2C1_Init>
  MX_I2C3_Init();
 800a8ea:	f000 fb25 	bl	800af38 <MX_I2C3_Init>
  MX_LTDC_Init();
 800a8ee:	f000 fb63 	bl	800afb8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800a8f2:	f000 fbe3 	bl	800b0bc <MX_QUADSPI_Init>
  MX_RTC_Init();
 800a8f6:	f000 fc21 	bl	800b13c <MX_RTC_Init>
  MX_SAI2_Init();
 800a8fa:	f000 fcc7 	bl	800b28c <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800a8fe:	f000 fd6d 	bl	800b3dc <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800a902:	f000 fd9b 	bl	800b43c <MX_SPI2_Init>
  MX_TIM1_Init();
 800a906:	f000 fdd7 	bl	800b4b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800a90a:	f000 fe81 	bl	800b610 <MX_TIM2_Init>
  MX_TIM3_Init();
 800a90e:	f000 fecb 	bl	800b6a8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800a912:	f000 ff3f 	bl	800b794 <MX_TIM5_Init>
  MX_TIM8_Init();
 800a916:	f000 ffb3 	bl	800b880 <MX_TIM8_Init>
  MX_TIM12_Init();
 800a91a:	f001 f803 	bl	800b924 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800a91e:	f001 f845 	bl	800b9ac <MX_USART1_UART_Init>
  MX_RNG_Init();
 800a922:	f000 fbf7 	bl	800b114 <MX_RNG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

    if (round_counter > 4) {
 800a926:	4b88      	ldr	r3, [pc, #544]	; (800ab48 <main+0x2bc>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d92e      	bls.n	800a98c <main+0x100>
                   round_counter = 0;
 800a92e:	4b86      	ldr	r3, [pc, #536]	; (800ab48 <main+0x2bc>)
 800a930:	2200      	movs	r2, #0
 800a932:	601a      	str	r2, [r3, #0]

                   HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800a934:	2201      	movs	r2, #1
 800a936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a93a:	4884      	ldr	r0, [pc, #528]	; (800ab4c <main+0x2c0>)
 800a93c:	f7f8 f8d4 	bl	8002ae8 <HAL_GPIO_WritePin>
                   char * average;
                   reaction_time_1_average = reaction_time_1_sum / valid_round_counter_1;
 800a940:	4b83      	ldr	r3, [pc, #524]	; (800ab50 <main+0x2c4>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	4b83      	ldr	r3, [pc, #524]	; (800ab54 <main+0x2c8>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94c:	4a82      	ldr	r2, [pc, #520]	; (800ab58 <main+0x2cc>)
 800a94e:	6013      	str	r3, [r2, #0]
                           sprintf(average, "Valid average: %d ms.", reaction_time_1_average);
 800a950:	4b81      	ldr	r3, [pc, #516]	; (800ab58 <main+0x2cc>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	461a      	mov	r2, r3
 800a956:	4981      	ldr	r1, [pc, #516]	; (800ab5c <main+0x2d0>)
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f002 fd89 	bl	800d470 <siprintf>

                           BSP_LCD_DisplayStringAt(20, 160, average, CENTER_MODE);
 800a95e:	2301      	movs	r3, #1
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	21a0      	movs	r1, #160	; 0xa0
 800a964:	2014      	movs	r0, #20
 800a966:	f7f5 ffe3 	bl	8000930 <BSP_LCD_DisplayStringAt>
                   HAL_Delay(5000);
 800a96a:	f241 3088 	movw	r0, #5000	; 0x1388
 800a96e:	f7f6 fce7 	bl	8001340 <HAL_Delay>
                   BSP_LCD_Clear(LCD_COLOR_BLACK);
 800a972:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a976:	f7f5 ff6f 	bl	8000858 <BSP_LCD_Clear>
                   valid_round_counter_1 =0;
 800a97a:	4b76      	ldr	r3, [pc, #472]	; (800ab54 <main+0x2c8>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
                   reaction_time_1_sum =0;
 800a980:	4b73      	ldr	r3, [pc, #460]	; (800ab50 <main+0x2c4>)
 800a982:	2200      	movs	r2, #0
 800a984:	601a      	str	r2, [r3, #0]
                   game_state = READY;
 800a986:	4b76      	ldr	r3, [pc, #472]	; (800ab60 <main+0x2d4>)
 800a988:	2200      	movs	r2, #0
 800a98a:	701a      	strb	r2, [r3, #0]

                   //return;
                 }


    switch (game_state) {
 800a98c:	4b74      	ldr	r3, [pc, #464]	; (800ab60 <main+0x2d4>)
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b04      	cmp	r3, #4
 800a992:	f200 80ce 	bhi.w	800ab32 <main+0x2a6>
 800a996:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <main+0x110>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9b1 	.word	0x0800a9b1
 800a9a0:	0800a9dd 	.word	0x0800a9dd
 800a9a4:	0800ab33 	.word	0x0800ab33
 800a9a8:	0800aa75 	.word	0x0800aa75
 800a9ac:	0800aae5 	.word	0x0800aae5
    case READY:
        BSP_LCD_DisplayStringAt(20, 20, "Welcome to Reaction Tester", CENTER_MODE);
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4a6c      	ldr	r2, [pc, #432]	; (800ab64 <main+0x2d8>)
 800a9b4:	2114      	movs	r1, #20
 800a9b6:	2014      	movs	r0, #20
 800a9b8:	f7f5 ffba 	bl	8000930 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 40, "Press button to start!", CENTER_MODE);
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4a6a      	ldr	r2, [pc, #424]	; (800ab68 <main+0x2dc>)
 800a9c0:	2128      	movs	r1, #40	; 0x28
 800a9c2:	2014      	movs	r0, #20
 800a9c4:	f7f5 ffb4 	bl	8000930 <BSP_LCD_DisplayStringAt>

         HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800a9c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9cc:	485f      	ldr	r0, [pc, #380]	; (800ab4c <main+0x2c0>)
 800a9ce:	f7f8 f8a4 	bl	8002b1a <HAL_GPIO_TogglePin>
         HAL_Delay(500);
 800a9d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a9d6:	f7f6 fcb3 	bl	8001340 <HAL_Delay>

         break;
 800a9da:	e0ad      	b.n	800ab38 <main+0x2ac>


    case STEADY:

         HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9e2:	485a      	ldr	r0, [pc, #360]	; (800ab4c <main+0x2c0>)
 800a9e4:	f7f8 f880 	bl	8002ae8 <HAL_GPIO_WritePin>

         //read random number from RNG_DR register

         // unsigned int rnd = RNG -> DR;

         delay = 1000 + (HAL_RNG_GetRandomNumber(&hrng) % 9) * 1000;
 800a9e8:	4860      	ldr	r0, [pc, #384]	; (800ab6c <main+0x2e0>)
 800a9ea:	f7fb fc54 	bl	8006296 <HAL_RNG_GetRandomNumber>
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	4b5f      	ldr	r3, [pc, #380]	; (800ab70 <main+0x2e4>)
 800a9f2:	fba3 2301 	umull	r2, r3, r3, r1
 800a9f6:	085a      	lsrs	r2, r3, #1
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	00db      	lsls	r3, r3, #3
 800a9fc:	4413      	add	r3, r2
 800a9fe:	1aca      	subs	r2, r1, r3
 800aa00:	1c53      	adds	r3, r2, #1
 800aa02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa06:	fb02 f303 	mul.w	r3, r2, r3
 800aa0a:	4a5a      	ldr	r2, [pc, #360]	; (800ab74 <main+0x2e8>)
 800aa0c:	6013      	str	r3, [r2, #0]

        // HAL_Delay(delay);
           uint32_t tickstart = HAL_GetTick();
 800aa0e:	f7f6 fc8b 	bl	8001328 <HAL_GetTick>
 800aa12:	6078      	str	r0, [r7, #4]


           /* Add a freq to guarantee minimum wait */
           if (delay < HAL_MAX_DELAY)
 800aa14:	4b57      	ldr	r3, [pc, #348]	; (800ab74 <main+0x2e8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1c:	d00c      	beq.n	800aa38 <main+0x1ac>
           {
             delay += (uint32_t)(uwTickFreq);
 800aa1e:	4b56      	ldr	r3, [pc, #344]	; (800ab78 <main+0x2ec>)
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	461a      	mov	r2, r3
 800aa24:	4b53      	ldr	r3, [pc, #332]	; (800ab74 <main+0x2e8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4413      	add	r3, r2
 800aa2a:	4a52      	ldr	r2, [pc, #328]	; (800ab74 <main+0x2e8>)
 800aa2c:	6013      	str	r3, [r2, #0]
           }

           while ((HAL_GetTick() - tickstart) < delay)
 800aa2e:	e003      	b.n	800aa38 <main+0x1ac>
           {
             if (game_state == INVALID) {
 800aa30:	4b4b      	ldr	r3, [pc, #300]	; (800ab60 <main+0x2d4>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d009      	beq.n	800aa4c <main+0x1c0>
           while ((HAL_GetTick() - tickstart) < delay)
 800aa38:	f7f6 fc76 	bl	8001328 <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	1ad2      	subs	r2, r2, r3
 800aa42:	4b4c      	ldr	r3, [pc, #304]	; (800ab74 <main+0x2e8>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d3f2      	bcc.n	800aa30 <main+0x1a4>
 800aa4a:	e000      	b.n	800aa4e <main+0x1c2>
             break;
 800aa4c:	bf00      	nop
             }
           }

           if (game_state == INVALID) {
 800aa4e:	4b44      	ldr	r3, [pc, #272]	; (800ab60 <main+0x2d4>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d06f      	beq.n	800ab36 <main+0x2aa>
                        break;
                        }

         HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800aa56:	2200      	movs	r2, #0
 800aa58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aa5c:	483b      	ldr	r0, [pc, #236]	; (800ab4c <main+0x2c0>)
 800aa5e:	f7f8 f843 	bl	8002ae8 <HAL_GPIO_WritePin>


         round_start_time = HAL_GetTick();
 800aa62:	f7f6 fc61 	bl	8001328 <HAL_GetTick>
 800aa66:	4602      	mov	r2, r0
 800aa68:	4b44      	ldr	r3, [pc, #272]	; (800ab7c <main+0x2f0>)
 800aa6a:	601a      	str	r2, [r3, #0]

         game_state = GO;
 800aa6c:	4b3c      	ldr	r3, [pc, #240]	; (800ab60 <main+0x2d4>)
 800aa6e:	2202      	movs	r2, #2
 800aa70:	701a      	strb	r2, [r3, #0]

         break;
 800aa72:	e061      	b.n	800ab38 <main+0x2ac>


    case VALID:
         HAL_GPIO_WritePin(RGB_LED1_G_GPIO_Port, RGB_LED1_G_Pin, GPIO_PIN_RESET);
 800aa74:	2200      	movs	r2, #0
 800aa76:	2180      	movs	r1, #128	; 0x80
 800aa78:	4834      	ldr	r0, [pc, #208]	; (800ab4c <main+0x2c0>)
 800aa7a:	f7f8 f835 	bl	8002ae8 <HAL_GPIO_WritePin>
         HAL_Delay(3000);
 800aa7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa82:	f7f6 fc5d 	bl	8001340 <HAL_Delay>
         HAL_GPIO_WritePin(RGB_LED1_G_GPIO_Port, RGB_LED1_G_Pin, GPIO_PIN_SET);
 800aa86:	2201      	movs	r2, #1
 800aa88:	2180      	movs	r1, #128	; 0x80
 800aa8a:	4830      	ldr	r0, [pc, #192]	; (800ab4c <main+0x2c0>)
 800aa8c:	f7f8 f82c 	bl	8002ae8 <HAL_GPIO_WritePin>

         round_counter = round_counter + 1;
 800aa90:	4b2d      	ldr	r3, [pc, #180]	; (800ab48 <main+0x2bc>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	3301      	adds	r3, #1
 800aa96:	4a2c      	ldr	r2, [pc, #176]	; (800ab48 <main+0x2bc>)
 800aa98:	6013      	str	r3, [r2, #0]
         valid_round_counter_1 = valid_round_counter_1 + 1;
 800aa9a:	4b2e      	ldr	r3, [pc, #184]	; (800ab54 <main+0x2c8>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	4a2c      	ldr	r2, [pc, #176]	; (800ab54 <main+0x2c8>)
 800aaa2:	6013      	str	r3, [r2, #0]
         reaction_time_1_sum = reaction_time_1_sum + reaction_time_1;
 800aaa4:	4b2a      	ldr	r3, [pc, #168]	; (800ab50 <main+0x2c4>)
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	4b35      	ldr	r3, [pc, #212]	; (800ab80 <main+0x2f4>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4413      	add	r3, r2
 800aaae:	4a28      	ldr	r2, [pc, #160]	; (800ab50 <main+0x2c4>)
 800aab0:	6013      	str	r3, [r2, #0]

         char * result;
         sprintf(result, "Reaction Time: %d ms.", reaction_time_1);
 800aab2:	4b33      	ldr	r3, [pc, #204]	; (800ab80 <main+0x2f4>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	4932      	ldr	r1, [pc, #200]	; (800ab84 <main+0x2f8>)
 800aaba:	68b8      	ldr	r0, [r7, #8]
 800aabc:	f002 fcd8 	bl	800d470 <siprintf>

         BSP_LCD_DisplayStringAt(20, 20 + round_counter*20, result, LEFT_MODE);
 800aac0:	4b21      	ldr	r3, [pc, #132]	; (800ab48 <main+0x2bc>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3301      	adds	r3, #1
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	461a      	mov	r2, r3
 800aaca:	0092      	lsls	r2, r2, #2
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	b299      	uxth	r1, r3
 800aad2:	2303      	movs	r3, #3
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	2014      	movs	r0, #20
 800aad8:	f7f5 ff2a 	bl	8000930 <BSP_LCD_DisplayStringAt>

         game_state = STEADY;
 800aadc:	4b20      	ldr	r3, [pc, #128]	; (800ab60 <main+0x2d4>)
 800aade:	2201      	movs	r2, #1
 800aae0:	701a      	strb	r2, [r3, #0]

         break;
 800aae2:	e029      	b.n	800ab38 <main+0x2ac>


    case INVALID:
         //BSP_LED_On(LED_GREEN);
         HAL_GPIO_WritePin(RGB_LED1_R_GPIO_Port, RGB_LED1_R_Pin, GPIO_PIN_RESET);
 800aae4:	2200      	movs	r2, #0
 800aae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aaea:	4818      	ldr	r0, [pc, #96]	; (800ab4c <main+0x2c0>)
 800aaec:	f7f7 fffc 	bl	8002ae8 <HAL_GPIO_WritePin>
         HAL_Delay(3000);
 800aaf0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aaf4:	f7f6 fc24 	bl	8001340 <HAL_Delay>
         HAL_GPIO_WritePin(RGB_LED1_R_GPIO_Port, RGB_LED1_R_Pin, GPIO_PIN_SET);
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aafe:	4813      	ldr	r0, [pc, #76]	; (800ab4c <main+0x2c0>)
 800ab00:	f7f7 fff2 	bl	8002ae8 <HAL_GPIO_WritePin>

         round_counter = round_counter + 1;
 800ab04:	4b10      	ldr	r3, [pc, #64]	; (800ab48 <main+0x2bc>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	4a0f      	ldr	r2, [pc, #60]	; (800ab48 <main+0x2bc>)
 800ab0c:	6013      	str	r3, [r2, #0]


                 BSP_LCD_DisplayStringAt(20, 20 + round_counter*20,"Jumped light-invalid round!", LEFT_MODE);
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <main+0x2bc>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3301      	adds	r3, #1
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	461a      	mov	r2, r3
 800ab18:	0092      	lsls	r2, r2, #2
 800ab1a:	4413      	add	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	b299      	uxth	r1, r3
 800ab20:	2303      	movs	r3, #3
 800ab22:	4a19      	ldr	r2, [pc, #100]	; (800ab88 <main+0x2fc>)
 800ab24:	2014      	movs	r0, #20
 800ab26:	f7f5 ff03 	bl	8000930 <BSP_LCD_DisplayStringAt>


         game_state = STEADY;
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	; (800ab60 <main+0x2d4>)
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	701a      	strb	r2, [r3, #0]

         break;
 800ab30:	e002      	b.n	800ab38 <main+0x2ac>

    default:

         break;
 800ab32:	bf00      	nop
 800ab34:	e000      	b.n	800ab38 <main+0x2ac>
                        break;
 800ab36:	bf00      	nop

    }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800ab38:	f002 fa08 	bl	800cf4c <MX_USB_HOST_Process>
    if (round_counter > 4) {
 800ab3c:	e6f3      	b.n	800a926 <main+0x9a>
 800ab3e:	bf00      	nop
 800ab40:	20000000 	.word	0x20000000
 800ab44:	ff0000ff 	.word	0xff0000ff
 800ab48:	20000200 	.word	0x20000200
 800ab4c:	40021400 	.word	0x40021400
 800ab50:	20000434 	.word	0x20000434
 800ab54:	20000204 	.word	0x20000204
 800ab58:	2000063c 	.word	0x2000063c
 800ab5c:	0800db24 	.word	0x0800db24
 800ab60:	20000208 	.word	0x20000208
 800ab64:	0800db3c 	.word	0x0800db3c
 800ab68:	0800db58 	.word	0x0800db58
 800ab6c:	200008e4 	.word	0x200008e4
 800ab70:	38e38e39 	.word	0x38e38e39
 800ab74:	200008f4 	.word	0x200008f4
 800ab78:	20000009 	.word	0x20000009
 800ab7c:	20000a34 	.word	0x20000a34
 800ab80:	20000768 	.word	0x20000768
 800ab84:	0800db70 	.word	0x0800db70
 800ab88:	0800db88 	.word	0x0800db88

0800ab8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b0b4      	sub	sp, #208	; 0xd0
 800ab90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ab92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ab96:	2230      	movs	r2, #48	; 0x30
 800ab98:	2100      	movs	r1, #0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f002 fba8 	bl	800d2f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aba0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	605a      	str	r2, [r3, #4]
 800abaa:	609a      	str	r2, [r3, #8]
 800abac:	60da      	str	r2, [r3, #12]
 800abae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800abb0:	f107 0308 	add.w	r3, r7, #8
 800abb4:	2284      	movs	r2, #132	; 0x84
 800abb6:	2100      	movs	r1, #0
 800abb8:	4618      	mov	r0, r3
 800abba:	f002 fb99 	bl	800d2f0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800abbe:	4b4e      	ldr	r3, [pc, #312]	; (800acf8 <SystemClock_Config+0x16c>)
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc2:	4a4d      	ldr	r2, [pc, #308]	; (800acf8 <SystemClock_Config+0x16c>)
 800abc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abc8:	6413      	str	r3, [r2, #64]	; 0x40
 800abca:	4b4b      	ldr	r3, [pc, #300]	; (800acf8 <SystemClock_Config+0x16c>)
 800abcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abd2:	607b      	str	r3, [r7, #4]
 800abd4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800abd6:	4b49      	ldr	r3, [pc, #292]	; (800acfc <SystemClock_Config+0x170>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a48      	ldr	r2, [pc, #288]	; (800acfc <SystemClock_Config+0x170>)
 800abdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	4b46      	ldr	r3, [pc, #280]	; (800acfc <SystemClock_Config+0x170>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800abea:	603b      	str	r3, [r7, #0]
 800abec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800abee:	2309      	movs	r3, #9
 800abf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800abf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800abf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800abfc:	2301      	movs	r3, #1
 800abfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ac02:	2302      	movs	r3, #2
 800ac04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ac08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800ac10:	2319      	movs	r3, #25
 800ac12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800ac16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ac1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ac1e:	2302      	movs	r3, #2
 800ac20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800ac24:	2309      	movs	r3, #9
 800ac26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ac2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fa f926 	bl	8004e80 <HAL_RCC_OscConfig>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800ac3a:	f001 f98b 	bl	800bf54 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800ac3e:	f7f9 ffff 	bl	8004c40 <HAL_PWREx_EnableOverDrive>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800ac48:	f001 f984 	bl	800bf54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ac4c:	230f      	movs	r3, #15
 800ac4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ac52:	2302      	movs	r3, #2
 800ac54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ac5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ac62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ac66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800ac6e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ac72:	2106      	movs	r1, #6
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fa fb73 	bl	8005360 <HAL_RCC_ClockConfig>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800ac80:	f001 f968 	bl	800bf54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800ac84:	4b1e      	ldr	r3, [pc, #120]	; (800ad00 <SystemClock_Config+0x174>)
 800ac86:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800ac88:	2364      	movs	r3, #100	; 0x64
 800ac8a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800ac90:	2302      	movs	r3, #2
 800ac92:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800ac94:	2302      	movs	r3, #2
 800ac96:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800ac98:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ac9c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800ac9e:	2305      	movs	r3, #5
 800aca0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800aca2:	2302      	movs	r3, #2
 800aca4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800aca6:	2303      	movs	r3, #3
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800acaa:	2301      	movs	r3, #1
 800acac:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800acae:	2301      	movs	r3, #1
 800acb0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800acb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800acb6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800acb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acbc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800acbe:	2300      	movs	r3, #0
 800acc0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800acc2:	2300      	movs	r3, #0
 800acc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800acc6:	2300      	movs	r3, #0
 800acc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800acca:	2300      	movs	r3, #0
 800accc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800acce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800acdc:	f107 0308 	add.w	r3, r7, #8
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fa fd3d 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800acec:	f001 f932 	bl	800bf54 <Error_Handler>
  }
}
 800acf0:	bf00      	nop
 800acf2:	37d0      	adds	r7, #208	; 0xd0
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40023800 	.word	0x40023800
 800acfc:	40007000 	.word	0x40007000
 800ad00:	01b14068 	.word	0x01b14068

0800ad04 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	605a      	str	r2, [r3, #4]
 800ad12:	609a      	str	r2, [r3, #8]
 800ad14:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800ad16:	4b21      	ldr	r3, [pc, #132]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad18:	4a21      	ldr	r2, [pc, #132]	; (800ada0 <MX_ADC3_Init+0x9c>)
 800ad1a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800ad1c:	4b1f      	ldr	r3, [pc, #124]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ad22:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800ad24:	4b1d      	ldr	r3, [pc, #116]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ad2a:	4b1c      	ldr	r3, [pc, #112]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800ad30:	4b1a      	ldr	r3, [pc, #104]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800ad36:	4b19      	ldr	r3, [pc, #100]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ad3e:	4b17      	ldr	r3, [pc, #92]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ad44:	4b15      	ldr	r3, [pc, #84]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad46:	4a17      	ldr	r2, [pc, #92]	; (800ada4 <MX_ADC3_Init+0xa0>)
 800ad48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ad4a:	4b14      	ldr	r3, [pc, #80]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800ad50:	4b12      	ldr	r3, [pc, #72]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad52:	2201      	movs	r2, #1
 800ad54:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800ad56:	4b11      	ldr	r3, [pc, #68]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ad5e:	4b0f      	ldr	r3, [pc, #60]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad60:	2201      	movs	r2, #1
 800ad62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800ad64:	480d      	ldr	r0, [pc, #52]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad66:	f7f6 fb0d 	bl	8001384 <HAL_ADC_Init>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800ad70:	f001 f8f0 	bl	800bf54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800ad74:	2304      	movs	r3, #4
 800ad76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800ad80:	463b      	mov	r3, r7
 800ad82:	4619      	mov	r1, r3
 800ad84:	4805      	ldr	r0, [pc, #20]	; (800ad9c <MX_ADC3_Init+0x98>)
 800ad86:	f7f6 fb41 	bl	800140c <HAL_ADC_ConfigChannel>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800ad90:	f001 f8e0 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800ad94:	bf00      	nop
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	2000076c 	.word	0x2000076c
 800ada0:	40012200 	.word	0x40012200
 800ada4:	0f000001 	.word	0x0f000001

0800ada8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800adac:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <MX_CRC_Init+0x3c>)
 800adae:	4a0e      	ldr	r2, [pc, #56]	; (800ade8 <MX_CRC_Init+0x40>)
 800adb0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800adb2:	4b0c      	ldr	r3, [pc, #48]	; (800ade4 <MX_CRC_Init+0x3c>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800adb8:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <MX_CRC_Init+0x3c>)
 800adba:	2200      	movs	r2, #0
 800adbc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800adbe:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <MX_CRC_Init+0x3c>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800adc4:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <MX_CRC_Init+0x3c>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800adca:	4b06      	ldr	r3, [pc, #24]	; (800ade4 <MX_CRC_Init+0x3c>)
 800adcc:	2201      	movs	r2, #1
 800adce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800add0:	4804      	ldr	r0, [pc, #16]	; (800ade4 <MX_CRC_Init+0x3c>)
 800add2:	f7f6 fe2b 	bl	8001a2c <HAL_CRC_Init>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800addc:	f001 f8ba 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ade0:	bf00      	nop
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	20000594 	.word	0x20000594
 800ade8:	40023000 	.word	0x40023000

0800adec <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800adf0:	4b16      	ldr	r3, [pc, #88]	; (800ae4c <MX_DCMI_Init+0x60>)
 800adf2:	4a17      	ldr	r2, [pc, #92]	; (800ae50 <MX_DCMI_Init+0x64>)
 800adf4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800adf6:	4b15      	ldr	r3, [pc, #84]	; (800ae4c <MX_DCMI_Init+0x60>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800adfc:	4b13      	ldr	r3, [pc, #76]	; (800ae4c <MX_DCMI_Init+0x60>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800ae02:	4b12      	ldr	r3, [pc, #72]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800ae08:	4b10      	ldr	r3, [pc, #64]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800ae14:	4b0d      	ldr	r3, [pc, #52]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800ae1a:	4b0c      	ldr	r3, [pc, #48]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800ae26:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800ae2c:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800ae32:	4b06      	ldr	r3, [pc, #24]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800ae38:	4804      	ldr	r0, [pc, #16]	; (800ae4c <MX_DCMI_Init+0x60>)
 800ae3a:	f7f6 fee1 	bl	8001c00 <HAL_DCMI_Init>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800ae44:	f001 f886 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800ae48:	bf00      	nop
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	200007b4 	.word	0x200007b4
 800ae50:	50050000 	.word	0x50050000

0800ae54 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800ae58:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae5a:	4a16      	ldr	r2, [pc, #88]	; (800aeb4 <MX_DMA2D_Init+0x60>)
 800ae5c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800ae64:	4b12      	ldr	r3, [pc, #72]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800ae6a:	4b11      	ldr	r3, [pc, #68]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800ae70:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800ae76:	4b0e      	ldr	r3, [pc, #56]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800ae7c:	4b0c      	ldr	r3, [pc, #48]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ae88:	4809      	ldr	r0, [pc, #36]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae8a:	f7f7 f8e7 	bl	800205c <HAL_DMA2D_Init>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800ae94:	f001 f85e 	bl	800bf54 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800ae98:	2101      	movs	r1, #1
 800ae9a:	4805      	ldr	r0, [pc, #20]	; (800aeb0 <MX_DMA2D_Init+0x5c>)
 800ae9c:	f7f7 fb4c 	bl	8002538 <HAL_DMA2D_ConfigLayer>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800aea6:	f001 f855 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800aeaa:	bf00      	nop
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	200008f8 	.word	0x200008f8
 800aeb4:	4002b000 	.word	0x4002b000

0800aeb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800aebc:	4b1b      	ldr	r3, [pc, #108]	; (800af2c <MX_I2C1_Init+0x74>)
 800aebe:	4a1c      	ldr	r2, [pc, #112]	; (800af30 <MX_I2C1_Init+0x78>)
 800aec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800aec2:	4b1a      	ldr	r3, [pc, #104]	; (800af2c <MX_I2C1_Init+0x74>)
 800aec4:	4a1b      	ldr	r2, [pc, #108]	; (800af34 <MX_I2C1_Init+0x7c>)
 800aec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800aec8:	4b18      	ldr	r3, [pc, #96]	; (800af2c <MX_I2C1_Init+0x74>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aece:	4b17      	ldr	r3, [pc, #92]	; (800af2c <MX_I2C1_Init+0x74>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aed4:	4b15      	ldr	r3, [pc, #84]	; (800af2c <MX_I2C1_Init+0x74>)
 800aed6:	2200      	movs	r2, #0
 800aed8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800aeda:	4b14      	ldr	r3, [pc, #80]	; (800af2c <MX_I2C1_Init+0x74>)
 800aedc:	2200      	movs	r2, #0
 800aede:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800aee0:	4b12      	ldr	r3, [pc, #72]	; (800af2c <MX_I2C1_Init+0x74>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aee6:	4b11      	ldr	r3, [pc, #68]	; (800af2c <MX_I2C1_Init+0x74>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aeec:	4b0f      	ldr	r3, [pc, #60]	; (800af2c <MX_I2C1_Init+0x74>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800aef2:	480e      	ldr	r0, [pc, #56]	; (800af2c <MX_I2C1_Init+0x74>)
 800aef4:	f7f9 fa04 	bl	8004300 <HAL_I2C_Init>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800aefe:	f001 f829 	bl	800bf54 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800af02:	2100      	movs	r1, #0
 800af04:	4809      	ldr	r0, [pc, #36]	; (800af2c <MX_I2C1_Init+0x74>)
 800af06:	f7f9 fa8b 	bl	8004420 <HAL_I2CEx_ConfigAnalogFilter>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800af10:	f001 f820 	bl	800bf54 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800af14:	2100      	movs	r1, #0
 800af16:	4805      	ldr	r0, [pc, #20]	; (800af2c <MX_I2C1_Init+0x74>)
 800af18:	f7f9 facd 	bl	80044b6 <HAL_I2CEx_ConfigDigitalFilter>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800af22:	f001 f817 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800af26:	bf00      	nop
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	20000548 	.word	0x20000548
 800af30:	40005400 	.word	0x40005400
 800af34:	00c0eaff 	.word	0x00c0eaff

0800af38 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800af3c:	4b1b      	ldr	r3, [pc, #108]	; (800afac <MX_I2C3_Init+0x74>)
 800af3e:	4a1c      	ldr	r2, [pc, #112]	; (800afb0 <MX_I2C3_Init+0x78>)
 800af40:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800af42:	4b1a      	ldr	r3, [pc, #104]	; (800afac <MX_I2C3_Init+0x74>)
 800af44:	4a1b      	ldr	r2, [pc, #108]	; (800afb4 <MX_I2C3_Init+0x7c>)
 800af46:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800af48:	4b18      	ldr	r3, [pc, #96]	; (800afac <MX_I2C3_Init+0x74>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800af4e:	4b17      	ldr	r3, [pc, #92]	; (800afac <MX_I2C3_Init+0x74>)
 800af50:	2201      	movs	r2, #1
 800af52:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800af54:	4b15      	ldr	r3, [pc, #84]	; (800afac <MX_I2C3_Init+0x74>)
 800af56:	2200      	movs	r2, #0
 800af58:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800af5a:	4b14      	ldr	r3, [pc, #80]	; (800afac <MX_I2C3_Init+0x74>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800af60:	4b12      	ldr	r3, [pc, #72]	; (800afac <MX_I2C3_Init+0x74>)
 800af62:	2200      	movs	r2, #0
 800af64:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800af66:	4b11      	ldr	r3, [pc, #68]	; (800afac <MX_I2C3_Init+0x74>)
 800af68:	2200      	movs	r2, #0
 800af6a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800af6c:	4b0f      	ldr	r3, [pc, #60]	; (800afac <MX_I2C3_Init+0x74>)
 800af6e:	2200      	movs	r2, #0
 800af70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800af72:	480e      	ldr	r0, [pc, #56]	; (800afac <MX_I2C3_Init+0x74>)
 800af74:	f7f9 f9c4 	bl	8004300 <HAL_I2C_Init>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800af7e:	f000 ffe9 	bl	800bf54 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800af82:	2100      	movs	r1, #0
 800af84:	4809      	ldr	r0, [pc, #36]	; (800afac <MX_I2C3_Init+0x74>)
 800af86:	f7f9 fa4b 	bl	8004420 <HAL_I2CEx_ConfigAnalogFilter>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800af90:	f000 ffe0 	bl	800bf54 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800af94:	2100      	movs	r1, #0
 800af96:	4805      	ldr	r0, [pc, #20]	; (800afac <MX_I2C3_Init+0x74>)
 800af98:	f7f9 fa8d 	bl	80044b6 <HAL_I2CEx_ConfigDigitalFilter>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800afa2:	f000 ffd7 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800afa6:	bf00      	nop
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20000384 	.word	0x20000384
 800afb0:	40005c00 	.word	0x40005c00
 800afb4:	00c0eaff 	.word	0x00c0eaff

0800afb8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08e      	sub	sp, #56	; 0x38
 800afbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800afbe:	1d3b      	adds	r3, r7, #4
 800afc0:	2234      	movs	r2, #52	; 0x34
 800afc2:	2100      	movs	r1, #0
 800afc4:	4618      	mov	r0, r3
 800afc6:	f002 f993 	bl	800d2f0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800afca:	4b3a      	ldr	r3, [pc, #232]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800afcc:	4a3a      	ldr	r2, [pc, #232]	; (800b0b8 <MX_LTDC_Init+0x100>)
 800afce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800afd0:	4b38      	ldr	r3, [pc, #224]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800afd6:	4b37      	ldr	r3, [pc, #220]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800afd8:	2200      	movs	r2, #0
 800afda:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800afdc:	4b35      	ldr	r3, [pc, #212]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800afde:	2200      	movs	r2, #0
 800afe0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800afe2:	4b34      	ldr	r3, [pc, #208]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800afe8:	4b32      	ldr	r3, [pc, #200]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800afea:	2228      	movs	r2, #40	; 0x28
 800afec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800afee:	4b31      	ldr	r3, [pc, #196]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800aff0:	2209      	movs	r2, #9
 800aff2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800aff4:	4b2f      	ldr	r3, [pc, #188]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800aff6:	2235      	movs	r2, #53	; 0x35
 800aff8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800affa:	4b2e      	ldr	r3, [pc, #184]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800affc:	220b      	movs	r2, #11
 800affe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800b000:	4b2c      	ldr	r3, [pc, #176]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b002:	f240 2215 	movw	r2, #533	; 0x215
 800b006:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800b008:	4b2a      	ldr	r3, [pc, #168]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b00a:	f240 121b 	movw	r2, #283	; 0x11b
 800b00e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800b010:	4b28      	ldr	r3, [pc, #160]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b012:	f240 2235 	movw	r2, #565	; 0x235
 800b016:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800b018:	4b26      	ldr	r3, [pc, #152]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b01a:	f240 121d 	movw	r2, #285	; 0x11d
 800b01e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800b020:	4b24      	ldr	r3, [pc, #144]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800b028:	4b22      	ldr	r3, [pc, #136]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800b030:	4b20      	ldr	r3, [pc, #128]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800b038:	481e      	ldr	r0, [pc, #120]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b03a:	f7f9 fa89 	bl	8004550 <HAL_LTDC_Init>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800b044:	f000 ff86 	bl	800bf54 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800b04c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b050:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800b056:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b05a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800b05c:	2302      	movs	r3, #2
 800b05e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800b060:	23ff      	movs	r3, #255	; 0xff
 800b062:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800b068:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b06c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800b06e:	2307      	movs	r3, #7
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800b072:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800b076:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800b078:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b07c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800b07e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b082:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800b096:	1d3b      	adds	r3, r7, #4
 800b098:	2200      	movs	r2, #0
 800b09a:	4619      	mov	r1, r3
 800b09c:	4805      	ldr	r0, [pc, #20]	; (800b0b4 <MX_LTDC_Init+0xfc>)
 800b09e:	f7f9 fbe9 	bl	8004874 <HAL_LTDC_ConfigLayer>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800b0a8:	f000 ff54 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800b0ac:	bf00      	nop
 800b0ae:	3738      	adds	r7, #56	; 0x38
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	200006c0 	.word	0x200006c0
 800b0b8:	40016800 	.word	0x40016800

0800b0bc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800b0c0:	4b12      	ldr	r3, [pc, #72]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0c2:	4a13      	ldr	r2, [pc, #76]	; (800b110 <MX_QUADSPI_Init+0x54>)
 800b0c4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800b0c6:	4b11      	ldr	r3, [pc, #68]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0c8:	22ff      	movs	r2, #255	; 0xff
 800b0ca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800b0cc:	4b0f      	ldr	r3, [pc, #60]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800b0d2:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800b0d8:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0da:	2201      	movs	r2, #1
 800b0dc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800b0de:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800b0e4:	4b09      	ldr	r3, [pc, #36]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800b0ea:	4b08      	ldr	r3, [pc, #32]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800b0f0:	4b06      	ldr	r3, [pc, #24]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800b0f6:	4805      	ldr	r0, [pc, #20]	; (800b10c <MX_QUADSPI_Init+0x50>)
 800b0f8:	f7f9 fdf2 	bl	8004ce0 <HAL_QSPI_Init>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800b102:	f000 ff27 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800b106:	bf00      	nop
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20000a38 	.word	0x20000a38
 800b110:	a0001000 	.word	0xa0001000

0800b114 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <MX_RNG_Init+0x20>)
 800b11a:	4a07      	ldr	r2, [pc, #28]	; (800b138 <MX_RNG_Init+0x24>)
 800b11c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800b11e:	4805      	ldr	r0, [pc, #20]	; (800b134 <MX_RNG_Init+0x20>)
 800b120:	f7fb f840 	bl	80061a4 <HAL_RNG_Init>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800b12a:	f000 ff13 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800b12e:	bf00      	nop
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	200008e4 	.word	0x200008e4
 800b138:	50060800 	.word	0x50060800

0800b13c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b092      	sub	sp, #72	; 0x48
 800b140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	605a      	str	r2, [r3, #4]
 800b14c:	609a      	str	r2, [r3, #8]
 800b14e:	60da      	str	r2, [r3, #12]
 800b150:	611a      	str	r2, [r3, #16]
 800b152:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800b154:	2300      	movs	r3, #0
 800b156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800b158:	463b      	mov	r3, r7
 800b15a:	222c      	movs	r2, #44	; 0x2c
 800b15c:	2100      	movs	r1, #0
 800b15e:	4618      	mov	r0, r3
 800b160:	f002 f8c6 	bl	800d2f0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800b164:	4b47      	ldr	r3, [pc, #284]	; (800b284 <MX_RTC_Init+0x148>)
 800b166:	4a48      	ldr	r2, [pc, #288]	; (800b288 <MX_RTC_Init+0x14c>)
 800b168:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b16a:	4b46      	ldr	r3, [pc, #280]	; (800b284 <MX_RTC_Init+0x148>)
 800b16c:	2200      	movs	r2, #0
 800b16e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b170:	4b44      	ldr	r3, [pc, #272]	; (800b284 <MX_RTC_Init+0x148>)
 800b172:	227f      	movs	r2, #127	; 0x7f
 800b174:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b176:	4b43      	ldr	r3, [pc, #268]	; (800b284 <MX_RTC_Init+0x148>)
 800b178:	22ff      	movs	r2, #255	; 0xff
 800b17a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b17c:	4b41      	ldr	r3, [pc, #260]	; (800b284 <MX_RTC_Init+0x148>)
 800b17e:	2200      	movs	r2, #0
 800b180:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b182:	4b40      	ldr	r3, [pc, #256]	; (800b284 <MX_RTC_Init+0x148>)
 800b184:	2200      	movs	r2, #0
 800b186:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b188:	4b3e      	ldr	r3, [pc, #248]	; (800b284 <MX_RTC_Init+0x148>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b18e:	483d      	ldr	r0, [pc, #244]	; (800b284 <MX_RTC_Init+0x148>)
 800b190:	f7fb f896 	bl	80062c0 <HAL_RTC_Init>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d001      	beq.n	800b19e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800b19a:	f000 fedb 	bl	800bf54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800b1b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b1bc:	2201      	movs	r2, #1
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4830      	ldr	r0, [pc, #192]	; (800b284 <MX_RTC_Init+0x148>)
 800b1c2:	f7fb f8f9 	bl	80063b8 <HAL_RTC_SetTime>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800b1cc:	f000 fec2 	bl	800bf54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800b1e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4824      	ldr	r0, [pc, #144]	; (800b284 <MX_RTC_Init+0x148>)
 800b1f2:	f7fb f99f 	bl	8006534 <HAL_RTC_SetDate>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800b1fc:	f000 feaa 	bl	800bf54 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800b200:	2300      	movs	r3, #0
 800b202:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800b204:	2300      	movs	r3, #0
 800b206:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800b208:	2300      	movs	r3, #0
 800b20a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b210:	2300      	movs	r3, #0
 800b212:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b214:	2300      	movs	r3, #0
 800b216:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800b218:	2300      	movs	r3, #0
 800b21a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800b220:	2300      	movs	r3, #0
 800b222:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800b224:	2301      	movs	r3, #1
 800b226:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800b22a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b22e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b230:	463b      	mov	r3, r7
 800b232:	2201      	movs	r2, #1
 800b234:	4619      	mov	r1, r3
 800b236:	4813      	ldr	r0, [pc, #76]	; (800b284 <MX_RTC_Init+0x148>)
 800b238:	f7fb fa24 	bl	8006684 <HAL_RTC_SetAlarm>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800b242:	f000 fe87 	bl	800bf54 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800b246:	2301      	movs	r3, #1
 800b248:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800b24c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b250:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b252:	463b      	mov	r3, r7
 800b254:	2201      	movs	r2, #1
 800b256:	4619      	mov	r1, r3
 800b258:	480a      	ldr	r0, [pc, #40]	; (800b284 <MX_RTC_Init+0x148>)
 800b25a:	f7fb fa13 	bl	8006684 <HAL_RTC_SetAlarm>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800b264:	f000 fe76 	bl	800bf54 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800b268:	2202      	movs	r2, #2
 800b26a:	2100      	movs	r1, #0
 800b26c:	4805      	ldr	r0, [pc, #20]	; (800b284 <MX_RTC_Init+0x148>)
 800b26e:	f7fb fb93 	bl	8006998 <HAL_RTCEx_SetTimeStamp>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800b278:	f000 fe6c 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b27c:	bf00      	nop
 800b27e:	3748      	adds	r7, #72	; 0x48
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20000884 	.word	0x20000884
 800b288:	40002800 	.word	0x40002800

0800b28c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800b290:	4b4d      	ldr	r3, [pc, #308]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b292:	4a4e      	ldr	r2, [pc, #312]	; (800b3cc <MX_SAI2_Init+0x140>)
 800b294:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800b296:	4b4c      	ldr	r3, [pc, #304]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b298:	2200      	movs	r2, #0
 800b29a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800b29c:	4b4a      	ldr	r3, [pc, #296]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800b2a2:	4b49      	ldr	r3, [pc, #292]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2a4:	2240      	movs	r2, #64	; 0x40
 800b2a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800b2a8:	4b47      	ldr	r3, [pc, #284]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b2ae:	4b46      	ldr	r3, [pc, #280]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800b2b4:	4b44      	ldr	r3, [pc, #272]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800b2ba:	4b43      	ldr	r3, [pc, #268]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800b2c0:	4b41      	ldr	r3, [pc, #260]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800b2c6:	4b40      	ldr	r3, [pc, #256]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800b2cc:	4b3e      	ldr	r3, [pc, #248]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2ce:	4a40      	ldr	r2, [pc, #256]	; (800b3d0 <MX_SAI2_Init+0x144>)
 800b2d0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b2d2:	4b3d      	ldr	r3, [pc, #244]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800b2d8:	4b3b      	ldr	r3, [pc, #236]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800b2de:	4b3a      	ldr	r3, [pc, #232]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b2e4:	4b38      	ldr	r3, [pc, #224]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800b2ea:	4b37      	ldr	r3, [pc, #220]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2ec:	2208      	movs	r2, #8
 800b2ee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800b2f0:	4b35      	ldr	r3, [pc, #212]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800b2f6:	4b34      	ldr	r3, [pc, #208]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b2fc:	4b32      	ldr	r3, [pc, #200]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800b302:	4b31      	ldr	r3, [pc, #196]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b304:	2200      	movs	r2, #0
 800b306:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800b308:	4b2f      	ldr	r3, [pc, #188]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800b30e:	4b2e      	ldr	r3, [pc, #184]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b310:	2200      	movs	r2, #0
 800b312:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800b314:	4b2c      	ldr	r3, [pc, #176]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b316:	2201      	movs	r2, #1
 800b318:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800b31a:	4b2b      	ldr	r3, [pc, #172]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800b320:	4829      	ldr	r0, [pc, #164]	; (800b3c8 <MX_SAI2_Init+0x13c>)
 800b322:	f7fb fb8f 	bl	8006a44 <HAL_SAI_Init>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d001      	beq.n	800b330 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800b32c:	f000 fe12 	bl	800bf54 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800b330:	4b28      	ldr	r3, [pc, #160]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b332:	4a29      	ldr	r2, [pc, #164]	; (800b3d8 <MX_SAI2_Init+0x14c>)
 800b334:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800b336:	4b27      	ldr	r3, [pc, #156]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b338:	2200      	movs	r2, #0
 800b33a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800b33c:	4b25      	ldr	r3, [pc, #148]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b33e:	2203      	movs	r2, #3
 800b340:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800b342:	4b24      	ldr	r3, [pc, #144]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b344:	2240      	movs	r2, #64	; 0x40
 800b346:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800b348:	4b22      	ldr	r3, [pc, #136]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b34e:	4b21      	ldr	r3, [pc, #132]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b350:	2200      	movs	r2, #0
 800b352:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800b354:	4b1f      	ldr	r3, [pc, #124]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b356:	2201      	movs	r2, #1
 800b358:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800b35a:	4b1e      	ldr	r3, [pc, #120]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800b360:	4b1c      	ldr	r3, [pc, #112]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b362:	2200      	movs	r2, #0
 800b364:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b366:	4b1b      	ldr	r3, [pc, #108]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b368:	2200      	movs	r2, #0
 800b36a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800b36c:	4b19      	ldr	r3, [pc, #100]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b36e:	2200      	movs	r2, #0
 800b370:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800b372:	4b18      	ldr	r3, [pc, #96]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b374:	2200      	movs	r2, #0
 800b376:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b378:	4b16      	ldr	r3, [pc, #88]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800b37e:	4b15      	ldr	r3, [pc, #84]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b380:	2208      	movs	r2, #8
 800b382:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800b384:	4b13      	ldr	r3, [pc, #76]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b386:	2201      	movs	r2, #1
 800b388:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800b38a:	4b12      	ldr	r3, [pc, #72]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b390:	4b10      	ldr	r3, [pc, #64]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b392:	2200      	movs	r2, #0
 800b394:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800b396:	4b0f      	ldr	r3, [pc, #60]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b398:	2200      	movs	r2, #0
 800b39a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800b39c:	4b0d      	ldr	r3, [pc, #52]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800b3a2:	4b0c      	ldr	r3, [pc, #48]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800b3ae:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800b3b4:	4807      	ldr	r0, [pc, #28]	; (800b3d4 <MX_SAI2_Init+0x148>)
 800b3b6:	f7fb fb45 	bl	8006a44 <HAL_SAI_Init>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800b3c0:	f000 fdc8 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800b3c4:	bf00      	nop
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	200004c4 	.word	0x200004c4
 800b3cc:	40015c04 	.word	0x40015c04
 800b3d0:	0002ee00 	.word	0x0002ee00
 800b3d4:	20000300 	.word	0x20000300
 800b3d8:	40015c24 	.word	0x40015c24

0800b3dc <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800b3e0:	4b15      	ldr	r3, [pc, #84]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b3e2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800b3e6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800b3e8:	4b13      	ldr	r3, [pc, #76]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800b3ee:	4b12      	ldr	r3, [pc, #72]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800b3f4:	4b10      	ldr	r3, [pc, #64]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800b3fa:	4b0f      	ldr	r3, [pc, #60]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800b400:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b402:	2200      	movs	r2, #0
 800b404:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800b406:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b408:	2200      	movs	r2, #0
 800b40a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800b40c:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b40e:	2200      	movs	r2, #0
 800b410:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800b412:	4b09      	ldr	r3, [pc, #36]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b414:	2200      	movs	r2, #0
 800b416:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800b418:	4b07      	ldr	r3, [pc, #28]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800b41e:	4b06      	ldr	r3, [pc, #24]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b420:	2200      	movs	r2, #0
 800b422:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800b424:	4804      	ldr	r0, [pc, #16]	; (800b438 <MX_SPDIFRX_Init+0x5c>)
 800b426:	f7fb fd35 	bl	8006e94 <HAL_SPDIFRX_Init>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800b430:	f000 fd90 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800b434:	bf00      	nop
 800b436:	bd80      	pop	{r7, pc}
 800b438:	20000478 	.word	0x20000478

0800b43c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800b440:	4b1b      	ldr	r3, [pc, #108]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b442:	4a1c      	ldr	r2, [pc, #112]	; (800b4b4 <MX_SPI2_Init+0x78>)
 800b444:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b446:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b44c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b44e:	4b18      	ldr	r3, [pc, #96]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b450:	2200      	movs	r2, #0
 800b452:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800b454:	4b16      	ldr	r3, [pc, #88]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b456:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b45a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b45c:	4b14      	ldr	r3, [pc, #80]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b45e:	2200      	movs	r2, #0
 800b460:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b462:	4b13      	ldr	r3, [pc, #76]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b464:	2200      	movs	r2, #0
 800b466:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b468:	4b11      	ldr	r3, [pc, #68]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b46a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b46e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b470:	4b0f      	ldr	r3, [pc, #60]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b472:	2200      	movs	r2, #0
 800b474:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b476:	4b0e      	ldr	r3, [pc, #56]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b478:	2200      	movs	r2, #0
 800b47a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b47c:	4b0c      	ldr	r3, [pc, #48]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b47e:	2200      	movs	r2, #0
 800b480:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b482:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b484:	2200      	movs	r2, #0
 800b486:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b48a:	2207      	movs	r2, #7
 800b48c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800b48e:	4b08      	ldr	r3, [pc, #32]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b490:	2200      	movs	r2, #0
 800b492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b494:	4b06      	ldr	r3, [pc, #24]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b496:	2208      	movs	r2, #8
 800b498:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b49a:	4805      	ldr	r0, [pc, #20]	; (800b4b0 <MX_SPI2_Init+0x74>)
 800b49c:	f7fb fd56 	bl	8006f4c <HAL_SPI_Init>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800b4a6:	f000 fd55 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800b4aa:	bf00      	nop
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	200003d0 	.word	0x200003d0
 800b4b4:	40003800 	.word	0x40003800

0800b4b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b09a      	sub	sp, #104	; 0x68
 800b4bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b4be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	605a      	str	r2, [r3, #4]
 800b4c8:	609a      	str	r2, [r3, #8]
 800b4ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	605a      	str	r2, [r3, #4]
 800b4d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b4d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	605a      	str	r2, [r3, #4]
 800b4e2:	609a      	str	r2, [r3, #8]
 800b4e4:	60da      	str	r2, [r3, #12]
 800b4e6:	611a      	str	r2, [r3, #16]
 800b4e8:	615a      	str	r2, [r3, #20]
 800b4ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b4ec:	1d3b      	adds	r3, r7, #4
 800b4ee:	222c      	movs	r2, #44	; 0x2c
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f001 fefc 	bl	800d2f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b4f8:	4b43      	ldr	r3, [pc, #268]	; (800b608 <MX_TIM1_Init+0x150>)
 800b4fa:	4a44      	ldr	r2, [pc, #272]	; (800b60c <MX_TIM1_Init+0x154>)
 800b4fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800b4fe:	4b42      	ldr	r3, [pc, #264]	; (800b608 <MX_TIM1_Init+0x150>)
 800b500:	2200      	movs	r2, #0
 800b502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b504:	4b40      	ldr	r3, [pc, #256]	; (800b608 <MX_TIM1_Init+0x150>)
 800b506:	2200      	movs	r2, #0
 800b508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800b50a:	4b3f      	ldr	r3, [pc, #252]	; (800b608 <MX_TIM1_Init+0x150>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b510:	4b3d      	ldr	r3, [pc, #244]	; (800b608 <MX_TIM1_Init+0x150>)
 800b512:	2200      	movs	r2, #0
 800b514:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b516:	4b3c      	ldr	r3, [pc, #240]	; (800b608 <MX_TIM1_Init+0x150>)
 800b518:	2200      	movs	r2, #0
 800b51a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b51c:	4b3a      	ldr	r3, [pc, #232]	; (800b608 <MX_TIM1_Init+0x150>)
 800b51e:	2200      	movs	r2, #0
 800b520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b522:	4839      	ldr	r0, [pc, #228]	; (800b608 <MX_TIM1_Init+0x150>)
 800b524:	f7fb fda4 	bl	8007070 <HAL_TIM_Base_Init>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800b52e:	f000 fd11 	bl	800bf54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b536:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b538:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b53c:	4619      	mov	r1, r3
 800b53e:	4832      	ldr	r0, [pc, #200]	; (800b608 <MX_TIM1_Init+0x150>)
 800b540:	f7fc f84e 	bl	80075e0 <HAL_TIM_ConfigClockSource>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800b54a:	f000 fd03 	bl	800bf54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800b54e:	482e      	ldr	r0, [pc, #184]	; (800b608 <MX_TIM1_Init+0x150>)
 800b550:	f7fb fde4 	bl	800711c <HAL_TIM_PWM_Init>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800b55a:	f000 fcfb 	bl	800bf54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b55e:	2300      	movs	r3, #0
 800b560:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b562:	2300      	movs	r3, #0
 800b564:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b566:	2300      	movs	r3, #0
 800b568:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b56a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b56e:	4619      	mov	r1, r3
 800b570:	4825      	ldr	r0, [pc, #148]	; (800b608 <MX_TIM1_Init+0x150>)
 800b572:	f7fc fcaf 	bl	8007ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800b57c:	f000 fcea 	bl	800bf54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b580:	2360      	movs	r3, #96	; 0x60
 800b582:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b588:	2300      	movs	r3, #0
 800b58a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b58c:	2300      	movs	r3, #0
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b590:	2300      	movs	r3, #0
 800b592:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b594:	2300      	movs	r3, #0
 800b596:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b598:	2300      	movs	r3, #0
 800b59a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b59c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4818      	ldr	r0, [pc, #96]	; (800b608 <MX_TIM1_Init+0x150>)
 800b5a6:	f7fb ff03 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800b5b0:	f000 fcd0 	bl	800bf54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b5c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b5cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800b5d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b5e4:	1d3b      	adds	r3, r7, #4
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4807      	ldr	r0, [pc, #28]	; (800b608 <MX_TIM1_Init+0x150>)
 800b5ea:	f7fc fccf 	bl	8007f8c <HAL_TIMEx_ConfigBreakDeadTime>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800b5f4:	f000 fcae 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800b5f8:	4803      	ldr	r0, [pc, #12]	; (800b608 <MX_TIM1_Init+0x150>)
 800b5fa:	f001 f977 	bl	800c8ec <HAL_TIM_MspPostInit>

}
 800b5fe:	bf00      	nop
 800b600:	3768      	adds	r7, #104	; 0x68
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	200008a4 	.word	0x200008a4
 800b60c:	40010000 	.word	0x40010000

0800b610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b616:	f107 0310 	add.w	r3, r7, #16
 800b61a:	2200      	movs	r2, #0
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	605a      	str	r2, [r3, #4]
 800b620:	609a      	str	r2, [r3, #8]
 800b622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b624:	1d3b      	adds	r3, r7, #4
 800b626:	2200      	movs	r2, #0
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	605a      	str	r2, [r3, #4]
 800b62c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b62e:	4b1d      	ldr	r3, [pc, #116]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b634:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b636:	4b1b      	ldr	r3, [pc, #108]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b638:	2200      	movs	r2, #0
 800b63a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b63c:	4b19      	ldr	r3, [pc, #100]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b63e:	2200      	movs	r2, #0
 800b640:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800b642:	4b18      	ldr	r3, [pc, #96]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b644:	2200      	movs	r2, #0
 800b646:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b648:	4b16      	ldr	r3, [pc, #88]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b64e:	4b15      	ldr	r3, [pc, #84]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b650:	2200      	movs	r2, #0
 800b652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b654:	4813      	ldr	r0, [pc, #76]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b656:	f7fb fd0b 	bl	8007070 <HAL_TIM_Base_Init>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d001      	beq.n	800b664 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800b660:	f000 fc78 	bl	800bf54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b66a:	f107 0310 	add.w	r3, r7, #16
 800b66e:	4619      	mov	r1, r3
 800b670:	480c      	ldr	r0, [pc, #48]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b672:	f7fb ffb5 	bl	80075e0 <HAL_TIM_ConfigClockSource>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800b67c:	f000 fc6a 	bl	800bf54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b680:	2300      	movs	r3, #0
 800b682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b684:	2300      	movs	r3, #0
 800b686:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b688:	1d3b      	adds	r3, r7, #4
 800b68a:	4619      	mov	r1, r3
 800b68c:	4805      	ldr	r0, [pc, #20]	; (800b6a4 <MX_TIM2_Init+0x94>)
 800b68e:	f7fc fc21 	bl	8007ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800b698:	f000 fc5c 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b69c:	bf00      	nop
 800b69e:	3720      	adds	r7, #32
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	20000938 	.word	0x20000938

0800b6a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b08e      	sub	sp, #56	; 0x38
 800b6ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b6ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	605a      	str	r2, [r3, #4]
 800b6b8:	609a      	str	r2, [r3, #8]
 800b6ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b6bc:	f107 031c 	add.w	r3, r7, #28
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	605a      	str	r2, [r3, #4]
 800b6c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b6c8:	463b      	mov	r3, r7
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	601a      	str	r2, [r3, #0]
 800b6ce:	605a      	str	r2, [r3, #4]
 800b6d0:	609a      	str	r2, [r3, #8]
 800b6d2:	60da      	str	r2, [r3, #12]
 800b6d4:	611a      	str	r2, [r3, #16]
 800b6d6:	615a      	str	r2, [r3, #20]
 800b6d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b6da:	4b2c      	ldr	r3, [pc, #176]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b6dc:	4a2c      	ldr	r2, [pc, #176]	; (800b790 <MX_TIM3_Init+0xe8>)
 800b6de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b6e0:	4b2a      	ldr	r3, [pc, #168]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b6e6:	4b29      	ldr	r3, [pc, #164]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800b6ec:	4b27      	ldr	r3, [pc, #156]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b6f2:	4b26      	ldr	r3, [pc, #152]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b6f8:	4b24      	ldr	r3, [pc, #144]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b6fe:	4823      	ldr	r0, [pc, #140]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b700:	f7fb fcb6 	bl	8007070 <HAL_TIM_Base_Init>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800b70a:	f000 fc23 	bl	800bf54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b70e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b712:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b718:	4619      	mov	r1, r3
 800b71a:	481c      	ldr	r0, [pc, #112]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b71c:	f7fb ff60 	bl	80075e0 <HAL_TIM_ConfigClockSource>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d001      	beq.n	800b72a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800b726:	f000 fc15 	bl	800bf54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b72a:	4818      	ldr	r0, [pc, #96]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b72c:	f7fb fcf6 	bl	800711c <HAL_TIM_PWM_Init>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d001      	beq.n	800b73a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800b736:	f000 fc0d 	bl	800bf54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b73a:	2300      	movs	r3, #0
 800b73c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b73e:	2300      	movs	r3, #0
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b742:	f107 031c 	add.w	r3, r7, #28
 800b746:	4619      	mov	r1, r3
 800b748:	4810      	ldr	r0, [pc, #64]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b74a:	f7fc fbc3 	bl	8007ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800b754:	f000 fbfe 	bl	800bf54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b758:	2360      	movs	r3, #96	; 0x60
 800b75a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b760:	2300      	movs	r3, #0
 800b762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b764:	2300      	movs	r3, #0
 800b766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b768:	463b      	mov	r3, r7
 800b76a:	2200      	movs	r2, #0
 800b76c:	4619      	mov	r1, r3
 800b76e:	4807      	ldr	r0, [pc, #28]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b770:	f7fb fe1e 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800b77a:	f000 fbeb 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800b77e:	4803      	ldr	r0, [pc, #12]	; (800b78c <MX_TIM3_Init+0xe4>)
 800b780:	f001 f8b4 	bl	800c8ec <HAL_TIM_MspPostInit>

}
 800b784:	bf00      	nop
 800b786:	3738      	adds	r7, #56	; 0x38
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20000680 	.word	0x20000680
 800b790:	40000400 	.word	0x40000400

0800b794 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b08e      	sub	sp, #56	; 0x38
 800b798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b79a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	605a      	str	r2, [r3, #4]
 800b7a4:	609a      	str	r2, [r3, #8]
 800b7a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b7a8:	f107 031c 	add.w	r3, r7, #28
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	605a      	str	r2, [r3, #4]
 800b7b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]
 800b7ba:	605a      	str	r2, [r3, #4]
 800b7bc:	609a      	str	r2, [r3, #8]
 800b7be:	60da      	str	r2, [r3, #12]
 800b7c0:	611a      	str	r2, [r3, #16]
 800b7c2:	615a      	str	r2, [r3, #20]
 800b7c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800b7c6:	4b2c      	ldr	r3, [pc, #176]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b7c8:	4a2c      	ldr	r2, [pc, #176]	; (800b87c <MX_TIM5_Init+0xe8>)
 800b7ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800b7cc:	4b2a      	ldr	r3, [pc, #168]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b7d2:	4b29      	ldr	r3, [pc, #164]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800b7d8:	4b27      	ldr	r3, [pc, #156]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b7de:	4b26      	ldr	r3, [pc, #152]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b7e4:	4b24      	ldr	r3, [pc, #144]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800b7ea:	4823      	ldr	r0, [pc, #140]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b7ec:	f7fb fc40 	bl	8007070 <HAL_TIM_Base_Init>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800b7f6:	f000 fbad 	bl	800bf54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b7fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800b800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b804:	4619      	mov	r1, r3
 800b806:	481c      	ldr	r0, [pc, #112]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b808:	f7fb feea 	bl	80075e0 <HAL_TIM_ConfigClockSource>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800b812:	f000 fb9f 	bl	800bf54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800b816:	4818      	ldr	r0, [pc, #96]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b818:	f7fb fc80 	bl	800711c <HAL_TIM_PWM_Init>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d001      	beq.n	800b826 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800b822:	f000 fb97 	bl	800bf54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b826:	2300      	movs	r3, #0
 800b828:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b82a:	2300      	movs	r3, #0
 800b82c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800b82e:	f107 031c 	add.w	r3, r7, #28
 800b832:	4619      	mov	r1, r3
 800b834:	4810      	ldr	r0, [pc, #64]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b836:	f7fc fb4d 	bl	8007ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800b840:	f000 fb88 	bl	800bf54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b844:	2360      	movs	r3, #96	; 0x60
 800b846:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b84c:	2300      	movs	r3, #0
 800b84e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b850:	2300      	movs	r3, #0
 800b852:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b854:	463b      	mov	r3, r7
 800b856:	220c      	movs	r2, #12
 800b858:	4619      	mov	r1, r3
 800b85a:	4807      	ldr	r0, [pc, #28]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b85c:	f7fb fda8 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800b866:	f000 fb75 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800b86a:	4803      	ldr	r0, [pc, #12]	; (800b878 <MX_TIM5_Init+0xe4>)
 800b86c:	f001 f83e 	bl	800c8ec <HAL_TIM_MspPostInit>

}
 800b870:	bf00      	nop
 800b872:	3738      	adds	r7, #56	; 0x38
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	20000640 	.word	0x20000640
 800b87c:	40000c00 	.word	0x40000c00

0800b880 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b886:	f107 0310 	add.w	r3, r7, #16
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	605a      	str	r2, [r3, #4]
 800b890:	609a      	str	r2, [r3, #8]
 800b892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b894:	1d3b      	adds	r3, r7, #4
 800b896:	2200      	movs	r2, #0
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	605a      	str	r2, [r3, #4]
 800b89c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800b89e:	4b1f      	ldr	r3, [pc, #124]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8a0:	4a1f      	ldr	r2, [pc, #124]	; (800b920 <MX_TIM8_Init+0xa0>)
 800b8a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800b8a4:	4b1d      	ldr	r3, [pc, #116]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b8aa:	4b1c      	ldr	r3, [pc, #112]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800b8b0:	4b1a      	ldr	r3, [pc, #104]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b8b6:	4b19      	ldr	r3, [pc, #100]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800b8bc:	4b17      	ldr	r3, [pc, #92]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b8c2:	4b16      	ldr	r3, [pc, #88]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800b8c8:	4814      	ldr	r0, [pc, #80]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8ca:	f7fb fbd1 	bl	8007070 <HAL_TIM_Base_Init>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800b8d4:	f000 fb3e 	bl	800bf54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b8d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800b8de:	f107 0310 	add.w	r3, r7, #16
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	480d      	ldr	r0, [pc, #52]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b8e6:	f7fb fe7b 	bl	80075e0 <HAL_TIM_ConfigClockSource>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d001      	beq.n	800b8f4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800b8f0:	f000 fb30 	bl	800bf54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b900:	1d3b      	adds	r3, r7, #4
 800b902:	4619      	mov	r1, r3
 800b904:	4805      	ldr	r0, [pc, #20]	; (800b91c <MX_TIM8_Init+0x9c>)
 800b906:	f7fc fae5 	bl	8007ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800b910:	f000 fb20 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800b914:	bf00      	nop
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	20000438 	.word	0x20000438
 800b920:	40010400 	.word	0x40010400

0800b924 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b088      	sub	sp, #32
 800b928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800b92a:	1d3b      	adds	r3, r7, #4
 800b92c:	2200      	movs	r2, #0
 800b92e:	601a      	str	r2, [r3, #0]
 800b930:	605a      	str	r2, [r3, #4]
 800b932:	609a      	str	r2, [r3, #8]
 800b934:	60da      	str	r2, [r3, #12]
 800b936:	611a      	str	r2, [r3, #16]
 800b938:	615a      	str	r2, [r3, #20]
 800b93a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800b93c:	4b19      	ldr	r3, [pc, #100]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b93e:	4a1a      	ldr	r2, [pc, #104]	; (800b9a8 <MX_TIM12_Init+0x84>)
 800b940:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800b942:	4b18      	ldr	r3, [pc, #96]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b944:	2200      	movs	r2, #0
 800b946:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b948:	4b16      	ldr	r3, [pc, #88]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800b94e:	4b15      	ldr	r3, [pc, #84]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b950:	2200      	movs	r2, #0
 800b952:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b954:	4b13      	ldr	r3, [pc, #76]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b956:	2200      	movs	r2, #0
 800b958:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b95a:	4b12      	ldr	r3, [pc, #72]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800b960:	4810      	ldr	r0, [pc, #64]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b962:	f7fb fbdb 	bl	800711c <HAL_TIM_PWM_Init>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800b96c:	f000 faf2 	bl	800bf54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b970:	2360      	movs	r3, #96	; 0x60
 800b972:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b978:	2300      	movs	r3, #0
 800b97a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b97c:	2300      	movs	r3, #0
 800b97e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b980:	1d3b      	adds	r3, r7, #4
 800b982:	2200      	movs	r2, #0
 800b984:	4619      	mov	r1, r3
 800b986:	4807      	ldr	r0, [pc, #28]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b988:	f7fb fd12 	bl	80073b0 <HAL_TIM_PWM_ConfigChannel>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800b992:	f000 fadf 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800b996:	4803      	ldr	r0, [pc, #12]	; (800b9a4 <MX_TIM12_Init+0x80>)
 800b998:	f000 ffa8 	bl	800c8ec <HAL_TIM_MspPostInit>

}
 800b99c:	bf00      	nop
 800b99e:	3720      	adds	r7, #32
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20000978 	.word	0x20000978
 800b9a8:	40001800 	.word	0x40001800

0800b9ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b9b0:	4b14      	ldr	r3, [pc, #80]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9b2:	4a15      	ldr	r2, [pc, #84]	; (800ba08 <MX_USART1_UART_Init+0x5c>)
 800b9b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b9b6:	4b13      	ldr	r3, [pc, #76]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b9bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b9be:	4b11      	ldr	r3, [pc, #68]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b9d0:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9d2:	220c      	movs	r2, #12
 800b9d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b9dc:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b9e2:	4b08      	ldr	r3, [pc, #32]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b9e8:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b9ee:	4805      	ldr	r0, [pc, #20]	; (800ba04 <MX_USART1_UART_Init+0x58>)
 800b9f0:	f7fc fb68 	bl	80080c4 <HAL_UART_Init>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b9fa:	f000 faab 	bl	800bf54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b9fe:	bf00      	nop
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	20000804 	.word	0x20000804
 800ba08:	40011000 	.word	0x40011000

0800ba0c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800ba12:	1d3b      	adds	r3, r7, #4
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	609a      	str	r2, [r3, #8]
 800ba1c:	60da      	str	r2, [r3, #12]
 800ba1e:	611a      	str	r2, [r3, #16]
 800ba20:	615a      	str	r2, [r3, #20]
 800ba22:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800ba24:	4b1f      	ldr	r3, [pc, #124]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba26:	4a20      	ldr	r2, [pc, #128]	; (800baa8 <MX_FMC_Init+0x9c>)
 800ba28:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800ba2a:	4b1e      	ldr	r3, [pc, #120]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800ba30:	4b1c      	ldr	r3, [pc, #112]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800ba36:	4b1b      	ldr	r3, [pc, #108]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba38:	2204      	movs	r2, #4
 800ba3a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800ba3c:	4b19      	ldr	r3, [pc, #100]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba3e:	2210      	movs	r2, #16
 800ba40:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ba42:	4b18      	ldr	r3, [pc, #96]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba44:	2240      	movs	r2, #64	; 0x40
 800ba46:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800ba48:	4b16      	ldr	r3, [pc, #88]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba4a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ba4e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800ba50:	4b14      	ldr	r3, [pc, #80]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800ba56:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba5c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800ba5e:	4b11      	ldr	r3, [pc, #68]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba64:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800ba66:	4b0f      	ldr	r3, [pc, #60]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800ba70:	2307      	movs	r3, #7
 800ba72:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800ba74:	2304      	movs	r3, #4
 800ba76:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800ba78:	2307      	movs	r3, #7
 800ba7a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800ba80:	2302      	movs	r3, #2
 800ba82:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800ba84:	2302      	movs	r3, #2
 800ba86:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800ba88:	1d3b      	adds	r3, r7, #4
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4805      	ldr	r0, [pc, #20]	; (800baa4 <MX_FMC_Init+0x98>)
 800ba8e:	f7fb f981 	bl	8006d94 <HAL_SDRAM_Init>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800ba98:	f000 fa5c 	bl	800bf54 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800ba9c:	bf00      	nop
 800ba9e:	3720      	adds	r7, #32
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	200009b8 	.word	0x200009b8
 800baa8:	a0000140 	.word	0xa0000140

0800baac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b090      	sub	sp, #64	; 0x40
 800bab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bab6:	2200      	movs	r2, #0
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	605a      	str	r2, [r3, #4]
 800babc:	609a      	str	r2, [r3, #8]
 800babe:	60da      	str	r2, [r3, #12]
 800bac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800bac2:	4baf      	ldr	r3, [pc, #700]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac6:	4aae      	ldr	r2, [pc, #696]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bac8:	f043 0310 	orr.w	r3, r3, #16
 800bacc:	6313      	str	r3, [r2, #48]	; 0x30
 800bace:	4bac      	ldr	r3, [pc, #688]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad2:	f003 0310 	and.w	r3, r3, #16
 800bad6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bada:	4ba9      	ldr	r3, [pc, #676]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800badc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bade:	4aa8      	ldr	r2, [pc, #672]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae4:	6313      	str	r3, [r2, #48]	; 0x30
 800bae6:	4ba6      	ldr	r3, [pc, #664]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baee:	627b      	str	r3, [r7, #36]	; 0x24
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800baf2:	4ba3      	ldr	r3, [pc, #652]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf6:	4aa2      	ldr	r2, [pc, #648]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	6313      	str	r3, [r2, #48]	; 0x30
 800bafe:	4ba0      	ldr	r3, [pc, #640]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb02:	f003 0302 	and.w	r3, r3, #2
 800bb06:	623b      	str	r3, [r7, #32]
 800bb08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bb0a:	4b9d      	ldr	r3, [pc, #628]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0e:	4a9c      	ldr	r2, [pc, #624]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb10:	f043 0308 	orr.w	r3, r3, #8
 800bb14:	6313      	str	r3, [r2, #48]	; 0x30
 800bb16:	4b9a      	ldr	r3, [pc, #616]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1a:	f003 0308 	and.w	r3, r3, #8
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bb22:	4b97      	ldr	r3, [pc, #604]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb26:	4a96      	ldr	r2, [pc, #600]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb28:	f043 0304 	orr.w	r3, r3, #4
 800bb2c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb2e:	4b94      	ldr	r3, [pc, #592]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb32:	f003 0304 	and.w	r3, r3, #4
 800bb36:	61bb      	str	r3, [r7, #24]
 800bb38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb3a:	4b91      	ldr	r3, [pc, #580]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3e:	4a90      	ldr	r2, [pc, #576]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb40:	f043 0301 	orr.w	r3, r3, #1
 800bb44:	6313      	str	r3, [r2, #48]	; 0x30
 800bb46:	4b8e      	ldr	r3, [pc, #568]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4a:	f003 0301 	and.w	r3, r3, #1
 800bb4e:	617b      	str	r3, [r7, #20]
 800bb50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800bb52:	4b8b      	ldr	r3, [pc, #556]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb56:	4a8a      	ldr	r2, [pc, #552]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb5c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb5e:	4b88      	ldr	r3, [pc, #544]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb66:	613b      	str	r3, [r7, #16]
 800bb68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800bb6a:	4b85      	ldr	r3, [pc, #532]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb6e:	4a84      	ldr	r2, [pc, #528]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb74:	6313      	str	r3, [r2, #48]	; 0x30
 800bb76:	4b82      	ldr	r3, [pc, #520]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb7e:	60fb      	str	r3, [r7, #12]
 800bb80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800bb82:	4b7f      	ldr	r3, [pc, #508]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb86:	4a7e      	ldr	r2, [pc, #504]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb8c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb8e:	4b7c      	ldr	r3, [pc, #496]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb96:	60bb      	str	r3, [r7, #8]
 800bb98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800bb9a:	4b79      	ldr	r3, [pc, #484]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bb9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb9e:	4a78      	ldr	r2, [pc, #480]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bba0:	f043 0320 	orr.w	r3, r3, #32
 800bba4:	6313      	str	r3, [r2, #48]	; 0x30
 800bba6:	4b76      	ldr	r3, [pc, #472]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbaa:	f003 0320 	and.w	r3, r3, #32
 800bbae:	607b      	str	r3, [r7, #4]
 800bbb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bbb2:	4b73      	ldr	r3, [pc, #460]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb6:	4a72      	ldr	r2, [pc, #456]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbbc:	6313      	str	r3, [r2, #48]	; 0x30
 800bbbe:	4b70      	ldr	r3, [pc, #448]	; (800bd80 <MX_GPIO_Init+0x2d4>)
 800bbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800bbca:	2201      	movs	r2, #1
 800bbcc:	2120      	movs	r1, #32
 800bbce:	486d      	ldr	r0, [pc, #436]	; (800bd84 <MX_GPIO_Init+0x2d8>)
 800bbd0:	f7f6 ff8a 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	210c      	movs	r1, #12
 800bbd8:	486b      	ldr	r0, [pc, #428]	; (800bd88 <MX_GPIO_Init+0x2dc>)
 800bbda:	f7f6 ff85 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800bbde:	2201      	movs	r2, #1
 800bbe0:	2108      	movs	r1, #8
 800bbe2:	486a      	ldr	r0, [pc, #424]	; (800bd8c <MX_GPIO_Init+0x2e0>)
 800bbe4:	f7f6 ff80 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bbee:	4866      	ldr	r0, [pc, #408]	; (800bd88 <MX_GPIO_Init+0x2dc>)
 800bbf0:	f7f6 ff7a 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bbfa:	4865      	ldr	r0, [pc, #404]	; (800bd90 <MX_GPIO_Init+0x2e4>)
 800bbfc:	f7f6 ff74 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800bc00:	2200      	movs	r2, #0
 800bc02:	21c8      	movs	r1, #200	; 0xc8
 800bc04:	4863      	ldr	r0, [pc, #396]	; (800bd94 <MX_GPIO_Init+0x2e8>)
 800bc06:	f7f6 ff6f 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RGB_LED1_G_Pin|RGB_LED1_R_Pin|RGB_LED1_B_Pin, GPIO_PIN_SET);
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f44f 7160 	mov.w	r1, #896	; 0x380
 800bc10:	4861      	ldr	r0, [pc, #388]	; (800bd98 <MX_GPIO_Init+0x2ec>)
 800bc12:	f7f6 ff69 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800bc16:	2200      	movs	r2, #0
 800bc18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc1c:	485e      	ldr	r0, [pc, #376]	; (800bd98 <MX_GPIO_Init+0x2ec>)
 800bc1e:	f7f6 ff63 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800bc22:	2308      	movs	r3, #8
 800bc24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc26:	2300      	movs	r3, #0
 800bc28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800bc2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc32:	4619      	mov	r1, r3
 800bc34:	4859      	ldr	r0, [pc, #356]	; (800bd9c <MX_GPIO_Init+0x2f0>)
 800bc36:	f7f6 fdad 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800bc3a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800bc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc40:	2302      	movs	r3, #2
 800bc42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc48:	2303      	movs	r3, #3
 800bc4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bc4c:	230a      	movs	r3, #10
 800bc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc54:	4619      	mov	r1, r3
 800bc56:	4852      	ldr	r0, [pc, #328]	; (800bda0 <MX_GPIO_Init+0x2f4>)
 800bc58:	f7f6 fd9c 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : GAME_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = GAME_BUTTON_1_Pin;
 800bc5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bc62:	4b50      	ldr	r3, [pc, #320]	; (800bda4 <MX_GPIO_Init+0x2f8>)
 800bc64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bc66:	2302      	movs	r3, #2
 800bc68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GAME_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 800bc6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc6e:	4619      	mov	r1, r3
 800bc70:	484d      	ldr	r0, [pc, #308]	; (800bda8 <MX_GPIO_Init+0x2fc>)
 800bc72:	f7f6 fd8f 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800bc76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc80:	2300      	movs	r3, #0
 800bc82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800bc84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4848      	ldr	r0, [pc, #288]	; (800bdac <MX_GPIO_Init+0x300>)
 800bc8c:	f7f6 fd82 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800bc90:	2320      	movs	r3, #32
 800bc92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc94:	2301      	movs	r3, #1
 800bc96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800bca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bca4:	4619      	mov	r1, r3
 800bca6:	4837      	ldr	r0, [pc, #220]	; (800bd84 <MX_GPIO_Init+0x2d8>)
 800bca8:	f7f6 fd74 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800bcac:	f241 030c 	movw	r3, #4108	; 0x100c
 800bcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800bcbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	4830      	ldr	r0, [pc, #192]	; (800bd88 <MX_GPIO_Init+0x2dc>)
 800bcc6:	f7f6 fd65 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800bcca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800bcd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4834      	ldr	r0, [pc, #208]	; (800bdb0 <MX_GPIO_Init+0x304>)
 800bce0:	f7f6 fd58 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800bce4:	2308      	movs	r3, #8
 800bce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bce8:	2301      	movs	r3, #1
 800bcea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcec:	2300      	movs	r3, #0
 800bcee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800bcf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	4824      	ldr	r0, [pc, #144]	; (800bd8c <MX_GPIO_Init+0x2e0>)
 800bcfc:	f7f6 fd4a 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800bd00:	2310      	movs	r3, #16
 800bd02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd04:	2300      	movs	r3, #0
 800bd06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800bd0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd10:	4619      	mov	r1, r3
 800bd12:	481c      	ldr	r0, [pc, #112]	; (800bd84 <MX_GPIO_Init+0x2d8>)
 800bd14:	f7f6 fd3e 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800bd18:	f248 0304 	movw	r3, #32772	; 0x8004
 800bd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd22:	2300      	movs	r3, #0
 800bd24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bd26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4818      	ldr	r0, [pc, #96]	; (800bd90 <MX_GPIO_Init+0x2e4>)
 800bd2e:	f7f6 fd31 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800bd32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd40:	2300      	movs	r3, #0
 800bd42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800bd44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd48:	4619      	mov	r1, r3
 800bd4a:	4811      	ldr	r0, [pc, #68]	; (800bd90 <MX_GPIO_Init+0x2e4>)
 800bd4c:	f7f6 fd22 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800bd50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800bd56:	4b17      	ldr	r3, [pc, #92]	; (800bdb4 <MX_GPIO_Init+0x308>)
 800bd58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800bd5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd62:	4619      	mov	r1, r3
 800bd64:	4808      	ldr	r0, [pc, #32]	; (800bd88 <MX_GPIO_Init+0x2dc>)
 800bd66:	f7f6 fd15 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTER_BUTTON_Pin GAME_BUTTON_2_Pin */
  GPIO_InitStruct.Pin = STARTER_BUTTON_Pin|GAME_BUTTON_2_Pin;
 800bd6a:	23c0      	movs	r3, #192	; 0xc0
 800bd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bd6e:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <MX_GPIO_Init+0x2f8>)
 800bd70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bd72:	2302      	movs	r3, #2
 800bd74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	e01c      	b.n	800bdb8 <MX_GPIO_Init+0x30c>
 800bd7e:	bf00      	nop
 800bd80:	40023800 	.word	0x40023800
 800bd84:	40020c00 	.word	0x40020c00
 800bd88:	40022000 	.word	0x40022000
 800bd8c:	40022800 	.word	0x40022800
 800bd90:	40021c00 	.word	0x40021c00
 800bd94:	40021800 	.word	0x40021800
 800bd98:	40021400 	.word	0x40021400
 800bd9c:	40021000 	.word	0x40021000
 800bda0:	40020400 	.word	0x40020400
 800bda4:	10110000 	.word	0x10110000
 800bda8:	40020000 	.word	0x40020000
 800bdac:	40022400 	.word	0x40022400
 800bdb0:	40020800 	.word	0x40020800
 800bdb4:	10120000 	.word	0x10120000
 800bdb8:	4837      	ldr	r0, [pc, #220]	; (800be98 <MX_GPIO_Init+0x3ec>)
 800bdba:	f7f6 fceb 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800bdbe:	2310      	movs	r3, #16
 800bdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bdce:	230a      	movs	r3, #10
 800bdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800bdd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4830      	ldr	r0, [pc, #192]	; (800be9c <MX_GPIO_Init+0x3f0>)
 800bdda:	f7f6 fcdb 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800bdde:	23c8      	movs	r3, #200	; 0xc8
 800bde0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bde2:	2301      	movs	r3, #1
 800bde4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdea:	2300      	movs	r3, #0
 800bdec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bdee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	482a      	ldr	r0, [pc, #168]	; (800bea0 <MX_GPIO_Init+0x3f4>)
 800bdf6:	f7f6 fccd 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_LED1_G_Pin RED_LED_Pin RGB_LED1_R_Pin RGB_LED1_B_Pin */
  GPIO_InitStruct.Pin = RGB_LED1_G_Pin|RED_LED_Pin|RGB_LED1_R_Pin|RGB_LED1_B_Pin;
 800bdfa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800bdfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800be00:	2301      	movs	r3, #1
 800be02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be04:	2300      	movs	r3, #0
 800be06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800be08:	2300      	movs	r3, #0
 800be0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800be0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be10:	4619      	mov	r1, r3
 800be12:	4824      	ldr	r0, [pc, #144]	; (800bea4 <MX_GPIO_Init+0x3f8>)
 800be14:	f7f6 fcbe 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800be18:	2305      	movs	r3, #5
 800be1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be1c:	2302      	movs	r3, #2
 800be1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be20:	2300      	movs	r3, #0
 800be22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be24:	2303      	movs	r3, #3
 800be26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800be28:	230a      	movs	r3, #10
 800be2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be30:	4619      	mov	r1, r3
 800be32:	4819      	ldr	r0, [pc, #100]	; (800be98 <MX_GPIO_Init+0x3ec>)
 800be34:	f7f6 fcae 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800be38:	2304      	movs	r3, #4
 800be3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800be3c:	2300      	movs	r3, #0
 800be3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be40:	2300      	movs	r3, #0
 800be42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800be44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be48:	4619      	mov	r1, r3
 800be4a:	4815      	ldr	r0, [pc, #84]	; (800bea0 <MX_GPIO_Init+0x3f4>)
 800be4c:	f7f6 fca2 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800be50:	2328      	movs	r3, #40	; 0x28
 800be52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be54:	2302      	movs	r3, #2
 800be56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be58:	2300      	movs	r3, #0
 800be5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be5c:	2303      	movs	r3, #3
 800be5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800be60:	230a      	movs	r3, #10
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be68:	4619      	mov	r1, r3
 800be6a:	480f      	ldr	r0, [pc, #60]	; (800bea8 <MX_GPIO_Init+0x3fc>)
 800be6c:	f7f6 fc92 	bl	8002794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800be70:	2200      	movs	r2, #0
 800be72:	2101      	movs	r1, #1
 800be74:	2017      	movs	r0, #23
 800be76:	f7f5 fdaf 	bl	80019d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800be7a:	2017      	movs	r0, #23
 800be7c:	f7f5 fdc8 	bl	8001a10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800be80:	2200      	movs	r2, #0
 800be82:	2101      	movs	r1, #1
 800be84:	2028      	movs	r0, #40	; 0x28
 800be86:	f7f5 fda7 	bl	80019d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800be8a:	2028      	movs	r0, #40	; 0x28
 800be8c:	f7f5 fdc0 	bl	8001a10 <HAL_NVIC_EnableIRQ>

}
 800be90:	bf00      	nop
 800be92:	3740      	adds	r7, #64	; 0x40
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	40020800 	.word	0x40020800
 800be9c:	40021c00 	.word	0x40021c00
 800bea0:	40021800 	.word	0x40021800
 800bea4:	40021400 	.word	0x40021400
 800bea8:	40020000 	.word	0x40020000

0800beac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	80fb      	strh	r3, [r7, #6]

  unsigned int button_press_time;

  switch (GPIO_Pin) {
 800beb6:	88fb      	ldrh	r3, [r7, #6]
 800beb8:	2b80      	cmp	r3, #128	; 0x80
 800beba:	d003      	beq.n	800bec4 <HAL_GPIO_EXTI_Callback+0x18>
 800bebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bec0:	d00c      	beq.n	800bedc <HAL_GPIO_EXTI_Callback+0x30>

    }
      break;

    default:
      break;
 800bec2:	e028      	b.n	800bf16 <HAL_GPIO_EXTI_Callback+0x6a>
    if (round_counter == 0){
 800bec4:	4b16      	ldr	r3, [pc, #88]	; (800bf20 <HAL_GPIO_EXTI_Callback+0x74>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d123      	bne.n	800bf14 <HAL_GPIO_EXTI_Callback+0x68>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 800becc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800bed0:	f7f4 fcc2 	bl	8000858 <BSP_LCD_Clear>
    game_state = STEADY;
 800bed4:	4b13      	ldr	r3, [pc, #76]	; (800bf24 <HAL_GPIO_EXTI_Callback+0x78>)
 800bed6:	2201      	movs	r2, #1
 800bed8:	701a      	strb	r2, [r3, #0]
    break;
 800beda:	e01b      	b.n	800bf14 <HAL_GPIO_EXTI_Callback+0x68>
   button_press_time = HAL_GetTick();
 800bedc:	f7f5 fa24 	bl	8001328 <HAL_GetTick>
 800bee0:	60f8      	str	r0, [r7, #12]
    switch (game_state){
 800bee2:	4b10      	ldr	r3, [pc, #64]	; (800bf24 <HAL_GPIO_EXTI_Callback+0x78>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d002      	beq.n	800bef0 <HAL_GPIO_EXTI_Callback+0x44>
 800beea:	2b02      	cmp	r3, #2
 800beec:	d007      	beq.n	800befe <HAL_GPIO_EXTI_Callback+0x52>
      break;
 800beee:	e010      	b.n	800bf12 <HAL_GPIO_EXTI_Callback+0x66>
      reaction_time_1 = 0;
 800bef0:	4b0d      	ldr	r3, [pc, #52]	; (800bf28 <HAL_GPIO_EXTI_Callback+0x7c>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
      game_state = INVALID;
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <HAL_GPIO_EXTI_Callback+0x78>)
 800bef8:	2204      	movs	r2, #4
 800befa:	701a      	strb	r2, [r3, #0]
      break;
 800befc:	e009      	b.n	800bf12 <HAL_GPIO_EXTI_Callback+0x66>
      reaction_time_1 = button_press_time - round_start_time;
 800befe:	4b0b      	ldr	r3, [pc, #44]	; (800bf2c <HAL_GPIO_EXTI_Callback+0x80>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	4a08      	ldr	r2, [pc, #32]	; (800bf28 <HAL_GPIO_EXTI_Callback+0x7c>)
 800bf08:	6013      	str	r3, [r2, #0]
      game_state = VALID;
 800bf0a:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <HAL_GPIO_EXTI_Callback+0x78>)
 800bf0c:	2203      	movs	r2, #3
 800bf0e:	701a      	strb	r2, [r3, #0]
      break;
 800bf10:	bf00      	nop
      break;
 800bf12:	e000      	b.n	800bf16 <HAL_GPIO_EXTI_Callback+0x6a>
    break;
 800bf14:	bf00      	nop
  }

}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20000200 	.word	0x20000200
 800bf24:	20000208 	.word	0x20000208
 800bf28:	20000768 	.word	0x20000768
 800bf2c:	20000a34 	.word	0x20000a34

0800bf30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a04      	ldr	r2, [pc, #16]	; (800bf50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d101      	bne.n	800bf46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800bf42:	f7f5 f9dd 	bl	8001300 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800bf46:	bf00      	nop
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	40002000 	.word	0x40002000

0800bf54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bf54:	b480      	push	{r7}
 800bf56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bf58:	bf00      	nop
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
	...

0800bf64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800bf6a:	4b0f      	ldr	r3, [pc, #60]	; (800bfa8 <HAL_MspInit+0x44>)
 800bf6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf6e:	4a0e      	ldr	r2, [pc, #56]	; (800bfa8 <HAL_MspInit+0x44>)
 800bf70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf74:	6413      	str	r3, [r2, #64]	; 0x40
 800bf76:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <HAL_MspInit+0x44>)
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf7e:	607b      	str	r3, [r7, #4]
 800bf80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf82:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <HAL_MspInit+0x44>)
 800bf84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf86:	4a08      	ldr	r2, [pc, #32]	; (800bfa8 <HAL_MspInit+0x44>)
 800bf88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf8c:	6453      	str	r3, [r2, #68]	; 0x44
 800bf8e:	4b06      	ldr	r3, [pc, #24]	; (800bfa8 <HAL_MspInit+0x44>)
 800bf90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf96:	603b      	str	r3, [r7, #0]
 800bf98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	40023800 	.word	0x40023800

0800bfac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b08a      	sub	sp, #40	; 0x28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfb4:	f107 0314 	add.w	r3, r7, #20
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	605a      	str	r2, [r3, #4]
 800bfbe:	609a      	str	r2, [r3, #8]
 800bfc0:	60da      	str	r2, [r3, #12]
 800bfc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a21      	ldr	r2, [pc, #132]	; (800c050 <HAL_ADC_MspInit+0xa4>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d13b      	bne.n	800c046 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800bfce:	4b21      	ldr	r3, [pc, #132]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800bfd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd2:	4a20      	ldr	r2, [pc, #128]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800bfd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bfd8:	6453      	str	r3, [r2, #68]	; 0x44
 800bfda:	4b1e      	ldr	r3, [pc, #120]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800bfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfe2:	613b      	str	r3, [r7, #16]
 800bfe4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800bfe6:	4b1b      	ldr	r3, [pc, #108]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	4a1a      	ldr	r2, [pc, #104]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800bfec:	f043 0320 	orr.w	r3, r3, #32
 800bff0:	6313      	str	r3, [r2, #48]	; 0x30
 800bff2:	4b18      	ldr	r3, [pc, #96]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800bff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff6:	f003 0320 	and.w	r3, r3, #32
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bffe:	4b15      	ldr	r3, [pc, #84]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800c000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c002:	4a14      	ldr	r2, [pc, #80]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800c004:	f043 0301 	orr.w	r3, r3, #1
 800c008:	6313      	str	r3, [r2, #48]	; 0x30
 800c00a:	4b12      	ldr	r3, [pc, #72]	; (800c054 <HAL_ADC_MspInit+0xa8>)
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	60bb      	str	r3, [r7, #8]
 800c014:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PF6     ------> ADC3_IN4
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A5_Pin;
 800c016:	2340      	movs	r3, #64	; 0x40
 800c018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c01a:	2303      	movs	r3, #3
 800c01c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A5_GPIO_Port, &GPIO_InitStruct);
 800c022:	f107 0314 	add.w	r3, r7, #20
 800c026:	4619      	mov	r1, r3
 800c028:	480b      	ldr	r0, [pc, #44]	; (800c058 <HAL_ADC_MspInit+0xac>)
 800c02a:	f7f6 fbb3 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800c02e:	2301      	movs	r3, #1
 800c030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c032:	2303      	movs	r3, #3
 800c034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c036:	2300      	movs	r3, #0
 800c038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800c03a:	f107 0314 	add.w	r3, r7, #20
 800c03e:	4619      	mov	r1, r3
 800c040:	4806      	ldr	r0, [pc, #24]	; (800c05c <HAL_ADC_MspInit+0xb0>)
 800c042:	f7f6 fba7 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c046:	bf00      	nop
 800c048:	3728      	adds	r7, #40	; 0x28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	40012200 	.word	0x40012200
 800c054:	40023800 	.word	0x40023800
 800c058:	40021400 	.word	0x40021400
 800c05c:	40020000 	.word	0x40020000

0800c060 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a0a      	ldr	r2, [pc, #40]	; (800c098 <HAL_CRC_MspInit+0x38>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d10b      	bne.n	800c08a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800c072:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <HAL_CRC_MspInit+0x3c>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	4a09      	ldr	r2, [pc, #36]	; (800c09c <HAL_CRC_MspInit+0x3c>)
 800c078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c07c:	6313      	str	r3, [r2, #48]	; 0x30
 800c07e:	4b07      	ldr	r3, [pc, #28]	; (800c09c <HAL_CRC_MspInit+0x3c>)
 800c080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800c08a:	bf00      	nop
 800c08c:	3714      	adds	r7, #20
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	40023000 	.word	0x40023000
 800c09c:	40023800 	.word	0x40023800

0800c0a0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b08e      	sub	sp, #56	; 0x38
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	605a      	str	r2, [r3, #4]
 800c0b2:	609a      	str	r2, [r3, #8]
 800c0b4:	60da      	str	r2, [r3, #12]
 800c0b6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a50      	ldr	r2, [pc, #320]	; (800c200 <HAL_DCMI_MspInit+0x160>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	f040 809a 	bne.w	800c1f8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800c0c4:	4b4f      	ldr	r3, [pc, #316]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0c8:	4a4e      	ldr	r2, [pc, #312]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c0ca:	f043 0301 	orr.w	r3, r3, #1
 800c0ce:	6353      	str	r3, [r2, #52]	; 0x34
 800c0d0:	4b4c      	ldr	r3, [pc, #304]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c0dc:	4b49      	ldr	r3, [pc, #292]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e0:	4a48      	ldr	r2, [pc, #288]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c0e2:	f043 0310 	orr.w	r3, r3, #16
 800c0e6:	6313      	str	r3, [r2, #48]	; 0x30
 800c0e8:	4b46      	ldr	r3, [pc, #280]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ec:	f003 0310 	and.w	r3, r3, #16
 800c0f0:	61fb      	str	r3, [r7, #28]
 800c0f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c0f4:	4b43      	ldr	r3, [pc, #268]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f8:	4a42      	ldr	r2, [pc, #264]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c0fa:	f043 0308 	orr.w	r3, r3, #8
 800c0fe:	6313      	str	r3, [r2, #48]	; 0x30
 800c100:	4b40      	ldr	r3, [pc, #256]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c104:	f003 0308 	and.w	r3, r3, #8
 800c108:	61bb      	str	r3, [r7, #24]
 800c10a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c10c:	4b3d      	ldr	r3, [pc, #244]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c110:	4a3c      	ldr	r2, [pc, #240]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c116:	6313      	str	r3, [r2, #48]	; 0x30
 800c118:	4b3a      	ldr	r3, [pc, #232]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c120:	617b      	str	r3, [r7, #20]
 800c122:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c124:	4b37      	ldr	r3, [pc, #220]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	4a36      	ldr	r2, [pc, #216]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c12e:	6313      	str	r3, [r2, #48]	; 0x30
 800c130:	4b34      	ldr	r3, [pc, #208]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c138:	613b      	str	r3, [r7, #16]
 800c13a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c13c:	4b31      	ldr	r3, [pc, #196]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c140:	4a30      	ldr	r2, [pc, #192]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c142:	f043 0301 	orr.w	r3, r3, #1
 800c146:	6313      	str	r3, [r2, #48]	; 0x30
 800c148:	4b2e      	ldr	r3, [pc, #184]	; (800c204 <HAL_DCMI_MspInit+0x164>)
 800c14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
 800c152:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800c154:	2360      	movs	r3, #96	; 0x60
 800c156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c158:	2302      	movs	r3, #2
 800c15a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c15c:	2300      	movs	r3, #0
 800c15e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c160:	2300      	movs	r3, #0
 800c162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c164:	230d      	movs	r3, #13
 800c166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c16c:	4619      	mov	r1, r3
 800c16e:	4826      	ldr	r0, [pc, #152]	; (800c208 <HAL_DCMI_MspInit+0x168>)
 800c170:	f7f6 fb10 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800c174:	2308      	movs	r3, #8
 800c176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c178:	2302      	movs	r3, #2
 800c17a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c17c:	2300      	movs	r3, #0
 800c17e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c180:	2300      	movs	r3, #0
 800c182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c184:	230d      	movs	r3, #13
 800c186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800c188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c18c:	4619      	mov	r1, r3
 800c18e:	481f      	ldr	r0, [pc, #124]	; (800c20c <HAL_DCMI_MspInit+0x16c>)
 800c190:	f7f6 fb00 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800c194:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c19a:	2302      	movs	r3, #2
 800c19c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c1a6:	230d      	movs	r3, #13
 800c1a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800c1aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4817      	ldr	r0, [pc, #92]	; (800c210 <HAL_DCMI_MspInit+0x170>)
 800c1b2:	f7f6 faef 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800c1b6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800c1ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1bc:	2302      	movs	r3, #2
 800c1be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c1c8:	230d      	movs	r3, #13
 800c1ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c1cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	4810      	ldr	r0, [pc, #64]	; (800c214 <HAL_DCMI_MspInit+0x174>)
 800c1d4:	f7f6 fade 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800c1d8:	2350      	movs	r3, #80	; 0x50
 800c1da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1dc:	2302      	movs	r3, #2
 800c1de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c1e8:	230d      	movs	r3, #13
 800c1ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4809      	ldr	r0, [pc, #36]	; (800c218 <HAL_DCMI_MspInit+0x178>)
 800c1f4:	f7f6 face 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800c1f8:	bf00      	nop
 800c1fa:	3738      	adds	r7, #56	; 0x38
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	50050000 	.word	0x50050000
 800c204:	40023800 	.word	0x40023800
 800c208:	40021000 	.word	0x40021000
 800c20c:	40020c00 	.word	0x40020c00
 800c210:	40021800 	.word	0x40021800
 800c214:	40021c00 	.word	0x40021c00
 800c218:	40020000 	.word	0x40020000

0800c21c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a0d      	ldr	r2, [pc, #52]	; (800c260 <HAL_DMA2D_MspInit+0x44>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d113      	bne.n	800c256 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c22e:	4b0d      	ldr	r3, [pc, #52]	; (800c264 <HAL_DMA2D_MspInit+0x48>)
 800c230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c232:	4a0c      	ldr	r2, [pc, #48]	; (800c264 <HAL_DMA2D_MspInit+0x48>)
 800c234:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c238:	6313      	str	r3, [r2, #48]	; 0x30
 800c23a:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <HAL_DMA2D_MspInit+0x48>)
 800c23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c23e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800c246:	2200      	movs	r2, #0
 800c248:	2100      	movs	r1, #0
 800c24a:	205a      	movs	r0, #90	; 0x5a
 800c24c:	f7f5 fbc4 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800c250:	205a      	movs	r0, #90	; 0x5a
 800c252:	f7f5 fbdd 	bl	8001a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800c256:	bf00      	nop
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	4002b000 	.word	0x4002b000
 800c264:	40023800 	.word	0x40023800

0800c268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08c      	sub	sp, #48	; 0x30
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c270:	f107 031c 	add.w	r3, r7, #28
 800c274:	2200      	movs	r2, #0
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	605a      	str	r2, [r3, #4]
 800c27a:	609a      	str	r2, [r3, #8]
 800c27c:	60da      	str	r2, [r3, #12]
 800c27e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a2f      	ldr	r2, [pc, #188]	; (800c344 <HAL_I2C_MspInit+0xdc>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d129      	bne.n	800c2de <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c28a:	4b2f      	ldr	r3, [pc, #188]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28e:	4a2e      	ldr	r2, [pc, #184]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c290:	f043 0302 	orr.w	r3, r3, #2
 800c294:	6313      	str	r3, [r2, #48]	; 0x30
 800c296:	4b2c      	ldr	r3, [pc, #176]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29a:	f003 0302 	and.w	r3, r3, #2
 800c29e:	61bb      	str	r3, [r7, #24]
 800c2a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800c2a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c2a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c2a8:	2312      	movs	r3, #18
 800c2aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c2b8:	f107 031c 	add.w	r3, r7, #28
 800c2bc:	4619      	mov	r1, r3
 800c2be:	4823      	ldr	r0, [pc, #140]	; (800c34c <HAL_I2C_MspInit+0xe4>)
 800c2c0:	f7f6 fa68 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c2c4:	4b20      	ldr	r3, [pc, #128]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c8:	4a1f      	ldr	r2, [pc, #124]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c2ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2ce:	6413      	str	r3, [r2, #64]	; 0x40
 800c2d0:	4b1d      	ldr	r3, [pc, #116]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c2d8:	617b      	str	r3, [r7, #20]
 800c2da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800c2dc:	e02d      	b.n	800c33a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a1b      	ldr	r2, [pc, #108]	; (800c350 <HAL_I2C_MspInit+0xe8>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d128      	bne.n	800c33a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c2e8:	4b17      	ldr	r3, [pc, #92]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ec:	4a16      	ldr	r2, [pc, #88]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c2ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2f2:	6313      	str	r3, [r2, #48]	; 0x30
 800c2f4:	4b14      	ldr	r3, [pc, #80]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2fc:	613b      	str	r3, [r7, #16]
 800c2fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800c300:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800c304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c306:	2312      	movs	r3, #18
 800c308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c30a:	2301      	movs	r3, #1
 800c30c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c30e:	2303      	movs	r3, #3
 800c310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800c312:	2304      	movs	r3, #4
 800c314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c316:	f107 031c 	add.w	r3, r7, #28
 800c31a:	4619      	mov	r1, r3
 800c31c:	480d      	ldr	r0, [pc, #52]	; (800c354 <HAL_I2C_MspInit+0xec>)
 800c31e:	f7f6 fa39 	bl	8002794 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800c322:	4b09      	ldr	r3, [pc, #36]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c326:	4a08      	ldr	r2, [pc, #32]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c328:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c32c:	6413      	str	r3, [r2, #64]	; 0x40
 800c32e:	4b06      	ldr	r3, [pc, #24]	; (800c348 <HAL_I2C_MspInit+0xe0>)
 800c330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	68fb      	ldr	r3, [r7, #12]
}
 800c33a:	bf00      	nop
 800c33c:	3730      	adds	r7, #48	; 0x30
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	40005400 	.word	0x40005400
 800c348:	40023800 	.word	0x40023800
 800c34c:	40020400 	.word	0x40020400
 800c350:	40005c00 	.word	0x40005c00
 800c354:	40021c00 	.word	0x40021c00

0800c358 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b08e      	sub	sp, #56	; 0x38
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c364:	2200      	movs	r2, #0
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	605a      	str	r2, [r3, #4]
 800c36a:	609a      	str	r2, [r3, #8]
 800c36c:	60da      	str	r2, [r3, #12]
 800c36e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a55      	ldr	r2, [pc, #340]	; (800c4cc <HAL_LTDC_MspInit+0x174>)
 800c376:	4293      	cmp	r3, r2
 800c378:	f040 80a3 	bne.w	800c4c2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800c37c:	4b54      	ldr	r3, [pc, #336]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c37e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c380:	4a53      	ldr	r2, [pc, #332]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c386:	6453      	str	r3, [r2, #68]	; 0x44
 800c388:	4b51      	ldr	r3, [pc, #324]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c38a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c38c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c390:	623b      	str	r3, [r7, #32]
 800c392:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c394:	4b4e      	ldr	r3, [pc, #312]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c398:	4a4d      	ldr	r2, [pc, #308]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c39a:	f043 0310 	orr.w	r3, r3, #16
 800c39e:	6313      	str	r3, [r2, #48]	; 0x30
 800c3a0:	4b4b      	ldr	r3, [pc, #300]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a4:	f003 0310 	and.w	r3, r3, #16
 800c3a8:	61fb      	str	r3, [r7, #28]
 800c3aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3ac:	4b48      	ldr	r3, [pc, #288]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b0:	4a47      	ldr	r2, [pc, #284]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3b6:	6313      	str	r3, [r2, #48]	; 0x30
 800c3b8:	4b45      	ldr	r3, [pc, #276]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3c0:	61bb      	str	r3, [r7, #24]
 800c3c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800c3c4:	4b42      	ldr	r3, [pc, #264]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c8:	4a41      	ldr	r2, [pc, #260]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c3ce:	6313      	str	r3, [r2, #48]	; 0x30
 800c3d0:	4b3f      	ldr	r3, [pc, #252]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3d8:	617b      	str	r3, [r7, #20]
 800c3da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c3dc:	4b3c      	ldr	r3, [pc, #240]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e0:	4a3b      	ldr	r2, [pc, #236]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e6:	6313      	str	r3, [r2, #48]	; 0x30
 800c3e8:	4b39      	ldr	r3, [pc, #228]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3f0:	613b      	str	r3, [r7, #16]
 800c3f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c3f4:	4b36      	ldr	r3, [pc, #216]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f8:	4a35      	ldr	r2, [pc, #212]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c3fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3fe:	6313      	str	r3, [r2, #48]	; 0x30
 800c400:	4b33      	ldr	r3, [pc, #204]	; (800c4d0 <HAL_LTDC_MspInit+0x178>)
 800c402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c408:	60fb      	str	r3, [r7, #12]
 800c40a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800c40c:	2310      	movs	r3, #16
 800c40e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c410:	2302      	movs	r3, #2
 800c412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c414:	2300      	movs	r3, #0
 800c416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c418:	2300      	movs	r3, #0
 800c41a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c41c:	230e      	movs	r3, #14
 800c41e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800c420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c424:	4619      	mov	r1, r3
 800c426:	482b      	ldr	r0, [pc, #172]	; (800c4d4 <HAL_LTDC_MspInit+0x17c>)
 800c428:	f7f6 f9b4 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800c42c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c432:	2302      	movs	r3, #2
 800c434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c436:	2300      	movs	r3, #0
 800c438:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c43a:	2300      	movs	r3, #0
 800c43c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c43e:	230e      	movs	r3, #14
 800c440:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c446:	4619      	mov	r1, r3
 800c448:	4823      	ldr	r0, [pc, #140]	; (800c4d8 <HAL_LTDC_MspInit+0x180>)
 800c44a:	f7f6 f9a3 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800c44e:	23f7      	movs	r3, #247	; 0xf7
 800c450:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c452:	2302      	movs	r3, #2
 800c454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c456:	2300      	movs	r3, #0
 800c458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c45a:	2300      	movs	r3, #0
 800c45c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c45e:	230e      	movs	r3, #14
 800c460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800c462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c466:	4619      	mov	r1, r3
 800c468:	481c      	ldr	r0, [pc, #112]	; (800c4dc <HAL_LTDC_MspInit+0x184>)
 800c46a:	f7f6 f993 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800c46e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c474:	2302      	movs	r3, #2
 800c476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c478:	2300      	movs	r3, #0
 800c47a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c47c:	2300      	movs	r3, #0
 800c47e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c480:	2309      	movs	r3, #9
 800c482:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800c484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c488:	4619      	mov	r1, r3
 800c48a:	4815      	ldr	r0, [pc, #84]	; (800c4e0 <HAL_LTDC_MspInit+0x188>)
 800c48c:	f7f6 f982 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800c490:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800c494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c496:	2302      	movs	r3, #2
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c4a2:	230e      	movs	r3, #14
 800c4a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c4a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	480d      	ldr	r0, [pc, #52]	; (800c4e4 <HAL_LTDC_MspInit+0x18c>)
 800c4ae:	f7f6 f971 	bl	8002794 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	2058      	movs	r0, #88	; 0x58
 800c4b8:	f7f5 fa8e 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800c4bc:	2058      	movs	r0, #88	; 0x58
 800c4be:	f7f5 faa7 	bl	8001a10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800c4c2:	bf00      	nop
 800c4c4:	3738      	adds	r7, #56	; 0x38
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	40016800 	.word	0x40016800
 800c4d0:	40023800 	.word	0x40023800
 800c4d4:	40021000 	.word	0x40021000
 800c4d8:	40022400 	.word	0x40022400
 800c4dc:	40022800 	.word	0x40022800
 800c4e0:	40021800 	.word	0x40021800
 800c4e4:	40022000 	.word	0x40022000

0800c4e8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08c      	sub	sp, #48	; 0x30
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4f0:	f107 031c 	add.w	r3, r7, #28
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	605a      	str	r2, [r3, #4]
 800c4fa:	609a      	str	r2, [r3, #8]
 800c4fc:	60da      	str	r2, [r3, #12]
 800c4fe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a3b      	ldr	r2, [pc, #236]	; (800c5f4 <HAL_QSPI_MspInit+0x10c>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d170      	bne.n	800c5ec <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800c50a:	4b3b      	ldr	r3, [pc, #236]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50e:	4a3a      	ldr	r2, [pc, #232]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c510:	f043 0302 	orr.w	r3, r3, #2
 800c514:	6393      	str	r3, [r2, #56]	; 0x38
 800c516:	4b38      	ldr	r3, [pc, #224]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	f003 0302 	and.w	r3, r3, #2
 800c51e:	61bb      	str	r3, [r7, #24]
 800c520:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c522:	4b35      	ldr	r3, [pc, #212]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c526:	4a34      	ldr	r2, [pc, #208]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c528:	f043 0310 	orr.w	r3, r3, #16
 800c52c:	6313      	str	r3, [r2, #48]	; 0x30
 800c52e:	4b32      	ldr	r3, [pc, #200]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c532:	f003 0310 	and.w	r3, r3, #16
 800c536:	617b      	str	r3, [r7, #20]
 800c538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c53a:	4b2f      	ldr	r3, [pc, #188]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c53e:	4a2e      	ldr	r2, [pc, #184]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c540:	f043 0302 	orr.w	r3, r3, #2
 800c544:	6313      	str	r3, [r2, #48]	; 0x30
 800c546:	4b2c      	ldr	r3, [pc, #176]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c54a:	f003 0302 	and.w	r3, r3, #2
 800c54e:	613b      	str	r3, [r7, #16]
 800c550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c552:	4b29      	ldr	r3, [pc, #164]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c556:	4a28      	ldr	r2, [pc, #160]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c558:	f043 0308 	orr.w	r3, r3, #8
 800c55c:	6313      	str	r3, [r2, #48]	; 0x30
 800c55e:	4b26      	ldr	r3, [pc, #152]	; (800c5f8 <HAL_QSPI_MspInit+0x110>)
 800c560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c562:	f003 0308 	and.w	r3, r3, #8
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800c56a:	2304      	movs	r3, #4
 800c56c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c56e:	2302      	movs	r3, #2
 800c570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c572:	2300      	movs	r3, #0
 800c574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c576:	2303      	movs	r3, #3
 800c578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c57a:	2309      	movs	r3, #9
 800c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800c57e:	f107 031c 	add.w	r3, r7, #28
 800c582:	4619      	mov	r1, r3
 800c584:	481d      	ldr	r0, [pc, #116]	; (800c5fc <HAL_QSPI_MspInit+0x114>)
 800c586:	f7f6 f905 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800c58a:	2340      	movs	r3, #64	; 0x40
 800c58c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c58e:	2302      	movs	r3, #2
 800c590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c592:	2300      	movs	r3, #0
 800c594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c596:	2303      	movs	r3, #3
 800c598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800c59a:	230a      	movs	r3, #10
 800c59c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800c59e:	f107 031c 	add.w	r3, r7, #28
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4816      	ldr	r0, [pc, #88]	; (800c600 <HAL_QSPI_MspInit+0x118>)
 800c5a6:	f7f6 f8f5 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c5aa:	2304      	movs	r3, #4
 800c5ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c5ba:	2309      	movs	r3, #9
 800c5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c5be:	f107 031c 	add.w	r3, r7, #28
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	480e      	ldr	r0, [pc, #56]	; (800c600 <HAL_QSPI_MspInit+0x118>)
 800c5c6:	f7f6 f8e5 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800c5ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c5ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5d0:	2302      	movs	r3, #2
 800c5d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c5dc:	2309      	movs	r3, #9
 800c5de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c5e0:	f107 031c 	add.w	r3, r7, #28
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4807      	ldr	r0, [pc, #28]	; (800c604 <HAL_QSPI_MspInit+0x11c>)
 800c5e8:	f7f6 f8d4 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800c5ec:	bf00      	nop
 800c5ee:	3730      	adds	r7, #48	; 0x30
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	a0001000 	.word	0xa0001000
 800c5f8:	40023800 	.word	0x40023800
 800c5fc:	40021000 	.word	0x40021000
 800c600:	40020400 	.word	0x40020400
 800c604:	40020c00 	.word	0x40020c00

0800c608 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a0a      	ldr	r2, [pc, #40]	; (800c640 <HAL_RNG_MspInit+0x38>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d10b      	bne.n	800c632 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800c61a:	4b0a      	ldr	r3, [pc, #40]	; (800c644 <HAL_RNG_MspInit+0x3c>)
 800c61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c61e:	4a09      	ldr	r2, [pc, #36]	; (800c644 <HAL_RNG_MspInit+0x3c>)
 800c620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c624:	6353      	str	r3, [r2, #52]	; 0x34
 800c626:	4b07      	ldr	r3, [pc, #28]	; (800c644 <HAL_RNG_MspInit+0x3c>)
 800c628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c62e:	60fb      	str	r3, [r7, #12]
 800c630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800c632:	bf00      	nop
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	50060800 	.word	0x50060800
 800c644:	40023800 	.word	0x40023800

0800c648 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a07      	ldr	r2, [pc, #28]	; (800c674 <HAL_RTC_MspInit+0x2c>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d105      	bne.n	800c666 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c65a:	4b07      	ldr	r3, [pc, #28]	; (800c678 <HAL_RTC_MspInit+0x30>)
 800c65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c65e:	4a06      	ldr	r2, [pc, #24]	; (800c678 <HAL_RTC_MspInit+0x30>)
 800c660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c664:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c666:	bf00      	nop
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	40002800 	.word	0x40002800
 800c678:	40023800 	.word	0x40023800

0800c67c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08a      	sub	sp, #40	; 0x28
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c684:	f107 0314 	add.w	r3, r7, #20
 800c688:	2200      	movs	r2, #0
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	605a      	str	r2, [r3, #4]
 800c68e:	609a      	str	r2, [r3, #8]
 800c690:	60da      	str	r2, [r3, #12]
 800c692:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800c69c:	d127      	bne.n	800c6ee <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800c69e:	4b16      	ldr	r3, [pc, #88]	; (800c6f8 <HAL_SPDIFRX_MspInit+0x7c>)
 800c6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a2:	4a15      	ldr	r2, [pc, #84]	; (800c6f8 <HAL_SPDIFRX_MspInit+0x7c>)
 800c6a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6a8:	6413      	str	r3, [r2, #64]	; 0x40
 800c6aa:	4b13      	ldr	r3, [pc, #76]	; (800c6f8 <HAL_SPDIFRX_MspInit+0x7c>)
 800c6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6b2:	613b      	str	r3, [r7, #16]
 800c6b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c6b6:	4b10      	ldr	r3, [pc, #64]	; (800c6f8 <HAL_SPDIFRX_MspInit+0x7c>)
 800c6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ba:	4a0f      	ldr	r2, [pc, #60]	; (800c6f8 <HAL_SPDIFRX_MspInit+0x7c>)
 800c6bc:	f043 0308 	orr.w	r3, r3, #8
 800c6c0:	6313      	str	r3, [r2, #48]	; 0x30
 800c6c2:	4b0d      	ldr	r3, [pc, #52]	; (800c6f8 <HAL_SPDIFRX_MspInit+0x7c>)
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	f003 0308 	and.w	r3, r3, #8
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800c6ce:	2380      	movs	r3, #128	; 0x80
 800c6d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800c6de:	2308      	movs	r3, #8
 800c6e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800c6e2:	f107 0314 	add.w	r3, r7, #20
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	4804      	ldr	r0, [pc, #16]	; (800c6fc <HAL_SPDIFRX_MspInit+0x80>)
 800c6ea:	f7f6 f853 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800c6ee:	bf00      	nop
 800c6f0:	3728      	adds	r7, #40	; 0x28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	40023800 	.word	0x40023800
 800c6fc:	40020c00 	.word	0x40020c00

0800c700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08a      	sub	sp, #40	; 0x28
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c708:	f107 0314 	add.w	r3, r7, #20
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	605a      	str	r2, [r3, #4]
 800c712:	609a      	str	r2, [r3, #8]
 800c714:	60da      	str	r2, [r3, #12]
 800c716:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a25      	ldr	r2, [pc, #148]	; (800c7b4 <HAL_SPI_MspInit+0xb4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d144      	bne.n	800c7ac <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c722:	4b25      	ldr	r3, [pc, #148]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c726:	4a24      	ldr	r2, [pc, #144]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c72c:	6413      	str	r3, [r2, #64]	; 0x40
 800c72e:	4b22      	ldr	r3, [pc, #136]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c736:	613b      	str	r3, [r7, #16]
 800c738:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c73a:	4b1f      	ldr	r3, [pc, #124]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c73e:	4a1e      	ldr	r2, [pc, #120]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c744:	6313      	str	r3, [r2, #48]	; 0x30
 800c746:	4b1c      	ldr	r3, [pc, #112]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c752:	4b19      	ldr	r3, [pc, #100]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c756:	4a18      	ldr	r2, [pc, #96]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c758:	f043 0302 	orr.w	r3, r3, #2
 800c75c:	6313      	str	r3, [r2, #48]	; 0x30
 800c75e:	4b16      	ldr	r3, [pc, #88]	; (800c7b8 <HAL_SPI_MspInit+0xb8>)
 800c760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c762:	f003 0302 	and.w	r3, r3, #2
 800c766:	60bb      	str	r3, [r7, #8]
 800c768:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800c76a:	2302      	movs	r3, #2
 800c76c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c76e:	2302      	movs	r3, #2
 800c770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c772:	2300      	movs	r3, #0
 800c774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c776:	2300      	movs	r3, #0
 800c778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c77a:	2305      	movs	r3, #5
 800c77c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800c77e:	f107 0314 	add.w	r3, r7, #20
 800c782:	4619      	mov	r1, r3
 800c784:	480d      	ldr	r0, [pc, #52]	; (800c7bc <HAL_SPI_MspInit+0xbc>)
 800c786:	f7f6 f805 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800c78a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c78e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c790:	2302      	movs	r3, #2
 800c792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c794:	2300      	movs	r3, #0
 800c796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c798:	2300      	movs	r3, #0
 800c79a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c79c:	2305      	movs	r3, #5
 800c79e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7a0:	f107 0314 	add.w	r3, r7, #20
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4806      	ldr	r0, [pc, #24]	; (800c7c0 <HAL_SPI_MspInit+0xc0>)
 800c7a8:	f7f5 fff4 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800c7ac:	bf00      	nop
 800c7ae:	3728      	adds	r7, #40	; 0x28
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	40003800 	.word	0x40003800
 800c7b8:	40023800 	.word	0x40023800
 800c7bc:	40022000 	.word	0x40022000
 800c7c0:	40020400 	.word	0x40020400

0800c7c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a31      	ldr	r2, [pc, #196]	; (800c898 <HAL_TIM_Base_MspInit+0xd4>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d10c      	bne.n	800c7f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c7d6:	4b31      	ldr	r3, [pc, #196]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7da:	4a30      	ldr	r2, [pc, #192]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c7dc:	f043 0301 	orr.w	r3, r3, #1
 800c7e0:	6453      	str	r3, [r2, #68]	; 0x44
 800c7e2:	4b2e      	ldr	r3, [pc, #184]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7e6:	f003 0301 	and.w	r3, r3, #1
 800c7ea:	61fb      	str	r3, [r7, #28]
 800c7ec:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800c7ee:	e04e      	b.n	800c88e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7f8:	d10c      	bne.n	800c814 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c7fa:	4b28      	ldr	r3, [pc, #160]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fe:	4a27      	ldr	r2, [pc, #156]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c800:	f043 0301 	orr.w	r3, r3, #1
 800c804:	6413      	str	r3, [r2, #64]	; 0x40
 800c806:	4b25      	ldr	r3, [pc, #148]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	61bb      	str	r3, [r7, #24]
 800c810:	69bb      	ldr	r3, [r7, #24]
}
 800c812:	e03c      	b.n	800c88e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a21      	ldr	r2, [pc, #132]	; (800c8a0 <HAL_TIM_Base_MspInit+0xdc>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d10c      	bne.n	800c838 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c81e:	4b1f      	ldr	r3, [pc, #124]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c822:	4a1e      	ldr	r2, [pc, #120]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c824:	f043 0302 	orr.w	r3, r3, #2
 800c828:	6413      	str	r3, [r2, #64]	; 0x40
 800c82a:	4b1c      	ldr	r3, [pc, #112]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82e:	f003 0302 	and.w	r3, r3, #2
 800c832:	617b      	str	r3, [r7, #20]
 800c834:	697b      	ldr	r3, [r7, #20]
}
 800c836:	e02a      	b.n	800c88e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a19      	ldr	r2, [pc, #100]	; (800c8a4 <HAL_TIM_Base_MspInit+0xe0>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d10c      	bne.n	800c85c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c842:	4b16      	ldr	r3, [pc, #88]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c846:	4a15      	ldr	r2, [pc, #84]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c848:	f043 0308 	orr.w	r3, r3, #8
 800c84c:	6413      	str	r3, [r2, #64]	; 0x40
 800c84e:	4b13      	ldr	r3, [pc, #76]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c852:	f003 0308 	and.w	r3, r3, #8
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	693b      	ldr	r3, [r7, #16]
}
 800c85a:	e018      	b.n	800c88e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a11      	ldr	r2, [pc, #68]	; (800c8a8 <HAL_TIM_Base_MspInit+0xe4>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d113      	bne.n	800c88e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c866:	4b0d      	ldr	r3, [pc, #52]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c86a:	4a0c      	ldr	r2, [pc, #48]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c86c:	f043 0302 	orr.w	r3, r3, #2
 800c870:	6453      	str	r3, [r2, #68]	; 0x44
 800c872:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <HAL_TIM_Base_MspInit+0xd8>)
 800c874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c876:	f003 0302 	and.w	r3, r3, #2
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800c87e:	2200      	movs	r2, #0
 800c880:	2100      	movs	r1, #0
 800c882:	202d      	movs	r0, #45	; 0x2d
 800c884:	f7f5 f8a8 	bl	80019d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800c888:	202d      	movs	r0, #45	; 0x2d
 800c88a:	f7f5 f8c1 	bl	8001a10 <HAL_NVIC_EnableIRQ>
}
 800c88e:	bf00      	nop
 800c890:	3720      	adds	r7, #32
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	40010000 	.word	0x40010000
 800c89c:	40023800 	.word	0x40023800
 800c8a0:	40000400 	.word	0x40000400
 800c8a4:	40000c00 	.word	0x40000c00
 800c8a8:	40010400 	.word	0x40010400

0800c8ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a0a      	ldr	r2, [pc, #40]	; (800c8e4 <HAL_TIM_PWM_MspInit+0x38>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d10b      	bne.n	800c8d6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800c8be:	4b0a      	ldr	r3, [pc, #40]	; (800c8e8 <HAL_TIM_PWM_MspInit+0x3c>)
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c2:	4a09      	ldr	r2, [pc, #36]	; (800c8e8 <HAL_TIM_PWM_MspInit+0x3c>)
 800c8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c8:	6413      	str	r3, [r2, #64]	; 0x40
 800c8ca:	4b07      	ldr	r3, [pc, #28]	; (800c8e8 <HAL_TIM_PWM_MspInit+0x3c>)
 800c8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800c8d6:	bf00      	nop
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	40001800 	.word	0x40001800
 800c8e8:	40023800 	.word	0x40023800

0800c8ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08c      	sub	sp, #48	; 0x30
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8f4:	f107 031c 	add.w	r3, r7, #28
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
 800c8fc:	605a      	str	r2, [r3, #4]
 800c8fe:	609a      	str	r2, [r3, #8]
 800c900:	60da      	str	r2, [r3, #12]
 800c902:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a44      	ldr	r2, [pc, #272]	; (800ca1c <HAL_TIM_MspPostInit+0x130>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d11d      	bne.n	800c94a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c90e:	4b44      	ldr	r3, [pc, #272]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c912:	4a43      	ldr	r2, [pc, #268]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c914:	f043 0301 	orr.w	r3, r3, #1
 800c918:	6313      	str	r3, [r2, #48]	; 0x30
 800c91a:	4b41      	ldr	r3, [pc, #260]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	61bb      	str	r3, [r7, #24]
 800c924:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800c926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c92a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c92c:	2302      	movs	r3, #2
 800c92e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c930:	2300      	movs	r3, #0
 800c932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c934:	2300      	movs	r3, #0
 800c936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c938:	2301      	movs	r3, #1
 800c93a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800c93c:	f107 031c 	add.w	r3, r7, #28
 800c940:	4619      	mov	r1, r3
 800c942:	4838      	ldr	r0, [pc, #224]	; (800ca24 <HAL_TIM_MspPostInit+0x138>)
 800c944:	f7f5 ff26 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800c948:	e064      	b.n	800ca14 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a36      	ldr	r2, [pc, #216]	; (800ca28 <HAL_TIM_MspPostInit+0x13c>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d11c      	bne.n	800c98e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c954:	4b32      	ldr	r3, [pc, #200]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c958:	4a31      	ldr	r2, [pc, #196]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c95a:	f043 0302 	orr.w	r3, r3, #2
 800c95e:	6313      	str	r3, [r2, #48]	; 0x30
 800c960:	4b2f      	ldr	r3, [pc, #188]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c964:	f003 0302 	and.w	r3, r3, #2
 800c968:	617b      	str	r3, [r7, #20]
 800c96a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800c96c:	2310      	movs	r3, #16
 800c96e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c970:	2302      	movs	r3, #2
 800c972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c974:	2300      	movs	r3, #0
 800c976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c978:	2300      	movs	r3, #0
 800c97a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c97c:	2302      	movs	r3, #2
 800c97e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800c980:	f107 031c 	add.w	r3, r7, #28
 800c984:	4619      	mov	r1, r3
 800c986:	4829      	ldr	r0, [pc, #164]	; (800ca2c <HAL_TIM_MspPostInit+0x140>)
 800c988:	f7f5 ff04 	bl	8002794 <HAL_GPIO_Init>
}
 800c98c:	e042      	b.n	800ca14 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a27      	ldr	r2, [pc, #156]	; (800ca30 <HAL_TIM_MspPostInit+0x144>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d11c      	bne.n	800c9d2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c998:	4b21      	ldr	r3, [pc, #132]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c99c:	4a20      	ldr	r2, [pc, #128]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c99e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9a2:	6313      	str	r3, [r2, #48]	; 0x30
 800c9a4:	4b1e      	ldr	r3, [pc, #120]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ac:	613b      	str	r3, [r7, #16]
 800c9ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800c9c4:	f107 031c 	add.w	r3, r7, #28
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	481a      	ldr	r0, [pc, #104]	; (800ca34 <HAL_TIM_MspPostInit+0x148>)
 800c9cc:	f7f5 fee2 	bl	8002794 <HAL_GPIO_Init>
}
 800c9d0:	e020      	b.n	800ca14 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a18      	ldr	r2, [pc, #96]	; (800ca38 <HAL_TIM_MspPostInit+0x14c>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d11b      	bne.n	800ca14 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c9dc:	4b10      	ldr	r3, [pc, #64]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e0:	4a0f      	ldr	r2, [pc, #60]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e6:	6313      	str	r3, [r2, #48]	; 0x30
 800c9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ca20 <HAL_TIM_MspPostInit+0x134>)
 800c9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f0:	60fb      	str	r3, [r7, #12]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca00:	2300      	movs	r3, #0
 800ca02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800ca04:	2309      	movs	r3, #9
 800ca06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800ca08:	f107 031c 	add.w	r3, r7, #28
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	480b      	ldr	r0, [pc, #44]	; (800ca3c <HAL_TIM_MspPostInit+0x150>)
 800ca10:	f7f5 fec0 	bl	8002794 <HAL_GPIO_Init>
}
 800ca14:	bf00      	nop
 800ca16:	3730      	adds	r7, #48	; 0x30
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	40010000 	.word	0x40010000
 800ca20:	40023800 	.word	0x40023800
 800ca24:	40020000 	.word	0x40020000
 800ca28:	40000400 	.word	0x40000400
 800ca2c:	40020400 	.word	0x40020400
 800ca30:	40000c00 	.word	0x40000c00
 800ca34:	40022000 	.word	0x40022000
 800ca38:	40001800 	.word	0x40001800
 800ca3c:	40021c00 	.word	0x40021c00

0800ca40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08a      	sub	sp, #40	; 0x28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca48:	f107 0314 	add.w	r3, r7, #20
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	601a      	str	r2, [r3, #0]
 800ca50:	605a      	str	r2, [r3, #4]
 800ca52:	609a      	str	r2, [r3, #8]
 800ca54:	60da      	str	r2, [r3, #12]
 800ca56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a25      	ldr	r2, [pc, #148]	; (800caf4 <HAL_UART_MspInit+0xb4>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d144      	bne.n	800caec <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ca62:	4b25      	ldr	r3, [pc, #148]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800ca64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca66:	4a24      	ldr	r2, [pc, #144]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800ca68:	f043 0310 	orr.w	r3, r3, #16
 800ca6c:	6453      	str	r3, [r2, #68]	; 0x44
 800ca6e:	4b22      	ldr	r3, [pc, #136]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800ca70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca72:	f003 0310 	and.w	r3, r3, #16
 800ca76:	613b      	str	r3, [r7, #16]
 800ca78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca7a:	4b1f      	ldr	r3, [pc, #124]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800ca7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7e:	4a1e      	ldr	r2, [pc, #120]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800ca80:	f043 0302 	orr.w	r3, r3, #2
 800ca84:	6313      	str	r3, [r2, #48]	; 0x30
 800ca86:	4b1c      	ldr	r3, [pc, #112]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800ca88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	60fb      	str	r3, [r7, #12]
 800ca90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca92:	4b19      	ldr	r3, [pc, #100]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800ca94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca96:	4a18      	ldr	r2, [pc, #96]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800ca98:	f043 0301 	orr.w	r3, r3, #1
 800ca9c:	6313      	str	r3, [r2, #48]	; 0x30
 800ca9e:	4b16      	ldr	r3, [pc, #88]	; (800caf8 <HAL_UART_MspInit+0xb8>)
 800caa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa2:	f003 0301 	and.w	r3, r3, #1
 800caa6:	60bb      	str	r3, [r7, #8]
 800caa8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800caaa:	2380      	movs	r3, #128	; 0x80
 800caac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caae:	2302      	movs	r3, #2
 800cab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cab6:	2300      	movs	r3, #0
 800cab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800caba:	2307      	movs	r3, #7
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800cabe:	f107 0314 	add.w	r3, r7, #20
 800cac2:	4619      	mov	r1, r3
 800cac4:	480d      	ldr	r0, [pc, #52]	; (800cafc <HAL_UART_MspInit+0xbc>)
 800cac6:	f7f5 fe65 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800caca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cad0:	2302      	movs	r3, #2
 800cad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cad4:	2300      	movs	r3, #0
 800cad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cad8:	2300      	movs	r3, #0
 800cada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cadc:	2307      	movs	r3, #7
 800cade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800cae0:	f107 0314 	add.w	r3, r7, #20
 800cae4:	4619      	mov	r1, r3
 800cae6:	4806      	ldr	r0, [pc, #24]	; (800cb00 <HAL_UART_MspInit+0xc0>)
 800cae8:	f7f5 fe54 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800caec:	bf00      	nop
 800caee:	3728      	adds	r7, #40	; 0x28
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	40011000 	.word	0x40011000
 800caf8:	40023800 	.word	0x40023800
 800cafc:	40020400 	.word	0x40020400
 800cb00:	40020000 	.word	0x40020000

0800cb04 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b086      	sub	sp, #24
 800cb08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800cb0a:	1d3b      	adds	r3, r7, #4
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	605a      	str	r2, [r3, #4]
 800cb12:	609a      	str	r2, [r3, #8]
 800cb14:	60da      	str	r2, [r3, #12]
 800cb16:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800cb18:	4b3a      	ldr	r3, [pc, #232]	; (800cc04 <HAL_FMC_MspInit+0x100>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d16d      	bne.n	800cbfc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800cb20:	4b38      	ldr	r3, [pc, #224]	; (800cc04 <HAL_FMC_MspInit+0x100>)
 800cb22:	2201      	movs	r2, #1
 800cb24:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800cb26:	4b38      	ldr	r3, [pc, #224]	; (800cc08 <HAL_FMC_MspInit+0x104>)
 800cb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2a:	4a37      	ldr	r2, [pc, #220]	; (800cc08 <HAL_FMC_MspInit+0x104>)
 800cb2c:	f043 0301 	orr.w	r3, r3, #1
 800cb30:	6393      	str	r3, [r2, #56]	; 0x38
 800cb32:	4b35      	ldr	r3, [pc, #212]	; (800cc08 <HAL_FMC_MspInit+0x104>)
 800cb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	603b      	str	r3, [r7, #0]
 800cb3c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800cb3e:	f64f 7383 	movw	r3, #65411	; 0xff83
 800cb42:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb44:	2302      	movs	r3, #2
 800cb46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cb50:	230c      	movs	r3, #12
 800cb52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cb54:	1d3b      	adds	r3, r7, #4
 800cb56:	4619      	mov	r1, r3
 800cb58:	482c      	ldr	r0, [pc, #176]	; (800cc0c <HAL_FMC_MspInit+0x108>)
 800cb5a:	f7f5 fe1b 	bl	8002794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800cb5e:	f248 1333 	movw	r3, #33075	; 0x8133
 800cb62:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb64:	2302      	movs	r3, #2
 800cb66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cb70:	230c      	movs	r3, #12
 800cb72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cb74:	1d3b      	adds	r3, r7, #4
 800cb76:	4619      	mov	r1, r3
 800cb78:	4825      	ldr	r0, [pc, #148]	; (800cc10 <HAL_FMC_MspInit+0x10c>)
 800cb7a:	f7f5 fe0b 	bl	8002794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800cb7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800cb82:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb84:	2302      	movs	r3, #2
 800cb86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cb90:	230c      	movs	r3, #12
 800cb92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cb94:	1d3b      	adds	r3, r7, #4
 800cb96:	4619      	mov	r1, r3
 800cb98:	481e      	ldr	r0, [pc, #120]	; (800cc14 <HAL_FMC_MspInit+0x110>)
 800cb9a:	f7f5 fdfb 	bl	8002794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800cb9e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800cba2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cba4:	2302      	movs	r3, #2
 800cba6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbac:	2303      	movs	r3, #3
 800cbae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cbb0:	230c      	movs	r3, #12
 800cbb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800cbb4:	1d3b      	adds	r3, r7, #4
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	4817      	ldr	r0, [pc, #92]	; (800cc18 <HAL_FMC_MspInit+0x114>)
 800cbba:	f7f5 fdeb 	bl	8002794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800cbbe:	2328      	movs	r3, #40	; 0x28
 800cbc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbc2:	2302      	movs	r3, #2
 800cbc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cbce:	230c      	movs	r3, #12
 800cbd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cbd2:	1d3b      	adds	r3, r7, #4
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	4811      	ldr	r0, [pc, #68]	; (800cc1c <HAL_FMC_MspInit+0x118>)
 800cbd8:	f7f5 fddc 	bl	8002794 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800cbdc:	2308      	movs	r3, #8
 800cbde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cbec:	230c      	movs	r3, #12
 800cbee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800cbf0:	1d3b      	adds	r3, r7, #4
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	480a      	ldr	r0, [pc, #40]	; (800cc20 <HAL_FMC_MspInit+0x11c>)
 800cbf6:	f7f5 fdcd 	bl	8002794 <HAL_GPIO_Init>
 800cbfa:	e000      	b.n	800cbfe <HAL_FMC_MspInit+0xfa>
    return;
 800cbfc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	2000020c 	.word	0x2000020c
 800cc08:	40023800 	.word	0x40023800
 800cc0c:	40021000 	.word	0x40021000
 800cc10:	40021800 	.word	0x40021800
 800cc14:	40020c00 	.word	0x40020c00
 800cc18:	40021400 	.word	0x40021400
 800cc1c:	40021c00 	.word	0x40021c00
 800cc20:	40020800 	.word	0x40020800

0800cc24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800cc2c:	f7ff ff6a 	bl	800cb04 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08a      	sub	sp, #40	; 0x28
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a2b      	ldr	r2, [pc, #172]	; (800ccf4 <HAL_SAI_MspInit+0xbc>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d124      	bne.n	800cc94 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800cc4a:	4b2b      	ldr	r3, [pc, #172]	; (800ccf8 <HAL_SAI_MspInit+0xc0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10b      	bne.n	800cc6a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800cc52:	4b2a      	ldr	r3, [pc, #168]	; (800ccfc <HAL_SAI_MspInit+0xc4>)
 800cc54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc56:	4a29      	ldr	r2, [pc, #164]	; (800ccfc <HAL_SAI_MspInit+0xc4>)
 800cc58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc5c:	6453      	str	r3, [r2, #68]	; 0x44
 800cc5e:	4b27      	ldr	r3, [pc, #156]	; (800ccfc <HAL_SAI_MspInit+0xc4>)
 800cc60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc66:	613b      	str	r3, [r7, #16]
 800cc68:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800cc6a:	4b23      	ldr	r3, [pc, #140]	; (800ccf8 <HAL_SAI_MspInit+0xc0>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	4a21      	ldr	r2, [pc, #132]	; (800ccf8 <HAL_SAI_MspInit+0xc0>)
 800cc72:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800cc74:	23f0      	movs	r3, #240	; 0xf0
 800cc76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc78:	2302      	movs	r3, #2
 800cc7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc80:	2300      	movs	r3, #0
 800cc82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800cc84:	230a      	movs	r3, #10
 800cc86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cc88:	f107 0314 	add.w	r3, r7, #20
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	481c      	ldr	r0, [pc, #112]	; (800cd00 <HAL_SAI_MspInit+0xc8>)
 800cc90:	f7f5 fd80 	bl	8002794 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a1a      	ldr	r2, [pc, #104]	; (800cd04 <HAL_SAI_MspInit+0xcc>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d125      	bne.n	800ccea <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800cc9e:	4b16      	ldr	r3, [pc, #88]	; (800ccf8 <HAL_SAI_MspInit+0xc0>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d10b      	bne.n	800ccbe <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800cca6:	4b15      	ldr	r3, [pc, #84]	; (800ccfc <HAL_SAI_MspInit+0xc4>)
 800cca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccaa:	4a14      	ldr	r2, [pc, #80]	; (800ccfc <HAL_SAI_MspInit+0xc4>)
 800ccac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ccb0:	6453      	str	r3, [r2, #68]	; 0x44
 800ccb2:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <HAL_SAI_MspInit+0xc4>)
 800ccb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccba:	60fb      	str	r3, [r7, #12]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800ccbe:	4b0e      	ldr	r3, [pc, #56]	; (800ccf8 <HAL_SAI_MspInit+0xc0>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	4a0c      	ldr	r2, [pc, #48]	; (800ccf8 <HAL_SAI_MspInit+0xc0>)
 800ccc6:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800ccc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccce:	2302      	movs	r3, #2
 800ccd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800ccda:	230a      	movs	r3, #10
 800ccdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800ccde:	f107 0314 	add.w	r3, r7, #20
 800cce2:	4619      	mov	r1, r3
 800cce4:	4808      	ldr	r0, [pc, #32]	; (800cd08 <HAL_SAI_MspInit+0xd0>)
 800cce6:	f7f5 fd55 	bl	8002794 <HAL_GPIO_Init>

    }
}
 800ccea:	bf00      	nop
 800ccec:	3728      	adds	r7, #40	; 0x28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	40015c04 	.word	0x40015c04
 800ccf8:	20000210 	.word	0x20000210
 800ccfc:	40023800 	.word	0x40023800
 800cd00:	40022000 	.word	0x40022000
 800cd04:	40015c24 	.word	0x40015c24
 800cd08:	40021800 	.word	0x40021800

0800cd0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b08c      	sub	sp, #48	; 0x30
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	6879      	ldr	r1, [r7, #4]
 800cd20:	202d      	movs	r0, #45	; 0x2d
 800cd22:	f7f4 fe59 	bl	80019d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 800cd26:	202d      	movs	r0, #45	; 0x2d
 800cd28:	f7f4 fe72 	bl	8001a10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800cd2c:	4b1f      	ldr	r3, [pc, #124]	; (800cdac <HAL_InitTick+0xa0>)
 800cd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd30:	4a1e      	ldr	r2, [pc, #120]	; (800cdac <HAL_InitTick+0xa0>)
 800cd32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd36:	6413      	str	r3, [r2, #64]	; 0x40
 800cd38:	4b1c      	ldr	r3, [pc, #112]	; (800cdac <HAL_InitTick+0xa0>)
 800cd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800cd44:	f107 0210 	add.w	r2, r7, #16
 800cd48:	f107 0314 	add.w	r3, r7, #20
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f8 fcd4 	bl	80056fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800cd54:	f7f8 fcaa 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	4a13      	ldr	r2, [pc, #76]	; (800cdb0 <HAL_InitTick+0xa4>)
 800cd62:	fba2 2303 	umull	r2, r3, r2, r3
 800cd66:	0c9b      	lsrs	r3, r3, #18
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800cd6c:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <HAL_InitTick+0xa8>)
 800cd6e:	4a12      	ldr	r2, [pc, #72]	; (800cdb8 <HAL_InitTick+0xac>)
 800cd70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 800cd72:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <HAL_InitTick+0xa8>)
 800cd74:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cd78:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800cd7a:	4a0e      	ldr	r2, [pc, #56]	; (800cdb4 <HAL_InitTick+0xa8>)
 800cd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800cd80:	4b0c      	ldr	r3, [pc, #48]	; (800cdb4 <HAL_InitTick+0xa8>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cd86:	4b0b      	ldr	r3, [pc, #44]	; (800cdb4 <HAL_InitTick+0xa8>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800cd8c:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <HAL_InitTick+0xa8>)
 800cd8e:	f7fa f96f 	bl	8007070 <HAL_TIM_Base_Init>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d104      	bne.n	800cda2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800cd98:	4806      	ldr	r0, [pc, #24]	; (800cdb4 <HAL_InitTick+0xa8>)
 800cd9a:	f7fa f995 	bl	80070c8 <HAL_TIM_Base_Start_IT>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	e000      	b.n	800cda4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3730      	adds	r7, #48	; 0x30
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	40023800 	.word	0x40023800
 800cdb0:	431bde83 	.word	0x431bde83
 800cdb4:	20000a84 	.word	0x20000a84
 800cdb8:	40002000 	.word	0x40002000

0800cdbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cdc0:	bf00      	nop
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cdce:	e7fe      	b.n	800cdce <HardFault_Handler+0x4>

0800cdd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cdd4:	e7fe      	b.n	800cdd4 <MemManage_Handler+0x4>

0800cdd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cdda:	e7fe      	b.n	800cdda <BusFault_Handler+0x4>

0800cddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cddc:	b480      	push	{r7}
 800cdde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cde0:	e7fe      	b.n	800cde0 <UsageFault_Handler+0x4>

0800cde2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cde2:	b480      	push	{r7}
 800cde4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cde6:	bf00      	nop
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cdf4:	bf00      	nop
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cdfe:	b480      	push	{r7}
 800ce00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ce02:	bf00      	nop
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800ce10:	2040      	movs	r0, #64	; 0x40
 800ce12:	f7f5 fe9d 	bl	8002b50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800ce16:	2080      	movs	r0, #128	; 0x80
 800ce18:	f7f5 fe9a 	bl	8002b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800ce1c:	bf00      	nop
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800ce24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ce28:	f7f5 fe92 	bl	8002b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ce2c:	bf00      	nop
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800ce34:	4803      	ldr	r0, [pc, #12]	; (800ce44 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800ce36:	f7fa f99c 	bl	8007172 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800ce3a:	4803      	ldr	r0, [pc, #12]	; (800ce48 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800ce3c:	f7fa f999 	bl	8007172 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800ce40:	bf00      	nop
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	20000438 	.word	0x20000438
 800ce48:	20000a84 	.word	0x20000a84

0800ce4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800ce50:	4802      	ldr	r0, [pc, #8]	; (800ce5c <OTG_FS_IRQHandler+0x10>)
 800ce52:	f7f6 f895 	bl	8002f80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ce56:	bf00      	nop
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20000e90 	.word	0x20000e90

0800ce60 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800ce64:	4802      	ldr	r0, [pc, #8]	; (800ce70 <LTDC_IRQHandler+0x10>)
 800ce66:	f7f7 fc43 	bl	80046f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800ce6a:	bf00      	nop
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	200006c0 	.word	0x200006c0

0800ce74 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800ce78:	4802      	ldr	r0, [pc, #8]	; (800ce84 <DMA2D_IRQHandler+0x10>)
 800ce7a:	f7f5 fa4d 	bl	8002318 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800ce7e:	bf00      	nop
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	200008f8 	.word	0x200008f8

0800ce88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ce90:	4b11      	ldr	r3, [pc, #68]	; (800ced8 <_sbrk+0x50>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d102      	bne.n	800ce9e <_sbrk+0x16>
		heap_end = &end;
 800ce98:	4b0f      	ldr	r3, [pc, #60]	; (800ced8 <_sbrk+0x50>)
 800ce9a:	4a10      	ldr	r2, [pc, #64]	; (800cedc <_sbrk+0x54>)
 800ce9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ce9e:	4b0e      	ldr	r3, [pc, #56]	; (800ced8 <_sbrk+0x50>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800cea4:	4b0c      	ldr	r3, [pc, #48]	; (800ced8 <_sbrk+0x50>)
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4413      	add	r3, r2
 800ceac:	466a      	mov	r2, sp
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d907      	bls.n	800cec2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ceb2:	f000 f9f3 	bl	800d29c <__errno>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	230c      	movs	r3, #12
 800ceba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800cebc:	f04f 33ff 	mov.w	r3, #4294967295
 800cec0:	e006      	b.n	800ced0 <_sbrk+0x48>
	}

	heap_end += incr;
 800cec2:	4b05      	ldr	r3, [pc, #20]	; (800ced8 <_sbrk+0x50>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4413      	add	r3, r2
 800ceca:	4a03      	ldr	r2, [pc, #12]	; (800ced8 <_sbrk+0x50>)
 800cecc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800cece:	68fb      	ldr	r3, [r7, #12]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3710      	adds	r7, #16
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	20000214 	.word	0x20000214
 800cedc:	20001158 	.word	0x20001158

0800cee0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cee0:	b480      	push	{r7}
 800cee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cee4:	4b15      	ldr	r3, [pc, #84]	; (800cf3c <SystemInit+0x5c>)
 800cee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ceea:	4a14      	ldr	r2, [pc, #80]	; (800cf3c <SystemInit+0x5c>)
 800ceec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cef4:	4b12      	ldr	r3, [pc, #72]	; (800cf40 <SystemInit+0x60>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a11      	ldr	r2, [pc, #68]	; (800cf40 <SystemInit+0x60>)
 800cefa:	f043 0301 	orr.w	r3, r3, #1
 800cefe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cf00:	4b0f      	ldr	r3, [pc, #60]	; (800cf40 <SystemInit+0x60>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cf06:	4b0e      	ldr	r3, [pc, #56]	; (800cf40 <SystemInit+0x60>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	490d      	ldr	r1, [pc, #52]	; (800cf40 <SystemInit+0x60>)
 800cf0c:	4b0d      	ldr	r3, [pc, #52]	; (800cf44 <SystemInit+0x64>)
 800cf0e:	4013      	ands	r3, r2
 800cf10:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800cf12:	4b0b      	ldr	r3, [pc, #44]	; (800cf40 <SystemInit+0x60>)
 800cf14:	4a0c      	ldr	r2, [pc, #48]	; (800cf48 <SystemInit+0x68>)
 800cf16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800cf18:	4b09      	ldr	r3, [pc, #36]	; (800cf40 <SystemInit+0x60>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a08      	ldr	r2, [pc, #32]	; (800cf40 <SystemInit+0x60>)
 800cf1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800cf24:	4b06      	ldr	r3, [pc, #24]	; (800cf40 <SystemInit+0x60>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cf2a:	4b04      	ldr	r3, [pc, #16]	; (800cf3c <SystemInit+0x5c>)
 800cf2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cf30:	609a      	str	r2, [r3, #8]
#endif
}
 800cf32:	bf00      	nop
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	e000ed00 	.word	0xe000ed00
 800cf40:	40023800 	.word	0x40023800
 800cf44:	fef6ffff 	.word	0xfef6ffff
 800cf48:	24003010 	.word	0x24003010

0800cf4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cf50:	4802      	ldr	r0, [pc, #8]	; (800cf5c <MX_USB_HOST_Process+0x10>)
 800cf52:	f7fc fbf1 	bl	8009738 <USBH_Process>
}
 800cf56:	bf00      	nop
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	20000ac4 	.word	0x20000ac4

0800cf60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fc fe84 	bl	8009c7c <USBH_LL_IncTimer>
}
 800cf74:	bf00      	nop
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fc fec9 	bl	8009d22 <USBH_LL_Connect>
}
 800cf90:	bf00      	nop
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fc fee1 	bl	8009d6e <USBH_LL_Disconnect>
}
 800cfac:	bf00      	nop
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fc fe76 	bl	8009cd0 <USBH_LL_PortEnabled>
} 
 800cfe4:	bf00      	nop
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fc fe76 	bl	8009cec <USBH_LL_PortDisabled>
} 
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d01e:	4618      	mov	r0, r3
 800d020:	f7f6 f8b4 	bl	800318c <HAL_HCD_Start>
 800d024:	4603      	mov	r3, r0
 800d026:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4618      	mov	r0, r3
 800d02c:	f000 f8e0 	bl	800d1f0 <USBH_Get_USB_Status>
 800d030:	4603      	mov	r3, r0
 800d032:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d034:	7bbb      	ldrb	r3, [r7, #14]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d04a:	2300      	movs	r3, #0
 800d04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d054:	4618      	mov	r0, r3
 800d056:	f7f6 f8bc 	bl	80031d2 <HAL_HCD_Stop>
 800d05a:	4603      	mov	r3, r0
 800d05c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
 800d060:	4618      	mov	r0, r3
 800d062:	f000 f8c5 	bl	800d1f0 <USBH_Get_USB_Status>
 800d066:	4603      	mov	r3, r0
 800d068:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800d06a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d07c:	2301      	movs	r3, #1
 800d07e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d086:	4618      	mov	r0, r3
 800d088:	f7f6 f8e3 	bl	8003252 <HAL_HCD_GetCurrentSpeed>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d007      	beq.n	800d0a2 <USBH_LL_GetSpeed+0x2e>
 800d092:	2b01      	cmp	r3, #1
 800d094:	d302      	bcc.n	800d09c <USBH_LL_GetSpeed+0x28>
 800d096:	2b02      	cmp	r3, #2
 800d098:	d006      	beq.n	800d0a8 <USBH_LL_GetSpeed+0x34>
 800d09a:	e008      	b.n	800d0ae <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d09c:	2300      	movs	r3, #0
 800d09e:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a0:	e008      	b.n	800d0b4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a6:	e005      	b.n	800d0b4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ac:	e002      	b.n	800d0b4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d0b2:	bf00      	nop
  }
  return  speed;
 800d0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7f6 f899 	bl	800320c <HAL_HCD_ResetPort>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 f885 	bl	800d1f0 <USBH_Get_USB_Status>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d0ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d0f4:	b590      	push	{r4, r7, lr}
 800d0f6:	b089      	sub	sp, #36	; 0x24
 800d0f8:	af04      	add	r7, sp, #16
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	4608      	mov	r0, r1
 800d0fe:	4611      	mov	r1, r2
 800d100:	461a      	mov	r2, r3
 800d102:	4603      	mov	r3, r0
 800d104:	70fb      	strb	r3, [r7, #3]
 800d106:	460b      	mov	r3, r1
 800d108:	70bb      	strb	r3, [r7, #2]
 800d10a:	4613      	mov	r3, r2
 800d10c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800d11c:	787c      	ldrb	r4, [r7, #1]
 800d11e:	78ba      	ldrb	r2, [r7, #2]
 800d120:	78f9      	ldrb	r1, [r7, #3]
 800d122:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d124:	9302      	str	r3, [sp, #8]
 800d126:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d12a:	9301      	str	r3, [sp, #4]
 800d12c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	4623      	mov	r3, r4
 800d134:	f7f5 fd24 	bl	8002b80 <HAL_HCD_HC_Init>
 800d138:	4603      	mov	r3, r0
 800d13a:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 f856 	bl	800d1f0 <USBH_Get_USB_Status>
 800d144:	4603      	mov	r3, r0
 800d146:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d148:	7bbb      	ldrb	r3, [r7, #14]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd90      	pop	{r4, r7, pc}

0800d152 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d152:	b590      	push	{r4, r7, lr}
 800d154:	b089      	sub	sp, #36	; 0x24
 800d156:	af04      	add	r7, sp, #16
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	4608      	mov	r0, r1
 800d15c:	4611      	mov	r1, r2
 800d15e:	461a      	mov	r2, r3
 800d160:	4603      	mov	r3, r0
 800d162:	70fb      	strb	r3, [r7, #3]
 800d164:	460b      	mov	r3, r1
 800d166:	70bb      	strb	r3, [r7, #2]
 800d168:	4613      	mov	r3, r2
 800d16a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d170:	2300      	movs	r3, #0
 800d172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800d17a:	787c      	ldrb	r4, [r7, #1]
 800d17c:	78ba      	ldrb	r2, [r7, #2]
 800d17e:	78f9      	ldrb	r1, [r7, #3]
 800d180:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d184:	9303      	str	r3, [sp, #12]
 800d186:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d188:	9302      	str	r3, [sp, #8]
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	4623      	mov	r3, r4
 800d196:	f7f5 fd8b 	bl	8002cb0 <HAL_HCD_HC_SubmitRequest>
 800d19a:	4603      	mov	r3, r0
 800d19c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 f825 	bl	800d1f0 <USBH_Get_USB_Status>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd90      	pop	{r4, r7, pc}

0800d1b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	460b      	mov	r3, r1
 800d1be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d1c6:	78fa      	ldrb	r2, [r7, #3]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f6 f82c 	bl	8003228 <HAL_HCD_HC_GetURBState>
 800d1d0:	4603      	mov	r3, r0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7f4 f8ac 	bl	8001340 <HAL_Delay>
}
 800d1e8:	bf00      	nop
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	2b03      	cmp	r3, #3
 800d202:	d817      	bhi.n	800d234 <USBH_Get_USB_Status+0x44>
 800d204:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <USBH_Get_USB_Status+0x1c>)
 800d206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20a:	bf00      	nop
 800d20c:	0800d21d 	.word	0x0800d21d
 800d210:	0800d223 	.word	0x0800d223
 800d214:	0800d229 	.word	0x0800d229
 800d218:	0800d22f 	.word	0x0800d22f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]
    break;
 800d220:	e00b      	b.n	800d23a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d222:	2302      	movs	r3, #2
 800d224:	73fb      	strb	r3, [r7, #15]
    break;
 800d226:	e008      	b.n	800d23a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d228:	2301      	movs	r3, #1
 800d22a:	73fb      	strb	r3, [r7, #15]
    break;
 800d22c:	e005      	b.n	800d23a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d22e:	2302      	movs	r3, #2
 800d230:	73fb      	strb	r3, [r7, #15]
    break;
 800d232:	e002      	b.n	800d23a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d234:	2302      	movs	r3, #2
 800d236:	73fb      	strb	r3, [r7, #15]
    break;
 800d238:	bf00      	nop
  }
  return usb_status;
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d248:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d280 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d24c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d24e:	e003      	b.n	800d258 <LoopCopyDataInit>

0800d250 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d250:	4b0c      	ldr	r3, [pc, #48]	; (800d284 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d252:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d254:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d256:	3104      	adds	r1, #4

0800d258 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d258:	480b      	ldr	r0, [pc, #44]	; (800d288 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d25a:	4b0c      	ldr	r3, [pc, #48]	; (800d28c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d25c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d25e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d260:	d3f6      	bcc.n	800d250 <CopyDataInit>
  ldr  r2, =_sbss
 800d262:	4a0b      	ldr	r2, [pc, #44]	; (800d290 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d264:	e002      	b.n	800d26c <LoopFillZerobss>

0800d266 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d266:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d268:	f842 3b04 	str.w	r3, [r2], #4

0800d26c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d26c:	4b09      	ldr	r3, [pc, #36]	; (800d294 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d26e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d270:	d3f9      	bcc.n	800d266 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d272:	f7ff fe35 	bl	800cee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d276:	f000 f817 	bl	800d2a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d27a:	f7fd fb07 	bl	800a88c <main>
  bx  lr    
 800d27e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d280:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800d284:	0800f6c0 	.word	0x0800f6c0
  ldr  r0, =_sdata
 800d288:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d28c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800d290:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800d294:	20001158 	.word	0x20001158

0800d298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d298:	e7fe      	b.n	800d298 <ADC_IRQHandler>
	...

0800d29c <__errno>:
 800d29c:	4b01      	ldr	r3, [pc, #4]	; (800d2a4 <__errno+0x8>)
 800d29e:	6818      	ldr	r0, [r3, #0]
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	20000010 	.word	0x20000010

0800d2a8 <__libc_init_array>:
 800d2a8:	b570      	push	{r4, r5, r6, lr}
 800d2aa:	4e0d      	ldr	r6, [pc, #52]	; (800d2e0 <__libc_init_array+0x38>)
 800d2ac:	4c0d      	ldr	r4, [pc, #52]	; (800d2e4 <__libc_init_array+0x3c>)
 800d2ae:	1ba4      	subs	r4, r4, r6
 800d2b0:	10a4      	asrs	r4, r4, #2
 800d2b2:	2500      	movs	r5, #0
 800d2b4:	42a5      	cmp	r5, r4
 800d2b6:	d109      	bne.n	800d2cc <__libc_init_array+0x24>
 800d2b8:	4e0b      	ldr	r6, [pc, #44]	; (800d2e8 <__libc_init_array+0x40>)
 800d2ba:	4c0c      	ldr	r4, [pc, #48]	; (800d2ec <__libc_init_array+0x44>)
 800d2bc:	f000 fc26 	bl	800db0c <_init>
 800d2c0:	1ba4      	subs	r4, r4, r6
 800d2c2:	10a4      	asrs	r4, r4, #2
 800d2c4:	2500      	movs	r5, #0
 800d2c6:	42a5      	cmp	r5, r4
 800d2c8:	d105      	bne.n	800d2d6 <__libc_init_array+0x2e>
 800d2ca:	bd70      	pop	{r4, r5, r6, pc}
 800d2cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2d0:	4798      	blx	r3
 800d2d2:	3501      	adds	r5, #1
 800d2d4:	e7ee      	b.n	800d2b4 <__libc_init_array+0xc>
 800d2d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2da:	4798      	blx	r3
 800d2dc:	3501      	adds	r5, #1
 800d2de:	e7f2      	b.n	800d2c6 <__libc_init_array+0x1e>
 800d2e0:	0800f6b8 	.word	0x0800f6b8
 800d2e4:	0800f6b8 	.word	0x0800f6b8
 800d2e8:	0800f6b8 	.word	0x0800f6b8
 800d2ec:	0800f6bc 	.word	0x0800f6bc

0800d2f0 <memset>:
 800d2f0:	4402      	add	r2, r0
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d100      	bne.n	800d2fa <memset+0xa>
 800d2f8:	4770      	bx	lr
 800d2fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d2fe:	e7f9      	b.n	800d2f4 <memset+0x4>

0800d300 <_free_r>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	4605      	mov	r5, r0
 800d304:	2900      	cmp	r1, #0
 800d306:	d045      	beq.n	800d394 <_free_r+0x94>
 800d308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d30c:	1f0c      	subs	r4, r1, #4
 800d30e:	2b00      	cmp	r3, #0
 800d310:	bfb8      	it	lt
 800d312:	18e4      	addlt	r4, r4, r3
 800d314:	f000 f8cc 	bl	800d4b0 <__malloc_lock>
 800d318:	4a1f      	ldr	r2, [pc, #124]	; (800d398 <_free_r+0x98>)
 800d31a:	6813      	ldr	r3, [r2, #0]
 800d31c:	4610      	mov	r0, r2
 800d31e:	b933      	cbnz	r3, 800d32e <_free_r+0x2e>
 800d320:	6063      	str	r3, [r4, #4]
 800d322:	6014      	str	r4, [r2, #0]
 800d324:	4628      	mov	r0, r5
 800d326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d32a:	f000 b8c2 	b.w	800d4b2 <__malloc_unlock>
 800d32e:	42a3      	cmp	r3, r4
 800d330:	d90c      	bls.n	800d34c <_free_r+0x4c>
 800d332:	6821      	ldr	r1, [r4, #0]
 800d334:	1862      	adds	r2, r4, r1
 800d336:	4293      	cmp	r3, r2
 800d338:	bf04      	itt	eq
 800d33a:	681a      	ldreq	r2, [r3, #0]
 800d33c:	685b      	ldreq	r3, [r3, #4]
 800d33e:	6063      	str	r3, [r4, #4]
 800d340:	bf04      	itt	eq
 800d342:	1852      	addeq	r2, r2, r1
 800d344:	6022      	streq	r2, [r4, #0]
 800d346:	6004      	str	r4, [r0, #0]
 800d348:	e7ec      	b.n	800d324 <_free_r+0x24>
 800d34a:	4613      	mov	r3, r2
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	b10a      	cbz	r2, 800d354 <_free_r+0x54>
 800d350:	42a2      	cmp	r2, r4
 800d352:	d9fa      	bls.n	800d34a <_free_r+0x4a>
 800d354:	6819      	ldr	r1, [r3, #0]
 800d356:	1858      	adds	r0, r3, r1
 800d358:	42a0      	cmp	r0, r4
 800d35a:	d10b      	bne.n	800d374 <_free_r+0x74>
 800d35c:	6820      	ldr	r0, [r4, #0]
 800d35e:	4401      	add	r1, r0
 800d360:	1858      	adds	r0, r3, r1
 800d362:	4282      	cmp	r2, r0
 800d364:	6019      	str	r1, [r3, #0]
 800d366:	d1dd      	bne.n	800d324 <_free_r+0x24>
 800d368:	6810      	ldr	r0, [r2, #0]
 800d36a:	6852      	ldr	r2, [r2, #4]
 800d36c:	605a      	str	r2, [r3, #4]
 800d36e:	4401      	add	r1, r0
 800d370:	6019      	str	r1, [r3, #0]
 800d372:	e7d7      	b.n	800d324 <_free_r+0x24>
 800d374:	d902      	bls.n	800d37c <_free_r+0x7c>
 800d376:	230c      	movs	r3, #12
 800d378:	602b      	str	r3, [r5, #0]
 800d37a:	e7d3      	b.n	800d324 <_free_r+0x24>
 800d37c:	6820      	ldr	r0, [r4, #0]
 800d37e:	1821      	adds	r1, r4, r0
 800d380:	428a      	cmp	r2, r1
 800d382:	bf04      	itt	eq
 800d384:	6811      	ldreq	r1, [r2, #0]
 800d386:	6852      	ldreq	r2, [r2, #4]
 800d388:	6062      	str	r2, [r4, #4]
 800d38a:	bf04      	itt	eq
 800d38c:	1809      	addeq	r1, r1, r0
 800d38e:	6021      	streq	r1, [r4, #0]
 800d390:	605c      	str	r4, [r3, #4]
 800d392:	e7c7      	b.n	800d324 <_free_r+0x24>
 800d394:	bd38      	pop	{r3, r4, r5, pc}
 800d396:	bf00      	nop
 800d398:	20000218 	.word	0x20000218

0800d39c <_malloc_r>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	1ccd      	adds	r5, r1, #3
 800d3a0:	f025 0503 	bic.w	r5, r5, #3
 800d3a4:	3508      	adds	r5, #8
 800d3a6:	2d0c      	cmp	r5, #12
 800d3a8:	bf38      	it	cc
 800d3aa:	250c      	movcc	r5, #12
 800d3ac:	2d00      	cmp	r5, #0
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	db01      	blt.n	800d3b6 <_malloc_r+0x1a>
 800d3b2:	42a9      	cmp	r1, r5
 800d3b4:	d903      	bls.n	800d3be <_malloc_r+0x22>
 800d3b6:	230c      	movs	r3, #12
 800d3b8:	6033      	str	r3, [r6, #0]
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	bd70      	pop	{r4, r5, r6, pc}
 800d3be:	f000 f877 	bl	800d4b0 <__malloc_lock>
 800d3c2:	4a21      	ldr	r2, [pc, #132]	; (800d448 <_malloc_r+0xac>)
 800d3c4:	6814      	ldr	r4, [r2, #0]
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	b991      	cbnz	r1, 800d3f0 <_malloc_r+0x54>
 800d3ca:	4c20      	ldr	r4, [pc, #128]	; (800d44c <_malloc_r+0xb0>)
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	b91b      	cbnz	r3, 800d3d8 <_malloc_r+0x3c>
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f000 f83d 	bl	800d450 <_sbrk_r>
 800d3d6:	6020      	str	r0, [r4, #0]
 800d3d8:	4629      	mov	r1, r5
 800d3da:	4630      	mov	r0, r6
 800d3dc:	f000 f838 	bl	800d450 <_sbrk_r>
 800d3e0:	1c43      	adds	r3, r0, #1
 800d3e2:	d124      	bne.n	800d42e <_malloc_r+0x92>
 800d3e4:	230c      	movs	r3, #12
 800d3e6:	6033      	str	r3, [r6, #0]
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	f000 f862 	bl	800d4b2 <__malloc_unlock>
 800d3ee:	e7e4      	b.n	800d3ba <_malloc_r+0x1e>
 800d3f0:	680b      	ldr	r3, [r1, #0]
 800d3f2:	1b5b      	subs	r3, r3, r5
 800d3f4:	d418      	bmi.n	800d428 <_malloc_r+0x8c>
 800d3f6:	2b0b      	cmp	r3, #11
 800d3f8:	d90f      	bls.n	800d41a <_malloc_r+0x7e>
 800d3fa:	600b      	str	r3, [r1, #0]
 800d3fc:	50cd      	str	r5, [r1, r3]
 800d3fe:	18cc      	adds	r4, r1, r3
 800d400:	4630      	mov	r0, r6
 800d402:	f000 f856 	bl	800d4b2 <__malloc_unlock>
 800d406:	f104 000b 	add.w	r0, r4, #11
 800d40a:	1d23      	adds	r3, r4, #4
 800d40c:	f020 0007 	bic.w	r0, r0, #7
 800d410:	1ac3      	subs	r3, r0, r3
 800d412:	d0d3      	beq.n	800d3bc <_malloc_r+0x20>
 800d414:	425a      	negs	r2, r3
 800d416:	50e2      	str	r2, [r4, r3]
 800d418:	e7d0      	b.n	800d3bc <_malloc_r+0x20>
 800d41a:	428c      	cmp	r4, r1
 800d41c:	684b      	ldr	r3, [r1, #4]
 800d41e:	bf16      	itet	ne
 800d420:	6063      	strne	r3, [r4, #4]
 800d422:	6013      	streq	r3, [r2, #0]
 800d424:	460c      	movne	r4, r1
 800d426:	e7eb      	b.n	800d400 <_malloc_r+0x64>
 800d428:	460c      	mov	r4, r1
 800d42a:	6849      	ldr	r1, [r1, #4]
 800d42c:	e7cc      	b.n	800d3c8 <_malloc_r+0x2c>
 800d42e:	1cc4      	adds	r4, r0, #3
 800d430:	f024 0403 	bic.w	r4, r4, #3
 800d434:	42a0      	cmp	r0, r4
 800d436:	d005      	beq.n	800d444 <_malloc_r+0xa8>
 800d438:	1a21      	subs	r1, r4, r0
 800d43a:	4630      	mov	r0, r6
 800d43c:	f000 f808 	bl	800d450 <_sbrk_r>
 800d440:	3001      	adds	r0, #1
 800d442:	d0cf      	beq.n	800d3e4 <_malloc_r+0x48>
 800d444:	6025      	str	r5, [r4, #0]
 800d446:	e7db      	b.n	800d400 <_malloc_r+0x64>
 800d448:	20000218 	.word	0x20000218
 800d44c:	2000021c 	.word	0x2000021c

0800d450 <_sbrk_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4c06      	ldr	r4, [pc, #24]	; (800d46c <_sbrk_r+0x1c>)
 800d454:	2300      	movs	r3, #0
 800d456:	4605      	mov	r5, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	6023      	str	r3, [r4, #0]
 800d45c:	f7ff fd14 	bl	800ce88 <_sbrk>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d102      	bne.n	800d46a <_sbrk_r+0x1a>
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	b103      	cbz	r3, 800d46a <_sbrk_r+0x1a>
 800d468:	602b      	str	r3, [r5, #0]
 800d46a:	bd38      	pop	{r3, r4, r5, pc}
 800d46c:	20001154 	.word	0x20001154

0800d470 <siprintf>:
 800d470:	b40e      	push	{r1, r2, r3}
 800d472:	b500      	push	{lr}
 800d474:	b09c      	sub	sp, #112	; 0x70
 800d476:	ab1d      	add	r3, sp, #116	; 0x74
 800d478:	9002      	str	r0, [sp, #8]
 800d47a:	9006      	str	r0, [sp, #24]
 800d47c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d480:	4809      	ldr	r0, [pc, #36]	; (800d4a8 <siprintf+0x38>)
 800d482:	9107      	str	r1, [sp, #28]
 800d484:	9104      	str	r1, [sp, #16]
 800d486:	4909      	ldr	r1, [pc, #36]	; (800d4ac <siprintf+0x3c>)
 800d488:	f853 2b04 	ldr.w	r2, [r3], #4
 800d48c:	9105      	str	r1, [sp, #20]
 800d48e:	6800      	ldr	r0, [r0, #0]
 800d490:	9301      	str	r3, [sp, #4]
 800d492:	a902      	add	r1, sp, #8
 800d494:	f000 f868 	bl	800d568 <_svfiprintf_r>
 800d498:	9b02      	ldr	r3, [sp, #8]
 800d49a:	2200      	movs	r2, #0
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	b01c      	add	sp, #112	; 0x70
 800d4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4a4:	b003      	add	sp, #12
 800d4a6:	4770      	bx	lr
 800d4a8:	20000010 	.word	0x20000010
 800d4ac:	ffff0208 	.word	0xffff0208

0800d4b0 <__malloc_lock>:
 800d4b0:	4770      	bx	lr

0800d4b2 <__malloc_unlock>:
 800d4b2:	4770      	bx	lr

0800d4b4 <__ssputs_r>:
 800d4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b8:	688e      	ldr	r6, [r1, #8]
 800d4ba:	429e      	cmp	r6, r3
 800d4bc:	4682      	mov	sl, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4690      	mov	r8, r2
 800d4c2:	4699      	mov	r9, r3
 800d4c4:	d837      	bhi.n	800d536 <__ssputs_r+0x82>
 800d4c6:	898a      	ldrh	r2, [r1, #12]
 800d4c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4cc:	d031      	beq.n	800d532 <__ssputs_r+0x7e>
 800d4ce:	6825      	ldr	r5, [r4, #0]
 800d4d0:	6909      	ldr	r1, [r1, #16]
 800d4d2:	1a6f      	subs	r7, r5, r1
 800d4d4:	6965      	ldr	r5, [r4, #20]
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4dc:	fb95 f5f3 	sdiv	r5, r5, r3
 800d4e0:	f109 0301 	add.w	r3, r9, #1
 800d4e4:	443b      	add	r3, r7
 800d4e6:	429d      	cmp	r5, r3
 800d4e8:	bf38      	it	cc
 800d4ea:	461d      	movcc	r5, r3
 800d4ec:	0553      	lsls	r3, r2, #21
 800d4ee:	d530      	bpl.n	800d552 <__ssputs_r+0x9e>
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	f7ff ff53 	bl	800d39c <_malloc_r>
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	b950      	cbnz	r0, 800d510 <__ssputs_r+0x5c>
 800d4fa:	230c      	movs	r3, #12
 800d4fc:	f8ca 3000 	str.w	r3, [sl]
 800d500:	89a3      	ldrh	r3, [r4, #12]
 800d502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d506:	81a3      	strh	r3, [r4, #12]
 800d508:	f04f 30ff 	mov.w	r0, #4294967295
 800d50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d510:	463a      	mov	r2, r7
 800d512:	6921      	ldr	r1, [r4, #16]
 800d514:	f000 faa8 	bl	800da68 <memcpy>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	6126      	str	r6, [r4, #16]
 800d526:	6165      	str	r5, [r4, #20]
 800d528:	443e      	add	r6, r7
 800d52a:	1bed      	subs	r5, r5, r7
 800d52c:	6026      	str	r6, [r4, #0]
 800d52e:	60a5      	str	r5, [r4, #8]
 800d530:	464e      	mov	r6, r9
 800d532:	454e      	cmp	r6, r9
 800d534:	d900      	bls.n	800d538 <__ssputs_r+0x84>
 800d536:	464e      	mov	r6, r9
 800d538:	4632      	mov	r2, r6
 800d53a:	4641      	mov	r1, r8
 800d53c:	6820      	ldr	r0, [r4, #0]
 800d53e:	f000 fa9e 	bl	800da7e <memmove>
 800d542:	68a3      	ldr	r3, [r4, #8]
 800d544:	1b9b      	subs	r3, r3, r6
 800d546:	60a3      	str	r3, [r4, #8]
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	441e      	add	r6, r3
 800d54c:	6026      	str	r6, [r4, #0]
 800d54e:	2000      	movs	r0, #0
 800d550:	e7dc      	b.n	800d50c <__ssputs_r+0x58>
 800d552:	462a      	mov	r2, r5
 800d554:	f000 faac 	bl	800dab0 <_realloc_r>
 800d558:	4606      	mov	r6, r0
 800d55a:	2800      	cmp	r0, #0
 800d55c:	d1e2      	bne.n	800d524 <__ssputs_r+0x70>
 800d55e:	6921      	ldr	r1, [r4, #16]
 800d560:	4650      	mov	r0, sl
 800d562:	f7ff fecd 	bl	800d300 <_free_r>
 800d566:	e7c8      	b.n	800d4fa <__ssputs_r+0x46>

0800d568 <_svfiprintf_r>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	461d      	mov	r5, r3
 800d56e:	898b      	ldrh	r3, [r1, #12]
 800d570:	061f      	lsls	r7, r3, #24
 800d572:	b09d      	sub	sp, #116	; 0x74
 800d574:	4680      	mov	r8, r0
 800d576:	460c      	mov	r4, r1
 800d578:	4616      	mov	r6, r2
 800d57a:	d50f      	bpl.n	800d59c <_svfiprintf_r+0x34>
 800d57c:	690b      	ldr	r3, [r1, #16]
 800d57e:	b96b      	cbnz	r3, 800d59c <_svfiprintf_r+0x34>
 800d580:	2140      	movs	r1, #64	; 0x40
 800d582:	f7ff ff0b 	bl	800d39c <_malloc_r>
 800d586:	6020      	str	r0, [r4, #0]
 800d588:	6120      	str	r0, [r4, #16]
 800d58a:	b928      	cbnz	r0, 800d598 <_svfiprintf_r+0x30>
 800d58c:	230c      	movs	r3, #12
 800d58e:	f8c8 3000 	str.w	r3, [r8]
 800d592:	f04f 30ff 	mov.w	r0, #4294967295
 800d596:	e0c8      	b.n	800d72a <_svfiprintf_r+0x1c2>
 800d598:	2340      	movs	r3, #64	; 0x40
 800d59a:	6163      	str	r3, [r4, #20]
 800d59c:	2300      	movs	r3, #0
 800d59e:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a0:	2320      	movs	r3, #32
 800d5a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5a6:	2330      	movs	r3, #48	; 0x30
 800d5a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5ac:	9503      	str	r5, [sp, #12]
 800d5ae:	f04f 0b01 	mov.w	fp, #1
 800d5b2:	4637      	mov	r7, r6
 800d5b4:	463d      	mov	r5, r7
 800d5b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d5ba:	b10b      	cbz	r3, 800d5c0 <_svfiprintf_r+0x58>
 800d5bc:	2b25      	cmp	r3, #37	; 0x25
 800d5be:	d13e      	bne.n	800d63e <_svfiprintf_r+0xd6>
 800d5c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d5c4:	d00b      	beq.n	800d5de <_svfiprintf_r+0x76>
 800d5c6:	4653      	mov	r3, sl
 800d5c8:	4632      	mov	r2, r6
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	f7ff ff71 	bl	800d4b4 <__ssputs_r>
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	f000 80a4 	beq.w	800d720 <_svfiprintf_r+0x1b8>
 800d5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5da:	4453      	add	r3, sl
 800d5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5de:	783b      	ldrb	r3, [r7, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 809d 	beq.w	800d720 <_svfiprintf_r+0x1b8>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5f0:	9304      	str	r3, [sp, #16]
 800d5f2:	9307      	str	r3, [sp, #28]
 800d5f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d5fa:	462f      	mov	r7, r5
 800d5fc:	2205      	movs	r2, #5
 800d5fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d602:	4850      	ldr	r0, [pc, #320]	; (800d744 <_svfiprintf_r+0x1dc>)
 800d604:	f7f2 fe04 	bl	8000210 <memchr>
 800d608:	9b04      	ldr	r3, [sp, #16]
 800d60a:	b9d0      	cbnz	r0, 800d642 <_svfiprintf_r+0xda>
 800d60c:	06d9      	lsls	r1, r3, #27
 800d60e:	bf44      	itt	mi
 800d610:	2220      	movmi	r2, #32
 800d612:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d616:	071a      	lsls	r2, r3, #28
 800d618:	bf44      	itt	mi
 800d61a:	222b      	movmi	r2, #43	; 0x2b
 800d61c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d620:	782a      	ldrb	r2, [r5, #0]
 800d622:	2a2a      	cmp	r2, #42	; 0x2a
 800d624:	d015      	beq.n	800d652 <_svfiprintf_r+0xea>
 800d626:	9a07      	ldr	r2, [sp, #28]
 800d628:	462f      	mov	r7, r5
 800d62a:	2000      	movs	r0, #0
 800d62c:	250a      	movs	r5, #10
 800d62e:	4639      	mov	r1, r7
 800d630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d634:	3b30      	subs	r3, #48	; 0x30
 800d636:	2b09      	cmp	r3, #9
 800d638:	d94d      	bls.n	800d6d6 <_svfiprintf_r+0x16e>
 800d63a:	b1b8      	cbz	r0, 800d66c <_svfiprintf_r+0x104>
 800d63c:	e00f      	b.n	800d65e <_svfiprintf_r+0xf6>
 800d63e:	462f      	mov	r7, r5
 800d640:	e7b8      	b.n	800d5b4 <_svfiprintf_r+0x4c>
 800d642:	4a40      	ldr	r2, [pc, #256]	; (800d744 <_svfiprintf_r+0x1dc>)
 800d644:	1a80      	subs	r0, r0, r2
 800d646:	fa0b f000 	lsl.w	r0, fp, r0
 800d64a:	4318      	orrs	r0, r3
 800d64c:	9004      	str	r0, [sp, #16]
 800d64e:	463d      	mov	r5, r7
 800d650:	e7d3      	b.n	800d5fa <_svfiprintf_r+0x92>
 800d652:	9a03      	ldr	r2, [sp, #12]
 800d654:	1d11      	adds	r1, r2, #4
 800d656:	6812      	ldr	r2, [r2, #0]
 800d658:	9103      	str	r1, [sp, #12]
 800d65a:	2a00      	cmp	r2, #0
 800d65c:	db01      	blt.n	800d662 <_svfiprintf_r+0xfa>
 800d65e:	9207      	str	r2, [sp, #28]
 800d660:	e004      	b.n	800d66c <_svfiprintf_r+0x104>
 800d662:	4252      	negs	r2, r2
 800d664:	f043 0302 	orr.w	r3, r3, #2
 800d668:	9207      	str	r2, [sp, #28]
 800d66a:	9304      	str	r3, [sp, #16]
 800d66c:	783b      	ldrb	r3, [r7, #0]
 800d66e:	2b2e      	cmp	r3, #46	; 0x2e
 800d670:	d10c      	bne.n	800d68c <_svfiprintf_r+0x124>
 800d672:	787b      	ldrb	r3, [r7, #1]
 800d674:	2b2a      	cmp	r3, #42	; 0x2a
 800d676:	d133      	bne.n	800d6e0 <_svfiprintf_r+0x178>
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	1d1a      	adds	r2, r3, #4
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	9203      	str	r2, [sp, #12]
 800d680:	2b00      	cmp	r3, #0
 800d682:	bfb8      	it	lt
 800d684:	f04f 33ff 	movlt.w	r3, #4294967295
 800d688:	3702      	adds	r7, #2
 800d68a:	9305      	str	r3, [sp, #20]
 800d68c:	4d2e      	ldr	r5, [pc, #184]	; (800d748 <_svfiprintf_r+0x1e0>)
 800d68e:	7839      	ldrb	r1, [r7, #0]
 800d690:	2203      	movs	r2, #3
 800d692:	4628      	mov	r0, r5
 800d694:	f7f2 fdbc 	bl	8000210 <memchr>
 800d698:	b138      	cbz	r0, 800d6aa <_svfiprintf_r+0x142>
 800d69a:	2340      	movs	r3, #64	; 0x40
 800d69c:	1b40      	subs	r0, r0, r5
 800d69e:	fa03 f000 	lsl.w	r0, r3, r0
 800d6a2:	9b04      	ldr	r3, [sp, #16]
 800d6a4:	4303      	orrs	r3, r0
 800d6a6:	3701      	adds	r7, #1
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	7839      	ldrb	r1, [r7, #0]
 800d6ac:	4827      	ldr	r0, [pc, #156]	; (800d74c <_svfiprintf_r+0x1e4>)
 800d6ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6b2:	2206      	movs	r2, #6
 800d6b4:	1c7e      	adds	r6, r7, #1
 800d6b6:	f7f2 fdab 	bl	8000210 <memchr>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d038      	beq.n	800d730 <_svfiprintf_r+0x1c8>
 800d6be:	4b24      	ldr	r3, [pc, #144]	; (800d750 <_svfiprintf_r+0x1e8>)
 800d6c0:	bb13      	cbnz	r3, 800d708 <_svfiprintf_r+0x1a0>
 800d6c2:	9b03      	ldr	r3, [sp, #12]
 800d6c4:	3307      	adds	r3, #7
 800d6c6:	f023 0307 	bic.w	r3, r3, #7
 800d6ca:	3308      	adds	r3, #8
 800d6cc:	9303      	str	r3, [sp, #12]
 800d6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6d0:	444b      	add	r3, r9
 800d6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d4:	e76d      	b.n	800d5b2 <_svfiprintf_r+0x4a>
 800d6d6:	fb05 3202 	mla	r2, r5, r2, r3
 800d6da:	2001      	movs	r0, #1
 800d6dc:	460f      	mov	r7, r1
 800d6de:	e7a6      	b.n	800d62e <_svfiprintf_r+0xc6>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	3701      	adds	r7, #1
 800d6e4:	9305      	str	r3, [sp, #20]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	250a      	movs	r5, #10
 800d6ea:	4638      	mov	r0, r7
 800d6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6f0:	3a30      	subs	r2, #48	; 0x30
 800d6f2:	2a09      	cmp	r2, #9
 800d6f4:	d903      	bls.n	800d6fe <_svfiprintf_r+0x196>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d0c8      	beq.n	800d68c <_svfiprintf_r+0x124>
 800d6fa:	9105      	str	r1, [sp, #20]
 800d6fc:	e7c6      	b.n	800d68c <_svfiprintf_r+0x124>
 800d6fe:	fb05 2101 	mla	r1, r5, r1, r2
 800d702:	2301      	movs	r3, #1
 800d704:	4607      	mov	r7, r0
 800d706:	e7f0      	b.n	800d6ea <_svfiprintf_r+0x182>
 800d708:	ab03      	add	r3, sp, #12
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	4622      	mov	r2, r4
 800d70e:	4b11      	ldr	r3, [pc, #68]	; (800d754 <_svfiprintf_r+0x1ec>)
 800d710:	a904      	add	r1, sp, #16
 800d712:	4640      	mov	r0, r8
 800d714:	f3af 8000 	nop.w
 800d718:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d71c:	4681      	mov	r9, r0
 800d71e:	d1d6      	bne.n	800d6ce <_svfiprintf_r+0x166>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	065b      	lsls	r3, r3, #25
 800d724:	f53f af35 	bmi.w	800d592 <_svfiprintf_r+0x2a>
 800d728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d72a:	b01d      	add	sp, #116	; 0x74
 800d72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d730:	ab03      	add	r3, sp, #12
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	4622      	mov	r2, r4
 800d736:	4b07      	ldr	r3, [pc, #28]	; (800d754 <_svfiprintf_r+0x1ec>)
 800d738:	a904      	add	r1, sp, #16
 800d73a:	4640      	mov	r0, r8
 800d73c:	f000 f882 	bl	800d844 <_printf_i>
 800d740:	e7ea      	b.n	800d718 <_svfiprintf_r+0x1b0>
 800d742:	bf00      	nop
 800d744:	0800f67c 	.word	0x0800f67c
 800d748:	0800f682 	.word	0x0800f682
 800d74c:	0800f686 	.word	0x0800f686
 800d750:	00000000 	.word	0x00000000
 800d754:	0800d4b5 	.word	0x0800d4b5

0800d758 <_printf_common>:
 800d758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d75c:	4691      	mov	r9, r2
 800d75e:	461f      	mov	r7, r3
 800d760:	688a      	ldr	r2, [r1, #8]
 800d762:	690b      	ldr	r3, [r1, #16]
 800d764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d768:	4293      	cmp	r3, r2
 800d76a:	bfb8      	it	lt
 800d76c:	4613      	movlt	r3, r2
 800d76e:	f8c9 3000 	str.w	r3, [r9]
 800d772:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d776:	4606      	mov	r6, r0
 800d778:	460c      	mov	r4, r1
 800d77a:	b112      	cbz	r2, 800d782 <_printf_common+0x2a>
 800d77c:	3301      	adds	r3, #1
 800d77e:	f8c9 3000 	str.w	r3, [r9]
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	0699      	lsls	r1, r3, #26
 800d786:	bf42      	ittt	mi
 800d788:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d78c:	3302      	addmi	r3, #2
 800d78e:	f8c9 3000 	strmi.w	r3, [r9]
 800d792:	6825      	ldr	r5, [r4, #0]
 800d794:	f015 0506 	ands.w	r5, r5, #6
 800d798:	d107      	bne.n	800d7aa <_printf_common+0x52>
 800d79a:	f104 0a19 	add.w	sl, r4, #25
 800d79e:	68e3      	ldr	r3, [r4, #12]
 800d7a0:	f8d9 2000 	ldr.w	r2, [r9]
 800d7a4:	1a9b      	subs	r3, r3, r2
 800d7a6:	42ab      	cmp	r3, r5
 800d7a8:	dc28      	bgt.n	800d7fc <_printf_common+0xa4>
 800d7aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d7ae:	6822      	ldr	r2, [r4, #0]
 800d7b0:	3300      	adds	r3, #0
 800d7b2:	bf18      	it	ne
 800d7b4:	2301      	movne	r3, #1
 800d7b6:	0692      	lsls	r2, r2, #26
 800d7b8:	d42d      	bmi.n	800d816 <_printf_common+0xbe>
 800d7ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7be:	4639      	mov	r1, r7
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	47c0      	blx	r8
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	d020      	beq.n	800d80a <_printf_common+0xb2>
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	68e5      	ldr	r5, [r4, #12]
 800d7cc:	f8d9 2000 	ldr.w	r2, [r9]
 800d7d0:	f003 0306 	and.w	r3, r3, #6
 800d7d4:	2b04      	cmp	r3, #4
 800d7d6:	bf08      	it	eq
 800d7d8:	1aad      	subeq	r5, r5, r2
 800d7da:	68a3      	ldr	r3, [r4, #8]
 800d7dc:	6922      	ldr	r2, [r4, #16]
 800d7de:	bf0c      	ite	eq
 800d7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7e4:	2500      	movne	r5, #0
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	bfc4      	itt	gt
 800d7ea:	1a9b      	subgt	r3, r3, r2
 800d7ec:	18ed      	addgt	r5, r5, r3
 800d7ee:	f04f 0900 	mov.w	r9, #0
 800d7f2:	341a      	adds	r4, #26
 800d7f4:	454d      	cmp	r5, r9
 800d7f6:	d11a      	bne.n	800d82e <_printf_common+0xd6>
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e008      	b.n	800d80e <_printf_common+0xb6>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	4652      	mov	r2, sl
 800d800:	4639      	mov	r1, r7
 800d802:	4630      	mov	r0, r6
 800d804:	47c0      	blx	r8
 800d806:	3001      	adds	r0, #1
 800d808:	d103      	bne.n	800d812 <_printf_common+0xba>
 800d80a:	f04f 30ff 	mov.w	r0, #4294967295
 800d80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d812:	3501      	adds	r5, #1
 800d814:	e7c3      	b.n	800d79e <_printf_common+0x46>
 800d816:	18e1      	adds	r1, r4, r3
 800d818:	1c5a      	adds	r2, r3, #1
 800d81a:	2030      	movs	r0, #48	; 0x30
 800d81c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d820:	4422      	add	r2, r4
 800d822:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d826:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d82a:	3302      	adds	r3, #2
 800d82c:	e7c5      	b.n	800d7ba <_printf_common+0x62>
 800d82e:	2301      	movs	r3, #1
 800d830:	4622      	mov	r2, r4
 800d832:	4639      	mov	r1, r7
 800d834:	4630      	mov	r0, r6
 800d836:	47c0      	blx	r8
 800d838:	3001      	adds	r0, #1
 800d83a:	d0e6      	beq.n	800d80a <_printf_common+0xb2>
 800d83c:	f109 0901 	add.w	r9, r9, #1
 800d840:	e7d8      	b.n	800d7f4 <_printf_common+0x9c>
	...

0800d844 <_printf_i>:
 800d844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d848:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d84c:	460c      	mov	r4, r1
 800d84e:	7e09      	ldrb	r1, [r1, #24]
 800d850:	b085      	sub	sp, #20
 800d852:	296e      	cmp	r1, #110	; 0x6e
 800d854:	4617      	mov	r7, r2
 800d856:	4606      	mov	r6, r0
 800d858:	4698      	mov	r8, r3
 800d85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d85c:	f000 80b3 	beq.w	800d9c6 <_printf_i+0x182>
 800d860:	d822      	bhi.n	800d8a8 <_printf_i+0x64>
 800d862:	2963      	cmp	r1, #99	; 0x63
 800d864:	d036      	beq.n	800d8d4 <_printf_i+0x90>
 800d866:	d80a      	bhi.n	800d87e <_printf_i+0x3a>
 800d868:	2900      	cmp	r1, #0
 800d86a:	f000 80b9 	beq.w	800d9e0 <_printf_i+0x19c>
 800d86e:	2958      	cmp	r1, #88	; 0x58
 800d870:	f000 8083 	beq.w	800d97a <_printf_i+0x136>
 800d874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d878:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d87c:	e032      	b.n	800d8e4 <_printf_i+0xa0>
 800d87e:	2964      	cmp	r1, #100	; 0x64
 800d880:	d001      	beq.n	800d886 <_printf_i+0x42>
 800d882:	2969      	cmp	r1, #105	; 0x69
 800d884:	d1f6      	bne.n	800d874 <_printf_i+0x30>
 800d886:	6820      	ldr	r0, [r4, #0]
 800d888:	6813      	ldr	r3, [r2, #0]
 800d88a:	0605      	lsls	r5, r0, #24
 800d88c:	f103 0104 	add.w	r1, r3, #4
 800d890:	d52a      	bpl.n	800d8e8 <_printf_i+0xa4>
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6011      	str	r1, [r2, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	da03      	bge.n	800d8a2 <_printf_i+0x5e>
 800d89a:	222d      	movs	r2, #45	; 0x2d
 800d89c:	425b      	negs	r3, r3
 800d89e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d8a2:	486f      	ldr	r0, [pc, #444]	; (800da60 <_printf_i+0x21c>)
 800d8a4:	220a      	movs	r2, #10
 800d8a6:	e039      	b.n	800d91c <_printf_i+0xd8>
 800d8a8:	2973      	cmp	r1, #115	; 0x73
 800d8aa:	f000 809d 	beq.w	800d9e8 <_printf_i+0x1a4>
 800d8ae:	d808      	bhi.n	800d8c2 <_printf_i+0x7e>
 800d8b0:	296f      	cmp	r1, #111	; 0x6f
 800d8b2:	d020      	beq.n	800d8f6 <_printf_i+0xb2>
 800d8b4:	2970      	cmp	r1, #112	; 0x70
 800d8b6:	d1dd      	bne.n	800d874 <_printf_i+0x30>
 800d8b8:	6823      	ldr	r3, [r4, #0]
 800d8ba:	f043 0320 	orr.w	r3, r3, #32
 800d8be:	6023      	str	r3, [r4, #0]
 800d8c0:	e003      	b.n	800d8ca <_printf_i+0x86>
 800d8c2:	2975      	cmp	r1, #117	; 0x75
 800d8c4:	d017      	beq.n	800d8f6 <_printf_i+0xb2>
 800d8c6:	2978      	cmp	r1, #120	; 0x78
 800d8c8:	d1d4      	bne.n	800d874 <_printf_i+0x30>
 800d8ca:	2378      	movs	r3, #120	; 0x78
 800d8cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8d0:	4864      	ldr	r0, [pc, #400]	; (800da64 <_printf_i+0x220>)
 800d8d2:	e055      	b.n	800d980 <_printf_i+0x13c>
 800d8d4:	6813      	ldr	r3, [r2, #0]
 800d8d6:	1d19      	adds	r1, r3, #4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6011      	str	r1, [r2, #0]
 800d8dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e08c      	b.n	800da02 <_printf_i+0x1be>
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	6011      	str	r1, [r2, #0]
 800d8ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8f0:	bf18      	it	ne
 800d8f2:	b21b      	sxthne	r3, r3
 800d8f4:	e7cf      	b.n	800d896 <_printf_i+0x52>
 800d8f6:	6813      	ldr	r3, [r2, #0]
 800d8f8:	6825      	ldr	r5, [r4, #0]
 800d8fa:	1d18      	adds	r0, r3, #4
 800d8fc:	6010      	str	r0, [r2, #0]
 800d8fe:	0628      	lsls	r0, r5, #24
 800d900:	d501      	bpl.n	800d906 <_printf_i+0xc2>
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	e002      	b.n	800d90c <_printf_i+0xc8>
 800d906:	0668      	lsls	r0, r5, #25
 800d908:	d5fb      	bpl.n	800d902 <_printf_i+0xbe>
 800d90a:	881b      	ldrh	r3, [r3, #0]
 800d90c:	4854      	ldr	r0, [pc, #336]	; (800da60 <_printf_i+0x21c>)
 800d90e:	296f      	cmp	r1, #111	; 0x6f
 800d910:	bf14      	ite	ne
 800d912:	220a      	movne	r2, #10
 800d914:	2208      	moveq	r2, #8
 800d916:	2100      	movs	r1, #0
 800d918:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d91c:	6865      	ldr	r5, [r4, #4]
 800d91e:	60a5      	str	r5, [r4, #8]
 800d920:	2d00      	cmp	r5, #0
 800d922:	f2c0 8095 	blt.w	800da50 <_printf_i+0x20c>
 800d926:	6821      	ldr	r1, [r4, #0]
 800d928:	f021 0104 	bic.w	r1, r1, #4
 800d92c:	6021      	str	r1, [r4, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d13d      	bne.n	800d9ae <_printf_i+0x16a>
 800d932:	2d00      	cmp	r5, #0
 800d934:	f040 808e 	bne.w	800da54 <_printf_i+0x210>
 800d938:	4665      	mov	r5, ip
 800d93a:	2a08      	cmp	r2, #8
 800d93c:	d10b      	bne.n	800d956 <_printf_i+0x112>
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	07db      	lsls	r3, r3, #31
 800d942:	d508      	bpl.n	800d956 <_printf_i+0x112>
 800d944:	6923      	ldr	r3, [r4, #16]
 800d946:	6862      	ldr	r2, [r4, #4]
 800d948:	429a      	cmp	r2, r3
 800d94a:	bfde      	ittt	le
 800d94c:	2330      	movle	r3, #48	; 0x30
 800d94e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d952:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d956:	ebac 0305 	sub.w	r3, ip, r5
 800d95a:	6123      	str	r3, [r4, #16]
 800d95c:	f8cd 8000 	str.w	r8, [sp]
 800d960:	463b      	mov	r3, r7
 800d962:	aa03      	add	r2, sp, #12
 800d964:	4621      	mov	r1, r4
 800d966:	4630      	mov	r0, r6
 800d968:	f7ff fef6 	bl	800d758 <_printf_common>
 800d96c:	3001      	adds	r0, #1
 800d96e:	d14d      	bne.n	800da0c <_printf_i+0x1c8>
 800d970:	f04f 30ff 	mov.w	r0, #4294967295
 800d974:	b005      	add	sp, #20
 800d976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d97a:	4839      	ldr	r0, [pc, #228]	; (800da60 <_printf_i+0x21c>)
 800d97c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d980:	6813      	ldr	r3, [r2, #0]
 800d982:	6821      	ldr	r1, [r4, #0]
 800d984:	1d1d      	adds	r5, r3, #4
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6015      	str	r5, [r2, #0]
 800d98a:	060a      	lsls	r2, r1, #24
 800d98c:	d50b      	bpl.n	800d9a6 <_printf_i+0x162>
 800d98e:	07ca      	lsls	r2, r1, #31
 800d990:	bf44      	itt	mi
 800d992:	f041 0120 	orrmi.w	r1, r1, #32
 800d996:	6021      	strmi	r1, [r4, #0]
 800d998:	b91b      	cbnz	r3, 800d9a2 <_printf_i+0x15e>
 800d99a:	6822      	ldr	r2, [r4, #0]
 800d99c:	f022 0220 	bic.w	r2, r2, #32
 800d9a0:	6022      	str	r2, [r4, #0]
 800d9a2:	2210      	movs	r2, #16
 800d9a4:	e7b7      	b.n	800d916 <_printf_i+0xd2>
 800d9a6:	064d      	lsls	r5, r1, #25
 800d9a8:	bf48      	it	mi
 800d9aa:	b29b      	uxthmi	r3, r3
 800d9ac:	e7ef      	b.n	800d98e <_printf_i+0x14a>
 800d9ae:	4665      	mov	r5, ip
 800d9b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9b4:	fb02 3311 	mls	r3, r2, r1, r3
 800d9b8:	5cc3      	ldrb	r3, [r0, r3]
 800d9ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d9be:	460b      	mov	r3, r1
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	d1f5      	bne.n	800d9b0 <_printf_i+0x16c>
 800d9c4:	e7b9      	b.n	800d93a <_printf_i+0xf6>
 800d9c6:	6813      	ldr	r3, [r2, #0]
 800d9c8:	6825      	ldr	r5, [r4, #0]
 800d9ca:	6961      	ldr	r1, [r4, #20]
 800d9cc:	1d18      	adds	r0, r3, #4
 800d9ce:	6010      	str	r0, [r2, #0]
 800d9d0:	0628      	lsls	r0, r5, #24
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	d501      	bpl.n	800d9da <_printf_i+0x196>
 800d9d6:	6019      	str	r1, [r3, #0]
 800d9d8:	e002      	b.n	800d9e0 <_printf_i+0x19c>
 800d9da:	066a      	lsls	r2, r5, #25
 800d9dc:	d5fb      	bpl.n	800d9d6 <_printf_i+0x192>
 800d9de:	8019      	strh	r1, [r3, #0]
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	6123      	str	r3, [r4, #16]
 800d9e4:	4665      	mov	r5, ip
 800d9e6:	e7b9      	b.n	800d95c <_printf_i+0x118>
 800d9e8:	6813      	ldr	r3, [r2, #0]
 800d9ea:	1d19      	adds	r1, r3, #4
 800d9ec:	6011      	str	r1, [r2, #0]
 800d9ee:	681d      	ldr	r5, [r3, #0]
 800d9f0:	6862      	ldr	r2, [r4, #4]
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f7f2 fc0b 	bl	8000210 <memchr>
 800d9fa:	b108      	cbz	r0, 800da00 <_printf_i+0x1bc>
 800d9fc:	1b40      	subs	r0, r0, r5
 800d9fe:	6060      	str	r0, [r4, #4]
 800da00:	6863      	ldr	r3, [r4, #4]
 800da02:	6123      	str	r3, [r4, #16]
 800da04:	2300      	movs	r3, #0
 800da06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da0a:	e7a7      	b.n	800d95c <_printf_i+0x118>
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	462a      	mov	r2, r5
 800da10:	4639      	mov	r1, r7
 800da12:	4630      	mov	r0, r6
 800da14:	47c0      	blx	r8
 800da16:	3001      	adds	r0, #1
 800da18:	d0aa      	beq.n	800d970 <_printf_i+0x12c>
 800da1a:	6823      	ldr	r3, [r4, #0]
 800da1c:	079b      	lsls	r3, r3, #30
 800da1e:	d413      	bmi.n	800da48 <_printf_i+0x204>
 800da20:	68e0      	ldr	r0, [r4, #12]
 800da22:	9b03      	ldr	r3, [sp, #12]
 800da24:	4298      	cmp	r0, r3
 800da26:	bfb8      	it	lt
 800da28:	4618      	movlt	r0, r3
 800da2a:	e7a3      	b.n	800d974 <_printf_i+0x130>
 800da2c:	2301      	movs	r3, #1
 800da2e:	464a      	mov	r2, r9
 800da30:	4639      	mov	r1, r7
 800da32:	4630      	mov	r0, r6
 800da34:	47c0      	blx	r8
 800da36:	3001      	adds	r0, #1
 800da38:	d09a      	beq.n	800d970 <_printf_i+0x12c>
 800da3a:	3501      	adds	r5, #1
 800da3c:	68e3      	ldr	r3, [r4, #12]
 800da3e:	9a03      	ldr	r2, [sp, #12]
 800da40:	1a9b      	subs	r3, r3, r2
 800da42:	42ab      	cmp	r3, r5
 800da44:	dcf2      	bgt.n	800da2c <_printf_i+0x1e8>
 800da46:	e7eb      	b.n	800da20 <_printf_i+0x1dc>
 800da48:	2500      	movs	r5, #0
 800da4a:	f104 0919 	add.w	r9, r4, #25
 800da4e:	e7f5      	b.n	800da3c <_printf_i+0x1f8>
 800da50:	2b00      	cmp	r3, #0
 800da52:	d1ac      	bne.n	800d9ae <_printf_i+0x16a>
 800da54:	7803      	ldrb	r3, [r0, #0]
 800da56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da5e:	e76c      	b.n	800d93a <_printf_i+0xf6>
 800da60:	0800f68d 	.word	0x0800f68d
 800da64:	0800f69e 	.word	0x0800f69e

0800da68 <memcpy>:
 800da68:	b510      	push	{r4, lr}
 800da6a:	1e43      	subs	r3, r0, #1
 800da6c:	440a      	add	r2, r1
 800da6e:	4291      	cmp	r1, r2
 800da70:	d100      	bne.n	800da74 <memcpy+0xc>
 800da72:	bd10      	pop	{r4, pc}
 800da74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da7c:	e7f7      	b.n	800da6e <memcpy+0x6>

0800da7e <memmove>:
 800da7e:	4288      	cmp	r0, r1
 800da80:	b510      	push	{r4, lr}
 800da82:	eb01 0302 	add.w	r3, r1, r2
 800da86:	d807      	bhi.n	800da98 <memmove+0x1a>
 800da88:	1e42      	subs	r2, r0, #1
 800da8a:	4299      	cmp	r1, r3
 800da8c:	d00a      	beq.n	800daa4 <memmove+0x26>
 800da8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da92:	f802 4f01 	strb.w	r4, [r2, #1]!
 800da96:	e7f8      	b.n	800da8a <memmove+0xc>
 800da98:	4283      	cmp	r3, r0
 800da9a:	d9f5      	bls.n	800da88 <memmove+0xa>
 800da9c:	1881      	adds	r1, r0, r2
 800da9e:	1ad2      	subs	r2, r2, r3
 800daa0:	42d3      	cmn	r3, r2
 800daa2:	d100      	bne.n	800daa6 <memmove+0x28>
 800daa4:	bd10      	pop	{r4, pc}
 800daa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daaa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800daae:	e7f7      	b.n	800daa0 <memmove+0x22>

0800dab0 <_realloc_r>:
 800dab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab2:	4607      	mov	r7, r0
 800dab4:	4614      	mov	r4, r2
 800dab6:	460e      	mov	r6, r1
 800dab8:	b921      	cbnz	r1, 800dac4 <_realloc_r+0x14>
 800daba:	4611      	mov	r1, r2
 800dabc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dac0:	f7ff bc6c 	b.w	800d39c <_malloc_r>
 800dac4:	b922      	cbnz	r2, 800dad0 <_realloc_r+0x20>
 800dac6:	f7ff fc1b 	bl	800d300 <_free_r>
 800daca:	4625      	mov	r5, r4
 800dacc:	4628      	mov	r0, r5
 800dace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dad0:	f000 f814 	bl	800dafc <_malloc_usable_size_r>
 800dad4:	42a0      	cmp	r0, r4
 800dad6:	d20f      	bcs.n	800daf8 <_realloc_r+0x48>
 800dad8:	4621      	mov	r1, r4
 800dada:	4638      	mov	r0, r7
 800dadc:	f7ff fc5e 	bl	800d39c <_malloc_r>
 800dae0:	4605      	mov	r5, r0
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d0f2      	beq.n	800dacc <_realloc_r+0x1c>
 800dae6:	4631      	mov	r1, r6
 800dae8:	4622      	mov	r2, r4
 800daea:	f7ff ffbd 	bl	800da68 <memcpy>
 800daee:	4631      	mov	r1, r6
 800daf0:	4638      	mov	r0, r7
 800daf2:	f7ff fc05 	bl	800d300 <_free_r>
 800daf6:	e7e9      	b.n	800dacc <_realloc_r+0x1c>
 800daf8:	4635      	mov	r5, r6
 800dafa:	e7e7      	b.n	800dacc <_realloc_r+0x1c>

0800dafc <_malloc_usable_size_r>:
 800dafc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db00:	1f18      	subs	r0, r3, #4
 800db02:	2b00      	cmp	r3, #0
 800db04:	bfbc      	itt	lt
 800db06:	580b      	ldrlt	r3, [r1, r0]
 800db08:	18c0      	addlt	r0, r0, r3
 800db0a:	4770      	bx	lr

0800db0c <_init>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	bf00      	nop
 800db10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db12:	bc08      	pop	{r3}
 800db14:	469e      	mov	lr, r3
 800db16:	4770      	bx	lr

0800db18 <_fini>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	bf00      	nop
 800db1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1e:	bc08      	pop	{r3}
 800db20:	469e      	mov	lr, r3
 800db22:	4770      	bx	lr
