
reaction_tester_single_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d83c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b8c  0800da0c  0800da0c  0001da0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f598  0800f598  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f598  0800f598  0001f598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5a0  0800f5a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5a0  0800f5a0  0001f5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5a4  0800f5a4  0001f5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f5a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  20000074  0800f61c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001158  0800f61c  00021158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031a10  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005af8  00000000  00000000  00051ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000027c0  00000000  00000000  000575b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002520  00000000  00000000  00059d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a0a2  00000000  00000000  0005c290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027c1a  00000000  00000000  00066332  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00120059  00000000  00000000  0008df4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001adfa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000adac  00000000  00000000  001ae020  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d9f4 	.word	0x0800d9f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800d9f4 	.word	0x0800d9f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <BSP_LCD_Init+0xcc>)
 80005b6:	2228      	movs	r2, #40	; 0x28
 80005b8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <BSP_LCD_Init+0xcc>)
 80005bc:	2209      	movs	r2, #9
 80005be:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <BSP_LCD_Init+0xcc>)
 80005c2:	2235      	movs	r2, #53	; 0x35
 80005c4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <BSP_LCD_Init+0xcc>)
 80005c8:	220b      	movs	r2, #11
 80005ca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <BSP_LCD_Init+0xcc>)
 80005ce:	f240 121b 	movw	r2, #283	; 0x11b
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <BSP_LCD_Init+0xcc>)
 80005d6:	f240 2215 	movw	r2, #533	; 0x215
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <BSP_LCD_Init+0xcc>)
 80005de:	f240 121d 	movw	r2, #285	; 0x11d
 80005e2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <BSP_LCD_Init+0xcc>)
 80005e6:	f240 2235 	movw	r2, #565	; 0x235
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4823      	ldr	r0, [pc, #140]	; (800067c <BSP_LCD_Init+0xcc>)
 80005f0:	f000 fb6c 	bl	8000ccc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <BSP_LCD_Init+0xcc>)
 80005f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005fa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <BSP_LCD_Init+0xcc>)
 80005fe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000602:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <BSP_LCD_Init+0xcc>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <BSP_LCD_Init+0xcc>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <BSP_LCD_Init+0xcc>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <BSP_LCD_Init+0xcc>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <BSP_LCD_Init+0xcc>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <BSP_LCD_Init+0xcc>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <BSP_LCD_Init+0xcc>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <BSP_LCD_Init+0xcc>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <BSP_LCD_Init+0xd0>)
 8000638:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <BSP_LCD_Init+0xcc>)
 800063c:	f004 f922 	bl	8004884 <HAL_LTDC_GetState>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d103      	bne.n	800064e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8000646:	2100      	movs	r1, #0
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <BSP_LCD_Init+0xcc>)
 800064a:	f000 fa65 	bl	8000b18 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <BSP_LCD_Init+0xcc>)
 8000650:	f003 ff48 	bl	80044e4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <BSP_LCD_Init+0xd4>)
 800065c:	f002 fa0e 	bl	8002a7c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <BSP_LCD_Init+0xd8>)
 8000666:	f002 fa09 	bl	8002a7c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800066a:	f000 fc4f 	bl	8000f0c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <BSP_LCD_Init+0xdc>)
 8000670:	f000 f8c0 	bl	80007f4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000220 	.word	0x20000220
 8000680:	40016800 	.word	0x40016800
 8000684:	40022000 	.word	0x40022000
 8000688:	40022800 	.word	0x40022800
 800068c:	20000000 	.word	0x20000000

08000690 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <BSP_LCD_GetXSize+0x20>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <BSP_LCD_GetXSize+0x24>)
 800069a:	2134      	movs	r1, #52	; 0x34
 800069c:	fb01 f303 	mul.w	r3, r1, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	3360      	adds	r3, #96	; 0x60
 80006a4:	681b      	ldr	r3, [r3, #0]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	20000220 	.word	0x20000220

080006b8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <BSP_LCD_GetYSize+0x20>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <BSP_LCD_GetYSize+0x24>)
 80006c2:	2134      	movs	r1, #52	; 0x34
 80006c4:	fb01 f303 	mul.w	r3, r1, r3
 80006c8:	4413      	add	r3, r2
 80006ca:	3364      	adds	r3, #100	; 0x64
 80006cc:	681b      	ldr	r3, [r3, #0]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	200000d0 	.word	0x200000d0
 80006dc:	20000220 	.word	0x20000220

080006e0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b090      	sub	sp, #64	; 0x40
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80006f0:	f7ff ffce 	bl	8000690 <BSP_LCD_GetXSize>
 80006f4:	4603      	mov	r3, r0
 80006f6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80006fc:	f7ff ffdc 	bl	80006b8 <BSP_LCD_GetYSize>
 8000700:	4603      	mov	r3, r0
 8000702:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800070c:	23ff      	movs	r3, #255	; 0xff
 800070e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000726:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800072c:	2307      	movs	r3, #7
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8000730:	f7ff ffae 	bl	8000690 <BSP_LCD_GetXSize>
 8000734:	4603      	mov	r3, r0
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8000738:	f7ff ffbe 	bl	80006b8 <BSP_LCD_GetYSize>
 800073c:	4603      	mov	r3, r0
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	4812      	ldr	r0, [pc, #72]	; (8000794 <BSP_LCD_LayerDefaultInit+0xb4>)
 800074a:	f004 f85d 	bl	8004808 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	4911      	ldr	r1, [pc, #68]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	440b      	add	r3, r1
 800075c:	3304      	adds	r3, #4
 800075e:	f04f 32ff 	mov.w	r2, #4294967295
 8000762:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000764:	88fa      	ldrh	r2, [r7, #6]
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	440b      	add	r3, r1
 8000772:	3308      	adds	r3, #8
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000776:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000778:	88fa      	ldrh	r2, [r7, #6]
 800077a:	4907      	ldr	r1, [pc, #28]	; (8000798 <BSP_LCD_LayerDefaultInit+0xb8>)
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800078a:	601a      	str	r2, [r3, #0]
}
 800078c:	bf00      	nop
 800078e:	3740      	adds	r7, #64	; 0x40
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000220 	.word	0x20000220
 8000798:	200000d4 	.word	0x200000d4
 800079c:	20000000 	.word	0x20000000

080007a0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80007a8:	4a04      	ldr	r2, [pc, #16]	; (80007bc <BSP_LCD_SelectLayer+0x1c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
} 
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	200000d0 	.word	0x200000d0

080007c0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <BSP_LCD_SetBackColor+0x2c>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4908      	ldr	r1, [pc, #32]	; (80007f0 <BSP_LCD_SetBackColor+0x30>)
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	440b      	add	r3, r1
 80007d8:	3304      	adds	r3, #4
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200000d0 	.word	0x200000d0
 80007f0:	200000d4 	.word	0x200000d4

080007f4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <BSP_LCD_SetFont+0x2c>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4908      	ldr	r1, [pc, #32]	; (8000824 <BSP_LCD_SetFont+0x30>)
 8000802:	4613      	mov	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4413      	add	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	440b      	add	r3, r1
 800080c:	3308      	adds	r3, #8
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200000d0 	.word	0x200000d0
 8000824:	200000d4 	.word	0x200000d4

08000828 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <BSP_LCD_Clear+0x48>)
 8000832:	681c      	ldr	r4, [r3, #0]
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <BSP_LCD_Clear+0x48>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <BSP_LCD_Clear+0x4c>)
 800083a:	2134      	movs	r1, #52	; 0x34
 800083c:	fb01 f303 	mul.w	r3, r1, r3
 8000840:	4413      	add	r3, r2
 8000842:	335c      	adds	r3, #92	; 0x5c
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	461d      	mov	r5, r3
 8000848:	f7ff ff22 	bl	8000690 <BSP_LCD_GetXSize>
 800084c:	4606      	mov	r6, r0
 800084e:	f7ff ff33 	bl	80006b8 <BSP_LCD_GetYSize>
 8000852:	4602      	mov	r2, r0
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	2300      	movs	r3, #0
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4613      	mov	r3, r2
 800085e:	4632      	mov	r2, r6
 8000860:	4629      	mov	r1, r5
 8000862:	4620      	mov	r0, r4
 8000864:	f000 fb06 	bl	8000e74 <LL_FillBuffer>
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000870:	200000d0 	.word	0x200000d0
 8000874:	20000220 	.word	0x20000220

08000878 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
 8000882:	460b      	mov	r3, r1
 8000884:	80bb      	strh	r3, [r7, #4]
 8000886:	4613      	mov	r3, r2
 8000888:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <BSP_LCD_DisplayChar+0x80>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	491b      	ldr	r1, [pc, #108]	; (80008fc <BSP_LCD_DisplayChar+0x84>)
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	440b      	add	r3, r1
 800089a:	3308      	adds	r3, #8
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <BSP_LCD_DisplayChar+0x80>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4c14      	ldr	r4, [pc, #80]	; (80008fc <BSP_LCD_DisplayChar+0x84>)
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4423      	add	r3, r4
 80008b6:	3308      	adds	r3, #8
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80008bc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <BSP_LCD_DisplayChar+0x80>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4c0d      	ldr	r4, [pc, #52]	; (80008fc <BSP_LCD_DisplayChar+0x84>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4423      	add	r3, r4
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	889b      	ldrh	r3, [r3, #4]
 80008d6:	3307      	adds	r3, #7
 80008d8:	2b00      	cmp	r3, #0
 80008da:	da00      	bge.n	80008de <BSP_LCD_DisplayChar+0x66>
 80008dc:	3307      	adds	r3, #7
 80008de:	10db      	asrs	r3, r3, #3
 80008e0:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80008e4:	18ca      	adds	r2, r1, r3
 80008e6:	88b9      	ldrh	r1, [r7, #4]
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fa0a 	bl	8000d04 <DrawChar>
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	200000d0 	.word	0x200000d0
 80008fc:	200000d4 	.word	0x200000d4

08000900 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000900:	b5b0      	push	{r4, r5, r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0
 8000906:	60ba      	str	r2, [r7, #8]
 8000908:	461a      	mov	r2, r3
 800090a:	4603      	mov	r3, r0
 800090c:	81fb      	strh	r3, [r7, #14]
 800090e:	460b      	mov	r3, r1
 8000910:	81bb      	strh	r3, [r7, #12]
 8000912:	4613      	mov	r3, r2
 8000914:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8000916:	2301      	movs	r3, #1
 8000918:	83fb      	strh	r3, [r7, #30]
 800091a:	2300      	movs	r3, #0
 800091c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800092a:	e002      	b.n	8000932 <BSP_LCD_DisplayStringAt+0x32>
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	3301      	adds	r3, #1
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	617a      	str	r2, [r7, #20]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1f6      	bne.n	800092c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800093e:	f7ff fea7 	bl	8000690 <BSP_LCD_GetXSize>
 8000942:	4b4f      	ldr	r3, [pc, #316]	; (8000a80 <BSP_LCD_DisplayStringAt+0x180>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	494f      	ldr	r1, [pc, #316]	; (8000a84 <BSP_LCD_DisplayStringAt+0x184>)
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	440b      	add	r3, r1
 8000952:	3308      	adds	r3, #8
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	889b      	ldrh	r3, [r3, #4]
 8000958:	fbb0 f3f3 	udiv	r3, r0, r3
 800095c:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d01c      	beq.n	800099e <BSP_LCD_DisplayStringAt+0x9e>
 8000964:	2b03      	cmp	r3, #3
 8000966:	d017      	beq.n	8000998 <BSP_LCD_DisplayStringAt+0x98>
 8000968:	2b01      	cmp	r3, #1
 800096a:	d12e      	bne.n	80009ca <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	1ad1      	subs	r1, r2, r3
 8000972:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <BSP_LCD_DisplayStringAt+0x180>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4843      	ldr	r0, [pc, #268]	; (8000a84 <BSP_LCD_DisplayStringAt+0x184>)
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4403      	add	r3, r0
 8000982:	3308      	adds	r3, #8
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	889b      	ldrh	r3, [r3, #4]
 8000988:	fb03 f301 	mul.w	r3, r3, r1
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	b29a      	uxth	r2, r3
 8000990:	89fb      	ldrh	r3, [r7, #14]
 8000992:	4413      	add	r3, r2
 8000994:	83fb      	strh	r3, [r7, #30]
      break;
 8000996:	e01b      	b.n	80009d0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8000998:	89fb      	ldrh	r3, [r7, #14]
 800099a:	83fb      	strh	r3, [r7, #30]
      break;
 800099c:	e018      	b.n	80009d0 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	b299      	uxth	r1, r3
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <BSP_LCD_DisplayStringAt+0x180>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4836      	ldr	r0, [pc, #216]	; (8000a84 <BSP_LCD_DisplayStringAt+0x184>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4403      	add	r3, r0
 80009b6:	3308      	adds	r3, #8
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	889b      	ldrh	r3, [r3, #4]
 80009bc:	fb11 f303 	smulbb	r3, r1, r3
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	83fb      	strh	r3, [r7, #30]
      break;
 80009c8:	e002      	b.n	80009d0 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	83fb      	strh	r3, [r7, #30]
      break;
 80009ce:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80009d0:	8bfb      	ldrh	r3, [r7, #30]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <BSP_LCD_DisplayStringAt+0xde>
 80009d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	da1d      	bge.n	8000a1a <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80009e2:	e01a      	b.n	8000a1a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	89b9      	ldrh	r1, [r7, #12]
 80009ea:	8bfb      	ldrh	r3, [r7, #30]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff43 	bl	8000878 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80009f2:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <BSP_LCD_DisplayStringAt+0x180>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4923      	ldr	r1, [pc, #140]	; (8000a84 <BSP_LCD_DisplayStringAt+0x184>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	3308      	adds	r3, #8
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	889a      	ldrh	r2, [r3, #4]
 8000a08:	8bfb      	ldrh	r3, [r7, #30]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	3301      	adds	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
    i++;
 8000a14:	8bbb      	ldrh	r3, [r7, #28]
 8000a16:	3301      	adds	r3, #1
 8000a18:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2dc      	uxtb	r4, r3
 8000a28:	f7ff fe32 	bl	8000690 <BSP_LCD_GetXSize>
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	8bb9      	ldrh	r1, [r7, #28]
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <BSP_LCD_DisplayStringAt+0x180>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <BSP_LCD_DisplayStringAt+0x184>)
 8000a36:	4613      	mov	r3, r2
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4403      	add	r3, r0
 8000a40:	3308      	adds	r3, #8
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	889b      	ldrh	r3, [r3, #4]
 8000a46:	fb03 f301 	mul.w	r3, r3, r1
 8000a4a:	1aeb      	subs	r3, r5, r3
 8000a4c:	b299      	uxth	r1, r3
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <BSP_LCD_DisplayStringAt+0x180>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <BSP_LCD_DisplayStringAt+0x184>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4403      	add	r3, r0
 8000a5e:	3308      	adds	r3, #8
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	4299      	cmp	r1, r3
 8000a66:	bf2c      	ite	cs
 8000a68:	2301      	movcs	r3, #1
 8000a6a:	2300      	movcc	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4023      	ands	r3, r4
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1b6      	bne.n	80009e4 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000d0 	.word	0x200000d0
 8000a84:	200000d4 	.word	0x200000d4

08000a88 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000a88:	b5b0      	push	{r4, r5, r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	603a      	str	r2, [r7, #0]
 8000a92:	80fb      	strh	r3, [r7, #6]
 8000a94:	460b      	mov	r3, r1
 8000a96:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <BSP_LCD_DrawPixel+0x88>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <BSP_LCD_DrawPixel+0x8c>)
 8000a9e:	2134      	movs	r1, #52	; 0x34
 8000aa0:	fb01 f303 	mul.w	r3, r1, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	3348      	adds	r3, #72	; 0x48
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d116      	bne.n	8000adc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <BSP_LCD_DrawPixel+0x88>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <BSP_LCD_DrawPixel+0x8c>)
 8000ab4:	2134      	movs	r1, #52	; 0x34
 8000ab6:	fb01 f303 	mul.w	r3, r1, r3
 8000aba:	4413      	add	r3, r2
 8000abc:	335c      	adds	r3, #92	; 0x5c
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	88bd      	ldrh	r5, [r7, #4]
 8000ac2:	f7ff fde5 	bl	8000690 <BSP_LCD_GetXSize>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	fb03 f205 	mul.w	r2, r3, r5
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	4413      	add	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4423      	add	r3, r4
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8000ada:	e015      	b.n	8000b08 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <BSP_LCD_DrawPixel+0x88>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <BSP_LCD_DrawPixel+0x8c>)
 8000ae2:	2134      	movs	r1, #52	; 0x34
 8000ae4:	fb01 f303 	mul.w	r3, r1, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	335c      	adds	r3, #92	; 0x5c
 8000aec:	681c      	ldr	r4, [r3, #0]
 8000aee:	88bd      	ldrh	r5, [r7, #4]
 8000af0:	f7ff fdce 	bl	8000690 <BSP_LCD_GetXSize>
 8000af4:	4603      	mov	r3, r0
 8000af6:	fb03 f205 	mul.w	r2, r3, r5
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	4413      	add	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4423      	add	r3, r4
 8000b02:	461a      	mov	r2, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b10:	200000d0 	.word	0x200000d0
 8000b14:	20000220 	.word	0x20000220

08000b18 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b090      	sub	sp, #64	; 0x40
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b22:	4b64      	ldr	r3, [pc, #400]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a63      	ldr	r2, [pc, #396]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b61      	ldr	r3, [pc, #388]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b3a:	4b5e      	ldr	r3, [pc, #376]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a5d      	ldr	r2, [pc, #372]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b5b      	ldr	r3, [pc, #364]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6a:	4b52      	ldr	r3, [pc, #328]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a51      	ldr	r2, [pc, #324]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b82:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a4b      	ldr	r2, [pc, #300]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b9a:	4b46      	ldr	r3, [pc, #280]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a45      	ldr	r2, [pc, #276]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a3f      	ldr	r2, [pc, #252]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a39      	ldr	r2, [pc, #228]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <BSP_LCD_MspInit+0x19c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8000c06:	2302      	movs	r3, #2
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8000c0a:	230e      	movs	r3, #14
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <BSP_LCD_MspInit+0x1a0>)
 8000c16:	f001 fd87 	bl	8002728 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8000c24:	2309      	movs	r3, #9
 8000c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4823      	ldr	r0, [pc, #140]	; (8000cbc <BSP_LCD_MspInit+0x1a4>)
 8000c30:	f001 fd7a 	bl	8002728 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8000c34:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c3e:	230e      	movs	r3, #14
 8000c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c46:	4619      	mov	r1, r3
 8000c48:	481d      	ldr	r0, [pc, #116]	; (8000cc0 <BSP_LCD_MspInit+0x1a8>)
 8000c4a:	f001 fd6d 	bl	8002728 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8000c4e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c58:	230e      	movs	r3, #14
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8000c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c60:	4619      	mov	r1, r3
 8000c62:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <BSP_LCD_MspInit+0x1ac>)
 8000c64:	f001 fd60 	bl	8002728 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8000c68:	23f7      	movs	r3, #247	; 0xf7
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8000c70:	230e      	movs	r3, #14
 8000c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8000c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <BSP_LCD_MspInit+0x1b0>)
 8000c7c:	f001 fd54 	bl	8002728 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8000c8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <BSP_LCD_MspInit+0x1a8>)
 8000c92:	f001 fd49 	bl	8002728 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8000c96:	2308      	movs	r3, #8
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <BSP_LCD_MspInit+0x1b0>)
 8000ca6:	f001 fd3f 	bl	8002728 <HAL_GPIO_Init>
}
 8000caa:	bf00      	nop
 8000cac:	3740      	adds	r7, #64	; 0x40
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40021800 	.word	0x40021800
 8000cc0:	40022000 	.word	0x40022000
 8000cc4:	40022400 	.word	0x40022400
 8000cc8:	40022800 	.word	0x40022800

08000ccc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <BSP_LCD_ClockConfig+0x34>)
 8000cd8:	2208      	movs	r2, #8
 8000cda:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <BSP_LCD_ClockConfig+0x34>)
 8000cde:	22c0      	movs	r2, #192	; 0xc0
 8000ce0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <BSP_LCD_ClockConfig+0x34>)
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <BSP_LCD_ClockConfig+0x34>)
 8000cea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <BSP_LCD_ClockConfig+0x34>)
 8000cf2:	f004 fcff 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000ec 	.word	0x200000ec

08000d04 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	603a      	str	r2, [r7, #0]
 8000d0e:	80fb      	strh	r3, [r7, #6]
 8000d10:	460b      	mov	r3, r1
 8000d12:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8000d1c:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <DrawChar+0x168>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4953      	ldr	r1, [pc, #332]	; (8000e70 <DrawChar+0x16c>)
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	88db      	ldrh	r3, [r3, #6]
 8000d32:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000d34:	4b4d      	ldr	r3, [pc, #308]	; (8000e6c <DrawChar+0x168>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	494d      	ldr	r1, [pc, #308]	; (8000e70 <DrawChar+0x16c>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	3308      	adds	r3, #8
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	889b      	ldrh	r3, [r3, #4]
 8000d4a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8000d4c:	8a3b      	ldrh	r3, [r7, #16]
 8000d4e:	3307      	adds	r3, #7
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	da00      	bge.n	8000d56 <DrawChar+0x52>
 8000d54:	3307      	adds	r3, #7
 8000d56:	10db      	asrs	r3, r3, #3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	8a3b      	ldrh	r3, [r7, #16]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e076      	b.n	8000e5a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000d6c:	8a3b      	ldrh	r3, [r7, #16]
 8000d6e:	3307      	adds	r3, #7
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	da00      	bge.n	8000d76 <DrawChar+0x72>
 8000d74:	3307      	adds	r3, #7
 8000d76:	10db      	asrs	r3, r3, #3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fb03 f302 	mul.w	r3, r3, r2
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8000d86:	8a3b      	ldrh	r3, [r7, #16]
 8000d88:	3307      	adds	r3, #7
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	da00      	bge.n	8000d90 <DrawChar+0x8c>
 8000d8e:	3307      	adds	r3, #7
 8000d90:	10db      	asrs	r3, r3, #3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d002      	beq.n	8000d9c <DrawChar+0x98>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d004      	beq.n	8000da4 <DrawChar+0xa0>
 8000d9a:	e00c      	b.n	8000db6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	617b      	str	r3, [r7, #20]
      break;
 8000da2:	e016      	b.n	8000dd2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	021b      	lsls	r3, r3, #8
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	3201      	adds	r2, #1
 8000dae:	7812      	ldrb	r2, [r2, #0]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	617b      	str	r3, [r7, #20]
      break;
 8000db4:	e00d      	b.n	8000dd2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	041a      	lsls	r2, r3, #16
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	3202      	adds	r2, #2
 8000dca:	7812      	ldrb	r2, [r2, #0]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
      break;
 8000dd0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	e036      	b.n	8000e46 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8000dd8:	8a3a      	ldrh	r2, [r7, #16]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	1ad2      	subs	r2, r2, r3
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	4413      	add	r3, r2
 8000de2:	3b01      	subs	r3, #1
 8000de4:	2201      	movs	r2, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d012      	beq.n	8000e1a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b298      	uxth	r0, r3
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <DrawChar+0x168>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	491b      	ldr	r1, [pc, #108]	; (8000e70 <DrawChar+0x16c>)
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	4619      	mov	r1, r3
 8000e14:	f7ff fe38 	bl	8000a88 <BSP_LCD_DrawPixel>
 8000e18:	e012      	b.n	8000e40 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	4413      	add	r3, r2
 8000e22:	b298      	uxth	r0, r3
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <DrawChar+0x168>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4911      	ldr	r1, [pc, #68]	; (8000e70 <DrawChar+0x16c>)
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4413      	add	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	3304      	adds	r3, #4
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	88bb      	ldrh	r3, [r7, #4]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fe24 	bl	8000a88 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	3301      	adds	r3, #1
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	8a3b      	ldrh	r3, [r7, #16]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3c4      	bcc.n	8000dd8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	3301      	adds	r3, #1
 8000e52:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	3301      	adds	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	8a7b      	ldrh	r3, [r7, #18]
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d384      	bcc.n	8000d6c <DrawChar+0x68>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000d0 	.word	0x200000d0
 8000e70:	200000d4 	.word	0x200000d4

08000e74 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <LL_FillBuffer+0x88>)
 8000e84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e88:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <LL_FillBuffer+0x8c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <LL_FillBuffer+0x90>)
 8000e90:	2134      	movs	r1, #52	; 0x34
 8000e92:	fb01 f303 	mul.w	r3, r1, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	3348      	adds	r3, #72	; 0x48
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d103      	bne.n	8000ea8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <LL_FillBuffer+0x88>)
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	e002      	b.n	8000eae <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <LL_FillBuffer+0x88>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8000eae:	4a13      	ldr	r2, [pc, #76]	; (8000efc <LL_FillBuffer+0x88>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <LL_FillBuffer+0x88>)
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <LL_FillBuffer+0x94>)
 8000eb8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8000eba:	4810      	ldr	r0, [pc, #64]	; (8000efc <LL_FillBuffer+0x88>)
 8000ebc:	f001 f898 	bl	8001ff0 <HAL_DMA2D_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d115      	bne.n	8000ef2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8000ec6:	68f9      	ldr	r1, [r7, #12]
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LL_FillBuffer+0x88>)
 8000eca:	f001 faff 	bl	80024cc <HAL_DMA2D_ConfigLayer>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10e      	bne.n	8000ef2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69f9      	ldr	r1, [r7, #28]
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <LL_FillBuffer+0x88>)
 8000ee0:	f001 f8d0 	bl	8002084 <HAL_DMA2D_Start>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d103      	bne.n	8000ef2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8000eea:	210a      	movs	r1, #10
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <LL_FillBuffer+0x88>)
 8000eee:	f001 f8f4 	bl	80020da <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000090 	.word	0x20000090
 8000f00:	200000d0 	.word	0x200000d0
 8000f04:	20000220 	.word	0x20000220
 8000f08:	4002b000 	.word	0x4002b000

08000f0c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f12:	4a2a      	ldr	r2, [pc, #168]	; (8000fbc <BSP_SDRAM_Init+0xb0>)
 8000f14:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <BSP_SDRAM_Init+0xb4>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <BSP_SDRAM_Init+0xb4>)
 8000f1e:	2207      	movs	r2, #7
 8000f20:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <BSP_SDRAM_Init+0xb4>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8000f28:	4b25      	ldr	r3, [pc, #148]	; (8000fc0 <BSP_SDRAM_Init+0xb4>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <BSP_SDRAM_Init+0xb4>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <BSP_SDRAM_Init+0xb4>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <BSP_SDRAM_Init+0xb4>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8000f52:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f54:	2210      	movs	r2, #16
 8000f56:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f5a:	2240      	movs	r2, #64	; 0x40
 8000f5c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f72:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8000f82:	2100      	movs	r1, #0
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f86:	f000 f87f 	bl	8001088 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <BSP_SDRAM_Init+0xb4>)
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <BSP_SDRAM_Init+0xac>)
 8000f8e:	f005 fecb 	bl	8006d28 <HAL_SDRAM_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <BSP_SDRAM_Init+0xb8>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e002      	b.n	8000fa6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <BSP_SDRAM_Init+0xb8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8000fa6:	f240 6003 	movw	r0, #1539	; 0x603
 8000faa:	f000 f80d 	bl	8000fc8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <BSP_SDRAM_Init+0xb8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002c8 	.word	0x200002c8
 8000fbc:	a0000140 	.word	0xa0000140
 8000fc0:	20000170 	.word	0x20000170
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8000fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff0:	4923      	ldr	r1, [pc, #140]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8000ff2:	4824      	ldr	r0, [pc, #144]	; (8001084 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8000ff4:	f005 fecc 	bl	8006d90 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f000 f96b 	bl	80012d4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001000:	2202      	movs	r2, #2
 8001002:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001006:	2210      	movs	r2, #16
 8001008:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800100c:	2201      	movs	r2, #1
 800100e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101a:	4919      	ldr	r1, [pc, #100]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800101c:	4819      	ldr	r0, [pc, #100]	; (8001084 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800101e:	f005 feb7 	bl	8006d90 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001024:	2203      	movs	r2, #3
 8001026:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800102a:	2210      	movs	r2, #16
 800102c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001030:	2208      	movs	r2, #8
 8001032:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800103a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103e:	4910      	ldr	r1, [pc, #64]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001042:	f005 fea5 	bl	8006d90 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001046:	f44f 7308 	mov.w	r3, #544	; 0x220
 800104a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800104e:	2204      	movs	r2, #4
 8001050:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001054:	2210      	movs	r2, #16
 8001056:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800105a:	2201      	movs	r2, #1
 800105c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001062:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001068:	4905      	ldr	r1, [pc, #20]	; (8001080 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800106c:	f005 fe90 	bl	8006d90 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001074:	f005 feb7 	bl	8006de6 <HAL_SDRAM_ProgramRefreshRate>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	2000018c 	.word	0x2000018c
 8001084:	200002c8 	.word	0x200002c8

08001088 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001088:	b580      	push	{r7, lr}
 800108a:	b090      	sub	sp, #64	; 0x40
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001092:	4b70      	ldr	r3, [pc, #448]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001096:	4a6f      	ldr	r2, [pc, #444]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6393      	str	r3, [r2, #56]	; 0x38
 800109e:	4b6d      	ldr	r3, [pc, #436]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80010aa:	4b6a      	ldr	r3, [pc, #424]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a69      	ldr	r2, [pc, #420]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b64      	ldr	r3, [pc, #400]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a63      	ldr	r2, [pc, #396]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b61      	ldr	r3, [pc, #388]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a5d      	ldr	r2, [pc, #372]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b5b      	ldr	r3, [pc, #364]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f2:	4b58      	ldr	r3, [pc, #352]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a57      	ldr	r2, [pc, #348]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 80010f8:	f043 0310 	orr.w	r3, r3, #16
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b55      	ldr	r3, [pc, #340]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	61bb      	str	r3, [r7, #24]
 8001108:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800110a:	4b52      	ldr	r3, [pc, #328]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a51      	ldr	r2, [pc, #324]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001122:	4b4c      	ldr	r3, [pc, #304]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	4b46      	ldr	r3, [pc, #280]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a45      	ldr	r2, [pc, #276]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b43      	ldr	r3, [pc, #268]	; (8001254 <BSP_SDRAM_MspInit+0x1cc>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001156:	2301      	movs	r3, #1
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800115a:	2302      	movs	r3, #2
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800115e:	230c      	movs	r3, #12
 8001160:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001162:	2308      	movs	r3, #8
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116a:	4619      	mov	r1, r3
 800116c:	483a      	ldr	r0, [pc, #232]	; (8001258 <BSP_SDRAM_MspInit+0x1d0>)
 800116e:	f001 fadb 	bl	8002728 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001172:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	4837      	ldr	r0, [pc, #220]	; (800125c <BSP_SDRAM_MspInit+0x1d4>)
 8001180:	f001 fad2 	bl	8002728 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001184:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800118a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118e:	4619      	mov	r1, r3
 8001190:	4833      	ldr	r0, [pc, #204]	; (8001260 <BSP_SDRAM_MspInit+0x1d8>)
 8001192:	f001 fac9 	bl	8002728 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001196:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800119c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4830      	ldr	r0, [pc, #192]	; (8001264 <BSP_SDRAM_MspInit+0x1dc>)
 80011a4:	f001 fac0 	bl	8002728 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80011a8:	f248 1333 	movw	r3, #33075	; 0x8133
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	482c      	ldr	r0, [pc, #176]	; (8001268 <BSP_SDRAM_MspInit+0x1e0>)
 80011b6:	f001 fab7 	bl	8002728 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80011ba:	2328      	movs	r3, #40	; 0x28
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4829      	ldr	r0, [pc, #164]	; (800126c <BSP_SDRAM_MspInit+0x1e4>)
 80011c6:	f001 faaf 	bl	8002728 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 80011e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 80011e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ec:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 80011f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 80011fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001202:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 800120c:	2203      	movs	r2, #3
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 8001212:	2200      	movs	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 8001218:	2200      	movs	r2, #0
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <BSP_SDRAM_MspInit+0x1ec>)
 8001220:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a12      	ldr	r2, [pc, #72]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800122e:	4810      	ldr	r0, [pc, #64]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 8001230:	f000 fdd0 	bl	8001dd4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <BSP_SDRAM_MspInit+0x1e8>)
 8001236:	f000 fd1f 	bl	8001c78 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	210f      	movs	r1, #15
 800123e:	2038      	movs	r0, #56	; 0x38
 8001240:	f000 fb94 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001244:	2038      	movs	r0, #56	; 0x38
 8001246:	f000 fbad 	bl	80019a4 <HAL_NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3740      	adds	r7, #64	; 0x40
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40021400 	.word	0x40021400
 8001268:	40021800 	.word	0x40021800
 800126c:	40021c00 	.word	0x40021c00
 8001270:	2000019c 	.word	0x2000019c
 8001274:	40026410 	.word	0x40026410

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 fb6a 	bl	8001956 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	2000      	movs	r0, #0
 8001284:	f00b fcb2 	bl	800cbec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f00a fe1c 	bl	800bec4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000009 	.word	0x20000009
 80012b8:	200002fc 	.word	0x200002fc

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200002fc 	.word	0x200002fc

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_Delay+0x40>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000009 	.word	0x20000009

08001318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e031      	b.n	8001392 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f00a fde8 	bl	800bf0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_ADC_Init+0x84>)
 800135c:	4013      	ands	r3, r2
 800135e:	f043 0202 	orr.w	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f94e 	bl	8001608 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f023 0303 	bic.w	r3, r3, #3
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
 8001382:	e001      	b.n	8001388 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	ffffeefd 	.word	0xffffeefd

080013a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1c>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e115      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x248>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	d935      	bls.n	8001438 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68d9      	ldr	r1, [r3, #12]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4613      	mov	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	4413      	add	r3, r2
 80013e0:	3b1e      	subs	r3, #30
 80013e2:	2207      	movs	r2, #7
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43da      	mvns	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	400a      	ands	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7f      	ldr	r2, [pc, #508]	; (80015f4 <HAL_ADC_ConfigChannel+0x254>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d10a      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68d9      	ldr	r1, [r3, #12]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	061a      	lsls	r2, r3, #24
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	e035      	b.n	800147e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68d9      	ldr	r1, [r3, #12]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	4603      	mov	r3, r0
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4403      	add	r3, r0
 800142a:	3b1e      	subs	r3, #30
 800142c:	409a      	lsls	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	e022      	b.n	800147e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6919      	ldr	r1, [r3, #16]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	2207      	movs	r2, #7
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	400a      	ands	r2, r1
 800145a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6919      	ldr	r1, [r3, #16]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	4603      	mov	r3, r0
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4403      	add	r3, r0
 8001474:	409a      	lsls	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b06      	cmp	r3, #6
 8001484:	d824      	bhi.n	80014d0 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	3b05      	subs	r3, #5
 8001498:	221f      	movs	r2, #31
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	400a      	ands	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b05      	subs	r3, #5
 80014c2:	fa00 f203 	lsl.w	r2, r0, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34
 80014ce:	e04c      	b.n	800156a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d824      	bhi.n	8001522 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b23      	subs	r3, #35	; 0x23
 80014ea:	221f      	movs	r2, #31
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43da      	mvns	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	400a      	ands	r2, r1
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	3b23      	subs	r3, #35	; 0x23
 8001514:	fa00 f203 	lsl.w	r2, r0, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
 8001520:	e023      	b.n	800156a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	3b41      	subs	r3, #65	; 0x41
 8001534:	221f      	movs	r2, #31
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	3b41      	subs	r3, #65	; 0x41
 800155e:	fa00 f203 	lsl.w	r2, r0, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_ADC_ConfigChannel+0x258>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d109      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1e8>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b12      	cmp	r3, #18
 800157a:	d105      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_ADC_ConfigChannel+0x25c>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <HAL_ADC_ConfigChannel+0x25c>)
 8001582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001586:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_ADC_ConfigChannel+0x258>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d125      	bne.n	80015de <HAL_ADC_ConfigChannel+0x23e>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <HAL_ADC_ConfigChannel+0x254>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x204>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b11      	cmp	r3, #17
 80015a2:	d11c      	bne.n	80015de <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_ADC_ConfigChannel+0x25c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_ADC_ConfigChannel+0x25c>)
 80015aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ae:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_ADC_ConfigChannel+0x254>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d111      	bne.n	80015de <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_ADC_ConfigChannel+0x260>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_ADC_ConfigChannel+0x264>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9a      	lsrs	r2, r3, #18
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	10000012 	.word	0x10000012
 80015f8:	40012000 	.word	0x40012000
 80015fc:	40012300 	.word	0x40012300
 8001600:	2000000c 	.word	0x2000000c
 8001604:	431bde83 	.word	0x431bde83

08001608 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001610:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <ADC_Init+0x1ec>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a77      	ldr	r2, [pc, #476]	; (80017f4 <ADC_Init+0x1ec>)
 8001616:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800161a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800161c:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <ADC_Init+0x1ec>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4973      	ldr	r1, [pc, #460]	; (80017f4 <ADC_Init+0x1ec>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	021a      	lsls	r2, r3, #8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800165c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800167e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6899      	ldr	r1, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <ADC_Init+0x1f0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d022      	beq.n	80016e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6899      	ldr	r1, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6899      	ldr	r1, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e00f      	b.n	8001702 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001700:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0202 	bic.w	r2, r2, #2
 8001710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6899      	ldr	r1, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	005a      	lsls	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01b      	beq.n	8001768 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800173e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800174e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6859      	ldr	r1, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	3b01      	subs	r3, #1
 800175c:	035a      	lsls	r2, r3, #13
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	e007      	b.n	8001778 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001776:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	3b01      	subs	r3, #1
 8001794:	051a      	lsls	r2, r3, #20
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ba:	025a      	lsls	r2, r3, #9
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	029a      	lsls	r2, r3, #10
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	609a      	str	r2, [r3, #8]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40012300 	.word	0x40012300
 80017f8:	0f000001 	.word	0x0f000001

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <__NVIC_SetPriorityGrouping+0x40>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	4313      	orrs	r3, r2
 8001828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182a:	4a04      	ldr	r2, [pc, #16]	; (800183c <__NVIC_SetPriorityGrouping+0x40>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	60d3      	str	r3, [r2, #12]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00
 8001840:	05fa0000 	.word	0x05fa0000

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ff4c 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197e:	f7ff ff61 	bl	8001844 <__NVIC_GetPriorityGrouping>
 8001982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	6978      	ldr	r0, [r7, #20]
 800198a:	f7ff ffb1 	bl	80018f0 <NVIC_EncodePriority>
 800198e:	4602      	mov	r2, r0
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff80 	bl	800189c <__NVIC_SetPriority>
}
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff54 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e054      	b.n	8001a7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7f5b      	ldrb	r3, [r3, #29]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f00a fad2 	bl	800bf8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	791b      	ldrb	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a22      	ldr	r2, [pc, #136]	; (8001a84 <HAL_CRC_Init+0xc4>)
 80019fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0218 	bic.w	r2, r2, #24
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	e00c      	b.n	8001a2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6899      	ldr	r1, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f834 	bl	8001a88 <HAL_CRCEx_Polynomial_Set>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e028      	b.n	8001a7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	795b      	ldrb	r3, [r3, #5]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	e004      	b.n	8001a48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6912      	ldr	r2, [r2, #16]
 8001a46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	04c11db7 	.word	0x04c11db7

08001a88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a98:	231f      	movs	r3, #31
 8001a9a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a9c:	bf00      	nop
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	613a      	str	r2, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <HAL_CRCEx_Polynomial_Set+0x34>
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b18      	cmp	r3, #24
 8001ac0:	d846      	bhi.n	8001b50 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001b57 	.word	0x08001b57
 8001acc:	08001b51 	.word	0x08001b51
 8001ad0:	08001b51 	.word	0x08001b51
 8001ad4:	08001b51 	.word	0x08001b51
 8001ad8:	08001b51 	.word	0x08001b51
 8001adc:	08001b51 	.word	0x08001b51
 8001ae0:	08001b51 	.word	0x08001b51
 8001ae4:	08001b51 	.word	0x08001b51
 8001ae8:	08001b45 	.word	0x08001b45
 8001aec:	08001b51 	.word	0x08001b51
 8001af0:	08001b51 	.word	0x08001b51
 8001af4:	08001b51 	.word	0x08001b51
 8001af8:	08001b51 	.word	0x08001b51
 8001afc:	08001b51 	.word	0x08001b51
 8001b00:	08001b51 	.word	0x08001b51
 8001b04:	08001b51 	.word	0x08001b51
 8001b08:	08001b39 	.word	0x08001b39
 8001b0c:	08001b51 	.word	0x08001b51
 8001b10:	08001b51 	.word	0x08001b51
 8001b14:	08001b51 	.word	0x08001b51
 8001b18:	08001b51 	.word	0x08001b51
 8001b1c:	08001b51 	.word	0x08001b51
 8001b20:	08001b51 	.word	0x08001b51
 8001b24:	08001b51 	.word	0x08001b51
 8001b28:	08001b2d 	.word	0x08001b2d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d913      	bls.n	8001b5a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b36:	e010      	b.n	8001b5a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b07      	cmp	r3, #7
 8001b3c:	d90f      	bls.n	8001b5e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b42:	e00c      	b.n	8001b5e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	d90b      	bls.n	8001b62 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b4e:	e008      	b.n	8001b62 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	75fb      	strb	r3, [r7, #23]
      break;
 8001b54:	e006      	b.n	8001b64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b56:	bf00      	nop
 8001b58:	e004      	b.n	8001b64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b5a:	bf00      	nop
 8001b5c:	e002      	b.n	8001b64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b5e:	bf00      	nop
 8001b60:	e000      	b.n	8001b64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b62:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10d      	bne.n	8001b86 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 0118 	bic.w	r1, r3, #24
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e062      	b.n	8001c6c <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f00a fa0a 	bl	800bfcc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_DCMI_Init+0xe0>)
 8001bcc:	400b      	ands	r3, r1
 8001bce:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001be4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001bf0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001bfc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8001c08:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8001c14:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d112      	bne.n	8001c4c <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7f1b      	ldrb	r3, [r3, #28]
 8001c2a:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7f5b      	ldrb	r3, [r3, #29]
 8001c30:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001c32:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7f9b      	ldrb	r3, [r3, #30]
 8001c38:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001c3a:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7fdb      	ldrb	r3, [r3, #31]
 8001c42:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001c48:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001c4a:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 021e 	orr.w	r2, r2, #30
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	ffe0f007 	.word	0xffe0f007

08001c78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff fb1a 	bl	80012bc <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e099      	b.n	8001dc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb4:	e00f      	b.n	8001cd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb6:	f7ff fb01 	bl	80012bc <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d908      	bls.n	8001cd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e078      	b.n	8001dc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e8      	bne.n	8001cb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_DMA_Init+0x158>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d107      	bne.n	8001d40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f023 0307 	bic.w	r3, r3, #7
 8001d56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d117      	bne.n	8001d9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00e      	beq.n	8001d9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8bd 	bl	8001efc <DMA_CheckFifoParam>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2240      	movs	r2, #64	; 0x40
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d96:	2301      	movs	r3, #1
 8001d98:	e016      	b.n	8001dc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f874 	bl	8001e90 <DMA_CalcBaseAndBitshift>
 8001da8:	4603      	mov	r3, r0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	223f      	movs	r2, #63	; 0x3f
 8001db2:	409a      	lsls	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	f010803f 	.word	0xf010803f

08001dd4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e050      	b.n	8001e88 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d101      	bne.n	8001df6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	e048      	b.n	8001e88 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2221      	movs	r2, #33	; 0x21
 8001e34:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f82a 	bl	8001e90 <DMA_CalcBaseAndBitshift>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	223f      	movs	r2, #63	; 0x3f
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	3b10      	subs	r3, #16
 8001ea0:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <DMA_CalcBaseAndBitshift+0x60>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d908      	bls.n	8001ed0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	1d1a      	adds	r2, r3, #4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	659a      	str	r2, [r3, #88]	; 0x58
 8001ece:	e006      	b.n	8001ede <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	aaaaaaab 	.word	0xaaaaaaab
 8001ef4:	0800f544 	.word	0x0800f544
 8001ef8:	fffffc00 	.word	0xfffffc00

08001efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11f      	bne.n	8001f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d855      	bhi.n	8001fc8 <DMA_CheckFifoParam+0xcc>
 8001f1c:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <DMA_CheckFifoParam+0x28>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001f47 	.word	0x08001f47
 8001f2c:	08001f35 	.word	0x08001f35
 8001f30:	08001fc9 	.word	0x08001fc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d045      	beq.n	8001fcc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f44:	e042      	b.n	8001fcc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f4e:	d13f      	bne.n	8001fd0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f54:	e03c      	b.n	8001fd0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f5e:	d121      	bne.n	8001fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d836      	bhi.n	8001fd4 <DMA_CheckFifoParam+0xd8>
 8001f66:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <DMA_CheckFifoParam+0x70>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001f83 	.word	0x08001f83
 8001f74:	08001f7d 	.word	0x08001f7d
 8001f78:	08001f95 	.word	0x08001f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f80:	e02f      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d024      	beq.n	8001fd8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f92:	e021      	b.n	8001fd8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f9c:	d11e      	bne.n	8001fdc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fa2:	e01b      	b.n	8001fdc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d902      	bls.n	8001fb0 <DMA_CheckFifoParam+0xb4>
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d003      	beq.n	8001fb6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fae:	e018      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb4:	e015      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00e      	beq.n	8001fe0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc6:	e00b      	b.n	8001fe0 <DMA_CheckFifoParam+0xe4>
      break;
 8001fc8:	bf00      	nop
 8001fca:	e00a      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fcc:	bf00      	nop
 8001fce:	e008      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fd0:	bf00      	nop
 8001fd2:	e006      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fd4:	bf00      	nop
 8001fd6:	e004      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fd8:	bf00      	nop
 8001fda:	e002      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001fdc:	bf00      	nop
 8001fde:	e000      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fe0:	bf00      	nop
    }
  } 
  
  return status; 
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e039      	b.n	8002076 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f00a f896 	bl	800c148 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002040:	f023 0107 	bic.w	r1, r3, #7
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_DMA2D_Init+0x90>)
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68d1      	ldr	r1, [r2, #12]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	430b      	orrs	r3, r1
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	ffffc000 	.word	0xffffc000

08002084 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_DMA2D_Start+0x1c>
 800209c:	2302      	movs	r3, #2
 800209e:	e018      	b.n	80020d2 <HAL_DMA2D_Start+0x4e>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fa98 	bl	80025f0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d056      	beq.n	80021a4 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80020f6:	f7ff f8e1 	bl	80012bc <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80020fc:	e04b      	b.n	8002196 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800210c:	2b00      	cmp	r3, #0
 800210e:	d023      	beq.n	8002158 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211e:	f043 0202 	orr.w	r2, r3, #2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2221      	movs	r2, #33	; 0x21
 8002142:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2204      	movs	r2, #4
 8002148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0a5      	b.n	80022a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d01a      	beq.n	8002196 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002160:	f7ff f8ac 	bl	80012bc <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d302      	bcc.n	8002176 <HAL_DMA2D_PollForTransfer+0x9c>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2203      	movs	r2, #3
 8002186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e086      	b.n	80022a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ac      	beq.n	80020fe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d061      	beq.n	800228a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80021c6:	f7ff f879 	bl	80012bc <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80021cc:	e056      	b.n	800227c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02e      	beq.n	800223e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	f043 0204 	orr.w	r2, r3, #4
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	f043 0202 	orr.w	r2, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2229      	movs	r2, #41	; 0x29
 8002228:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2204      	movs	r2, #4
 800222e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e032      	b.n	80022a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d01a      	beq.n	800227c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002246:	f7ff f839 	bl	80012bc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d302      	bcc.n	800225c <HAL_DMA2D_PollForTransfer+0x182>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10f      	bne.n	800227c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2203      	movs	r2, #3
 800226c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e013      	b.n	80022a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0a1      	beq.n	80021ce <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2212      	movs	r2, #18
 8002290:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d026      	beq.n	800231c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d021      	beq.n	800231c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2201      	movs	r2, #1
 80022fa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2204      	movs	r2, #4
 8002300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d026      	beq.n	8002374 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d021      	beq.n	8002374 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800233e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2220      	movs	r2, #32
 8002346:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	f043 0202 	orr.w	r2, r3, #2
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2204      	movs	r2, #4
 8002358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d026      	beq.n	80023cc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002384:	2b00      	cmp	r3, #0
 8002386:	d021      	beq.n	80023cc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002396:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2208      	movs	r2, #8
 800239e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2204      	movs	r2, #4
 80023b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d013      	beq.n	80023fe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2204      	movs	r2, #4
 80023f6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f853 	bl	80024a4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d024      	beq.n	8002452 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01f      	beq.n	8002452 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002420:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2202      	movs	r2, #2
 8002428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01f      	beq.n	800249c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01a      	beq.n	800249c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002474:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2210      	movs	r2, #16
 800247c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f80e 	bl	80024b8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_DMA2D_ConfigLayer+0x20>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e079      	b.n	80025e0 <HAL_DMA2D_ConfigLayer+0x114>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	3318      	adds	r3, #24
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002516:	4b35      	ldr	r3, [pc, #212]	; (80025ec <HAL_DMA2D_ConfigLayer+0x120>)
 8002518:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b0a      	cmp	r3, #10
 8002520:	d003      	beq.n	800252a <HAL_DMA2D_ConfigLayer+0x5e>
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b09      	cmp	r3, #9
 8002528:	d107      	bne.n	800253a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	e005      	b.n	8002546 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	061b      	lsls	r3, r3, #24
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d120      	bne.n	800258e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	ea02 0103 	and.w	r1, r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	430a      	orrs	r2, r1
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b0a      	cmp	r3, #10
 8002574:	d003      	beq.n	800257e <HAL_DMA2D_ConfigLayer+0xb2>
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b09      	cmp	r3, #9
 800257c:	d127      	bne.n	80025ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
 800258c:	e01f      	b.n	80025ce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43db      	mvns	r3, r3
 8002598:	ea02 0103 	and.w	r1, r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b0a      	cmp	r3, #10
 80025b6:	d003      	beq.n	80025c0 <HAL_DMA2D_ConfigLayer+0xf4>
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d106      	bne.n	80025ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80025cc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	ff03000f 	.word	0xff03000f

080025f0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b08b      	sub	sp, #44	; 0x2c
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	041a      	lsls	r2, r3, #16
 800260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002628:	d174      	bne.n	8002714 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002630:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002638:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002640:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d108      	bne.n	8002662 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	431a      	orrs	r2, r3
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	4313      	orrs	r3, r2
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	e053      	b.n	800270a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d106      	bne.n	8002678 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4313      	orrs	r3, r2
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e048      	b.n	800270a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d111      	bne.n	80026a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	0cdb      	lsrs	r3, r3, #19
 8002684:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	0a9b      	lsrs	r3, r3, #10
 800268a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	08db      	lsrs	r3, r3, #3
 8002690:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	02db      	lsls	r3, r3, #11
 800269a:	4313      	orrs	r3, r2
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e032      	b.n	800270a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d117      	bne.n	80026dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	0fdb      	lsrs	r3, r3, #31
 80026b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	0cdb      	lsrs	r3, r3, #19
 80026b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	0adb      	lsrs	r3, r3, #11
 80026bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	029b      	lsls	r3, r3, #10
 80026cc:	431a      	orrs	r2, r3
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	03db      	lsls	r3, r3, #15
 80026d2:	4313      	orrs	r3, r2
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
 80026da:	e016      	b.n	800270a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	0f1b      	lsrs	r3, r3, #28
 80026e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	0d1b      	lsrs	r3, r3, #20
 80026e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	0b1b      	lsrs	r3, r3, #12
 80026ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	011a      	lsls	r2, r3, #4
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	431a      	orrs	r2, r3
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	031b      	lsls	r3, r3, #12
 8002702:	4313      	orrs	r3, r2
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002712:	e003      	b.n	800271c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	60da      	str	r2, [r3, #12]
}
 800271c:	bf00      	nop
 800271e:	372c      	adds	r7, #44	; 0x2c
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	e175      	b.n	8002a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	f040 8164 	bne.w	8002a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x4e>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d123      	bne.n	80027be <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	69b9      	ldr	r1, [r7, #24]
 80027ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0203 	and.w	r2, r3, #3
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d00b      	beq.n	8002812 <HAL_GPIO_Init+0xea>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002806:	2b11      	cmp	r3, #17
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b12      	cmp	r3, #18
 8002810:	d130      	bne.n	8002874 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0201 	and.w	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80be 	beq.w	8002a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a64      	ldr	r2, [pc, #400]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ca:	4a60      	ldr	r2, [pc, #384]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_GPIO_Init+0x328>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d037      	beq.n	8002966 <HAL_GPIO_Init+0x23e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <HAL_GPIO_Init+0x32c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d031      	beq.n	8002962 <HAL_GPIO_Init+0x23a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a55      	ldr	r2, [pc, #340]	; (8002a58 <HAL_GPIO_Init+0x330>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <HAL_GPIO_Init+0x236>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <HAL_GPIO_Init+0x334>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d025      	beq.n	800295a <HAL_GPIO_Init+0x232>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a53      	ldr	r2, [pc, #332]	; (8002a60 <HAL_GPIO_Init+0x338>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01f      	beq.n	8002956 <HAL_GPIO_Init+0x22e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x33c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d019      	beq.n	8002952 <HAL_GPIO_Init+0x22a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_GPIO_Init+0x340>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x226>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_GPIO_Init+0x344>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_GPIO_Init+0x222>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x348>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x21e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x34c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_GPIO_Init+0x21a>
 800293e:	2309      	movs	r3, #9
 8002940:	e012      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002942:	230a      	movs	r3, #10
 8002944:	e010      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002946:	2308      	movs	r3, #8
 8002948:	e00e      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294a:	2307      	movs	r3, #7
 800294c:	e00c      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294e:	2306      	movs	r3, #6
 8002950:	e00a      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002952:	2305      	movs	r3, #5
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002978:	4934      	ldr	r1, [pc, #208]	; (8002a4c <HAL_GPIO_Init+0x324>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002986:	4b3c      	ldr	r3, [pc, #240]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029aa:	4a33      	ldr	r2, [pc, #204]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d4:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f ae86 	bls.w	8002748 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3724      	adds	r7, #36	; 0x24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40021400 	.word	0x40021400
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	40021c00 	.word	0x40021c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40022400 	.word	0x40022400
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d104      	bne.n	8002ad2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	041a      	lsls	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f009 f982 	bl	800be0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40013c00 	.word	0x40013c00

08002b14 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af04      	add	r7, sp, #16
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	70fb      	strb	r3, [r7, #3]
 8002b26:	460b      	mov	r3, r1
 8002b28:	70bb      	strb	r3, [r7, #2]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_HCD_HC_Init+0x28>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e07f      	b.n	8002c3c <HAL_HCD_HC_Init+0x128>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	333d      	adds	r3, #61	; 0x3d
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3338      	adds	r3, #56	; 0x38
 8002b68:	787a      	ldrb	r2, [r7, #1]
 8002b6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	3340      	adds	r3, #64	; 0x40
 8002b7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b7e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3339      	adds	r3, #57	; 0x39
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	333f      	adds	r3, #63	; 0x3f
 8002ba4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ba8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	78bb      	ldrb	r3, [r7, #2]
 8002bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bb2:	b2d8      	uxtb	r0, r3
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	440b      	add	r3, r1
 8002bc0:	333a      	adds	r3, #58	; 0x3a
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002bc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	da0a      	bge.n	8002be4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	440b      	add	r3, r1
 8002bdc:	333b      	adds	r3, #59	; 0x3b
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e009      	b.n	8002bf8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	440b      	add	r3, r1
 8002bf2:	333b      	adds	r3, #59	; 0x3b
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	333c      	adds	r3, #60	; 0x3c
 8002c08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c0c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	787c      	ldrb	r4, [r7, #1]
 8002c14:	78ba      	ldrb	r2, [r7, #2]
 8002c16:	78f9      	ldrb	r1, [r7, #3]
 8002c18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c1a:	9302      	str	r3, [sp, #8]
 8002c1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4623      	mov	r3, r4
 8002c2a:	f006 f8e5 	bl	8008df8 <USB_HC_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}

08002c44 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	70fb      	strb	r3, [r7, #3]
 8002c56:	460b      	mov	r3, r1
 8002c58:	70bb      	strb	r3, [r7, #2]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	333b      	adds	r3, #59	; 0x3b
 8002c6e:	78ba      	ldrb	r2, [r7, #2]
 8002c70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	333f      	adds	r3, #63	; 0x3f
 8002c82:	787a      	ldrb	r2, [r7, #1]
 8002c84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c86:	7c3b      	ldrb	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	3342      	adds	r3, #66	; 0x42
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e009      	b.n	8002cb6 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3342      	adds	r3, #66	; 0x42
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002cb6:	787b      	ldrb	r3, [r7, #1]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	f200 80d6 	bhi.w	8002e6a <HAL_HCD_HC_SubmitRequest+0x226>
 8002cbe:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002e55 	.word	0x08002e55
 8002ccc:	08002d41 	.word	0x08002d41
 8002cd0:	08002dcb 	.word	0x08002dcb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002cd4:	7c3b      	ldrb	r3, [r7, #16]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	f040 80c9 	bne.w	8002e6e <HAL_HCD_HC_SubmitRequest+0x22a>
 8002cdc:	78bb      	ldrb	r3, [r7, #2]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 80c5 	bne.w	8002e6e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002ce4:	8b3b      	ldrh	r3, [r7, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3351      	adds	r3, #81	; 0x51
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3351      	adds	r3, #81	; 0x51
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	3342      	adds	r3, #66	; 0x42
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d28:	e0a1      	b.n	8002e6e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	3342      	adds	r3, #66	; 0x42
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	701a      	strb	r2, [r3, #0]
      break;
 8002d3e:	e096      	b.n	8002e6e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d40:	78bb      	ldrb	r3, [r7, #2]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d120      	bne.n	8002d88 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	3351      	adds	r3, #81	; 0x51
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10a      	bne.n	8002d72 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3342      	adds	r3, #66	; 0x42
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d70:	e07e      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3342      	adds	r3, #66	; 0x42
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
      break;
 8002d86:	e073      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3350      	adds	r3, #80	; 0x50
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	3342      	adds	r3, #66	; 0x42
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
      break;
 8002db2:	e05d      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3342      	adds	r3, #66	; 0x42
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	701a      	strb	r2, [r3, #0]
      break;
 8002dc8:	e052      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002dca:	78bb      	ldrb	r3, [r7, #2]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d120      	bne.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3351      	adds	r3, #81	; 0x51
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10a      	bne.n	8002dfc <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	440b      	add	r3, r1
 8002df4:	3342      	adds	r3, #66	; 0x42
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002dfa:	e039      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	3342      	adds	r3, #66	; 0x42
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
      break;
 8002e10:	e02e      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	3350      	adds	r3, #80	; 0x50
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3342      	adds	r3, #66	; 0x42
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
      break;
 8002e3c:	e018      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3342      	adds	r3, #66	; 0x42
 8002e4e:	2202      	movs	r2, #2
 8002e50:	701a      	strb	r2, [r3, #0]
      break;
 8002e52:	e00d      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	440b      	add	r3, r1
 8002e62:	3342      	adds	r3, #66	; 0x42
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
      break;
 8002e68:	e002      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002e6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3344      	adds	r3, #68	; 0x44
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	8b39      	ldrh	r1, [r7, #24]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4403      	add	r3, r0
 8002e94:	3348      	adds	r3, #72	; 0x48
 8002e96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	335c      	adds	r3, #92	; 0x5c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	440b      	add	r3, r1
 8002eba:	334c      	adds	r3, #76	; 0x4c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	3339      	adds	r3, #57	; 0x39
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	335d      	adds	r3, #93	; 0x5d
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	3338      	adds	r3, #56	; 0x38
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	18d1      	adds	r1, r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	f006 f882 	bl	800900c <USB_HC_StartXfer>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop

08002f14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f005 fea1 	bl	8008c72 <USB_GetMode>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	f040 80f1 	bne.w	800311a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f005 fe85 	bl	8008c4c <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80e7 	beq.w	8003118 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f005 fe7c 	bl	8008c4c <USB_ReadInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f5e:	d104      	bne.n	8002f6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f005 fe6c 	bl	8008c4c <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7e:	d104      	bne.n	8002f8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f005 fe5c 	bl	8008c4c <USB_ReadInterrupts>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f9e:	d104      	bne.n	8002faa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f005 fe4c 	bl	8008c4c <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d103      	bne.n	8002fc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f005 fe3e 	bl	8008c4c <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fda:	d117      	bne.n	800300c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002fea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fee:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f009 ff45 	bl	800ce80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f005 fe46 	bl	8008c8e <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800300a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fe1b 	bl	8008c4c <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003020:	d102      	bne.n	8003028 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f001 f8a6 	bl	8004174 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f005 fe0d 	bl	8008c4c <USB_ReadInterrupts>
 8003032:	4603      	mov	r3, r0
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b08      	cmp	r3, #8
 800303a:	d106      	bne.n	800304a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f009 ff03 	bl	800ce48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2208      	movs	r2, #8
 8003048:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f005 fdfc 	bl	8008c4c <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800305e:	d138      	bne.n	80030d2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f006 f915 	bl	8009294 <USB_HC_ReadInterrupt>
 800306a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e025      	b.n	80030be <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309c:	d106      	bne.n	80030ac <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8ac 	bl	8003202 <HCD_HC_IN_IRQHandler>
 80030aa:	e005      	b.n	80030b8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fc3c 	bl	8003930 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3301      	adds	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3d4      	bcc.n	8003072 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f005 fdb8 	bl	8008c4c <USB_ReadInterrupts>
 80030dc:	4603      	mov	r3, r0
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d101      	bne.n	80030ea <HAL_HCD_IRQHandler+0x1d6>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_HCD_IRQHandler+0x1d8>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d014      	beq.n	800311a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0210 	bic.w	r2, r2, #16
 80030fe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 ff8b 	bl	800401c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0210 	orr.w	r2, r2, #16
 8003114:	619a      	str	r2, [r3, #24]
 8003116:	e000      	b.n	800311a <HAL_HCD_IRQHandler+0x206>
      return;
 8003118:	bf00      	nop
    }
  }
}
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_HCD_Start+0x16>
 8003132:	2302      	movs	r3, #2
 8003134:	e013      	b.n	800315e <HAL_HCD_Start+0x3e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f005 fcba 	bl	8008abc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f005 fe01 	bl	8008d56 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_HCD_Stop+0x16>
 8003178:	2302      	movs	r3, #2
 800317a:	e00d      	b.n	8003198 <HAL_HCD_Stop+0x32>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f006 f9cf 	bl	800952c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f005 fda8 	bl	8008d02 <USB_ResetPort>
 80031b2:	4603      	mov	r3, r0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	335c      	adds	r3, #92	; 0x5c
 80031d8:	781b      	ldrb	r3, [r3, #0]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f005 fde8 	bl	8008dc8 <USB_GetHostSpeed>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b04      	cmp	r3, #4
 8003230:	d119      	bne.n	8003266 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	461a      	mov	r2, r3
 8003240:	2304      	movs	r3, #4
 8003242:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4413      	add	r3, r2
 800324c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	0151      	lsls	r1, r2, #5
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	440a      	add	r2, r1
 800325a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	60d3      	str	r3, [r2, #12]
 8003264:	e095      	b.n	8003392 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b20      	cmp	r3, #32
 800327a:	d109      	bne.n	8003290 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	2320      	movs	r3, #32
 800328c:	6093      	str	r3, [r2, #8]
 800328e:	e080      	b.n	8003392 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d134      	bne.n	8003310 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	0151      	lsls	r1, r2, #5
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	440a      	add	r2, r1
 80032bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c0:	f043 0302 	orr.w	r3, r3, #2
 80032c4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	440b      	add	r3, r1
 80032d4:	335d      	adds	r3, #93	; 0x5d
 80032d6:	2205      	movs	r2, #5
 80032d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	461a      	mov	r2, r3
 80032e8:	2310      	movs	r3, #16
 80032ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	461a      	mov	r2, r3
 80032fa:	2308      	movs	r3, #8
 80032fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f005 ffd4 	bl	80092b6 <USB_HC_Halt>
 800330e:	e040      	b.n	8003392 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003326:	d134      	bne.n	8003392 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	0151      	lsls	r1, r2, #5
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	440a      	add	r2, r1
 800333e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f005 ffaf 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003364:	461a      	mov	r2, r3
 8003366:	2310      	movs	r3, #16
 8003368:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	335d      	adds	r3, #93	; 0x5d
 800337a:	2208      	movs	r2, #8
 800337c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	461a      	mov	r2, r3
 800338c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003390:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a8:	d122      	bne.n	80033f0 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	0151      	lsls	r1, r2, #5
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	440a      	add	r2, r1
 80033c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 ff6e 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e6:	461a      	mov	r2, r3
 80033e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ec:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80033ee:	e29b      	b.n	8003928 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	f040 80c1 	bne.w	800358a <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	3348      	adds	r3, #72	; 0x48
 8003420:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	0159      	lsls	r1, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	440b      	add	r3, r1
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003434:	1ad1      	subs	r1, r2, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4403      	add	r3, r0
 8003444:	334c      	adds	r3, #76	; 0x4c
 8003446:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	335d      	adds	r3, #93	; 0x5d
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	3358      	adds	r3, #88	; 0x58
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	461a      	mov	r2, r3
 800347e:	2301      	movs	r3, #1
 8003480:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	333f      	adds	r3, #63	; 0x3f
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	333f      	adds	r3, #63	; 0x3f
 80034a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d121      	bne.n	80034f2 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	0151      	lsls	r1, r2, #5
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	440a      	add	r2, r1
 80034c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f005 feec 	bl	80092b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ea:	461a      	mov	r2, r3
 80034ec:	2310      	movs	r3, #16
 80034ee:	6093      	str	r3, [r2, #8]
 80034f0:	e034      	b.n	800355c <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	333f      	adds	r3, #63	; 0x3f
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d129      	bne.n	800355c <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4413      	add	r3, r2
 8003510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	440a      	add	r2, r1
 800351e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003526:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	335c      	adds	r3, #92	; 0x5c
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	b2d8      	uxtb	r0, r3
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	440b      	add	r3, r1
 800354e:	335c      	adds	r3, #92	; 0x5c
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	4601      	mov	r1, r0
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f009 fca0 	bl	800ce9c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	3350      	adds	r3, #80	; 0x50
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	f083 0301 	eor.w	r3, r3, #1
 8003572:	b2d8      	uxtb	r0, r3
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	440b      	add	r3, r1
 8003582:	3350      	adds	r3, #80	; 0x50
 8003584:	4602      	mov	r2, r0
 8003586:	701a      	strb	r2, [r3, #0]
}
 8003588:	e1ce      	b.n	8003928 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	f040 80f1 	bne.w	8003784 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	0151      	lsls	r1, r2, #5
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	440a      	add	r2, r1
 80035b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035bc:	f023 0302 	bic.w	r3, r3, #2
 80035c0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	335d      	adds	r3, #93	; 0x5d
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d10a      	bne.n	80035ee <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	335c      	adds	r3, #92	; 0x5c
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e0b0      	b.n	8003750 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	335d      	adds	r3, #93	; 0x5d
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d10a      	bne.n	800361a <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	335c      	adds	r3, #92	; 0x5c
 8003614:	2205      	movs	r2, #5
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e09a      	b.n	8003750 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	335d      	adds	r3, #93	; 0x5d
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b06      	cmp	r3, #6
 800362e:	d00a      	beq.n	8003646 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	335d      	adds	r3, #93	; 0x5d
 8003640:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003642:	2b08      	cmp	r3, #8
 8003644:	d156      	bne.n	80036f4 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	440b      	add	r3, r1
 8003654:	3358      	adds	r3, #88	; 0x58
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	1c59      	adds	r1, r3, #1
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4403      	add	r3, r0
 8003668:	3358      	adds	r3, #88	; 0x58
 800366a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	3358      	adds	r3, #88	; 0x58
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d914      	bls.n	80036ac <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	3358      	adds	r3, #88	; 0x58
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	440b      	add	r3, r1
 80036a4:	335c      	adds	r3, #92	; 0x5c
 80036a6:	2204      	movs	r2, #4
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e009      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	440b      	add	r3, r1
 80036ba:	335c      	adds	r3, #92	; 0x5c
 80036bc:	2202      	movs	r2, #2
 80036be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e02d      	b.n	8003750 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	335d      	adds	r3, #93	; 0x5d
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d122      	bne.n	8003750 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	440b      	add	r3, r1
 8003718:	335c      	adds	r3, #92	; 0x5c
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003734:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800373c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	461a      	mov	r2, r3
 800375e:	2302      	movs	r3, #2
 8003760:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	b2d8      	uxtb	r0, r3
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	335c      	adds	r3, #92	; 0x5c
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4601      	mov	r1, r0
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f009 fb8d 	bl	800ce9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003782:	e0d1      	b.n	8003928 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d13e      	bne.n	8003818 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	440b      	add	r3, r1
 80037c8:	3358      	adds	r3, #88	; 0x58
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1c59      	adds	r1, r3, #1
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4403      	add	r3, r0
 80037dc:	3358      	adds	r3, #88	; 0x58
 80037de:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	440b      	add	r3, r1
 80037ee:	335d      	adds	r3, #93	; 0x5d
 80037f0:	2206      	movs	r2, #6
 80037f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f005 fd59 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003810:	461a      	mov	r2, r3
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	6093      	str	r3, [r2, #8]
}
 8003816:	e087      	b.n	8003928 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d17c      	bne.n	8003928 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	333f      	adds	r3, #63	; 0x3f
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d122      	bne.n	800388a <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	3358      	adds	r3, #88	; 0x58
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	440a      	add	r2, r1
 800386e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f005 fd17 	bl	80092b6 <USB_HC_Halt>
 8003888:	e045      	b.n	8003916 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	333f      	adds	r3, #63	; 0x3f
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	333f      	adds	r3, #63	; 0x3f
 80038b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d12f      	bne.n	8003916 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	3358      	adds	r3, #88	; 0x58
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d121      	bne.n	8003916 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	440b      	add	r3, r1
 80038e0:	335d      	adds	r3, #93	; 0x5d
 80038e2:	2203      	movs	r2, #3
 80038e4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f005 fcd0 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4413      	add	r3, r2
 800391e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003922:	461a      	mov	r2, r3
 8003924:	2310      	movs	r3, #16
 8003926:	6093      	str	r3, [r2, #8]
}
 8003928:	bf00      	nop
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b04      	cmp	r3, #4
 800395e:	d119      	bne.n	8003994 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	2304      	movs	r3, #4
 8003970:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	440a      	add	r2, r1
 8003988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003992:	e33e      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d141      	bne.n	8003a2e <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b6:	461a      	mov	r2, r3
 80039b8:	2320      	movs	r3, #32
 80039ba:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	333d      	adds	r3, #61	; 0x3d
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	f040 831f 	bne.w	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	333d      	adds	r3, #61	; 0x3d
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	440b      	add	r3, r1
 80039f6:	335c      	adds	r3, #92	; 0x5c
 80039f8:	2202      	movs	r2, #2
 80039fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a16:	f043 0302 	orr.w	r3, r3, #2
 8003a1a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f005 fc45 	bl	80092b6 <USB_HC_Halt>
}
 8003a2c:	e2f1      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d13f      	bne.n	8003ac4 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	335d      	adds	r3, #93	; 0x5d
 8003a54:	2204      	movs	r2, #4
 8003a56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	440b      	add	r3, r1
 8003a66:	333d      	adds	r3, #61	; 0x3d
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	3358      	adds	r3, #88	; 0x58
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9a:	f043 0302 	orr.w	r3, r3, #2
 8003a9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f005 fc03 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	461a      	mov	r2, r3
 8003abe:	2340      	movs	r3, #64	; 0x40
 8003ac0:	6093      	str	r3, [r2, #8]
}
 8003ac2:	e2a6      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ada:	d122      	bne.n	8003b22 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f005 fbd5 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b1e:	6093      	str	r3, [r2, #8]
}
 8003b20:	e277      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d135      	bne.n	8003ba4 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	440b      	add	r3, r1
 8003b46:	3358      	adds	r3, #88	; 0x58
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f005 fb9d 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	440b      	add	r3, r1
 8003b9c:	335d      	adds	r3, #93	; 0x5d
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
}
 8003ba2:	e236      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d12b      	bne.n	8003c12 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2308      	movs	r3, #8
 8003bca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003be6:	f043 0302 	orr.w	r3, r3, #2
 8003bea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f005 fb5d 	bl	80092b6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	335d      	adds	r3, #93	; 0x5d
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	701a      	strb	r2, [r3, #0]
}
 8003c10:	e1ff      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d155      	bne.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	440b      	add	r3, r1
 8003c36:	3358      	adds	r3, #88	; 0x58
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	440b      	add	r3, r1
 8003c4a:	335d      	adds	r3, #93	; 0x5d
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	333d      	adds	r3, #61	; 0x3d
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d114      	bne.n	8003c90 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	440b      	add	r3, r1
 8003c74:	333c      	adds	r3, #60	; 0x3c
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	333d      	adds	r3, #61	; 0x3d
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f005 fafb 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2310      	movs	r3, #16
 8003cd0:	6093      	str	r3, [r2, #8]
}
 8003cd2:	e19e      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d12b      	bne.n	8003d42 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f005 face 	bl	80092b6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	440b      	add	r3, r1
 8003d28:	335d      	adds	r3, #93	; 0x5d
 8003d2a:	2206      	movs	r2, #6
 8003d2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	6093      	str	r3, [r2, #8]
}
 8003d40:	e167      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d58:	d135      	bne.n	8003dc6 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f005 fa96 	bl	80092b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d96:	461a      	mov	r2, r3
 8003d98:	2310      	movs	r3, #16
 8003d9a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da8:	461a      	mov	r2, r3
 8003daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	440b      	add	r3, r1
 8003dbe:	335d      	adds	r3, #93	; 0x5d
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	701a      	strb	r2, [r3, #0]
}
 8003dc4:	e125      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	f040 811a 	bne.w	8004012 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003df8:	f023 0302 	bic.w	r3, r3, #2
 8003dfc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	335d      	adds	r3, #93	; 0x5d
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d137      	bne.n	8003e84 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	335c      	adds	r3, #92	; 0x5c
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	440b      	add	r3, r1
 8003e36:	333f      	adds	r3, #63	; 0x3f
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d00b      	beq.n	8003e56 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	440b      	add	r3, r1
 8003e4c:	333f      	adds	r3, #63	; 0x3f
 8003e4e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	f040 80c5 	bne.w	8003fe0 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	3351      	adds	r3, #81	; 0x51
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	f083 0301 	eor.w	r3, r3, #1
 8003e6c:	b2d8      	uxtb	r0, r3
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3351      	adds	r3, #81	; 0x51
 8003e7e:	4602      	mov	r2, r0
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e0ad      	b.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	440b      	add	r3, r1
 8003e92:	335d      	adds	r3, #93	; 0x5d
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d10a      	bne.n	8003eb0 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	440b      	add	r3, r1
 8003ea8:	335c      	adds	r3, #92	; 0x5c
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e097      	b.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	440b      	add	r3, r1
 8003ebe:	335d      	adds	r3, #93	; 0x5d
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d10a      	bne.n	8003edc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	335c      	adds	r3, #92	; 0x5c
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	e081      	b.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	440b      	add	r3, r1
 8003eea:	335d      	adds	r3, #93	; 0x5d
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d10a      	bne.n	8003f08 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	335c      	adds	r3, #92	; 0x5c
 8003f02:	2205      	movs	r2, #5
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e06b      	b.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	440b      	add	r3, r1
 8003f16:	335d      	adds	r3, #93	; 0x5d
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d00a      	beq.n	8003f34 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	440b      	add	r3, r1
 8003f2c:	335d      	adds	r3, #93	; 0x5d
 8003f2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d155      	bne.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	440b      	add	r3, r1
 8003f42:	3358      	adds	r3, #88	; 0x58
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1c59      	adds	r1, r3, #1
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4403      	add	r3, r0
 8003f56:	3358      	adds	r3, #88	; 0x58
 8003f58:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	3358      	adds	r3, #88	; 0x58
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d914      	bls.n	8003f9a <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	3358      	adds	r3, #88	; 0x58
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	440b      	add	r3, r1
 8003f92:	335c      	adds	r3, #92	; 0x5c
 8003f94:	2204      	movs	r2, #4
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e009      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	335c      	adds	r3, #92	; 0x5c
 8003faa:	2202      	movs	r2, #2
 8003fac:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fc4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fcc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	461a      	mov	r2, r3
 8003fee:	2302      	movs	r3, #2
 8003ff0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	b2d8      	uxtb	r0, r3
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	440b      	add	r3, r1
 8004004:	335c      	adds	r3, #92	; 0x5c
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	4601      	mov	r1, r0
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f008 ff45 	bl	800ce9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	0c5b      	lsrs	r3, r3, #17
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004050:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d003      	beq.n	8004060 <HCD_RXQLVL_IRQHandler+0x44>
 8004058:	2b05      	cmp	r3, #5
 800405a:	f000 8082 	beq.w	8004162 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800405e:	e083      	b.n	8004168 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d07f      	beq.n	8004166 <HCD_RXQLVL_IRQHandler+0x14a>
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	440b      	add	r3, r1
 8004074:	3344      	adds	r3, #68	; 0x44
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d074      	beq.n	8004166 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	440b      	add	r3, r1
 800408e:	3344      	adds	r3, #68	; 0x44
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	b292      	uxth	r2, r2
 8004096:	4619      	mov	r1, r3
 8004098:	f004 fdaf 	bl	8008bfa <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	440b      	add	r3, r1
 80040aa:	3344      	adds	r3, #68	; 0x44
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	18d1      	adds	r1, r2, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4403      	add	r3, r0
 80040c0:	3344      	adds	r3, #68	; 0x44
 80040c2:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	334c      	adds	r3, #76	; 0x4c
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	18d1      	adds	r1, r2, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4403      	add	r3, r0
 80040e8:	334c      	adds	r3, #76	; 0x4c
 80040ea:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HCD_RXQLVL_IRQHandler+0x154>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d031      	beq.n	8004166 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004118:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004120:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	3350      	adds	r3, #80	; 0x50
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	f083 0301 	eor.w	r3, r3, #1
 800414a:	b2d8      	uxtb	r0, r3
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	440b      	add	r3, r1
 800415a:	3350      	adds	r3, #80	; 0x50
 800415c:	4602      	mov	r2, r0
 800415e:	701a      	strb	r2, [r3, #0]
      break;
 8004160:	e001      	b.n	8004166 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004162:	bf00      	nop
 8004164:	e000      	b.n	8004168 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004166:	bf00      	nop
  }
}
 8004168:	bf00      	nop
 800416a:	3728      	adds	r7, #40	; 0x28
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	1ff80000 	.word	0x1ff80000

08004174 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80041a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d113      	bne.n	80041d4 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d10a      	bne.n	80041cc <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699a      	ldr	r2, [r3, #24]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80041c4:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f008 fe4c 	bl	800ce64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f043 0302 	orr.w	r3, r3, #2
 80041d2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d147      	bne.n	800426e <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f043 0308 	orr.w	r3, r3, #8
 80041e4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d129      	bne.n	8004244 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d113      	bne.n	8004220 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004202:	d106      	bne.n	8004212 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2102      	movs	r1, #2
 800420a:	4618      	mov	r0, r3
 800420c:	f004 fd3f 	bl	8008c8e <USB_InitFSLSPClkSel>
 8004210:	e011      	b.n	8004236 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f004 fd38 	bl	8008c8e <USB_InitFSLSPClkSel>
 800421e:	e00a      	b.n	8004236 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d106      	bne.n	8004236 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422e:	461a      	mov	r2, r3
 8004230:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004234:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f008 fe3e 	bl	800ceb8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f008 fe11 	bl	800ce64 <HAL_HCD_Connect_Callback>
 8004242:	e014      	b.n	800426e <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f008 fe45 	bl	800ced4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004258:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800425c:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800426c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b20      	cmp	r3, #32
 8004276:	d103      	bne.n	8004280 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f043 0320 	orr.w	r3, r3, #32
 800427e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	bf00      	nop
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f007 ff6a 	bl	800c194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d107      	bne.n	800430e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	e006      	b.n	800431c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800431a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d104      	bne.n	800432e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800432c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <HAL_I2C_Init+0x11c>)
 800433a:	430b      	orrs	r3, r1
 800433c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800434c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	ea42 0103 	orr.w	r1, r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	021a      	lsls	r2, r3, #8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69d9      	ldr	r1, [r3, #28]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1a      	ldr	r2, [r3, #32]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	02008000 	.word	0x02008000

080043b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d138      	bne.n	800443c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e032      	b.n	800443e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2224      	movs	r2, #36	; 0x24
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004406:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6819      	ldr	r1, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	e000      	b.n	800443e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800443c:	2302      	movs	r3, #2
  }
}
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b20      	cmp	r3, #32
 800445e:	d139      	bne.n	80044d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800446a:	2302      	movs	r3, #2
 800446c:	e033      	b.n	80044d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2224      	movs	r2, #36	; 0x24
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800449c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0bf      	b.n	8004676 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f007 feba 	bl	800c284 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004526:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6999      	ldr	r1, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800453c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6899      	ldr	r1, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4b4a      	ldr	r3, [pc, #296]	; (8004680 <HAL_LTDC_Init+0x19c>)
 8004558:	400b      	ands	r3, r1
 800455a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6899      	ldr	r1, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68d9      	ldr	r1, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b3e      	ldr	r3, [pc, #248]	; (8004680 <HAL_LTDC_Init+0x19c>)
 8004586:	400b      	ands	r3, r1
 8004588:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	041b      	lsls	r3, r3, #16
 8004590:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68d9      	ldr	r1, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1a      	ldr	r2, [r3, #32]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6919      	ldr	r1, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b33      	ldr	r3, [pc, #204]	; (8004680 <HAL_LTDC_Init+0x19c>)
 80045b4:	400b      	ands	r3, r1
 80045b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6919      	ldr	r1, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6959      	ldr	r1, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b27      	ldr	r3, [pc, #156]	; (8004680 <HAL_LTDC_Init+0x19c>)
 80045e2:	400b      	ands	r3, r1
 80045e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	041b      	lsls	r3, r3, #16
 80045ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6959      	ldr	r1, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0206 	orr.w	r2, r2, #6
 8004652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	f000f800 	.word	0xf000f800

08004684 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d023      	beq.n	80046ee <HAL_LTDC_IRQHandler+0x6a>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01e      	beq.n	80046ee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0204 	bic.w	r2, r2, #4
 80046be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2204      	movs	r2, #4
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2204      	movs	r2, #4
 80046dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f86f 	bl	80047cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d023      	beq.n	8004740 <HAL_LTDC_IRQHandler+0xbc>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01e      	beq.n	8004740 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0202 	bic.w	r2, r2, #2
 8004710:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2202      	movs	r2, #2
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004720:	f043 0202 	orr.w	r2, r3, #2
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2204      	movs	r2, #4
 800472e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f846 	bl	80047cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01b      	beq.n	8004782 <HAL_LTDC_IRQHandler+0xfe>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d016      	beq.n	8004782 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2201      	movs	r2, #1
 800476a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f82f 	bl	80047e0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01b      	beq.n	80047c4 <HAL_LTDC_IRQHandler+0x140>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0208 	bic.w	r2, r2, #8
 80047a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2208      	movs	r2, #8
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f818 	bl	80047f4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004808:	b5b0      	push	{r4, r5, r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_LTDC_ConfigLayer+0x1a>
 800481e:	2302      	movs	r3, #2
 8004820:	e02c      	b.n	800487c <HAL_LTDC_ConfigLayer+0x74>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2134      	movs	r1, #52	; 0x34
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4614      	mov	r4, r2
 8004846:	461d      	mov	r5, r3
 8004848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800484a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800484c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800484e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f81f 	bl	80048a0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2201      	movs	r2, #1
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bdb0      	pop	{r4, r5, r7, pc}

08004884 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004892:	b2db      	uxtb	r3, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	; 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	0c1b      	lsrs	r3, r3, #16
 80048b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048bc:	4413      	add	r3, r2
 80048be:	041b      	lsls	r3, r3, #16
 80048c0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	01db      	lsls	r3, r3, #7
 80048cc:	4413      	add	r3, r2
 80048ce:	3384      	adds	r3, #132	; 0x84
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6812      	ldr	r2, [r2, #0]
 80048d6:	4611      	mov	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	01d2      	lsls	r2, r2, #7
 80048dc:	440a      	add	r2, r1
 80048de:	3284      	adds	r2, #132	; 0x84
 80048e0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048e4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f6:	4413      	add	r3, r2
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4619      	mov	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	01db      	lsls	r3, r3, #7
 8004904:	440b      	add	r3, r1
 8004906:	3384      	adds	r3, #132	; 0x84
 8004908:	4619      	mov	r1, r3
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800491e:	4413      	add	r3, r2
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	01db      	lsls	r3, r3, #7
 800492e:	4413      	add	r3, r2
 8004930:	3384      	adds	r3, #132	; 0x84
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4611      	mov	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	01d2      	lsls	r2, r2, #7
 800493e:	440a      	add	r2, r1
 8004940:	3284      	adds	r2, #132	; 0x84
 8004942:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004946:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004956:	4413      	add	r3, r2
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	01db      	lsls	r3, r3, #7
 8004964:	440b      	add	r3, r1
 8004966:	3384      	adds	r3, #132	; 0x84
 8004968:	4619      	mov	r1, r3
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	01db      	lsls	r3, r3, #7
 800497a:	4413      	add	r3, r2
 800497c:	3384      	adds	r3, #132	; 0x84
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	4611      	mov	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	01d2      	lsls	r2, r2, #7
 800498a:	440a      	add	r2, r1
 800498c:	3284      	adds	r2, #132	; 0x84
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	01db      	lsls	r3, r3, #7
 800499e:	4413      	add	r3, r2
 80049a0:	3384      	adds	r3, #132	; 0x84
 80049a2:	461a      	mov	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	01db      	lsls	r3, r3, #7
 80049d0:	4413      	add	r3, r2
 80049d2:	3384      	adds	r3, #132	; 0x84
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	01db      	lsls	r3, r3, #7
 80049e0:	4413      	add	r3, r2
 80049e2:	3384      	adds	r3, #132	; 0x84
 80049e4:	461a      	mov	r2, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049f0:	461a      	mov	r2, r3
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	01db      	lsls	r3, r3, #7
 8004a04:	440b      	add	r3, r1
 8004a06:	3384      	adds	r3, #132	; 0x84
 8004a08:	4619      	mov	r1, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	01db      	lsls	r3, r3, #7
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3384      	adds	r3, #132	; 0x84
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	4611      	mov	r1, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	01d2      	lsls	r2, r2, #7
 8004a2a:	440a      	add	r2, r1
 8004a2c:	3284      	adds	r2, #132	; 0x84
 8004a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a32:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	01db      	lsls	r3, r3, #7
 8004a3e:	4413      	add	r3, r2
 8004a40:	3384      	adds	r3, #132	; 0x84
 8004a42:	461a      	mov	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	01db      	lsls	r3, r3, #7
 8004a54:	4413      	add	r3, r2
 8004a56:	3384      	adds	r3, #132	; 0x84
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	01db      	lsls	r3, r3, #7
 8004a64:	440b      	add	r3, r1
 8004a66:	3384      	adds	r3, #132	; 0x84
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4b58      	ldr	r3, [pc, #352]	; (8004bcc <LTDC_SetConfig+0x32c>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	68f9      	ldr	r1, [r7, #12]
 8004a7a:	6809      	ldr	r1, [r1, #0]
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	01c9      	lsls	r1, r1, #7
 8004a82:	4401      	add	r1, r0
 8004a84:	3184      	adds	r1, #132	; 0x84
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	01db      	lsls	r3, r3, #7
 8004a94:	4413      	add	r3, r2
 8004a96:	3384      	adds	r3, #132	; 0x84
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	01db      	lsls	r3, r3, #7
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3384      	adds	r3, #132	; 0x84
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	01db      	lsls	r3, r3, #7
 8004ab8:	4413      	add	r3, r2
 8004aba:	3384      	adds	r3, #132	; 0x84
 8004abc:	461a      	mov	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004acc:	2304      	movs	r3, #4
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e01b      	b.n	8004b0a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004ada:	2303      	movs	r3, #3
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	e014      	b.n	8004b0a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d00b      	beq.n	8004b00 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d007      	beq.n	8004b00 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d003      	beq.n	8004b00 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004afc:	2b07      	cmp	r3, #7
 8004afe:	d102      	bne.n	8004b06 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004b00:	2302      	movs	r3, #2
 8004b02:	61fb      	str	r3, [r7, #28]
 8004b04:	e001      	b.n	8004b0a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004b06:	2301      	movs	r3, #1
 8004b08:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	4413      	add	r3, r2
 8004b16:	3384      	adds	r3, #132	; 0x84
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	01d2      	lsls	r2, r2, #7
 8004b24:	440a      	add	r2, r1
 8004b26:	3284      	adds	r2, #132	; 0x84
 8004b28:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004b2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	041a      	lsls	r2, r3, #16
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1acb      	subs	r3, r1, r3
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	3303      	adds	r3, #3
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	6809      	ldr	r1, [r1, #0]
 8004b50:	4608      	mov	r0, r1
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	01c9      	lsls	r1, r1, #7
 8004b56:	4401      	add	r1, r0
 8004b58:	3184      	adds	r1, #132	; 0x84
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	4413      	add	r3, r2
 8004b6a:	3384      	adds	r3, #132	; 0x84
 8004b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4619      	mov	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	01db      	lsls	r3, r3, #7
 8004b78:	440b      	add	r3, r1
 8004b7a:	3384      	adds	r3, #132	; 0x84
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <LTDC_SetConfig+0x330>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	01db      	lsls	r3, r3, #7
 8004b8e:	4413      	add	r3, r2
 8004b90:	3384      	adds	r3, #132	; 0x84
 8004b92:	461a      	mov	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	01db      	lsls	r3, r3, #7
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3384      	adds	r3, #132	; 0x84
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	01d2      	lsls	r2, r2, #7
 8004bb4:	440a      	add	r2, r1
 8004bb6:	3284      	adds	r2, #132	; 0x84
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	3724      	adds	r7, #36	; 0x24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	fffff8f8 	.word	0xfffff8f8
 8004bd0:	fffff800 	.word	0xfffff800

08004bd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bde:	4b23      	ldr	r3, [pc, #140]	; (8004c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c02:	f7fc fb5b 	bl	80012bc <HAL_GetTick>
 8004c06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c08:	e009      	b.n	8004c1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c0a:	f7fc fb57 	bl	80012bc <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c18:	d901      	bls.n	8004c1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e022      	b.n	8004c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2a:	d1ee      	bne.n	8004c0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0f      	ldr	r2, [pc, #60]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c38:	f7fc fb40 	bl	80012bc <HAL_GetTick>
 8004c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c3e:	e009      	b.n	8004c54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c40:	f7fc fb3c 	bl	80012bc <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c4e:	d901      	bls.n	8004c54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e007      	b.n	8004c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c60:	d1ee      	bne.n	8004c40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40007000 	.word	0x40007000

08004c74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004c80:	f7fc fb1c 	bl	80012bc <HAL_GetTick>
 8004c84:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e073      	b.n	8004d78 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_QSPI_Init+0x2c>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e06b      	b.n	8004d78 <HAL_QSPI_Init+0x104>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f007 fba9 	bl	800c414 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004cc2:	f241 3188 	movw	r1, #5000	; 0x1388
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f85e 	bl	8004d88 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2120      	movs	r1, #32
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f856 	bl	8004da4 <QSPI_WaitFlagStateUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d135      	bne.n	8004d6e <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <HAL_QSPI_Init+0x10c>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6852      	ldr	r2, [r2, #4]
 8004d10:	0611      	lsls	r1, r2, #24
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68d2      	ldr	r2, [r2, #12]
 8004d16:	4311      	orrs	r1, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	69d2      	ldr	r2, [r2, #28]
 8004d1c:	4311      	orrs	r1, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6a12      	ldr	r2, [r2, #32]
 8004d22:	4311      	orrs	r1, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <HAL_QSPI_Init+0x110>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6912      	ldr	r2, [r2, #16]
 8004d3a:	0411      	lsls	r1, r2, #16
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6952      	ldr	r2, [r2, #20]
 8004d40:	4311      	orrs	r1, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6992      	ldr	r2, [r2, #24]
 8004d46:	4311      	orrs	r1, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	00ffff2f 	.word	0x00ffff2f
 8004d84:	ffe0f8fe 	.word	0xffe0f8fe

08004d88 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004db4:	e01a      	b.n	8004dec <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d016      	beq.n	8004dec <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004dc4:	f7fc fa7a 	bl	80012bc <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d20b      	bcs.n	8004dec <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e00e      	b.n	8004e0a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf14      	ite	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d1d6      	bne.n	8004db6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e25c      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8087 	beq.w	8004f46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e38:	4b96      	ldr	r3, [pc, #600]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d00c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e44:	4b93      	ldr	r3, [pc, #588]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d112      	bne.n	8004e76 <HAL_RCC_OscConfig+0x62>
 8004e50:	4b90      	ldr	r3, [pc, #576]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e5c:	d10b      	bne.n	8004e76 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5e:	4b8d      	ldr	r3, [pc, #564]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d06c      	beq.n	8004f44 <HAL_RCC_OscConfig+0x130>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d168      	bne.n	8004f44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e236      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7e:	d106      	bne.n	8004e8e <HAL_RCC_OscConfig+0x7a>
 8004e80:	4b84      	ldr	r3, [pc, #528]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a83      	ldr	r2, [pc, #524]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	e02e      	b.n	8004eec <HAL_RCC_OscConfig+0xd8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x9c>
 8004e96:	4b7f      	ldr	r3, [pc, #508]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a7e      	ldr	r2, [pc, #504]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	4b7c      	ldr	r3, [pc, #496]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a7b      	ldr	r2, [pc, #492]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e01d      	b.n	8004eec <HAL_RCC_OscConfig+0xd8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xc0>
 8004eba:	4b76      	ldr	r3, [pc, #472]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a75      	ldr	r2, [pc, #468]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b73      	ldr	r3, [pc, #460]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a72      	ldr	r2, [pc, #456]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0xd8>
 8004ed4:	4b6f      	ldr	r3, [pc, #444]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a6e      	ldr	r2, [pc, #440]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	4b6c      	ldr	r3, [pc, #432]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a6b      	ldr	r2, [pc, #428]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d013      	beq.n	8004f1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fc f9e2 	bl	80012bc <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fc f9de 	bl	80012bc <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	; 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1ea      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b61      	ldr	r3, [pc, #388]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0xe8>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fc f9ce 	bl	80012bc <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f24:	f7fc f9ca 	bl	80012bc <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	; 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e1d6      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f36:	4b57      	ldr	r3, [pc, #348]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0x110>
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d069      	beq.n	8005026 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f52:	4b50      	ldr	r3, [pc, #320]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5e:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d11c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x190>
 8004f6a:	4b4a      	ldr	r3, [pc, #296]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d116      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	4b47      	ldr	r3, [pc, #284]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_RCC_OscConfig+0x17a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e1aa      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8e:	4b41      	ldr	r3, [pc, #260]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	493d      	ldr	r1, [pc, #244]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa2:	e040      	b.n	8005026 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d023      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fac:	4b39      	ldr	r3, [pc, #228]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a38      	ldr	r2, [pc, #224]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fc f980 	bl	80012bc <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc0:	f7fc f97c 	bl	80012bc <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e188      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd2:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fde:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4929      	ldr	r1, [pc, #164]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]
 8004ff2:	e018      	b.n	8005026 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a26      	ldr	r2, [pc, #152]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fc f95c 	bl	80012bc <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005008:	f7fc f958 	bl	80012bc <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e164      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d038      	beq.n	80050a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d019      	beq.n	800506e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 800503c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503e:	4a15      	ldr	r2, [pc, #84]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fc f939 	bl	80012bc <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504e:	f7fc f935 	bl	80012bc <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e141      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8005062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x23a>
 800506c:	e01a      	b.n	80050a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8005070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005072:	4a08      	ldr	r2, [pc, #32]	; (8005094 <HAL_RCC_OscConfig+0x280>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507a:	f7fc f91f 	bl	80012bc <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005080:	e00a      	b.n	8005098 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005082:	f7fc f91b 	bl	80012bc <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d903      	bls.n	8005098 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e127      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
 8005094:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005098:	4b94      	ldr	r3, [pc, #592]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800509a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1ee      	bne.n	8005082 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80a4 	beq.w	80051fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b2:	4b8e      	ldr	r3, [pc, #568]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	4b8b      	ldr	r3, [pc, #556]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	4a8a      	ldr	r2, [pc, #552]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80050c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ca:	4b88      	ldr	r3, [pc, #544]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050da:	4b85      	ldr	r3, [pc, #532]	; (80052f0 <HAL_RCC_OscConfig+0x4dc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d118      	bne.n	8005118 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050e6:	4b82      	ldr	r3, [pc, #520]	; (80052f0 <HAL_RCC_OscConfig+0x4dc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a81      	ldr	r2, [pc, #516]	; (80052f0 <HAL_RCC_OscConfig+0x4dc>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f2:	f7fc f8e3 	bl	80012bc <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050fa:	f7fc f8df 	bl	80012bc <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b64      	cmp	r3, #100	; 0x64
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e0eb      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800510c:	4b78      	ldr	r3, [pc, #480]	; (80052f0 <HAL_RCC_OscConfig+0x4dc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d106      	bne.n	800512e <HAL_RCC_OscConfig+0x31a>
 8005120:	4b72      	ldr	r3, [pc, #456]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a71      	ldr	r2, [pc, #452]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	e02d      	b.n	800518a <HAL_RCC_OscConfig+0x376>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x33c>
 8005136:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	4a6c      	ldr	r2, [pc, #432]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6713      	str	r3, [r2, #112]	; 0x70
 8005142:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	4a69      	ldr	r2, [pc, #420]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	6713      	str	r3, [r2, #112]	; 0x70
 800514e:	e01c      	b.n	800518a <HAL_RCC_OscConfig+0x376>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b05      	cmp	r3, #5
 8005156:	d10c      	bne.n	8005172 <HAL_RCC_OscConfig+0x35e>
 8005158:	4b64      	ldr	r3, [pc, #400]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4a63      	ldr	r2, [pc, #396]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800515e:	f043 0304 	orr.w	r3, r3, #4
 8005162:	6713      	str	r3, [r2, #112]	; 0x70
 8005164:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	4a60      	ldr	r2, [pc, #384]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6713      	str	r3, [r2, #112]	; 0x70
 8005170:	e00b      	b.n	800518a <HAL_RCC_OscConfig+0x376>
 8005172:	4b5e      	ldr	r3, [pc, #376]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	4a5d      	ldr	r2, [pc, #372]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	6713      	str	r3, [r2, #112]	; 0x70
 800517e:	4b5b      	ldr	r3, [pc, #364]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	4a5a      	ldr	r2, [pc, #360]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d015      	beq.n	80051be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005192:	f7fc f893 	bl	80012bc <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fc f88f 	bl	80012bc <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e099      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b0:	4b4e      	ldr	r3, [pc, #312]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0ee      	beq.n	800519a <HAL_RCC_OscConfig+0x386>
 80051bc:	e014      	b.n	80051e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051be:	f7fc f87d 	bl	80012bc <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c6:	f7fc f879 	bl	80012bc <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e083      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051dc:	4b43      	ldr	r3, [pc, #268]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ee      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ee:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	4a3e      	ldr	r2, [pc, #248]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80051f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d06f      	beq.n	80052e2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005202:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b08      	cmp	r3, #8
 800520c:	d067      	beq.n	80052de <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d149      	bne.n	80052aa <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005216:	4b35      	ldr	r3, [pc, #212]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a34      	ldr	r2, [pc, #208]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800521c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005222:	f7fc f84b 	bl	80012bc <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522a:	f7fc f847 	bl	80012bc <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e053      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523c:	4b2b      	ldr	r3, [pc, #172]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	019b      	lsls	r3, r3, #6
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	3b01      	subs	r3, #1
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	061b      	lsls	r3, r3, #24
 800526c:	4313      	orrs	r3, r2
 800526e:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005274:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005276:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800527c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005282:	f7fc f81b 	bl	80012bc <HAL_GetTick>
 8005286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528a:	f7fc f817 	bl	80012bc <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e023      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0f0      	beq.n	800528a <HAL_RCC_OscConfig+0x476>
 80052a8:	e01b      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a0f      	ldr	r2, [pc, #60]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80052b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b6:	f7fc f801 	bl	80012bc <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052be:	f7fb fffd 	bl	80012bc <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e009      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCC_OscConfig+0x4d8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCC_OscConfig+0x4aa>
 80052dc:	e001      	b.n	80052e2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800
 80052f0:	40007000 	.word	0x40007000

080052f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0ce      	b.n	80054aa <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800530c:	4b69      	ldr	r3, [pc, #420]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d910      	bls.n	800533c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531a:	4b66      	ldr	r3, [pc, #408]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 020f 	bic.w	r2, r3, #15
 8005322:	4964      	ldr	r1, [pc, #400]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	4313      	orrs	r3, r2
 8005328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b62      	ldr	r3, [pc, #392]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0b6      	b.n	80054aa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d020      	beq.n	800538a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005354:	4b58      	ldr	r3, [pc, #352]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a57      	ldr	r2, [pc, #348]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 800535a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800535e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800536c:	4b52      	ldr	r3, [pc, #328]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a51      	ldr	r2, [pc, #324]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005376:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005378:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	494c      	ldr	r1, [pc, #304]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d040      	beq.n	8005418 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b46      	ldr	r3, [pc, #280]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d115      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e07d      	b.n	80054aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	4b40      	ldr	r3, [pc, #256]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e071      	b.n	80054aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c6:	4b3c      	ldr	r3, [pc, #240]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e069      	b.n	80054aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053d6:	4b38      	ldr	r3, [pc, #224]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4935      	ldr	r1, [pc, #212]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e8:	f7fb ff68 	bl	80012bc <HAL_GetTick>
 80053ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f0:	f7fb ff64 	bl	80012bc <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e051      	b.n	80054aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 020c 	and.w	r2, r3, #12
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	429a      	cmp	r2, r3
 8005416:	d1eb      	bne.n	80053f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005418:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d210      	bcs.n	8005448 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b23      	ldr	r3, [pc, #140]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 020f 	bic.w	r2, r3, #15
 800542e:	4921      	ldr	r1, [pc, #132]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e030      	b.n	80054aa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005454:	4b18      	ldr	r3, [pc, #96]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4915      	ldr	r1, [pc, #84]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005472:	4b11      	ldr	r3, [pc, #68]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	490d      	ldr	r1, [pc, #52]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005486:	f000 f81d 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 800548a:	4601      	mov	r1, r0
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <HAL_RCC_ClockConfig+0x1c4>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <HAL_RCC_ClockConfig+0x1c8>)
 8005498:	5cd3      	ldrb	r3, [r2, r3]
 800549a:	fa21 f303 	lsr.w	r3, r1, r3
 800549e:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <HAL_RCC_ClockConfig+0x1cc>)
 80054a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80054a2:	2000      	movs	r0, #0
 80054a4:	f007 fba2 	bl	800cbec <HAL_InitTick>

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40023c00 	.word	0x40023c00
 80054b8:	40023800 	.word	0x40023800
 80054bc:	0800f54c 	.word	0x0800f54c
 80054c0:	2000000c 	.word	0x2000000c

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	2300      	movs	r3, #0
 80054d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054da:	4b50      	ldr	r3, [pc, #320]	; (800561c <HAL_RCC_GetSysClockFreq+0x158>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d007      	beq.n	80054f6 <HAL_RCC_GetSysClockFreq+0x32>
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d008      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x38>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 808d 	bne.w	800560a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054f0:	4b4b      	ldr	r3, [pc, #300]	; (8005620 <HAL_RCC_GetSysClockFreq+0x15c>)
 80054f2:	60bb      	str	r3, [r7, #8]
       break;
 80054f4:	e08c      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054f6:	4b4b      	ldr	r3, [pc, #300]	; (8005624 <HAL_RCC_GetSysClockFreq+0x160>)
 80054f8:	60bb      	str	r3, [r7, #8]
      break;
 80054fa:	e089      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054fc:	4b47      	ldr	r3, [pc, #284]	; (800561c <HAL_RCC_GetSysClockFreq+0x158>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005504:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005506:	4b45      	ldr	r3, [pc, #276]	; (800561c <HAL_RCC_GetSysClockFreq+0x158>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d023      	beq.n	800555a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005512:	4b42      	ldr	r3, [pc, #264]	; (800561c <HAL_RCC_GetSysClockFreq+0x158>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	099b      	lsrs	r3, r3, #6
 8005518:	f04f 0400 	mov.w	r4, #0
 800551c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	ea03 0501 	and.w	r5, r3, r1
 8005528:	ea04 0602 	and.w	r6, r4, r2
 800552c:	4a3d      	ldr	r2, [pc, #244]	; (8005624 <HAL_RCC_GetSysClockFreq+0x160>)
 800552e:	fb02 f106 	mul.w	r1, r2, r6
 8005532:	2200      	movs	r2, #0
 8005534:	fb02 f205 	mul.w	r2, r2, r5
 8005538:	440a      	add	r2, r1
 800553a:	493a      	ldr	r1, [pc, #232]	; (8005624 <HAL_RCC_GetSysClockFreq+0x160>)
 800553c:	fba5 0101 	umull	r0, r1, r5, r1
 8005540:	1853      	adds	r3, r2, r1
 8005542:	4619      	mov	r1, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f04f 0400 	mov.w	r4, #0
 800554a:	461a      	mov	r2, r3
 800554c:	4623      	mov	r3, r4
 800554e:	f7fa feaf 	bl	80002b0 <__aeabi_uldivmod>
 8005552:	4603      	mov	r3, r0
 8005554:	460c      	mov	r4, r1
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e049      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555a:	4b30      	ldr	r3, [pc, #192]	; (800561c <HAL_RCC_GetSysClockFreq+0x158>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	099b      	lsrs	r3, r3, #6
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	ea03 0501 	and.w	r5, r3, r1
 8005570:	ea04 0602 	and.w	r6, r4, r2
 8005574:	4629      	mov	r1, r5
 8005576:	4632      	mov	r2, r6
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	0154      	lsls	r4, r2, #5
 8005582:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005586:	014b      	lsls	r3, r1, #5
 8005588:	4619      	mov	r1, r3
 800558a:	4622      	mov	r2, r4
 800558c:	1b49      	subs	r1, r1, r5
 800558e:	eb62 0206 	sbc.w	r2, r2, r6
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	f04f 0400 	mov.w	r4, #0
 800559a:	0194      	lsls	r4, r2, #6
 800559c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055a0:	018b      	lsls	r3, r1, #6
 80055a2:	1a5b      	subs	r3, r3, r1
 80055a4:	eb64 0402 	sbc.w	r4, r4, r2
 80055a8:	f04f 0100 	mov.w	r1, #0
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	00e2      	lsls	r2, r4, #3
 80055b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055b6:	00d9      	lsls	r1, r3, #3
 80055b8:	460b      	mov	r3, r1
 80055ba:	4614      	mov	r4, r2
 80055bc:	195b      	adds	r3, r3, r5
 80055be:	eb44 0406 	adc.w	r4, r4, r6
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	02a2      	lsls	r2, r4, #10
 80055cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80055d0:	0299      	lsls	r1, r3, #10
 80055d2:	460b      	mov	r3, r1
 80055d4:	4614      	mov	r4, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	4621      	mov	r1, r4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f04f 0400 	mov.w	r4, #0
 80055e0:	461a      	mov	r2, r3
 80055e2:	4623      	mov	r3, r4
 80055e4:	f7fa fe64 	bl	80002b0 <__aeabi_uldivmod>
 80055e8:	4603      	mov	r3, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_RCC_GetSysClockFreq+0x158>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	0c1b      	lsrs	r3, r3, #16
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	3301      	adds	r3, #1
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	60bb      	str	r3, [r7, #8]
      break;
 8005608:	e002      	b.n	8005610 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <HAL_RCC_GetSysClockFreq+0x15c>)
 800560c:	60bb      	str	r3, [r7, #8]
      break;
 800560e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005610:	68bb      	ldr	r3, [r7, #8]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800
 8005620:	00f42400 	.word	0x00f42400
 8005624:	017d7840 	.word	0x017d7840

08005628 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_RCC_GetHCLKFreq+0x14>)
 800562e:	681b      	ldr	r3, [r3, #0]
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2000000c 	.word	0x2000000c

08005640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005644:	f7ff fff0 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005648:	4601      	mov	r1, r0
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0a9b      	lsrs	r3, r3, #10
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4a03      	ldr	r2, [pc, #12]	; (8005664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005656:	5cd3      	ldrb	r3, [r2, r3]
 8005658:	fa21 f303 	lsr.w	r3, r1, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40023800 	.word	0x40023800
 8005664:	0800f55c 	.word	0x0800f55c

08005668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800566c:	f7ff ffdc 	bl	8005628 <HAL_RCC_GetHCLKFreq>
 8005670:	4601      	mov	r1, r0
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	0b5b      	lsrs	r3, r3, #13
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	4a03      	ldr	r2, [pc, #12]	; (800568c <HAL_RCC_GetPCLK2Freq+0x24>)
 800567e:	5cd3      	ldrb	r3, [r2, r3]
 8005680:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005684:	4618      	mov	r0, r3
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40023800 	.word	0x40023800
 800568c:	0800f55c 	.word	0x0800f55c

08005690 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	220f      	movs	r2, #15
 800569e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056a0:	4b12      	ldr	r3, [pc, #72]	; (80056ec <HAL_RCC_GetClockConfig+0x5c>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0203 	and.w	r2, r3, #3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056ac:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <HAL_RCC_GetClockConfig+0x5c>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <HAL_RCC_GetClockConfig+0x5c>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80056c4:	4b09      	ldr	r3, [pc, #36]	; (80056ec <HAL_RCC_GetClockConfig+0x5c>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	08db      	lsrs	r3, r3, #3
 80056ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80056d2:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <HAL_RCC_GetClockConfig+0x60>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 020f 	and.w	r2, r3, #15
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	601a      	str	r2, [r3, #0]
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40023c00 	.word	0x40023c00

080056f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d012      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800571c:	4b69      	ldr	r3, [pc, #420]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4a68      	ldr	r2, [pc, #416]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005726:	6093      	str	r3, [r2, #8]
 8005728:	4b66      	ldr	r3, [pc, #408]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005730:	4964      	ldr	r1, [pc, #400]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800573e:	2301      	movs	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d017      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800574e:	4b5d      	ldr	r3, [pc, #372]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	4959      	ldr	r1, [pc, #356]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800576c:	d101      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800576e:	2301      	movs	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800577a:	2301      	movs	r3, #1
 800577c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d017      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800578a:	4b4e      	ldr	r3, [pc, #312]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005790:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	494a      	ldr	r1, [pc, #296]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a8:	d101      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80057aa:	2301      	movs	r3, #1
 80057ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80057b6:	2301      	movs	r3, #1
 80057b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80057c6:	2301      	movs	r3, #1
 80057c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 808b 	beq.w	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057d8:	4b3a      	ldr	r3, [pc, #232]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057dc:	4a39      	ldr	r2, [pc, #228]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e2:	6413      	str	r3, [r2, #64]	; 0x40
 80057e4:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057f0:	4b35      	ldr	r3, [pc, #212]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a34      	ldr	r2, [pc, #208]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fc:	f7fb fd5e 	bl	80012bc <HAL_GetTick>
 8005800:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005804:	f7fb fd5a 	bl	80012bc <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e355      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005816:	4b2c      	ldr	r3, [pc, #176]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005822:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d035      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	429a      	cmp	r2, r3
 800583e:	d02e      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005840:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005848:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800584a:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005854:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005856:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a1a      	ldr	r2, [pc, #104]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005860:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005862:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005868:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b01      	cmp	r3, #1
 8005872:	d114      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fb fd22 	bl	80012bc <HAL_GetTick>
 8005878:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587a:	e00a      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800587c:	f7fb fd1e 	bl	80012bc <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f241 3288 	movw	r2, #5000	; 0x1388
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e317      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ee      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058aa:	d111      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058ba:	400b      	ands	r3, r1
 80058bc:	4901      	ldr	r1, [pc, #4]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	608b      	str	r3, [r1, #8]
 80058c2:	e00b      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40007000 	.word	0x40007000
 80058cc:	0ffffcff 	.word	0x0ffffcff
 80058d0:	4bb0      	ldr	r3, [pc, #704]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4aaf      	ldr	r2, [pc, #700]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80058da:	6093      	str	r3, [r2, #8]
 80058dc:	4bad      	ldr	r3, [pc, #692]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e8:	49aa      	ldr	r1, [pc, #680]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d010      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058fa:	4ba6      	ldr	r3, [pc, #664]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005900:	4aa4      	ldr	r2, [pc, #656]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005906:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800590a:	4ba2      	ldr	r3, [pc, #648]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800590c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	499f      	ldr	r1, [pc, #636]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005928:	4b9a      	ldr	r3, [pc, #616]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005936:	4997      	ldr	r1, [pc, #604]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800594a:	4b92      	ldr	r3, [pc, #584]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005958:	498e      	ldr	r1, [pc, #568]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800596c:	4b89      	ldr	r3, [pc, #548]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800597a:	4986      	ldr	r1, [pc, #536]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800598e:	4b81      	ldr	r3, [pc, #516]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	497d      	ldr	r1, [pc, #500]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059b0:	4b78      	ldr	r3, [pc, #480]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f023 0203 	bic.w	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	4975      	ldr	r1, [pc, #468]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059d2:	4b70      	ldr	r3, [pc, #448]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d8:	f023 020c 	bic.w	r2, r3, #12
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	496c      	ldr	r1, [pc, #432]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059f4:	4b67      	ldr	r3, [pc, #412]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	4964      	ldr	r1, [pc, #400]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a16:	4b5f      	ldr	r3, [pc, #380]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	495b      	ldr	r1, [pc, #364]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a38:	4b56      	ldr	r3, [pc, #344]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a46:	4953      	ldr	r1, [pc, #332]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a5a:	4b4e      	ldr	r3, [pc, #312]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a68:	494a      	ldr	r1, [pc, #296]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a7c:	4b45      	ldr	r3, [pc, #276]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8a:	4942      	ldr	r1, [pc, #264]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005a9e:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aac:	4939      	ldr	r1, [pc, #228]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ac0:	4b34      	ldr	r3, [pc, #208]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ace:	4931      	ldr	r1, [pc, #196]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d011      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ae2:	4b2c      	ldr	r3, [pc, #176]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af0:	4928      	ldr	r1, [pc, #160]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b00:	d101      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b12:	2301      	movs	r3, #1
 8005b14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b30:	4918      	ldr	r1, [pc, #96]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00b      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b44:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b54:	490f      	ldr	r1, [pc, #60]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d005      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6a:	f040 80d8 	bne.w	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b6e:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005b74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7a:	f7fb fb9f 	bl	80012bc <HAL_GetTick>
 8005b7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b80:	e00a      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b82:	f7fb fb9b 	bl	80012bc <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b64      	cmp	r3, #100	; 0x64
 8005b8e:	d903      	bls.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e196      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005b94:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b98:	4b6c      	ldr	r3, [pc, #432]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ee      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d021      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d11d      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bb8:	4b64      	ldr	r3, [pc, #400]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	0c1b      	lsrs	r3, r3, #16
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bc6:	4b61      	ldr	r3, [pc, #388]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bcc:	0e1b      	lsrs	r3, r3, #24
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	019a      	lsls	r2, r3, #6
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	431a      	orrs	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	071b      	lsls	r3, r3, #28
 8005bec:	4957      	ldr	r1, [pc, #348]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c08:	d00a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02e      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1e:	d129      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c20:	4b4a      	ldr	r3, [pc, #296]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c2e:	4b47      	ldr	r3, [pc, #284]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c34:	0f1b      	lsrs	r3, r3, #28
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	019a      	lsls	r2, r3, #6
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	071b      	lsls	r3, r3, #28
 8005c54:	493d      	ldr	r1, [pc, #244]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c5c:	4b3b      	ldr	r3, [pc, #236]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c62:	f023 021f 	bic.w	r2, r3, #31
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4937      	ldr	r1, [pc, #220]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01d      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c80:	4b32      	ldr	r3, [pc, #200]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c86:	0e1b      	lsrs	r3, r3, #24
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c8e:	4b2f      	ldr	r3, [pc, #188]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c94:	0f1b      	lsrs	r3, r3, #28
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	019a      	lsls	r2, r3, #6
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	061b      	lsls	r3, r3, #24
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	071b      	lsls	r3, r3, #28
 8005cb4:	4925      	ldr	r1, [pc, #148]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d011      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	019a      	lsls	r2, r3, #6
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	071b      	lsls	r3, r3, #28
 8005ce4:	4919      	ldr	r1, [pc, #100]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cec:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a16      	ldr	r2, [pc, #88]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf8:	f7fb fae0 	bl	80012bc <HAL_GetTick>
 8005cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d00:	f7fb fadc 	bl	80012bc <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	; 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e0d7      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d12:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	f040 80cd 	bne.w	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d26:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a08      	ldr	r2, [pc, #32]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d32:	f7fb fac3 	bl	80012bc <HAL_GetTick>
 8005d36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d38:	e00a      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d3a:	f7fb fabf 	bl	80012bc <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b64      	cmp	r3, #100	; 0x64
 8005d46:	d903      	bls.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e0ba      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005d4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d50:	4b5e      	ldr	r3, [pc, #376]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5c:	d0ed      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02e      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d12a      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d86:	4b51      	ldr	r3, [pc, #324]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8c:	0c1b      	lsrs	r3, r3, #16
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d94:	4b4d      	ldr	r3, [pc, #308]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	0f1b      	lsrs	r3, r3, #28
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	019a      	lsls	r2, r3, #6
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	061b      	lsls	r3, r3, #24
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	071b      	lsls	r3, r3, #28
 8005dba:	4944      	ldr	r1, [pc, #272]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005dc2:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	493d      	ldr	r1, [pc, #244]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d022      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df0:	d11d      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005df2:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	0e1b      	lsrs	r3, r3, #24
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e00:	4b32      	ldr	r3, [pc, #200]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	0f1b      	lsrs	r3, r3, #28
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	019a      	lsls	r2, r3, #6
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	041b      	lsls	r3, r3, #16
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	431a      	orrs	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	071b      	lsls	r3, r3, #28
 8005e26:	4929      	ldr	r1, [pc, #164]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d028      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e3a:	4b24      	ldr	r3, [pc, #144]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e40:	0e1b      	lsrs	r3, r3, #24
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e48:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	0c1b      	lsrs	r3, r3, #16
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	019a      	lsls	r2, r3, #6
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	431a      	orrs	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	061b      	lsls	r3, r3, #24
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	071b      	lsls	r3, r3, #28
 8005e6e:	4917      	ldr	r1, [pc, #92]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e76:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4911      	ldr	r1, [pc, #68]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a0e      	ldr	r2, [pc, #56]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e98:	f7fb fa10 	bl	80012bc <HAL_GetTick>
 8005e9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ea0:	f7fb fa0c 	bl	80012bc <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e007      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ebe:	d1ef      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800

08005ed0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eee:	f040 8086 	bne.w	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005ef2:	4b8d      	ldr	r3, [pc, #564]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f00:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f08:	d03e      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8005f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f0e:	d073      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d000      	beq.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005f14:	e074      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f16:	4b84      	ldr	r3, [pc, #528]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d108      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f22:	4b81      	ldr	r3, [pc, #516]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f2a:	4a80      	ldr	r2, [pc, #512]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e007      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005f34:	4b7c      	ldr	r3, [pc, #496]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f3c:	4a7c      	ldr	r2, [pc, #496]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f42:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005f44:	4b78      	ldr	r3, [pc, #480]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4a:	0e1b      	lsrs	r3, r3, #24
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005f52:	4b75      	ldr	r3, [pc, #468]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f58:	099b      	lsrs	r3, r3, #6
 8005f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	fb02 f203 	mul.w	r2, r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005f6c:	4b6e      	ldr	r3, [pc, #440]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
        break;
 8005f86:	e03b      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f88:	4b67      	ldr	r3, [pc, #412]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d108      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f94:	4b64      	ldr	r3, [pc, #400]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f9c:	4a63      	ldr	r2, [pc, #396]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	e007      	b.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005fa6:	4b60      	ldr	r3, [pc, #384]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fae:	4a60      	ldr	r2, [pc, #384]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005fb6:	4b5c      	ldr	r3, [pc, #368]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fbc:	0e1b      	lsrs	r3, r3, #24
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005fc4:	4b58      	ldr	r3, [pc, #352]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fca:	099b      	lsrs	r3, r3, #6
 8005fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	fb02 f203 	mul.w	r2, r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fdc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005fde:	4b52      	ldr	r3, [pc, #328]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	617b      	str	r3, [r7, #20]
        break;
 8005ff6:	e003      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005ff8:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005ffa:	617b      	str	r3, [r7, #20]
        break;
 8005ffc:	e000      	b.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8005ffe:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006006:	f040 8086 	bne.w	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800600a:	4b47      	ldr	r3, [pc, #284]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800600c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006010:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006018:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006020:	d03e      	beq.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006026:	d073      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d000      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800602c:	e074      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800602e:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800603a:	4b3b      	ldr	r3, [pc, #236]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006042:	4a3a      	ldr	r2, [pc, #232]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	e007      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800604c:	4b36      	ldr	r3, [pc, #216]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006054:	4a36      	ldr	r2, [pc, #216]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006056:	fbb2 f3f3 	udiv	r3, r2, r3
 800605a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800605c:	4b32      	ldr	r3, [pc, #200]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006062:	0e1b      	lsrs	r3, r3, #24
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800606c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006070:	099b      	lsrs	r3, r3, #6
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	fb02 f203 	mul.w	r2, r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006084:	4b28      	ldr	r3, [pc, #160]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	3301      	adds	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	617b      	str	r3, [r7, #20]
        break;
 800609e:	e03b      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80060a0:	4b21      	ldr	r3, [pc, #132]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d108      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80060ac:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b4:	4a1d      	ldr	r2, [pc, #116]	; (800612c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	e007      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80060be:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060c6:	4a1a      	ldr	r2, [pc, #104]	; (8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d4:	0e1b      	lsrs	r3, r3, #24
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e2:	099b      	lsrs	r3, r3, #6
 80060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	fb02 f203 	mul.w	r2, r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	3301      	adds	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]
        break;
 800610e:	e003      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006110:	4b08      	ldr	r3, [pc, #32]	; (8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006112:	617b      	str	r3, [r7, #20]
        break;
 8006114:	e000      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006116:	bf00      	nop

  return frequency;
 8006118:	697b      	ldr	r3, [r7, #20]
}
 800611a:	4618      	mov	r0, r3
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800
 800612c:	00f42400 	.word	0x00f42400
 8006130:	017d7840 	.word	0x017d7840
 8006134:	00bb8000 	.word	0x00bb8000

08006138 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e01c      	b.n	8006184 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	795b      	ldrb	r3, [r3, #5]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d105      	bne.n	8006160 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f006 f9ea 	bl	800c534 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0204 	orr.w	r2, r2, #4
 8006174:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	791b      	ldrb	r3, [r3, #4]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e03d      	b.n	8006222 <HAL_RNG_GenerateRandomNumber+0x96>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	795b      	ldrb	r3, [r3, #5]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d12c      	bne.n	8006210 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061bc:	f7fb f87e 	bl	80012bc <HAL_GetTick>
 80061c0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80061c2:	e011      	b.n	80061e8 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80061c4:	f7fb f87a 	bl	80012bc <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d90a      	bls.n	80061e8 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e01c      	b.n	8006222 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d1e6      	bne.n	80061c4 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	715a      	strb	r2, [r3, #5]
 800620e:	e004      	b.n	800621a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2204      	movs	r2, #4
 8006214:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	711a      	strb	r2, [r3, #4]

  return status;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	330c      	adds	r3, #12
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ffa7 	bl	800618c <HAL_RNG_GenerateRandomNumber>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	e000      	b.n	800624c <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800624a:	2300      	movs	r3, #0
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e06b      	b.n	800633e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	7f5b      	ldrb	r3, [r3, #29]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f006 f97c 	bl	800c574 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	22ca      	movs	r2, #202	; 0xca
 8006288:	625a      	str	r2, [r3, #36]	; 0x24
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2253      	movs	r2, #83	; 0x53
 8006290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fb00 	bl	8006898 <RTC_EnterInitMode>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	22ff      	movs	r2, #255	; 0xff
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2204      	movs	r2, #4
 80062aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e046      	b.n	800633e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6899      	ldr	r1, [r3, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b23      	ldr	r3, [pc, #140]	; (8006348 <HAL_RTC_Init+0xf4>)
 80062bc:	400b      	ands	r3, r1
 80062be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6899      	ldr	r1, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	68d2      	ldr	r2, [r2, #12]
 80062e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6919      	ldr	r1, [r3, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	041a      	lsls	r2, r3, #16
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800630a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0208 	bic.w	r2, r2, #8
 800631a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	22ff      	movs	r2, #255	; 0xff
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800633c:	2300      	movs	r3, #0
  }
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	ff8fffbf 	.word	0xff8fffbf

0800634c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	7f1b      	ldrb	r3, [r3, #28]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_RTC_SetTime+0x1c>
 8006364:	2302      	movs	r3, #2
 8006366:	e0a8      	b.n	80064ba <HAL_RTC_SetTime+0x16e>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2202      	movs	r2, #2
 8006372:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d126      	bne.n	80063c8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 faac 	bl	80068f0 <RTC_ByteToBcd2>
 8006398:	4603      	mov	r3, r0
 800639a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 faa5 	bl	80068f0 <RTC_ByteToBcd2>
 80063a6:	4603      	mov	r3, r0
 80063a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80063aa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	789b      	ldrb	r3, [r3, #2]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fa9d 	bl	80068f0 <RTC_ByteToBcd2>
 80063b6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80063b8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	7b1b      	ldrb	r3, [r3, #12]
 80063c0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e018      	b.n	80063fa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2200      	movs	r2, #0
 80063da:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80063e8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80063ee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	7b1b      	ldrb	r3, [r3, #12]
 80063f4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	22ca      	movs	r2, #202	; 0xca
 8006400:	625a      	str	r2, [r3, #36]	; 0x24
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2253      	movs	r2, #83	; 0x53
 8006408:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fa44 	bl	8006898 <RTC_EnterInitMode>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	22ff      	movs	r2, #255	; 0xff
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2204      	movs	r2, #4
 8006422:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e045      	b.n	80064ba <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	6979      	ldr	r1, [r7, #20]
 8006434:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <HAL_RTC_SetTime+0x178>)
 8006436:	400b      	ands	r3, r1
 8006438:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006448:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6899      	ldr	r1, [r3, #8]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	431a      	orrs	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006470:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d111      	bne.n	80064a4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f9e1 	bl	8006848 <HAL_RTC_WaitForSynchro>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	22ff      	movs	r2, #255	; 0xff
 8006492:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2204      	movs	r2, #4
 8006498:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e00a      	b.n	80064ba <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	22ff      	movs	r2, #255	; 0xff
 80064aa:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80064b8:	2300      	movs	r3, #0
  }
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd90      	pop	{r4, r7, pc}
 80064c2:	bf00      	nop
 80064c4:	007f7f7f 	.word	0x007f7f7f

080064c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	7f1b      	ldrb	r3, [r3, #28]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_RTC_SetDate+0x1c>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e092      	b.n	800660a <HAL_RTC_SetDate+0x142>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2202      	movs	r2, #2
 80064ee:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10e      	bne.n	8006514 <HAL_RTC_SetDate+0x4c>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	f023 0310 	bic.w	r3, r3, #16
 800650a:	b2db      	uxtb	r3, r3
 800650c:	330a      	adds	r3, #10
 800650e:	b2da      	uxtb	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d11c      	bne.n	8006554 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	78db      	ldrb	r3, [r3, #3]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f9e6 	bl	80068f0 <RTC_ByteToBcd2>
 8006524:	4603      	mov	r3, r0
 8006526:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f9df 	bl	80068f0 <RTC_ByteToBcd2>
 8006532:	4603      	mov	r3, r0
 8006534:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006536:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	789b      	ldrb	r3, [r3, #2]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 f9d7 	bl	80068f0 <RTC_ByteToBcd2>
 8006542:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006544:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e00e      	b.n	8006572 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	78db      	ldrb	r3, [r3, #3]
 8006558:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	785b      	ldrb	r3, [r3, #1]
 800655e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006560:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8006566:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	22ca      	movs	r2, #202	; 0xca
 8006578:	625a      	str	r2, [r3, #36]	; 0x24
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2253      	movs	r2, #83	; 0x53
 8006580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f988 	bl	8006898 <RTC_EnterInitMode>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	22ff      	movs	r2, #255	; 0xff
 8006594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2204      	movs	r2, #4
 800659a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e031      	b.n	800660a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	6979      	ldr	r1, [r7, #20]
 80065ac:	4b19      	ldr	r3, [pc, #100]	; (8006614 <HAL_RTC_SetDate+0x14c>)
 80065ae:	400b      	ands	r3, r1
 80065b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065c0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d111      	bne.n	80065f4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f939 	bl	8006848 <HAL_RTC_WaitForSynchro>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	22ff      	movs	r2, #255	; 0xff
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2204      	movs	r2, #4
 80065e8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e00a      	b.n	800660a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	22ff      	movs	r2, #255	; 0xff
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006608:	2300      	movs	r3, #0
  }
}
 800660a:	4618      	mov	r0, r3
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	bd90      	pop	{r4, r7, pc}
 8006612:	bf00      	nop
 8006614:	00ffff3f 	.word	0x00ffff3f

08006618 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006618:	b590      	push	{r4, r7, lr}
 800661a:	b089      	sub	sp, #36	; 0x24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	7f1b      	ldrb	r3, [r3, #28]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_RTC_SetAlarm+0x24>
 8006638:	2302      	movs	r3, #2
 800663a:	e101      	b.n	8006840 <HAL_RTC_SetAlarm+0x228>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2201      	movs	r2, #1
 8006640:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2202      	movs	r2, #2
 8006646:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d137      	bne.n	80066be <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d102      	bne.n	8006662 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2200      	movs	r2, #0
 8006660:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f942 	bl	80068f0 <RTC_ByteToBcd2>
 800666c:	4603      	mov	r3, r0
 800666e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f93b 	bl	80068f0 <RTC_ByteToBcd2>
 800667a:	4603      	mov	r3, r0
 800667c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800667e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	789b      	ldrb	r3, [r3, #2]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 f933 	bl	80068f0 <RTC_ByteToBcd2>
 800668a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800668c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	7b1b      	ldrb	r3, [r3, #12]
 8006694:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006696:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 f925 	bl	80068f0 <RTC_ByteToBcd2>
 80066a6:	4603      	mov	r3, r0
 80066a8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80066aa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80066b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e023      	b.n	8006706 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2200      	movs	r2, #0
 80066d0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80066de:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80066e4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	7b1b      	ldrb	r3, [r3, #12]
 80066ea:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80066ec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066f4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80066f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80066fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006702:	4313      	orrs	r3, r2
 8006704:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	22ca      	movs	r2, #202	; 0xca
 8006718:	625a      	str	r2, [r3, #36]	; 0x24
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2253      	movs	r2, #83	; 0x53
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672a:	d13f      	bne.n	80067ac <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800673a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800674a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800674c:	f7fa fdb6 	bl	80012bc <HAL_GetTick>
 8006750:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006752:	e013      	b.n	800677c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006754:	f7fa fdb2 	bl	80012bc <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006762:	d90b      	bls.n	800677c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	22ff      	movs	r2, #255	; 0xff
 800676a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2203      	movs	r2, #3
 8006770:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e061      	b.n	8006840 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0e4      	beq.n	8006754 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a8:	609a      	str	r2, [r3, #8]
 80067aa:	e03e      	b.n	800682a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067ba:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067ca:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067cc:	f7fa fd76 	bl	80012bc <HAL_GetTick>
 80067d0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80067d2:	e013      	b.n	80067fc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067d4:	f7fa fd72 	bl	80012bc <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067e2:	d90b      	bls.n	80067fc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	22ff      	movs	r2, #255	; 0xff
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2203      	movs	r2, #3
 80067f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e021      	b.n	8006840 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0e4      	beq.n	80067d4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006828:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	22ff      	movs	r2, #255	; 0xff
 8006830:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3724      	adds	r7, #36	; 0x24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd90      	pop	{r4, r7, pc}

08006848 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006862:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006864:	f7fa fd2a 	bl	80012bc <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800686a:	e009      	b.n	8006880 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800686c:	f7fa fd26 	bl	80012bc <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800687a:	d901      	bls.n	8006880 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e007      	b.n	8006890 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0ee      	beq.n	800686c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d119      	bne.n	80068e6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068bc:	f7fa fcfe 	bl	80012bc <HAL_GetTick>
 80068c0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80068c2:	e009      	b.n	80068d8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80068c4:	f7fa fcfa 	bl	80012bc <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068d2:	d901      	bls.n	80068d8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e007      	b.n	80068e8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0ee      	beq.n	80068c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80068fe:	e005      	b.n	800690c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	3b0a      	subs	r3, #10
 800690a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	2b09      	cmp	r3, #9
 8006910:	d8f6      	bhi.n	8006900 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	b2da      	uxtb	r2, r3
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	4313      	orrs	r3, r2
 800691e:	b2db      	uxtb	r3, r3
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	7f1b      	ldrb	r3, [r3, #28]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_RTCEx_SetTimeStamp+0x1c>
 8006944:	2302      	movs	r3, #2
 8006946:	e03e      	b.n	80069c6 <HAL_RTCEx_SetTimeStamp+0x9a>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2202      	movs	r2, #2
 8006952:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800695c:	4013      	ands	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	22ca      	movs	r2, #202	; 0xca
 800696e:	625a      	str	r2, [r3, #36]	; 0x24
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2253      	movs	r2, #83	; 0x53
 8006976:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0206 	bic.w	r2, r2, #6
 8006986:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	430a      	orrs	r2, r1
 8006996:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	22ff      	movs	r2, #255	; 0xff
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	fffff7f7 	.word	0xfffff7f7

080069d8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e149      	b.n	8006c8a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f006 f884 	bl	800cb18 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f94f 	bl	8006cbc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d007      	beq.n	8006a36 <HAL_SAI_Init+0x5e>
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d302      	bcc.n	8006a30 <HAL_SAI_Init+0x58>
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d006      	beq.n	8006a3c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8006a2e:	e008      	b.n	8006a42 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	61fb      	str	r3, [r7, #28]
      break;
 8006a34:	e005      	b.n	8006a42 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006a36:	2310      	movs	r3, #16
 8006a38:	61fb      	str	r3, [r7, #28]
      break;
 8006a3a:	e002      	b.n	8006a42 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	61fb      	str	r3, [r7, #28]
      break;
 8006a40:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d81d      	bhi.n	8006a86 <HAL_SAI_Init+0xae>
 8006a4a:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <HAL_SAI_Init+0x78>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a61 	.word	0x08006a61
 8006a54:	08006a67 	.word	0x08006a67
 8006a58:	08006a6f 	.word	0x08006a6f
 8006a5c:	08006a77 	.word	0x08006a77
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]
      }
      break;
 8006a64:	e010      	b.n	8006a88 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8006a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a6a:	617b      	str	r3, [r7, #20]
      }
      break;
 8006a6c:	e00c      	b.n	8006a88 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a72:	617b      	str	r3, [r7, #20]
      }
      break;
 8006a74:	e008      	b.n	8006a88 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a7a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	61fb      	str	r3, [r7, #28]
      }
      break;
 8006a84:	e000      	b.n	8006a88 <HAL_SAI_Init+0xb0>
  default:
    break;
 8006a86:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a81      	ldr	r2, [pc, #516]	; (8006c94 <HAL_SAI_Init+0x2bc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_SAI_Init+0xc4>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a80      	ldr	r2, [pc, #512]	; (8006c98 <HAL_SAI_Init+0x2c0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d103      	bne.n	8006aa4 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8006a9c:	4a7f      	ldr	r2, [pc, #508]	; (8006c9c <HAL_SAI_Init+0x2c4>)
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e002      	b.n	8006aaa <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8006aa4:	4a7e      	ldr	r2, [pc, #504]	; (8006ca0 <HAL_SAI_Init+0x2c8>)
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d043      	beq.n	8006b3a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a76      	ldr	r2, [pc, #472]	; (8006c94 <HAL_SAI_Init+0x2bc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d004      	beq.n	8006aca <HAL_SAI_Init+0xf2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a74      	ldr	r2, [pc, #464]	; (8006c98 <HAL_SAI_Init+0x2c0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d104      	bne.n	8006ad4 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006aca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ace:	f7ff f9ff 	bl	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ad2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a72      	ldr	r2, [pc, #456]	; (8006ca4 <HAL_SAI_Init+0x2cc>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d004      	beq.n	8006ae8 <HAL_SAI_Init+0x110>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a71      	ldr	r2, [pc, #452]	; (8006ca8 <HAL_SAI_Init+0x2d0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d104      	bne.n	8006af2 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006ae8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006aec:	f7ff f9f0 	bl	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006af0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	025b      	lsls	r3, r3, #9
 8006b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b08:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a67      	ldr	r2, [pc, #412]	; (8006cac <HAL_SAI_Init+0x2d4>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	08da      	lsrs	r2, r3, #3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8006b18:	68f9      	ldr	r1, [r7, #12]
 8006b1a:	4b64      	ldr	r3, [pc, #400]	; (8006cac <HAL_SAI_Init+0x2d4>)
 8006b1c:	fba3 2301 	umull	r2, r3, r3, r1
 8006b20:	08da      	lsrs	r2, r3, #3
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	1aca      	subs	r2, r1, r3
 8006b2c:	2a08      	cmp	r2, #8
 8006b2e:	d904      	bls.n	8006b3a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_SAI_Init+0x172>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d109      	bne.n	8006b5e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_SAI_Init+0x17e>
 8006b52:	2300      	movs	r3, #0
 8006b54:	e001      	b.n	8006b5a <HAL_SAI_Init+0x182>
 8006b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b5a:	61bb      	str	r3, [r7, #24]
 8006b5c:	e008      	b.n	8006b70 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d102      	bne.n	8006b6c <HAL_SAI_Init+0x194>
 8006b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b6a:	e000      	b.n	8006b6e <HAL_SAI_Init+0x196>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6819      	ldr	r1, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b4d      	ldr	r3, [pc, #308]	; (8006cb0 <HAL_SAI_Init+0x2d8>)
 8006b7c:	400b      	ands	r3, r1
 8006b7e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6819      	ldr	r1, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006b94:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8006ba8:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006bb4:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	051b      	lsls	r3, r3, #20
 8006bbc:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6859      	ldr	r1, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b38      	ldr	r3, [pc, #224]	; (8006cb4 <HAL_SAI_Init+0x2dc>)
 8006bd2:	400b      	ands	r3, r1
 8006bd4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699a      	ldr	r2, [r3, #24]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6899      	ldr	r1, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b2e      	ldr	r3, [pc, #184]	; (8006cb8 <HAL_SAI_Init+0x2e0>)
 8006c00:	400b      	ands	r3, r1
 8006c02:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6899      	ldr	r1, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006c14:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8006c1a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8006c20:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	3b01      	subs	r3, #1
 8006c28:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8006c2a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68d9      	ldr	r1, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006c42:	400b      	ands	r3, r1
 8006c44:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68d9      	ldr	r1, [r3, #12]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5a:	041b      	lsls	r3, r3, #16
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c62:	3b01      	subs	r3, #1
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40015804 	.word	0x40015804
 8006c98:	40015824 	.word	0x40015824
 8006c9c:	40015800 	.word	0x40015800
 8006ca0:	40015c00 	.word	0x40015c00
 8006ca4:	40015c04 	.word	0x40015c04
 8006ca8:	40015c24 	.word	0x40015c24
 8006cac:	cccccccd 	.word	0xcccccccd
 8006cb0:	ff05c010 	.word	0xff05c010
 8006cb4:	ffff1ff0 	.word	0xffff1ff0
 8006cb8:	fff88000 	.word	0xfff88000

08006cbc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006cbc:	b490      	push	{r4, r7}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006cc4:	4b16      	ldr	r3, [pc, #88]	; (8006d20 <SAI_Disable+0x64>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a16      	ldr	r2, [pc, #88]	; (8006d24 <SAI_Disable+0x68>)
 8006cca:	fba2 2303 	umull	r2, r3, r2, r3
 8006cce:	0b1b      	lsrs	r3, r3, #12
 8006cd0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ce4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	1e5c      	subs	r4, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	73fb      	strb	r3, [r7, #15]
      break;
 8006d02:	e006      	b.n	8006d12 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e9      	bne.n	8006ce6 <SAI_Disable+0x2a>

  return status;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc90      	pop	{r4, r7}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	2000000c 	.word	0x2000000c
 8006d24:	95cbec1b 	.word	0x95cbec1b

08006d28 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e025      	b.n	8006d88 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f005 fed7 	bl	800cb04 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f001 fd81 	bl	8008870 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	f001 fdeb 	bl	8008954 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d101      	bne.n	8006dac <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
 8006daa:	e018      	b.n	8006dde <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fe49 	bl	8008a54 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d104      	bne.n	8006dd4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2205      	movs	r2, #5
 8006dce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006dd2:	e003      	b.n	8006ddc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d101      	bne.n	8006e00 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e00e      	b.n	8006e1e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 fe41 	bl	8008a96 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e04c      	b.n	8006ed4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f005 fbaa 	bl	800c5a8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0203 	bic.w	r2, r2, #3
 8006e6a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4b19      	ldr	r3, [pc, #100]	; (8006edc <HAL_SPDIFRX_Init+0xb4>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8006e84:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8006e8a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8006e90:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8006e96:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8006e9c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8006ea2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8006ea8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8006eae:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8006eb4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	fff88407 	.word	0xfff88407

08006ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e084      	b.n	8006ffc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d106      	bne.n	8006f12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f005 fb8d 	bl	800c62c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f28:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f32:	d902      	bls.n	8006f3a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f3e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f48:	d007      	beq.n	8006f5a <HAL_SPI_Init+0x7a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f52:	d002      	beq.n	8006f5a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f6a:	d903      	bls.n	8006f74 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30
 8006f72:	e002      	b.n	8006f7a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	ea42 0103 	orr.w	r1, r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	f003 0204 	and.w	r2, r3, #4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	ea42 0103 	orr.w	r1, r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e01d      	b.n	8007052 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f005 fb60 	bl	800c6f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f000 fb78 	bl	8007738 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <HAL_TIM_Base_Start_IT+0x50>)
 800707c:	4013      	ands	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b06      	cmp	r3, #6
 8007084:	d00b      	beq.n	800709e <HAL_TIM_Base_Start_IT+0x42>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800708c:	d007      	beq.n	800709e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f042 0201 	orr.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	00010007 	.word	0x00010007

080070b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e01d      	b.n	80070fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f005 fb7e 	bl	800c7d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f000 fb22 	bl	8007738 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b02      	cmp	r3, #2
 800711a:	d122      	bne.n	8007162 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b02      	cmp	r3, #2
 8007128:	d11b      	bne.n	8007162 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f06f 0202 	mvn.w	r2, #2
 8007132:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fad7 	bl	80076fc <HAL_TIM_IC_CaptureCallback>
 800714e:	e005      	b.n	800715c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fac9 	bl	80076e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fada 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b04      	cmp	r3, #4
 800716e:	d122      	bne.n	80071b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b04      	cmp	r3, #4
 800717c:	d11b      	bne.n	80071b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f06f 0204 	mvn.w	r2, #4
 8007186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 faad 	bl	80076fc <HAL_TIM_IC_CaptureCallback>
 80071a2:	e005      	b.n	80071b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fa9f 	bl	80076e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fab0 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d122      	bne.n	800720a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d11b      	bne.n	800720a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f06f 0208 	mvn.w	r2, #8
 80071da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2204      	movs	r2, #4
 80071e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fa83 	bl	80076fc <HAL_TIM_IC_CaptureCallback>
 80071f6:	e005      	b.n	8007204 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa75 	bl	80076e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fa86 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b10      	cmp	r3, #16
 8007216:	d122      	bne.n	800725e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b10      	cmp	r3, #16
 8007224:	d11b      	bne.n	800725e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f06f 0210 	mvn.w	r2, #16
 800722e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2208      	movs	r2, #8
 8007234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fa59 	bl	80076fc <HAL_TIM_IC_CaptureCallback>
 800724a:	e005      	b.n	8007258 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa4b 	bl	80076e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa5c 	bl	8007710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	d10e      	bne.n	800728a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b01      	cmp	r3, #1
 8007278:	d107      	bne.n	800728a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f06f 0201 	mvn.w	r2, #1
 8007282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f004 fe03 	bl	800be90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	d10e      	bne.n	80072b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b80      	cmp	r3, #128	; 0x80
 80072a4:	d107      	bne.n	80072b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 febd 	bl	8008030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c4:	d10e      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d0:	2b80      	cmp	r3, #128	; 0x80
 80072d2:	d107      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 feb0 	bl	8008044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ee:	2b40      	cmp	r3, #64	; 0x40
 80072f0:	d10e      	bne.n	8007310 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b40      	cmp	r3, #64	; 0x40
 80072fe:	d107      	bne.n	8007310 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa0a 	bl	8007724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b20      	cmp	r3, #32
 800731c:	d10e      	bne.n	800733c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b20      	cmp	r3, #32
 800732a:	d107      	bne.n	800733c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f06f 0220 	mvn.w	r2, #32
 8007334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fe70 	bl	800801c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800735a:	2302      	movs	r3, #2
 800735c:	e105      	b.n	800756a <HAL_TIM_PWM_ConfigChannel+0x226>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2202      	movs	r2, #2
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b14      	cmp	r3, #20
 8007372:	f200 80f0 	bhi.w	8007556 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	080073d1 	.word	0x080073d1
 8007380:	08007557 	.word	0x08007557
 8007384:	08007557 	.word	0x08007557
 8007388:	08007557 	.word	0x08007557
 800738c:	08007411 	.word	0x08007411
 8007390:	08007557 	.word	0x08007557
 8007394:	08007557 	.word	0x08007557
 8007398:	08007557 	.word	0x08007557
 800739c:	08007453 	.word	0x08007453
 80073a0:	08007557 	.word	0x08007557
 80073a4:	08007557 	.word	0x08007557
 80073a8:	08007557 	.word	0x08007557
 80073ac:	08007493 	.word	0x08007493
 80073b0:	08007557 	.word	0x08007557
 80073b4:	08007557 	.word	0x08007557
 80073b8:	08007557 	.word	0x08007557
 80073bc:	080074d5 	.word	0x080074d5
 80073c0:	08007557 	.word	0x08007557
 80073c4:	08007557 	.word	0x08007557
 80073c8:	08007557 	.word	0x08007557
 80073cc:	08007515 	.word	0x08007515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fa4e 	bl	8007878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0208 	orr.w	r2, r2, #8
 80073ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0204 	bic.w	r2, r2, #4
 80073fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6999      	ldr	r1, [r3, #24]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	691a      	ldr	r2, [r3, #16]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	619a      	str	r2, [r3, #24]
      break;
 800740e:	e0a3      	b.n	8007558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68b9      	ldr	r1, [r7, #8]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 faa0 	bl	800795c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699a      	ldr	r2, [r3, #24]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800742a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6999      	ldr	r1, [r3, #24]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	021a      	lsls	r2, r3, #8
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	619a      	str	r2, [r3, #24]
      break;
 8007450:	e082      	b.n	8007558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	4618      	mov	r0, r3
 800745a:	f000 faf7 	bl	8007a4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69da      	ldr	r2, [r3, #28]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0208 	orr.w	r2, r2, #8
 800746c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0204 	bic.w	r2, r2, #4
 800747c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69d9      	ldr	r1, [r3, #28]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	61da      	str	r2, [r3, #28]
      break;
 8007490:	e062      	b.n	8007558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	4618      	mov	r0, r3
 800749a:	f000 fb4d 	bl	8007b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69d9      	ldr	r1, [r3, #28]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	021a      	lsls	r2, r3, #8
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	61da      	str	r2, [r3, #28]
      break;
 80074d2:	e041      	b.n	8007558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fb84 	bl	8007be8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0208 	orr.w	r2, r2, #8
 80074ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0204 	bic.w	r2, r2, #4
 80074fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	691a      	ldr	r2, [r3, #16]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007512:	e021      	b.n	8007558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fbb6 	bl	8007c8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800752e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800753e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	021a      	lsls	r2, r3, #8
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007554:	e000      	b.n	8007558 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007556:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop

08007574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_TIM_ConfigClockSource+0x18>
 8007588:	2302      	movs	r3, #2
 800758a:	e0a6      	b.n	80076da <HAL_TIM_ConfigClockSource+0x166>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4b4f      	ldr	r3, [pc, #316]	; (80076e4 <HAL_TIM_ConfigClockSource+0x170>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	d067      	beq.n	8007694 <HAL_TIM_ConfigClockSource+0x120>
 80075c4:	2b40      	cmp	r3, #64	; 0x40
 80075c6:	d80b      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x6c>
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d073      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x140>
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d802      	bhi.n	80075d6 <HAL_TIM_ConfigClockSource+0x62>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d06f      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80075d4:	e078      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d06c      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x140>
 80075da:	2b30      	cmp	r3, #48	; 0x30
 80075dc:	d06a      	beq.n	80076b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80075de:	e073      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80075e0:	2b70      	cmp	r3, #112	; 0x70
 80075e2:	d00d      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0x8c>
 80075e4:	2b70      	cmp	r3, #112	; 0x70
 80075e6:	d804      	bhi.n	80075f2 <HAL_TIM_ConfigClockSource+0x7e>
 80075e8:	2b50      	cmp	r3, #80	; 0x50
 80075ea:	d033      	beq.n	8007654 <HAL_TIM_ConfigClockSource+0xe0>
 80075ec:	2b60      	cmp	r3, #96	; 0x60
 80075ee:	d041      	beq.n	8007674 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80075f0:	e06a      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f6:	d066      	beq.n	80076c6 <HAL_TIM_ConfigClockSource+0x152>
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075fc:	d017      	beq.n	800762e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80075fe:	e063      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6899      	ldr	r1, [r3, #8]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f000 fc0a 	bl	8007e28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007622:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	609a      	str	r2, [r3, #8]
      break;
 800762c:	e04c      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6899      	ldr	r1, [r3, #8]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f000 fbf3 	bl	8007e28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007650:	609a      	str	r2, [r3, #8]
      break;
 8007652:	e039      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	6859      	ldr	r1, [r3, #4]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	461a      	mov	r2, r3
 8007662:	f000 fb67 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2150      	movs	r1, #80	; 0x50
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fbc0 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007672:	e029      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	6859      	ldr	r1, [r3, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	461a      	mov	r2, r3
 8007682:	f000 fb86 	bl	8007d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2160      	movs	r1, #96	; 0x60
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fbb0 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 8007692:	e019      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6859      	ldr	r1, [r3, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	461a      	mov	r2, r3
 80076a2:	f000 fb47 	bl	8007d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2140      	movs	r1, #64	; 0x40
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fba0 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 80076b2:	e009      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f000 fb97 	bl	8007df2 <TIM_ITRx_SetConfig>
      break;
 80076c4:	e000      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80076c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	fffeff88 	.word	0xfffeff88

080076e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a40      	ldr	r2, [pc, #256]	; (800784c <TIM_Base_SetConfig+0x114>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d013      	beq.n	8007778 <TIM_Base_SetConfig+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007756:	d00f      	beq.n	8007778 <TIM_Base_SetConfig+0x40>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a3d      	ldr	r2, [pc, #244]	; (8007850 <TIM_Base_SetConfig+0x118>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00b      	beq.n	8007778 <TIM_Base_SetConfig+0x40>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a3c      	ldr	r2, [pc, #240]	; (8007854 <TIM_Base_SetConfig+0x11c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d007      	beq.n	8007778 <TIM_Base_SetConfig+0x40>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a3b      	ldr	r2, [pc, #236]	; (8007858 <TIM_Base_SetConfig+0x120>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d003      	beq.n	8007778 <TIM_Base_SetConfig+0x40>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a3a      	ldr	r2, [pc, #232]	; (800785c <TIM_Base_SetConfig+0x124>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d108      	bne.n	800778a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a2f      	ldr	r2, [pc, #188]	; (800784c <TIM_Base_SetConfig+0x114>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d02b      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007798:	d027      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2c      	ldr	r2, [pc, #176]	; (8007850 <TIM_Base_SetConfig+0x118>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d023      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a2b      	ldr	r2, [pc, #172]	; (8007854 <TIM_Base_SetConfig+0x11c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01f      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a2a      	ldr	r2, [pc, #168]	; (8007858 <TIM_Base_SetConfig+0x120>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01b      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a29      	ldr	r2, [pc, #164]	; (800785c <TIM_Base_SetConfig+0x124>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d017      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a28      	ldr	r2, [pc, #160]	; (8007860 <TIM_Base_SetConfig+0x128>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a27      	ldr	r2, [pc, #156]	; (8007864 <TIM_Base_SetConfig+0x12c>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00f      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a26      	ldr	r2, [pc, #152]	; (8007868 <TIM_Base_SetConfig+0x130>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00b      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a25      	ldr	r2, [pc, #148]	; (800786c <TIM_Base_SetConfig+0x134>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d007      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a24      	ldr	r2, [pc, #144]	; (8007870 <TIM_Base_SetConfig+0x138>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_Base_SetConfig+0xb2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a23      	ldr	r2, [pc, #140]	; (8007874 <TIM_Base_SetConfig+0x13c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d108      	bne.n	80077fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a0a      	ldr	r2, [pc, #40]	; (800784c <TIM_Base_SetConfig+0x114>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_Base_SetConfig+0xf8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a0c      	ldr	r2, [pc, #48]	; (800785c <TIM_Base_SetConfig+0x124>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d103      	bne.n	8007838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	615a      	str	r2, [r3, #20]
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	40010400 	.word	0x40010400
 8007860:	40014000 	.word	0x40014000
 8007864:	40014400 	.word	0x40014400
 8007868:	40014800 	.word	0x40014800
 800786c:	40001800 	.word	0x40001800
 8007870:	40001c00 	.word	0x40001c00
 8007874:	40002000 	.word	0x40002000

08007878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f023 0201 	bic.w	r2, r3, #1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4b2b      	ldr	r3, [pc, #172]	; (8007950 <TIM_OC1_SetConfig+0xd8>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f023 0302 	bic.w	r3, r3, #2
 80078c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a21      	ldr	r2, [pc, #132]	; (8007954 <TIM_OC1_SetConfig+0xdc>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC1_SetConfig+0x64>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a20      	ldr	r2, [pc, #128]	; (8007958 <TIM_OC1_SetConfig+0xe0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d10c      	bne.n	80078f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f023 0308 	bic.w	r3, r3, #8
 80078e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f023 0304 	bic.w	r3, r3, #4
 80078f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a16      	ldr	r2, [pc, #88]	; (8007954 <TIM_OC1_SetConfig+0xdc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <TIM_OC1_SetConfig+0x8e>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a15      	ldr	r2, [pc, #84]	; (8007958 <TIM_OC1_SetConfig+0xe0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d111      	bne.n	800792a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800790c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	4313      	orrs	r3, r2
 8007928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	621a      	str	r2, [r3, #32]
}
 8007944:	bf00      	nop
 8007946:	371c      	adds	r7, #28
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	fffeff8f 	.word	0xfffeff8f
 8007954:	40010000 	.word	0x40010000
 8007958:	40010400 	.word	0x40010400

0800795c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0210 	bic.w	r2, r3, #16
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4b2e      	ldr	r3, [pc, #184]	; (8007a40 <TIM_OC2_SetConfig+0xe4>)
 8007988:	4013      	ands	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0320 	bic.w	r3, r3, #32
 80079a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a23      	ldr	r2, [pc, #140]	; (8007a44 <TIM_OC2_SetConfig+0xe8>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_OC2_SetConfig+0x68>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a22      	ldr	r2, [pc, #136]	; (8007a48 <TIM_OC2_SetConfig+0xec>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d10d      	bne.n	80079e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a18      	ldr	r2, [pc, #96]	; (8007a44 <TIM_OC2_SetConfig+0xe8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d003      	beq.n	80079f0 <TIM_OC2_SetConfig+0x94>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <TIM_OC2_SetConfig+0xec>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d113      	bne.n	8007a18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	feff8fff 	.word	0xfeff8fff
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40010400 	.word	0x40010400

08007a4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4b2d      	ldr	r3, [pc, #180]	; (8007b2c <TIM_OC3_SetConfig+0xe0>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a22      	ldr	r2, [pc, #136]	; (8007b30 <TIM_OC3_SetConfig+0xe4>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d003      	beq.n	8007ab2 <TIM_OC3_SetConfig+0x66>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a21      	ldr	r2, [pc, #132]	; (8007b34 <TIM_OC3_SetConfig+0xe8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d10d      	bne.n	8007ace <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <TIM_OC3_SetConfig+0xe4>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_OC3_SetConfig+0x92>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a16      	ldr	r2, [pc, #88]	; (8007b34 <TIM_OC3_SetConfig+0xe8>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d113      	bne.n	8007b06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	621a      	str	r2, [r3, #32]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	fffeff8f 	.word	0xfffeff8f
 8007b30:	40010000 	.word	0x40010000
 8007b34:	40010400 	.word	0x40010400

08007b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <TIM_OC4_SetConfig+0xa4>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	021b      	lsls	r3, r3, #8
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	031b      	lsls	r3, r3, #12
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a13      	ldr	r2, [pc, #76]	; (8007be0 <TIM_OC4_SetConfig+0xa8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d003      	beq.n	8007ba0 <TIM_OC4_SetConfig+0x68>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a12      	ldr	r2, [pc, #72]	; (8007be4 <TIM_OC4_SetConfig+0xac>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d109      	bne.n	8007bb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	019b      	lsls	r3, r3, #6
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	621a      	str	r2, [r3, #32]
}
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	feff8fff 	.word	0xfeff8fff
 8007be0:	40010000 	.word	0x40010000
 8007be4:	40010400 	.word	0x40010400

08007be8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4b1b      	ldr	r3, [pc, #108]	; (8007c80 <TIM_OC5_SetConfig+0x98>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a12      	ldr	r2, [pc, #72]	; (8007c84 <TIM_OC5_SetConfig+0x9c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d003      	beq.n	8007c46 <TIM_OC5_SetConfig+0x5e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a11      	ldr	r2, [pc, #68]	; (8007c88 <TIM_OC5_SetConfig+0xa0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d109      	bne.n	8007c5a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	621a      	str	r2, [r3, #32]
}
 8007c74:	bf00      	nop
 8007c76:	371c      	adds	r7, #28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	fffeff8f 	.word	0xfffeff8f
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40010400 	.word	0x40010400

08007c8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4b1c      	ldr	r3, [pc, #112]	; (8007d28 <TIM_OC6_SetConfig+0x9c>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	051b      	lsls	r3, r3, #20
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a13      	ldr	r2, [pc, #76]	; (8007d2c <TIM_OC6_SetConfig+0xa0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d003      	beq.n	8007cec <TIM_OC6_SetConfig+0x60>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a12      	ldr	r2, [pc, #72]	; (8007d30 <TIM_OC6_SetConfig+0xa4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d109      	bne.n	8007d00 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	029b      	lsls	r3, r3, #10
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	feff8fff 	.word	0xfeff8fff
 8007d2c:	40010000 	.word	0x40010000
 8007d30:	40010400 	.word	0x40010400

08007d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 030a 	bic.w	r3, r3, #10
 8007d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	f023 0210 	bic.w	r2, r3, #16
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	031b      	lsls	r3, r3, #12
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	011b      	lsls	r3, r3, #4
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	621a      	str	r2, [r3, #32]
}
 8007de6:	bf00      	nop
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f043 0307 	orr.w	r3, r3, #7
 8007e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	609a      	str	r2, [r3, #8]
}
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	021a      	lsls	r2, r3, #8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	609a      	str	r2, [r3, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e045      	b.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a1c      	ldr	r2, [pc, #112]	; (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1b      	ldr	r2, [pc, #108]	; (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d108      	bne.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ede:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40010400 	.word	0x40010400

08007f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e065      	b.n	8008008 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	041b      	lsls	r3, r3, #16
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a16      	ldr	r2, [pc, #88]	; (8008014 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d004      	beq.n	8007fca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a14      	ldr	r2, [pc, #80]	; (8008018 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d115      	bne.n	8007ff6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	051b      	lsls	r3, r3, #20
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	40010000 	.word	0x40010000
 8008018:	40010400 	.word	0x40010400

0800801c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e040      	b.n	80080ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800806e:	2b00      	cmp	r3, #0
 8008070:	d106      	bne.n	8008080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f004 fc50 	bl	800c920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2224      	movs	r2, #36	; 0x24
 8008084:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0201 	bic.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f82c 	bl	80080f4 <UART_SetConfig>
 800809c:	4603      	mov	r3, r0
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d101      	bne.n	80080a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e022      	b.n	80080ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fac4 	bl	800863c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689a      	ldr	r2, [r3, #8]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080d2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fb4b 	bl	8008780 <UART_CheckIdleState>
 80080ea:	4603      	mov	r3, r0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	431a      	orrs	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	4313      	orrs	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	4bb1      	ldr	r3, [pc, #708]	; (80083e8 <UART_SetConfig+0x2f4>)
 8008124:	4013      	ands	r3, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6812      	ldr	r2, [r2, #0]
 800812a:	6939      	ldr	r1, [r7, #16]
 800812c:	430b      	orrs	r3, r1
 800812e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	430a      	orrs	r2, r1
 8008168:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a9f      	ldr	r2, [pc, #636]	; (80083ec <UART_SetConfig+0x2f8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d121      	bne.n	80081b8 <UART_SetConfig+0xc4>
 8008174:	4b9e      	ldr	r3, [pc, #632]	; (80083f0 <UART_SetConfig+0x2fc>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	2b03      	cmp	r3, #3
 8008180:	d816      	bhi.n	80081b0 <UART_SetConfig+0xbc>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <UART_SetConfig+0x94>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	08008199 	.word	0x08008199
 800818c:	080081a5 	.word	0x080081a5
 8008190:	0800819f 	.word	0x0800819f
 8008194:	080081ab 	.word	0x080081ab
 8008198:	2301      	movs	r3, #1
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	e151      	b.n	8008442 <UART_SetConfig+0x34e>
 800819e:	2302      	movs	r3, #2
 80081a0:	77fb      	strb	r3, [r7, #31]
 80081a2:	e14e      	b.n	8008442 <UART_SetConfig+0x34e>
 80081a4:	2304      	movs	r3, #4
 80081a6:	77fb      	strb	r3, [r7, #31]
 80081a8:	e14b      	b.n	8008442 <UART_SetConfig+0x34e>
 80081aa:	2308      	movs	r3, #8
 80081ac:	77fb      	strb	r3, [r7, #31]
 80081ae:	e148      	b.n	8008442 <UART_SetConfig+0x34e>
 80081b0:	2310      	movs	r3, #16
 80081b2:	77fb      	strb	r3, [r7, #31]
 80081b4:	bf00      	nop
 80081b6:	e144      	b.n	8008442 <UART_SetConfig+0x34e>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a8d      	ldr	r2, [pc, #564]	; (80083f4 <UART_SetConfig+0x300>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d134      	bne.n	800822c <UART_SetConfig+0x138>
 80081c2:	4b8b      	ldr	r3, [pc, #556]	; (80083f0 <UART_SetConfig+0x2fc>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f003 030c 	and.w	r3, r3, #12
 80081cc:	2b0c      	cmp	r3, #12
 80081ce:	d829      	bhi.n	8008224 <UART_SetConfig+0x130>
 80081d0:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <UART_SetConfig+0xe4>)
 80081d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d6:	bf00      	nop
 80081d8:	0800820d 	.word	0x0800820d
 80081dc:	08008225 	.word	0x08008225
 80081e0:	08008225 	.word	0x08008225
 80081e4:	08008225 	.word	0x08008225
 80081e8:	08008219 	.word	0x08008219
 80081ec:	08008225 	.word	0x08008225
 80081f0:	08008225 	.word	0x08008225
 80081f4:	08008225 	.word	0x08008225
 80081f8:	08008213 	.word	0x08008213
 80081fc:	08008225 	.word	0x08008225
 8008200:	08008225 	.word	0x08008225
 8008204:	08008225 	.word	0x08008225
 8008208:	0800821f 	.word	0x0800821f
 800820c:	2300      	movs	r3, #0
 800820e:	77fb      	strb	r3, [r7, #31]
 8008210:	e117      	b.n	8008442 <UART_SetConfig+0x34e>
 8008212:	2302      	movs	r3, #2
 8008214:	77fb      	strb	r3, [r7, #31]
 8008216:	e114      	b.n	8008442 <UART_SetConfig+0x34e>
 8008218:	2304      	movs	r3, #4
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	e111      	b.n	8008442 <UART_SetConfig+0x34e>
 800821e:	2308      	movs	r3, #8
 8008220:	77fb      	strb	r3, [r7, #31]
 8008222:	e10e      	b.n	8008442 <UART_SetConfig+0x34e>
 8008224:	2310      	movs	r3, #16
 8008226:	77fb      	strb	r3, [r7, #31]
 8008228:	bf00      	nop
 800822a:	e10a      	b.n	8008442 <UART_SetConfig+0x34e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a71      	ldr	r2, [pc, #452]	; (80083f8 <UART_SetConfig+0x304>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d120      	bne.n	8008278 <UART_SetConfig+0x184>
 8008236:	4b6e      	ldr	r3, [pc, #440]	; (80083f0 <UART_SetConfig+0x2fc>)
 8008238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008240:	2b10      	cmp	r3, #16
 8008242:	d00f      	beq.n	8008264 <UART_SetConfig+0x170>
 8008244:	2b10      	cmp	r3, #16
 8008246:	d802      	bhi.n	800824e <UART_SetConfig+0x15a>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <UART_SetConfig+0x164>
 800824c:	e010      	b.n	8008270 <UART_SetConfig+0x17c>
 800824e:	2b20      	cmp	r3, #32
 8008250:	d005      	beq.n	800825e <UART_SetConfig+0x16a>
 8008252:	2b30      	cmp	r3, #48	; 0x30
 8008254:	d009      	beq.n	800826a <UART_SetConfig+0x176>
 8008256:	e00b      	b.n	8008270 <UART_SetConfig+0x17c>
 8008258:	2300      	movs	r3, #0
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e0f1      	b.n	8008442 <UART_SetConfig+0x34e>
 800825e:	2302      	movs	r3, #2
 8008260:	77fb      	strb	r3, [r7, #31]
 8008262:	e0ee      	b.n	8008442 <UART_SetConfig+0x34e>
 8008264:	2304      	movs	r3, #4
 8008266:	77fb      	strb	r3, [r7, #31]
 8008268:	e0eb      	b.n	8008442 <UART_SetConfig+0x34e>
 800826a:	2308      	movs	r3, #8
 800826c:	77fb      	strb	r3, [r7, #31]
 800826e:	e0e8      	b.n	8008442 <UART_SetConfig+0x34e>
 8008270:	2310      	movs	r3, #16
 8008272:	77fb      	strb	r3, [r7, #31]
 8008274:	bf00      	nop
 8008276:	e0e4      	b.n	8008442 <UART_SetConfig+0x34e>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a5f      	ldr	r2, [pc, #380]	; (80083fc <UART_SetConfig+0x308>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d120      	bne.n	80082c4 <UART_SetConfig+0x1d0>
 8008282:	4b5b      	ldr	r3, [pc, #364]	; (80083f0 <UART_SetConfig+0x2fc>)
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008288:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800828c:	2b40      	cmp	r3, #64	; 0x40
 800828e:	d00f      	beq.n	80082b0 <UART_SetConfig+0x1bc>
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d802      	bhi.n	800829a <UART_SetConfig+0x1a6>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <UART_SetConfig+0x1b0>
 8008298:	e010      	b.n	80082bc <UART_SetConfig+0x1c8>
 800829a:	2b80      	cmp	r3, #128	; 0x80
 800829c:	d005      	beq.n	80082aa <UART_SetConfig+0x1b6>
 800829e:	2bc0      	cmp	r3, #192	; 0xc0
 80082a0:	d009      	beq.n	80082b6 <UART_SetConfig+0x1c2>
 80082a2:	e00b      	b.n	80082bc <UART_SetConfig+0x1c8>
 80082a4:	2300      	movs	r3, #0
 80082a6:	77fb      	strb	r3, [r7, #31]
 80082a8:	e0cb      	b.n	8008442 <UART_SetConfig+0x34e>
 80082aa:	2302      	movs	r3, #2
 80082ac:	77fb      	strb	r3, [r7, #31]
 80082ae:	e0c8      	b.n	8008442 <UART_SetConfig+0x34e>
 80082b0:	2304      	movs	r3, #4
 80082b2:	77fb      	strb	r3, [r7, #31]
 80082b4:	e0c5      	b.n	8008442 <UART_SetConfig+0x34e>
 80082b6:	2308      	movs	r3, #8
 80082b8:	77fb      	strb	r3, [r7, #31]
 80082ba:	e0c2      	b.n	8008442 <UART_SetConfig+0x34e>
 80082bc:	2310      	movs	r3, #16
 80082be:	77fb      	strb	r3, [r7, #31]
 80082c0:	bf00      	nop
 80082c2:	e0be      	b.n	8008442 <UART_SetConfig+0x34e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a4d      	ldr	r2, [pc, #308]	; (8008400 <UART_SetConfig+0x30c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d124      	bne.n	8008318 <UART_SetConfig+0x224>
 80082ce:	4b48      	ldr	r3, [pc, #288]	; (80083f0 <UART_SetConfig+0x2fc>)
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082dc:	d012      	beq.n	8008304 <UART_SetConfig+0x210>
 80082de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e2:	d802      	bhi.n	80082ea <UART_SetConfig+0x1f6>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d007      	beq.n	80082f8 <UART_SetConfig+0x204>
 80082e8:	e012      	b.n	8008310 <UART_SetConfig+0x21c>
 80082ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ee:	d006      	beq.n	80082fe <UART_SetConfig+0x20a>
 80082f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082f4:	d009      	beq.n	800830a <UART_SetConfig+0x216>
 80082f6:	e00b      	b.n	8008310 <UART_SetConfig+0x21c>
 80082f8:	2300      	movs	r3, #0
 80082fa:	77fb      	strb	r3, [r7, #31]
 80082fc:	e0a1      	b.n	8008442 <UART_SetConfig+0x34e>
 80082fe:	2302      	movs	r3, #2
 8008300:	77fb      	strb	r3, [r7, #31]
 8008302:	e09e      	b.n	8008442 <UART_SetConfig+0x34e>
 8008304:	2304      	movs	r3, #4
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	e09b      	b.n	8008442 <UART_SetConfig+0x34e>
 800830a:	2308      	movs	r3, #8
 800830c:	77fb      	strb	r3, [r7, #31]
 800830e:	e098      	b.n	8008442 <UART_SetConfig+0x34e>
 8008310:	2310      	movs	r3, #16
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	bf00      	nop
 8008316:	e094      	b.n	8008442 <UART_SetConfig+0x34e>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a39      	ldr	r2, [pc, #228]	; (8008404 <UART_SetConfig+0x310>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d124      	bne.n	800836c <UART_SetConfig+0x278>
 8008322:	4b33      	ldr	r3, [pc, #204]	; (80083f0 <UART_SetConfig+0x2fc>)
 8008324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008328:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800832c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008330:	d012      	beq.n	8008358 <UART_SetConfig+0x264>
 8008332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008336:	d802      	bhi.n	800833e <UART_SetConfig+0x24a>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <UART_SetConfig+0x258>
 800833c:	e012      	b.n	8008364 <UART_SetConfig+0x270>
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008342:	d006      	beq.n	8008352 <UART_SetConfig+0x25e>
 8008344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008348:	d009      	beq.n	800835e <UART_SetConfig+0x26a>
 800834a:	e00b      	b.n	8008364 <UART_SetConfig+0x270>
 800834c:	2301      	movs	r3, #1
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e077      	b.n	8008442 <UART_SetConfig+0x34e>
 8008352:	2302      	movs	r3, #2
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e074      	b.n	8008442 <UART_SetConfig+0x34e>
 8008358:	2304      	movs	r3, #4
 800835a:	77fb      	strb	r3, [r7, #31]
 800835c:	e071      	b.n	8008442 <UART_SetConfig+0x34e>
 800835e:	2308      	movs	r3, #8
 8008360:	77fb      	strb	r3, [r7, #31]
 8008362:	e06e      	b.n	8008442 <UART_SetConfig+0x34e>
 8008364:	2310      	movs	r3, #16
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	bf00      	nop
 800836a:	e06a      	b.n	8008442 <UART_SetConfig+0x34e>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a25      	ldr	r2, [pc, #148]	; (8008408 <UART_SetConfig+0x314>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d124      	bne.n	80083c0 <UART_SetConfig+0x2cc>
 8008376:	4b1e      	ldr	r3, [pc, #120]	; (80083f0 <UART_SetConfig+0x2fc>)
 8008378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008384:	d012      	beq.n	80083ac <UART_SetConfig+0x2b8>
 8008386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838a:	d802      	bhi.n	8008392 <UART_SetConfig+0x29e>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <UART_SetConfig+0x2ac>
 8008390:	e012      	b.n	80083b8 <UART_SetConfig+0x2c4>
 8008392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008396:	d006      	beq.n	80083a6 <UART_SetConfig+0x2b2>
 8008398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800839c:	d009      	beq.n	80083b2 <UART_SetConfig+0x2be>
 800839e:	e00b      	b.n	80083b8 <UART_SetConfig+0x2c4>
 80083a0:	2300      	movs	r3, #0
 80083a2:	77fb      	strb	r3, [r7, #31]
 80083a4:	e04d      	b.n	8008442 <UART_SetConfig+0x34e>
 80083a6:	2302      	movs	r3, #2
 80083a8:	77fb      	strb	r3, [r7, #31]
 80083aa:	e04a      	b.n	8008442 <UART_SetConfig+0x34e>
 80083ac:	2304      	movs	r3, #4
 80083ae:	77fb      	strb	r3, [r7, #31]
 80083b0:	e047      	b.n	8008442 <UART_SetConfig+0x34e>
 80083b2:	2308      	movs	r3, #8
 80083b4:	77fb      	strb	r3, [r7, #31]
 80083b6:	e044      	b.n	8008442 <UART_SetConfig+0x34e>
 80083b8:	2310      	movs	r3, #16
 80083ba:	77fb      	strb	r3, [r7, #31]
 80083bc:	bf00      	nop
 80083be:	e040      	b.n	8008442 <UART_SetConfig+0x34e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a11      	ldr	r2, [pc, #68]	; (800840c <UART_SetConfig+0x318>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d139      	bne.n	800843e <UART_SetConfig+0x34a>
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <UART_SetConfig+0x2fc>)
 80083cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d8:	d027      	beq.n	800842a <UART_SetConfig+0x336>
 80083da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083de:	d817      	bhi.n	8008410 <UART_SetConfig+0x31c>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01c      	beq.n	800841e <UART_SetConfig+0x32a>
 80083e4:	e027      	b.n	8008436 <UART_SetConfig+0x342>
 80083e6:	bf00      	nop
 80083e8:	efff69f3 	.word	0xefff69f3
 80083ec:	40011000 	.word	0x40011000
 80083f0:	40023800 	.word	0x40023800
 80083f4:	40004400 	.word	0x40004400
 80083f8:	40004800 	.word	0x40004800
 80083fc:	40004c00 	.word	0x40004c00
 8008400:	40005000 	.word	0x40005000
 8008404:	40011400 	.word	0x40011400
 8008408:	40007800 	.word	0x40007800
 800840c:	40007c00 	.word	0x40007c00
 8008410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008414:	d006      	beq.n	8008424 <UART_SetConfig+0x330>
 8008416:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800841a:	d009      	beq.n	8008430 <UART_SetConfig+0x33c>
 800841c:	e00b      	b.n	8008436 <UART_SetConfig+0x342>
 800841e:	2300      	movs	r3, #0
 8008420:	77fb      	strb	r3, [r7, #31]
 8008422:	e00e      	b.n	8008442 <UART_SetConfig+0x34e>
 8008424:	2302      	movs	r3, #2
 8008426:	77fb      	strb	r3, [r7, #31]
 8008428:	e00b      	b.n	8008442 <UART_SetConfig+0x34e>
 800842a:	2304      	movs	r3, #4
 800842c:	77fb      	strb	r3, [r7, #31]
 800842e:	e008      	b.n	8008442 <UART_SetConfig+0x34e>
 8008430:	2308      	movs	r3, #8
 8008432:	77fb      	strb	r3, [r7, #31]
 8008434:	e005      	b.n	8008442 <UART_SetConfig+0x34e>
 8008436:	2310      	movs	r3, #16
 8008438:	77fb      	strb	r3, [r7, #31]
 800843a:	bf00      	nop
 800843c:	e001      	b.n	8008442 <UART_SetConfig+0x34e>
 800843e:	2310      	movs	r3, #16
 8008440:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800844a:	d17c      	bne.n	8008546 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800844c:	7ffb      	ldrb	r3, [r7, #31]
 800844e:	2b08      	cmp	r3, #8
 8008450:	d859      	bhi.n	8008506 <UART_SetConfig+0x412>
 8008452:	a201      	add	r2, pc, #4	; (adr r2, 8008458 <UART_SetConfig+0x364>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	0800847d 	.word	0x0800847d
 800845c:	0800849b 	.word	0x0800849b
 8008460:	080084b9 	.word	0x080084b9
 8008464:	08008507 	.word	0x08008507
 8008468:	080084d1 	.word	0x080084d1
 800846c:	08008507 	.word	0x08008507
 8008470:	08008507 	.word	0x08008507
 8008474:	08008507 	.word	0x08008507
 8008478:	080084ef 	.word	0x080084ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800847c:	f7fd f8e0 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 8008480:	4603      	mov	r3, r0
 8008482:	005a      	lsls	r2, r3, #1
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	085b      	lsrs	r3, r3, #1
 800848a:	441a      	add	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	fbb2 f3f3 	udiv	r3, r2, r3
 8008494:	b29b      	uxth	r3, r3
 8008496:	61bb      	str	r3, [r7, #24]
        break;
 8008498:	e038      	b.n	800850c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800849a:	f7fd f8e5 	bl	8005668 <HAL_RCC_GetPCLK2Freq>
 800849e:	4603      	mov	r3, r0
 80084a0:	005a      	lsls	r2, r3, #1
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	085b      	lsrs	r3, r3, #1
 80084a8:	441a      	add	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	61bb      	str	r3, [r7, #24]
        break;
 80084b6:	e029      	b.n	800850c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	085a      	lsrs	r2, r3, #1
 80084be:	4b5d      	ldr	r3, [pc, #372]	; (8008634 <UART_SetConfig+0x540>)
 80084c0:	4413      	add	r3, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6852      	ldr	r2, [r2, #4]
 80084c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	61bb      	str	r3, [r7, #24]
        break;
 80084ce:	e01d      	b.n	800850c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80084d0:	f7fc fff8 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 80084d4:	4603      	mov	r3, r0
 80084d6:	005a      	lsls	r2, r3, #1
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	085b      	lsrs	r3, r3, #1
 80084de:	441a      	add	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	61bb      	str	r3, [r7, #24]
        break;
 80084ec:	e00e      	b.n	800850c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	085b      	lsrs	r3, r3, #1
 80084f4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008500:	b29b      	uxth	r3, r3
 8008502:	61bb      	str	r3, [r7, #24]
        break;
 8008504:	e002      	b.n	800850c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	75fb      	strb	r3, [r7, #23]
        break;
 800850a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b0f      	cmp	r3, #15
 8008510:	d916      	bls.n	8008540 <UART_SetConfig+0x44c>
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008518:	d212      	bcs.n	8008540 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f023 030f 	bic.w	r3, r3, #15
 8008522:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	b29b      	uxth	r3, r3
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	b29a      	uxth	r2, r3
 8008530:	89fb      	ldrh	r3, [r7, #14]
 8008532:	4313      	orrs	r3, r2
 8008534:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	89fa      	ldrh	r2, [r7, #14]
 800853c:	60da      	str	r2, [r3, #12]
 800853e:	e06e      	b.n	800861e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	75fb      	strb	r3, [r7, #23]
 8008544:	e06b      	b.n	800861e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8008546:	7ffb      	ldrb	r3, [r7, #31]
 8008548:	2b08      	cmp	r3, #8
 800854a:	d857      	bhi.n	80085fc <UART_SetConfig+0x508>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <UART_SetConfig+0x460>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008579 	.word	0x08008579
 8008558:	08008595 	.word	0x08008595
 800855c:	080085b1 	.word	0x080085b1
 8008560:	080085fd 	.word	0x080085fd
 8008564:	080085c9 	.word	0x080085c9
 8008568:	080085fd 	.word	0x080085fd
 800856c:	080085fd 	.word	0x080085fd
 8008570:	080085fd 	.word	0x080085fd
 8008574:	080085e5 	.word	0x080085e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008578:	f7fd f862 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 800857c:	4602      	mov	r2, r0
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	085b      	lsrs	r3, r3, #1
 8008584:	441a      	add	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	fbb2 f3f3 	udiv	r3, r2, r3
 800858e:	b29b      	uxth	r3, r3
 8008590:	61bb      	str	r3, [r7, #24]
        break;
 8008592:	e036      	b.n	8008602 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008594:	f7fd f868 	bl	8005668 <HAL_RCC_GetPCLK2Freq>
 8008598:	4602      	mov	r2, r0
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	441a      	add	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	61bb      	str	r3, [r7, #24]
        break;
 80085ae:	e028      	b.n	8008602 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	085a      	lsrs	r2, r3, #1
 80085b6:	4b20      	ldr	r3, [pc, #128]	; (8008638 <UART_SetConfig+0x544>)
 80085b8:	4413      	add	r3, r2
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	6852      	ldr	r2, [r2, #4]
 80085be:	fbb3 f3f2 	udiv	r3, r3, r2
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	61bb      	str	r3, [r7, #24]
        break;
 80085c6:	e01c      	b.n	8008602 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80085c8:	f7fc ff7c 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 80085cc:	4602      	mov	r2, r0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	085b      	lsrs	r3, r3, #1
 80085d4:	441a      	add	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	fbb2 f3f3 	udiv	r3, r2, r3
 80085de:	b29b      	uxth	r3, r3
 80085e0:	61bb      	str	r3, [r7, #24]
        break;
 80085e2:	e00e      	b.n	8008602 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	085b      	lsrs	r3, r3, #1
 80085ea:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	61bb      	str	r3, [r7, #24]
        break;
 80085fa:	e002      	b.n	8008602 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	75fb      	strb	r3, [r7, #23]
        break;
 8008600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	2b0f      	cmp	r3, #15
 8008606:	d908      	bls.n	800861a <UART_SetConfig+0x526>
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800860e:	d204      	bcs.n	800861a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	60da      	str	r2, [r3, #12]
 8008618:	e001      	b.n	800861e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3720      	adds	r7, #32
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	01e84800 	.word	0x01e84800
 8008638:	00f42400 	.word	0x00f42400

0800863c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	f003 0304 	and.w	r3, r3, #4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	f003 0310 	and.w	r3, r3, #16
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01a      	beq.n	8008752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873a:	d10a      	bne.n	8008752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800878e:	f7f8 fd95 	bl	80012bc <HAL_GetTick>
 8008792:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d10e      	bne.n	80087c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f814 	bl	80087de <UART_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e00a      	b.n	80087d6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	4613      	mov	r3, r2
 80087ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ee:	e02a      	b.n	8008846 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d026      	beq.n	8008846 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f8:	f7f8 fd60 	bl	80012bc <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <UART_WaitOnFlagUntilTimeout+0x30>
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d11b      	bne.n	8008846 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800881c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0201 	bic.w	r2, r2, #1
 800882c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2220      	movs	r2, #32
 8008832:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2220      	movs	r2, #32
 8008838:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e00f      	b.n	8008866 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69da      	ldr	r2, [r3, #28]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4013      	ands	r3, r2
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	429a      	cmp	r2, r3
 8008854:	bf0c      	ite	eq
 8008856:	2301      	moveq	r3, #1
 8008858:	2300      	movne	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	429a      	cmp	r2, r3
 8008862:	d0c5      	beq.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800887a:	2300      	movs	r3, #0
 800887c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d027      	beq.n	80088da <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4b2f      	ldr	r3, [pc, #188]	; (8008950 <FMC_SDRAM_Init+0xe0>)
 8008894:	4013      	ands	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80088a0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80088a6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80088ac:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80088b2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80088b8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80088be:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80088c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80088ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	e032      	b.n	8008940 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088e6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80088f0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80088f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	4b12      	ldr	r3, [pc, #72]	; (8008950 <FMC_SDRAM_Init+0xe0>)
 8008908:	4013      	ands	r3, r2
 800890a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008914:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800891a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008920:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008926:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800892c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4313      	orrs	r3, r2
 8008932:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	ffff8000 	.word	0xffff8000

08008954 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d02e      	beq.n	80089cc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800897a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	3b01      	subs	r3, #1
 8008988:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800898a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	3b01      	subs	r3, #1
 8008992:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008994:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	3b01      	subs	r3, #1
 800899c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800899e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80089a8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80089b2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80089bc:	4313      	orrs	r3, r2
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	609a      	str	r2, [r3, #8]
 80089ca:	e039      	b.n	8008a40 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	4b1e      	ldr	r3, [pc, #120]	; (8008a50 <FMC_SDRAM_Timing_Init+0xfc>)
 80089d6:	4013      	ands	r3, r2
 80089d8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	3b01      	subs	r3, #1
 80089e0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80089ea:	4313      	orrs	r3, r2
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80089fe:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008a0e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008a18:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8008a22:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	ff0f0fff 	.word	0xff0f0fff

08008a54 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008a6c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008a76:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	695a      	ldr	r2, [r3, #20]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f043 0201 	orr.w	r2, r3, #1
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f023 0201 	bic.w	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	019b      	lsls	r3, r3, #6
 8008b12:	f043 0220 	orr.w	r2, r3, #32
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4a09      	ldr	r2, [pc, #36]	; (8008b48 <USB_FlushTxFifo+0x48>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d901      	bls.n	8008b2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e006      	b.n	8008b3a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b20      	cmp	r3, #32
 8008b36:	d0f0      	beq.n	8008b1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	00030d40 	.word	0x00030d40

08008b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2210      	movs	r2, #16
 8008b5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4a09      	ldr	r2, [pc, #36]	; (8008b8c <USB_FlushRxFifo+0x40>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d901      	bls.n	8008b70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e006      	b.n	8008b7e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f003 0310 	and.w	r3, r3, #16
 8008b78:	2b10      	cmp	r3, #16
 8008b7a:	d0f0      	beq.n	8008b5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	00030d40 	.word	0x00030d40

08008b90 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b089      	sub	sp, #36	; 0x24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	71fb      	strb	r3, [r7, #7]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008bae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d11a      	bne.n	8008bec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008bb6:	88bb      	ldrh	r3, [r7, #4]
 8008bb8:	3303      	adds	r3, #3
 8008bba:	089b      	lsrs	r3, r3, #2
 8008bbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61bb      	str	r3, [r7, #24]
 8008bc2:	e00f      	b.n	8008be4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	031a      	lsls	r2, r3, #12
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	3301      	adds	r3, #1
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d3eb      	bcc.n	8008bc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3724      	adds	r7, #36	; 0x24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b089      	sub	sp, #36	; 0x24
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	4613      	mov	r3, r2
 8008c06:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008c10:	88fb      	ldrh	r3, [r7, #6]
 8008c12:	3303      	adds	r3, #3
 8008c14:	089b      	lsrs	r3, r3, #2
 8008c16:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61bb      	str	r3, [r7, #24]
 8008c1c:	e00b      	b.n	8008c36 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	3301      	adds	r3, #1
 8008c34:	61bb      	str	r3, [r7, #24]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d3ef      	bcc.n	8008c1e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008c3e:	69fb      	ldr	r3, [r7, #28]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3724      	adds	r7, #36	; 0x24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4013      	ands	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c64:	68fb      	ldr	r3, [r7, #12]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cac:	f023 0303 	bic.w	r3, r3, #3
 8008cb0:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	78fb      	ldrb	r3, [r7, #3]
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	68f9      	ldr	r1, [r7, #12]
 8008cc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d107      	bne.n	8008ce0 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008cdc:	6053      	str	r3, [r2, #4]
 8008cde:	e009      	b.n	8008cf4 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d106      	bne.n	8008cf4 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cec:	461a      	mov	r2, r3
 8008cee:	f241 7370 	movw	r3, #6000	; 0x1770
 8008cf2:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d22:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d30:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d32:	2064      	movs	r0, #100	; 0x64
 8008d34:	f7f8 face 	bl	80012d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d44:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d46:	200a      	movs	r0, #10
 8008d48:	f7f8 fac4 	bl	80012d4 <HAL_Delay>

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d7a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <USB_DriveVbus+0x44>
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d106      	bne.n	8008d9a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d98:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da4:	d109      	bne.n	8008dba <USB_DriveVbus+0x64>
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008db8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	0c5b      	lsrs	r3, r3, #17
 8008de6:	f003 0303 	and.w	r3, r3, #3
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
	...

08008df8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	4608      	mov	r0, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	461a      	mov	r2, r3
 8008e06:	4603      	mov	r3, r0
 8008e08:	70fb      	strb	r3, [r7, #3]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70bb      	strb	r3, [r7, #2]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e1a:	78fb      	ldrb	r3, [r7, #3]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e26:	461a      	mov	r2, r3
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d87e      	bhi.n	8008f34 <USB_HC_Init+0x13c>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <USB_HC_Init+0x44>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e4d 	.word	0x08008e4d
 8008e40:	08008ef7 	.word	0x08008ef7
 8008e44:	08008e4d 	.word	0x08008e4d
 8008e48:	08008eb9 	.word	0x08008eb9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e58:	461a      	mov	r2, r3
 8008e5a:	f240 439d 	movw	r3, #1181	; 0x49d
 8008e5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008e60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	da10      	bge.n	8008e8a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	78fa      	ldrb	r2, [r7, #3]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e86:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008e88:	e057      	b.n	8008f3a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d051      	beq.n	8008f3a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	78fa      	ldrb	r2, [r7, #3]
 8008ea6:	0151      	lsls	r1, r2, #5
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	440a      	add	r2, r1
 8008eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008eb4:	60d3      	str	r3, [r2, #12]
      break;
 8008eb6:	e040      	b.n	8008f3a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	f240 639d 	movw	r3, #1693	; 0x69d
 8008eca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ecc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	da34      	bge.n	8008f3e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008ef4:	e023      	b.n	8008f3e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f02:	461a      	mov	r2, r3
 8008f04:	f240 2325 	movw	r3, #549	; 0x225
 8008f08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	da17      	bge.n	8008f42 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	78fa      	ldrb	r2, [r7, #3]
 8008f22:	0151      	lsls	r1, r2, #5
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	440a      	add	r2, r1
 8008f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f2c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008f30:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f32:	e006      	b.n	8008f42 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	75fb      	strb	r3, [r7, #23]
      break;
 8008f38:	e004      	b.n	8008f44 <USB_HC_Init+0x14c>
      break;
 8008f3a:	bf00      	nop
 8008f3c:	e002      	b.n	8008f44 <USB_HC_Init+0x14c>
      break;
 8008f3e:	bf00      	nop
 8008f40:	e000      	b.n	8008f44 <USB_HC_Init+0x14c>
      break;
 8008f42:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	78fb      	ldrb	r3, [r7, #3]
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	2101      	movs	r1, #1
 8008f54:	fa01 f303 	lsl.w	r3, r1, r3
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008f6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	da03      	bge.n	8008f7e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	e001      	b.n	8008f82 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008f82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d103      	bne.n	8008f92 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e001      	b.n	8008f96 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008f96:	787b      	ldrb	r3, [r7, #1]
 8008f98:	059b      	lsls	r3, r3, #22
 8008f9a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008f9e:	78bb      	ldrb	r3, [r7, #2]
 8008fa0:	02db      	lsls	r3, r3, #11
 8008fa2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fa6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008fa8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fac:	049b      	lsls	r3, r3, #18
 8008fae:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008fb2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008fba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	0159      	lsls	r1, r3, #5
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	440b      	add	r3, r1
 8008fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fcc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fd2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d10f      	bne.n	8008ffc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ffa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop

0800900c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08c      	sub	sp, #48	; 0x30
 8009010:	af02      	add	r7, sp, #8
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	4613      	mov	r3, r2
 8009018:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	785b      	ldrb	r3, [r3, #1]
 8009022:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009028:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009032:	2b00      	cmp	r3, #0
 8009034:	d028      	beq.n	8009088 <USB_HC_StartXfer+0x7c>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	791b      	ldrb	r3, [r3, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d124      	bne.n	8009088 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10b      	bne.n	800905c <USB_HC_StartXfer+0x50>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	795b      	ldrb	r3, [r3, #5]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d107      	bne.n	800905c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	4619      	mov	r1, r3
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 fa2e 	bl	80094b4 <USB_DoPing>
      return HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	e112      	b.n	8009282 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d112      	bne.n	8009088 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	4413      	add	r3, r2
 800906a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	0151      	lsls	r1, r2, #5
 8009074:	6a3a      	ldr	r2, [r7, #32]
 8009076:	440a      	add	r2, r1
 8009078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800907c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009080:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2200      	movs	r2, #0
 8009086:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d018      	beq.n	80090c2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	8912      	ldrh	r2, [r2, #8]
 8009098:	4413      	add	r3, r2
 800909a:	3b01      	subs	r3, #1
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	8912      	ldrh	r2, [r2, #8]
 80090a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80090a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090a8:	8b7b      	ldrh	r3, [r7, #26]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d90b      	bls.n	80090c6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80090ae:	8b7b      	ldrh	r3, [r7, #26]
 80090b0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80090b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	8912      	ldrh	r2, [r2, #8]
 80090b8:	fb02 f203 	mul.w	r2, r2, r3
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	611a      	str	r2, [r3, #16]
 80090c0:	e001      	b.n	80090c6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80090c2:	2301      	movs	r3, #1
 80090c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	78db      	ldrb	r3, [r3, #3]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d006      	beq.n	80090dc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80090ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	8912      	ldrh	r2, [r2, #8]
 80090d4:	fb02 f203 	mul.w	r2, r2, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80090e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090e6:	04d9      	lsls	r1, r3, #19
 80090e8:	4b68      	ldr	r3, [pc, #416]	; (800928c <USB_HC_StartXfer+0x280>)
 80090ea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80090ec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	7a9b      	ldrb	r3, [r3, #10]
 80090f2:	075b      	lsls	r3, r3, #29
 80090f4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80090f8:	69f9      	ldr	r1, [r7, #28]
 80090fa:	0148      	lsls	r0, r1, #5
 80090fc:	6a39      	ldr	r1, [r7, #32]
 80090fe:	4401      	add	r1, r0
 8009100:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009104:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009106:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68d9      	ldr	r1, [r3, #12]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	4413      	add	r3, r2
 800911a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911e:	460a      	mov	r2, r1
 8009120:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	bf0c      	ite	eq
 8009132:	2301      	moveq	r3, #1
 8009134:	2300      	movne	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	4413      	add	r3, r2
 8009142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	0151      	lsls	r1, r2, #5
 800914c:	6a3a      	ldr	r2, [r7, #32]
 800914e:	440a      	add	r2, r1
 8009150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009154:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009158:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	4413      	add	r3, r2
 8009162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	7e7b      	ldrb	r3, [r7, #25]
 800916a:	075b      	lsls	r3, r3, #29
 800916c:	69f9      	ldr	r1, [r7, #28]
 800916e:	0148      	lsls	r0, r1, #5
 8009170:	6a39      	ldr	r1, [r7, #32]
 8009172:	4401      	add	r1, r0
 8009174:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009178:	4313      	orrs	r3, r2
 800917a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	4413      	add	r3, r2
 8009184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a41      	ldr	r2, [pc, #260]	; (8009290 <USB_HC_StartXfer+0x284>)
 800918c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800918e:	4b40      	ldr	r3, [pc, #256]	; (8009290 <USB_HC_StartXfer+0x284>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009196:	4a3e      	ldr	r2, [pc, #248]	; (8009290 <USB_HC_StartXfer+0x284>)
 8009198:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	78db      	ldrb	r3, [r3, #3]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d006      	beq.n	80091b0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80091a2:	4b3b      	ldr	r3, [pc, #236]	; (8009290 <USB_HC_StartXfer+0x284>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091aa:	4a39      	ldr	r2, [pc, #228]	; (8009290 <USB_HC_StartXfer+0x284>)
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	e005      	b.n	80091bc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80091b0:	4b37      	ldr	r3, [pc, #220]	; (8009290 <USB_HC_StartXfer+0x284>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091b8:	4a35      	ldr	r2, [pc, #212]	; (8009290 <USB_HC_StartXfer+0x284>)
 80091ba:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091bc:	4b34      	ldr	r3, [pc, #208]	; (8009290 <USB_HC_StartXfer+0x284>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091c4:	4a32      	ldr	r2, [pc, #200]	; (8009290 <USB_HC_StartXfer+0x284>)
 80091c6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d4:	461a      	mov	r2, r3
 80091d6:	4b2e      	ldr	r3, [pc, #184]	; (8009290 <USB_HC_StartXfer+0x284>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d14e      	bne.n	8009280 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	78db      	ldrb	r3, [r3, #3]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d14a      	bne.n	8009280 <USB_HC_StartXfer+0x274>
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d046      	beq.n	8009280 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	79db      	ldrb	r3, [r3, #7]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d830      	bhi.n	800925c <USB_HC_StartXfer+0x250>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USB_HC_StartXfer+0x1f4>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009211 	.word	0x08009211
 8009204:	08009235 	.word	0x08009235
 8009208:	08009211 	.word	0x08009211
 800920c:	08009235 	.word	0x08009235
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	3303      	adds	r3, #3
 8009216:	089b      	lsrs	r3, r3, #2
 8009218:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800921a:	8afa      	ldrh	r2, [r7, #22]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	b29b      	uxth	r3, r3
 8009222:	429a      	cmp	r2, r3
 8009224:	d91c      	bls.n	8009260 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	f043 0220 	orr.w	r2, r3, #32
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	619a      	str	r2, [r3, #24]
          }
          break;
 8009232:	e015      	b.n	8009260 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	3303      	adds	r3, #3
 800923a:	089b      	lsrs	r3, r3, #2
 800923c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800923e:	8afa      	ldrh	r2, [r7, #22]
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	b29b      	uxth	r3, r3
 800924a:	429a      	cmp	r2, r3
 800924c:	d90a      	bls.n	8009264 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	619a      	str	r2, [r3, #24]
          }
          break;
 800925a:	e003      	b.n	8009264 <USB_HC_StartXfer+0x258>

        default:
          break;
 800925c:	bf00      	nop
 800925e:	e002      	b.n	8009266 <USB_HC_StartXfer+0x25a>
          break;
 8009260:	bf00      	nop
 8009262:	e000      	b.n	8009266 <USB_HC_StartXfer+0x25a>
          break;
 8009264:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	68d9      	ldr	r1, [r3, #12]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	785a      	ldrb	r2, [r3, #1]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	b298      	uxth	r0, r3
 8009274:	2300      	movs	r3, #0
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4603      	mov	r3, r0
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff fc88 	bl	8008b90 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3728      	adds	r7, #40	; 0x28
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	1ff80000 	.word	0x1ff80000
 8009290:	200001fc 	.word	0x200001fc

08009294 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	b29b      	uxth	r3, r3
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b087      	sub	sp, #28
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	0c9b      	lsrs	r3, r3, #18
 80092de:	f003 0303 	and.w	r3, r3, #3
 80092e2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <USB_HC_Halt+0x3a>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d16c      	bne.n	80093ca <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	440a      	add	r2, r1
 8009306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800930a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800930e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d143      	bne.n	80093a4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	4413      	add	r3, r2
 8009324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	0151      	lsls	r1, r2, #5
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	440a      	add	r2, r1
 8009332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800933a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	4413      	add	r3, r2
 8009344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	0151      	lsls	r1, r2, #5
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	440a      	add	r2, r1
 8009352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800935a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	4413      	add	r3, r2
 8009364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	440a      	add	r2, r1
 8009372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800937a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	3301      	adds	r3, #1
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009388:	d81d      	bhi.n	80093c6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	4413      	add	r3, r2
 8009392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800939c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093a0:	d0ec      	beq.n	800937c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80093a2:	e080      	b.n	80094a6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	0151      	lsls	r1, r2, #5
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	440a      	add	r2, r1
 80093ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093c2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80093c4:	e06f      	b.n	80094a6 <USB_HC_Halt+0x1f0>
          break;
 80093c6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80093c8:	e06d      	b.n	80094a6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093e8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d143      	bne.n	8009482 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	4413      	add	r3, r2
 8009402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	440a      	add	r2, r1
 8009410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009418:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	4413      	add	r3, r2
 8009422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	0151      	lsls	r1, r2, #5
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	440a      	add	r2, r1
 8009430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009438:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	4413      	add	r3, r2
 8009442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	0151      	lsls	r1, r2, #5
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	440a      	add	r2, r1
 8009450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009454:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009458:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	3301      	adds	r3, #1
 800945e:	617b      	str	r3, [r7, #20]
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009466:	d81d      	bhi.n	80094a4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	4413      	add	r3, r2
 8009470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800947a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800947e:	d0ec      	beq.n	800945a <USB_HC_Halt+0x1a4>
 8009480:	e011      	b.n	80094a6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	4413      	add	r3, r2
 800948a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	0151      	lsls	r1, r2, #5
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	440a      	add	r2, r1
 8009498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800949c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	e000      	b.n	80094a6 <USB_HC_Halt+0x1f0>
          break;
 80094a4:	bf00      	nop
    }
  }

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	371c      	adds	r7, #28
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	460b      	mov	r3, r1
 80094be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80094c8:	2301      	movs	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	04da      	lsls	r2, r3, #19
 80094d0:	4b15      	ldr	r3, [pc, #84]	; (8009528 <USB_DoPing+0x74>)
 80094d2:	4013      	ands	r3, r2
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	0151      	lsls	r1, r2, #5
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	440a      	add	r2, r1
 80094dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009504:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	4413      	add	r3, r2
 800950e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009512:	461a      	mov	r2, r3
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	1ff80000 	.word	0x1ff80000

0800952c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009538:	2300      	movs	r3, #0
 800953a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff face 	bl	8008ade <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009542:	2110      	movs	r1, #16
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff fadb 	bl	8008b00 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff fafe 	bl	8008b4c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009550:	2300      	movs	r3, #0
 8009552:	613b      	str	r3, [r7, #16]
 8009554:	e01f      	b.n	8009596 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4413      	add	r3, r2
 800955e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800956c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009574:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800957c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800958a:	461a      	mov	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	3301      	adds	r3, #1
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b0f      	cmp	r3, #15
 800959a:	d9dc      	bls.n	8009556 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800959c:	2300      	movs	r3, #0
 800959e:	613b      	str	r3, [r7, #16]
 80095a0:	e034      	b.n	800960c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095d6:	461a      	mov	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	3301      	adds	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095e8:	d80c      	bhi.n	8009604 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009600:	d0ec      	beq.n	80095dc <USB_StopHost+0xb0>
 8009602:	e000      	b.n	8009606 <USB_StopHost+0xda>
        break;
 8009604:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	3301      	adds	r3, #1
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	2b0f      	cmp	r3, #15
 8009610:	d9c7      	bls.n	80095a2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009618:	461a      	mov	r2, r3
 800961a:	f04f 33ff 	mov.w	r3, #4294967295
 800961e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f04f 32ff 	mov.w	r2, #4294967295
 8009626:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff fa47 	bl	8008abc <USB_EnableGlobalInt>

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009640:	2300      	movs	r3, #0
 8009642:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009644:	e008      	b.n	8009658 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	32e0      	adds	r2, #224	; 0xe0
 800964c:	2100      	movs	r1, #0
 800964e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3301      	adds	r3, #1
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b0e      	cmp	r3, #14
 800965c:	d9f3      	bls.n	8009646 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800965e:	2300      	movs	r3, #0
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	e009      	b.n	8009678 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3301      	adds	r3, #1
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800967e:	d3f1      	bcc.n	8009664 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2240      	movs	r2, #64	; 0x40
 80096a4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
	...

080096cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b088      	sub	sp, #32
 80096d0:	af04      	add	r7, sp, #16
 80096d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80096d4:	2302      	movs	r3, #2
 80096d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fadd 	bl	8009c9c <USBH_IsPortEnabled>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10c      	bne.n	8009702 <USBH_Process+0x36>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d007      	beq.n	8009702 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d002      	beq.n	8009702 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2203      	movs	r2, #3
 8009700:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b0b      	cmp	r3, #11
 800970a:	f200 814c 	bhi.w	80099a6 <USBH_Process+0x2da>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <USBH_Process+0x48>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	08009745 	.word	0x08009745
 8009718:	08009767 	.word	0x08009767
 800971c:	0800977b 	.word	0x0800977b
 8009720:	08009981 	.word	0x08009981
 8009724:	080099a7 	.word	0x080099a7
 8009728:	08009809 	.word	0x08009809
 800972c:	08009937 	.word	0x08009937
 8009730:	08009839 	.word	0x08009839
 8009734:	08009859 	.word	0x08009859
 8009738:	08009879 	.word	0x08009879
 800973c:	080098a7 	.word	0x080098a7
 8009740:	08009969 	.word	0x08009969
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 812c 	beq.w	80099aa <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8009758:	20c8      	movs	r0, #200	; 0xc8
 800975a:	f003 fcb2 	bl	800d0c2 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f003 fc21 	bl	800cfa6 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009764:	e121      	b.n	80099aa <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800976c:	2b01      	cmp	r3, #1
 800976e:	f040 811e 	bne.w	80099ae <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2202      	movs	r2, #2
 8009776:	701a      	strb	r2, [r3, #0]
    }
    break;
 8009778:	e119      	b.n	80099ae <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800977a:	2064      	movs	r0, #100	; 0x64
 800977c:	f003 fca1 	bl	800d0c2 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f003 fbeb 	bl	800cf5c <USBH_LL_GetSpeed>
 8009786:	4603      	mov	r3, r0
 8009788:	461a      	mov	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2205      	movs	r2, #5
 8009794:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8009796:	2100      	movs	r1, #0
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 ffe3 	bl	800a764 <USBH_AllocPipe>
 800979e:	4603      	mov	r3, r0
 80097a0:	461a      	mov	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80097a6:	2180      	movs	r1, #128	; 0x80
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 ffdb 	bl	800a764 <USBH_AllocPipe>
 80097ae:	4603      	mov	r3, r0
 80097b0:	461a      	mov	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	7919      	ldrb	r1, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80097ca:	b292      	uxth	r2, r2
 80097cc:	9202      	str	r2, [sp, #8]
 80097ce:	2200      	movs	r2, #0
 80097d0:	9201      	str	r2, [sp, #4]
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	4603      	mov	r3, r0
 80097d6:	2280      	movs	r2, #128	; 0x80
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 ffa4 	bl	800a726 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	7959      	ldrb	r1, [r3, #5]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80097f2:	b292      	uxth	r2, r2
 80097f4:	9202      	str	r2, [sp, #8]
 80097f6:	2200      	movs	r2, #0
 80097f8:	9201      	str	r2, [sp, #4]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	4603      	mov	r3, r0
 80097fe:	2200      	movs	r2, #0
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 ff90 	bl	800a726 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009806:	e0e3      	b.n	80099d0 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f8e7 	bl	80099dc <USBH_HandleEnum>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	f040 80ce 	bne.w	80099b2 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8009824:	2b01      	cmp	r3, #1
 8009826:	d103      	bne.n	8009830 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2208      	movs	r2, #8
 800982c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800982e:	e0c0      	b.n	80099b2 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2207      	movs	r2, #7
 8009834:	701a      	strb	r2, [r3, #0]
    break;
 8009836:	e0bc      	b.n	80099b2 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80b9 	beq.w	80099b6 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800984a:	2101      	movs	r1, #1
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2208      	movs	r2, #8
 8009854:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009856:	e0ae      	b.n	80099b6 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800985e:	b29b      	uxth	r3, r3
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fb4a 	bl	8009efc <USBH_SetCfg>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	f040 80a5 	bne.w	80099ba <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2209      	movs	r2, #9
 8009874:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009876:	e0a0      	b.n	80099ba <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00b      	beq.n	800989e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009886:	2101      	movs	r1, #1
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fb5a 	bl	8009f42 <USBH_SetFeature>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	f040 8094 	bne.w	80099be <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	220a      	movs	r2, #10
 800989a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800989c:	e08f      	b.n	80099be <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	220a      	movs	r2, #10
 80098a2:	701a      	strb	r2, [r3, #0]
    break;
 80098a4:	e08b      	b.n	80099be <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8088 	beq.w	80099c2 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
 80098be:	e017      	b.n	80098f0 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	33dc      	adds	r3, #220	; 0xdc
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	791a      	ldrb	r2, [r3, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d108      	bne.n	80098ea <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	33dc      	adds	r3, #220	; 0xdc
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	3301      	adds	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0e4      	beq.n	80098c0 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d016      	beq.n	800992e <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d109      	bne.n	8009926 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2206      	movs	r2, #6
 8009916:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800991e:	2103      	movs	r1, #3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8009924:	e04d      	b.n	80099c2 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	220d      	movs	r2, #13
 800992a:	701a      	strb	r2, [r3, #0]
    break;
 800992c:	e049      	b.n	80099c2 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	220d      	movs	r2, #13
 8009932:	701a      	strb	r2, [r3, #0]
    break;
 8009934:	e045      	b.n	80099c2 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00f      	beq.n	8009960 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
 800994c:	4603      	mov	r3, r0
 800994e:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	d136      	bne.n	80099c6 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	220b      	movs	r2, #11
 800995c:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800995e:	e032      	b.n	80099c6 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	220d      	movs	r2, #13
 8009964:	701a      	strb	r2, [r3, #0]
    break;
 8009966:	e02e      	b.n	80099c6 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800996e:	2b00      	cmp	r3, #0
 8009970:	d02b      	beq.n	80099ca <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	4798      	blx	r3
    }
    break;
 800997e:	e024      	b.n	80099ca <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff fe59 	bl	8009638 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01e      	beq.n	80099ce <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80099a4:	e013      	b.n	80099ce <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80099a6:	bf00      	nop
 80099a8:	e012      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099aa:	bf00      	nop
 80099ac:	e010      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099ae:	bf00      	nop
 80099b0:	e00e      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099b2:	bf00      	nop
 80099b4:	e00c      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099b6:	bf00      	nop
 80099b8:	e00a      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099ba:	bf00      	nop
 80099bc:	e008      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099be:	bf00      	nop
 80099c0:	e006      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099c2:	bf00      	nop
 80099c4:	e004      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099c6:	bf00      	nop
 80099c8:	e002      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099ca:	bf00      	nop
 80099cc:	e000      	b.n	80099d0 <USBH_Process+0x304>
    break;
 80099ce:	bf00      	nop
  }
 return USBH_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop

080099dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af04      	add	r7, sp, #16
 80099e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80099e4:	2301      	movs	r3, #1
 80099e6:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	785b      	ldrb	r3, [r3, #1]
 80099ec:	2b07      	cmp	r3, #7
 80099ee:	f200 80f8 	bhi.w	8009be2 <USBH_HandleEnum+0x206>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBH_HandleEnum+0x1c>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a19 	.word	0x08009a19
 80099fc:	08009a8b 	.word	0x08009a8b
 8009a00:	08009aa3 	.word	0x08009aa3
 8009a04:	08009b19 	.word	0x08009b19
 8009a08:	08009b2f 	.word	0x08009b2f
 8009a0c:	08009b4b 	.word	0x08009b4b
 8009a10:	08009b7f 	.word	0x08009b7f
 8009a14:	08009bb3 	.word	0x08009bb3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8009a18:	2108      	movs	r1, #8
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f99e 	bl	8009d5c <USBH_Get_DevDesc>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f040 80df 	bne.w	8009be6 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	7919      	ldrb	r1, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009a4c:	b292      	uxth	r2, r2
 8009a4e:	9202      	str	r2, [sp, #8]
 8009a50:	2200      	movs	r2, #0
 8009a52:	9201      	str	r2, [sp, #4]
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	4603      	mov	r3, r0
 8009a58:	2280      	movs	r2, #128	; 0x80
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fe63 	bl	800a726 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	7959      	ldrb	r1, [r3, #5]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009a74:	b292      	uxth	r2, r2
 8009a76:	9202      	str	r2, [sp, #8]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	9201      	str	r2, [sp, #4]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2200      	movs	r2, #0
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fe4f 	bl	800a726 <USBH_OpenPipe>

    }
    break;
 8009a88:	e0ad      	b.n	8009be6 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8009a8a:	2112      	movs	r1, #18
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f965 	bl	8009d5c <USBH_Get_DevDesc>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 80a8 	bne.w	8009bea <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	705a      	strb	r2, [r3, #1]

    }
    break;
 8009aa0:	e0a3      	b.n	8009bea <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa05 	bl	8009eb4 <USBH_SetAddress>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f040 809e 	bne.w	8009bee <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8009ab2:	2002      	movs	r0, #2
 8009ab4:	f003 fb05 	bl	800d0c2 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	7919      	ldrb	r1, [r3, #4]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009ada:	b292      	uxth	r2, r2
 8009adc:	9202      	str	r2, [sp, #8]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	9201      	str	r2, [sp, #4]
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2280      	movs	r2, #128	; 0x80
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fe1c 	bl	800a726 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	7959      	ldrb	r1, [r3, #5]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8009b02:	b292      	uxth	r2, r2
 8009b04:	9202      	str	r2, [sp, #8]
 8009b06:	2200      	movs	r2, #0
 8009b08:	9201      	str	r2, [sp, #4]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2200      	movs	r2, #0
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fe08 	bl	800a726 <USBH_OpenPipe>
    }
    break;
 8009b16:	e06a      	b.n	8009bee <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8009b18:	2109      	movs	r1, #9
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f946 	bl	8009dac <USBH_Get_CfgDesc>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d165      	bne.n	8009bf2 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2204      	movs	r2, #4
 8009b2a:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009b2c:	e061      	b.n	8009bf2 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f938 	bl	8009dac <USBH_Get_CfgDesc>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d159      	bne.n	8009bf6 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2205      	movs	r2, #5
 8009b46:	705a      	strb	r2, [r3, #1]
    }
    break;
 8009b48:	e055      	b.n	8009bf6 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d010      	beq.n	8009b76 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009b60:	23ff      	movs	r3, #255	; 0xff
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f946 	bl	8009df4 <USBH_Get_StringDesc>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d145      	bne.n	8009bfa <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2206      	movs	r2, #6
 8009b72:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009b74:	e041      	b.n	8009bfa <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2206      	movs	r2, #6
 8009b7a:	705a      	strb	r2, [r3, #1]
    break;
 8009b7c:	e03d      	b.n	8009bfa <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d010      	beq.n	8009baa <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009b94:	23ff      	movs	r3, #255	; 0xff
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f92c 	bl	8009df4 <USBH_Get_StringDesc>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d12d      	bne.n	8009bfe <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2207      	movs	r2, #7
 8009ba6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009ba8:	e029      	b.n	8009bfe <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2207      	movs	r2, #7
 8009bae:	705a      	strb	r2, [r3, #1]
    break;
 8009bb0:	e025      	b.n	8009bfe <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00f      	beq.n	8009bdc <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8009bc8:	23ff      	movs	r3, #255	; 0xff
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f912 	bl	8009df4 <USBH_Get_StringDesc>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d115      	bne.n	8009c02 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8009bda:	e012      	b.n	8009c02 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]
    break;
 8009be0:	e00f      	b.n	8009c02 <USBH_HandleEnum+0x226>

  default:
    break;
 8009be2:	bf00      	nop
 8009be4:	e00e      	b.n	8009c04 <USBH_HandleEnum+0x228>
    break;
 8009be6:	bf00      	nop
 8009be8:	e00c      	b.n	8009c04 <USBH_HandleEnum+0x228>
    break;
 8009bea:	bf00      	nop
 8009bec:	e00a      	b.n	8009c04 <USBH_HandleEnum+0x228>
    break;
 8009bee:	bf00      	nop
 8009bf0:	e008      	b.n	8009c04 <USBH_HandleEnum+0x228>
    break;
 8009bf2:	bf00      	nop
 8009bf4:	e006      	b.n	8009c04 <USBH_HandleEnum+0x228>
    break;
 8009bf6:	bf00      	nop
 8009bf8:	e004      	b.n	8009c04 <USBH_HandleEnum+0x228>
    break;
 8009bfa:	bf00      	nop
 8009bfc:	e002      	b.n	8009c04 <USBH_HandleEnum+0x228>
    break;
 8009bfe:	bf00      	nop
 8009c00:	e000      	b.n	8009c04 <USBH_HandleEnum+0x228>
    break;
 8009c02:	bf00      	nop
  }
  return Status;
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop

08009c10 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f804 	bl	8009c34 <USBH_HandleSof>
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b0b      	cmp	r3, #11
 8009c44:	d10a      	bne.n	8009c5c <USBH_HandleSof+0x28>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	4798      	blx	r3
  }
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009c74:	bf00      	nop
}
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8009c90:	bf00      	nop
}
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10f      	bne.n	8009ce8 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00e      	beq.n	8009cf8 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ce0:	2104      	movs	r1, #4
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	4798      	blx	r3
 8009ce6:	e007      	b.n	8009cf8 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d102      	bne.n	8009cf8 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b082      	sub	sp, #8
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f003 f90b 	bl	800cf26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	791b      	ldrb	r3, [r3, #4]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fd42 	bl	800a7a0 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	795b      	ldrb	r3, [r3, #5]
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fd3c 	bl	800a7a0 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d005      	beq.n	8009d46 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009d40:	2105      	movs	r1, #5
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f003 f8d2 	bl	800cef0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2203      	movs	r2, #3
 8009d50:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	4613      	mov	r3, r2
 8009d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f864 	bl	8009e4a <USBH_GetDescriptor>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f203 3022 	addw	r0, r3, #802	; 0x322
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d98:	78fa      	ldrb	r2, [r7, #3]
 8009d9a:	b292      	uxth	r2, r2
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f000 f8f4 	bl	8009f8a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	331c      	adds	r3, #28
 8009dbc:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8009dbe:	887b      	ldrh	r3, [r7, #2]
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dc8:	2100      	movs	r1, #0
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f83d 	bl	8009e4a <USBH_GetDescriptor>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	72fb      	strb	r3, [r7, #11]
 8009dd4:	7afb      	ldrb	r3, [r7, #11]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d107      	bne.n	8009dea <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8009de0:	887a      	ldrh	r2, [r7, #2]
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f940 	bl	800a06a <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8009dea:	7afb      	ldrb	r3, [r7, #11]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	607a      	str	r2, [r7, #4]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	460b      	mov	r3, r1
 8009e02:	72fb      	strb	r3, [r7, #11]
 8009e04:	4613      	mov	r3, r2
 8009e06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8009e08:	7afb      	ldrb	r3, [r7, #11]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e10:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8009e18:	893b      	ldrh	r3, [r7, #8]
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	2100      	movs	r1, #0
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f812 	bl	8009e4a <USBH_GetDescriptor>
 8009e26:	4603      	mov	r3, r0
 8009e28:	75fb      	strb	r3, [r7, #23]
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d107      	bne.n	8009e40 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e36:	893a      	ldrh	r2, [r7, #8]
 8009e38:	6879      	ldr	r1, [r7, #4]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fa13 	bl	800a266 <USBH_ParseStringDesc>
  }
  return status;
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	607b      	str	r3, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	72fb      	strb	r3, [r7, #11]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	789b      	ldrb	r3, [r3, #2]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d11c      	bne.n	8009e9e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e6a:	b2da      	uxtb	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2206      	movs	r2, #6
 8009e74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	893a      	ldrh	r2, [r7, #8]
 8009e7a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009e7c:	893b      	ldrh	r3, [r7, #8]
 8009e7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e86:	d104      	bne.n	8009e92 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f240 4209 	movw	r2, #1033	; 0x409
 8009e8e:	829a      	strh	r2, [r3, #20]
 8009e90:	e002      	b.n	8009e98 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	8b3a      	ldrh	r2, [r7, #24]
 8009e9c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8009e9e:	8b3b      	ldrh	r3, [r7, #24]
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 fa2c 	bl	800a302 <USBH_CtlReq>
 8009eaa:	4603      	mov	r3, r0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	789b      	ldrb	r3, [r3, #2]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d10f      	bne.n	8009ee8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2205      	movs	r2, #5
 8009ed2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fa08 	bl	800a302 <USBH_CtlReq>
 8009ef2:	4603      	mov	r3, r0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	460b      	mov	r3, r1
 8009f06:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	789b      	ldrb	r3, [r3, #2]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d10e      	bne.n	8009f2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2209      	movs	r2, #9
 8009f1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	887a      	ldrh	r2, [r7, #2]
 8009f20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2100      	movs	r1, #0
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f9e5 	bl	800a302 <USBH_CtlReq>
 8009f38:	4603      	mov	r3, r0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b082      	sub	sp, #8
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	789b      	ldrb	r3, [r3, #2]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d10f      	bne.n	8009f76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2203      	movs	r2, #3
 8009f60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f62:	78fb      	ldrb	r3, [r7, #3]
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f76:	2200      	movs	r2, #0
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f9c1 	bl	800a302 <USBH_CtlReq>
 8009f80:	4603      	mov	r3, r0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	4613      	mov	r3, r2
 8009f96:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	781a      	ldrb	r2, [r3, #0]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	785a      	ldrb	r2, [r3, #1]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	3302      	adds	r3, #2
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	3303      	adds	r3, #3
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	021b      	lsls	r3, r3, #8
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	791a      	ldrb	r2, [r3, #4]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	795a      	ldrb	r2, [r3, #5]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	799a      	ldrb	r2, [r3, #6]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	79da      	ldrb	r2, [r3, #7]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009fe4:	88fb      	ldrh	r3, [r7, #6]
 8009fe6:	2b08      	cmp	r3, #8
 8009fe8:	d939      	bls.n	800a05e <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	3308      	adds	r3, #8
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	3309      	adds	r3, #9
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	021b      	lsls	r3, r3, #8
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	4313      	orrs	r3, r2
 800a000:	b29a      	uxth	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	330a      	adds	r3, #10
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	330b      	adds	r3, #11
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	021b      	lsls	r3, r3, #8
 800a018:	b29b      	uxth	r3, r3
 800a01a:	4313      	orrs	r3, r2
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	330c      	adds	r3, #12
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	b29a      	uxth	r2, r3
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	330d      	adds	r3, #13
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	b29b      	uxth	r3, r3
 800a032:	021b      	lsls	r3, r3, #8
 800a034:	b29b      	uxth	r3, r3
 800a036:	4313      	orrs	r3, r2
 800a038:	b29a      	uxth	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	7b9a      	ldrb	r2, [r3, #14]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	7bda      	ldrb	r2, [r3, #15]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	7c1a      	ldrb	r2, [r3, #16]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	7c5a      	ldrb	r2, [r3, #17]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	745a      	strb	r2, [r3, #17]
  }
}
 800a05e:	bf00      	nop
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b08a      	sub	sp, #40	; 0x28
 800a06e:	af00      	add	r7, sp, #0
 800a070:	60f8      	str	r0, [r7, #12]
 800a072:	60b9      	str	r1, [r7, #8]
 800a074:	4613      	mov	r3, r2
 800a076:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	781a      	ldrb	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	785a      	ldrb	r2, [r3, #1]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	3302      	adds	r3, #2
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	3303      	adds	r3, #3
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	021b      	lsls	r3, r3, #8
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	791a      	ldrb	r2, [r3, #4]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	795a      	ldrb	r2, [r3, #5]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	799a      	ldrb	r2, [r3, #6]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	79da      	ldrb	r2, [r3, #7]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	7a1a      	ldrb	r2, [r3, #8]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a0e0:	88fb      	ldrh	r3, [r7, #6]
 800a0e2:	2b09      	cmp	r3, #9
 800a0e4:	d95f      	bls.n	800a1a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0e6:	2309      	movs	r3, #9
 800a0e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0ee:	e051      	b.n	800a194 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0f0:	f107 0316 	add.w	r3, r7, #22
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0f8:	f000 f8e8 	bl	800a2cc <USBH_GetNextDesc>
 800a0fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	2b04      	cmp	r3, #4
 800a104:	d146      	bne.n	800a194 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a10a:	221a      	movs	r2, #26
 800a10c:	fb02 f303 	mul.w	r3, r2, r3
 800a110:	3308      	adds	r3, #8
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	4413      	add	r3, r2
 800a116:	3302      	adds	r3, #2
 800a118:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800a11a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a11c:	69f8      	ldr	r0, [r7, #28]
 800a11e:	f000 f846 	bl	800a1ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a128:	2300      	movs	r3, #0
 800a12a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a12c:	e022      	b.n	800a174 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800a12e:	f107 0316 	add.w	r3, r7, #22
 800a132:	4619      	mov	r1, r3
 800a134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a136:	f000 f8c9 	bl	800a2cc <USBH_GetNextDesc>
 800a13a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	785b      	ldrb	r3, [r3, #1]
 800a140:	2b05      	cmp	r3, #5
 800a142:	d117      	bne.n	800a174 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a148:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a14c:	3201      	adds	r2, #1
 800a14e:	00d2      	lsls	r2, r2, #3
 800a150:	211a      	movs	r1, #26
 800a152:	fb01 f303 	mul.w	r3, r1, r3
 800a156:	4413      	add	r3, r2
 800a158:	3308      	adds	r3, #8
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4413      	add	r3, r2
 800a15e:	3304      	adds	r3, #4
 800a160:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800a162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a164:	69b8      	ldr	r0, [r7, #24]
 800a166:	f000 f851 	bl	800a20c <USBH_ParseEPDesc>
            ep_ix++;
 800a16a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a16e:	3301      	adds	r3, #1
 800a170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	791b      	ldrb	r3, [r3, #4]
 800a178:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d204      	bcs.n	800a18a <USBH_ParseCfgDesc+0x120>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	885a      	ldrh	r2, [r3, #2]
 800a184:	8afb      	ldrh	r3, [r7, #22]
 800a186:	429a      	cmp	r2, r3
 800a188:	d8d1      	bhi.n	800a12e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a18a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a18e:	3301      	adds	r3, #1
 800a190:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d804      	bhi.n	800a1a6 <USBH_ParseCfgDesc+0x13c>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	885a      	ldrh	r2, [r3, #2]
 800a1a0:	8afb      	ldrh	r3, [r7, #22]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d8a4      	bhi.n	800a0f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a1a6:	bf00      	nop
 800a1a8:	3728      	adds	r7, #40	; 0x28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781a      	ldrb	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	785a      	ldrb	r2, [r3, #1]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	789a      	ldrb	r2, [r3, #2]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	78da      	ldrb	r2, [r3, #3]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	791a      	ldrb	r2, [r3, #4]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	795a      	ldrb	r2, [r3, #5]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	799a      	ldrb	r2, [r3, #6]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	79da      	ldrb	r2, [r3, #7]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	7a1a      	ldrb	r2, [r3, #8]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	721a      	strb	r2, [r3, #8]
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781a      	ldrb	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	785a      	ldrb	r2, [r3, #1]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	789a      	ldrb	r2, [r3, #2]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	78da      	ldrb	r2, [r3, #3]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	3304      	adds	r3, #4
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	3305      	adds	r3, #5
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	b29b      	uxth	r3, r3
 800a246:	021b      	lsls	r3, r3, #8
 800a248:	b29b      	uxth	r3, r3
 800a24a:	4313      	orrs	r3, r2
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	799a      	ldrb	r2, [r3, #6]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	719a      	strb	r2, [r3, #6]
}
 800a25a:	bf00      	nop
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800a266:	b480      	push	{r7}
 800a268:	b087      	sub	sp, #28
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	4613      	mov	r3, r2
 800a272:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3301      	adds	r3, #1
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d120      	bne.n	800a2c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	1e9a      	subs	r2, r3, #2
 800a284:	88fb      	ldrh	r3, [r7, #6]
 800a286:	4293      	cmp	r3, r2
 800a288:	bf28      	it	cs
 800a28a:	4613      	movcs	r3, r2
 800a28c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3302      	adds	r3, #2
 800a292:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a294:	2300      	movs	r3, #0
 800a296:	82fb      	strh	r3, [r7, #22]
 800a298:	e00b      	b.n	800a2b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a29a:	8afb      	ldrh	r3, [r7, #22]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	4413      	add	r3, r2
 800a2a0:	781a      	ldrb	r2, [r3, #0]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a2ac:	8afb      	ldrh	r3, [r7, #22]
 800a2ae:	3302      	adds	r3, #2
 800a2b0:	82fb      	strh	r3, [r7, #22]
 800a2b2:	8afa      	ldrh	r2, [r7, #22]
 800a2b4:	8abb      	ldrh	r3, [r7, #20]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d3ef      	bcc.n	800a29a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	701a      	strb	r2, [r3, #0]
  }
}
 800a2c0:	bf00      	nop
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	881a      	ldrh	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	4413      	add	r3, r2
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b086      	sub	sp, #24
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	4613      	mov	r3, r2
 800a30e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a310:	2301      	movs	r3, #1
 800a312:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	789b      	ldrb	r3, [r3, #2]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d002      	beq.n	800a322 <USBH_CtlReq+0x20>
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d00f      	beq.n	800a340 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 800a320:	e034      	b.n	800a38c <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	88fa      	ldrh	r2, [r7, #6]
 800a32c:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2202      	movs	r2, #2
 800a338:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800a33a:	2301      	movs	r3, #1
 800a33c:	75fb      	strb	r3, [r7, #23]
    break;
 800a33e:	e025      	b.n	800a38c <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f829 	bl	800a398 <USBH_HandleControl>
 800a346:	4603      	mov	r3, r0
 800a348:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d108      	bne.n	800a362 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	75fb      	strb	r3, [r7, #23]
    break;
 800a360:	e013      	b.n	800a38a <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	2b03      	cmp	r3, #3
 800a366:	d108      	bne.n	800a37a <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2201      	movs	r2, #1
 800a36c:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a374:	2303      	movs	r3, #3
 800a376:	75fb      	strb	r3, [r7, #23]
    break;
 800a378:	e007      	b.n	800a38a <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 800a37a:	7dfb      	ldrb	r3, [r7, #23]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d104      	bne.n	800a38a <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2201      	movs	r2, #1
 800a384:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a386:	2302      	movs	r3, #2
 800a388:	75fb      	strb	r3, [r7, #23]
    break;
 800a38a:	bf00      	nop
  }
  return status;
 800a38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af02      	add	r7, sp, #8
 800a39e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7e1b      	ldrb	r3, [r3, #24]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	2b0a      	cmp	r3, #10
 800a3b0:	f200 814c 	bhi.w	800a64c <USBH_HandleControl+0x2b4>
 800a3b4:	a201      	add	r2, pc, #4	; (adr r2, 800a3bc <USBH_HandleControl+0x24>)
 800a3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ba:	bf00      	nop
 800a3bc:	0800a3e9 	.word	0x0800a3e9
 800a3c0:	0800a403 	.word	0x0800a403
 800a3c4:	0800a46d 	.word	0x0800a46d
 800a3c8:	0800a493 	.word	0x0800a493
 800a3cc:	0800a4cb 	.word	0x0800a4cb
 800a3d0:	0800a4f7 	.word	0x0800a4f7
 800a3d4:	0800a549 	.word	0x0800a549
 800a3d8:	0800a56b 	.word	0x0800a56b
 800a3dc:	0800a5a7 	.word	0x0800a5a7
 800a3e0:	0800a5cf 	.word	0x0800a5cf
 800a3e4:	0800a60d 	.word	0x0800a60d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f103 0110 	add.w	r1, r3, #16
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	795b      	ldrb	r3, [r3, #5]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f939 	bl	800a66c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	761a      	strb	r2, [r3, #24]
    break;
 800a400:	e12f      	b.n	800a662 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	795b      	ldrb	r3, [r3, #5]
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f002 fe47 	bl	800d09c <USBH_LL_GetURBState>
 800a40e:	4603      	mov	r3, r0
 800a410:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d11e      	bne.n	800a456 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	7c1b      	ldrb	r3, [r3, #16]
 800a41c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a420:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	8adb      	ldrh	r3, [r3, #22]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00a      	beq.n	800a440 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800a42a:	7b7b      	ldrb	r3, [r7, #13]
 800a42c:	2b80      	cmp	r3, #128	; 0x80
 800a42e:	d103      	bne.n	800a438 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2203      	movs	r2, #3
 800a434:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a436:	e10b      	b.n	800a650 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2205      	movs	r2, #5
 800a43c:	761a      	strb	r2, [r3, #24]
    break;
 800a43e:	e107      	b.n	800a650 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 800a440:	7b7b      	ldrb	r3, [r7, #13]
 800a442:	2b80      	cmp	r3, #128	; 0x80
 800a444:	d103      	bne.n	800a44e <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2209      	movs	r2, #9
 800a44a:	761a      	strb	r2, [r3, #24]
    break;
 800a44c:	e100      	b.n	800a650 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2207      	movs	r2, #7
 800a452:	761a      	strb	r2, [r3, #24]
    break;
 800a454:	e0fc      	b.n	800a650 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d003      	beq.n	800a464 <USBH_HandleControl+0xcc>
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	f040 80f6 	bne.w	800a650 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	220b      	movs	r2, #11
 800a468:	761a      	strb	r2, [r3, #24]
    break;
 800a46a:	e0f1      	b.n	800a650 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a472:	b29a      	uxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6899      	ldr	r1, [r3, #8]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	899a      	ldrh	r2, [r3, #12]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	791b      	ldrb	r3, [r3, #4]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f930 	bl	800a6ea <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2204      	movs	r2, #4
 800a48e:	761a      	strb	r2, [r3, #24]
    break;
 800a490:	e0e7      	b.n	800a662 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	791b      	ldrb	r3, [r3, #4]
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f002 fdff 	bl	800d09c <USBH_LL_GetURBState>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d102      	bne.n	800a4ae <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2209      	movs	r2, #9
 800a4ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800a4ae:	7bbb      	ldrb	r3, [r7, #14]
 800a4b0:	2b05      	cmp	r3, #5
 800a4b2:	d102      	bne.n	800a4ba <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a4b8:	e0cc      	b.n	800a654 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	f040 80c9 	bne.w	800a654 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	220b      	movs	r2, #11
 800a4c6:	761a      	strb	r2, [r3, #24]
    break;
 800a4c8:	e0c4      	b.n	800a654 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6899      	ldr	r1, [r3, #8]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	899a      	ldrh	r2, [r3, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	7958      	ldrb	r0, [r3, #5]
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	4603      	mov	r3, r0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f8df 	bl	800a6a0 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2206      	movs	r2, #6
 800a4f2:	761a      	strb	r2, [r3, #24]
    break;
 800a4f4:	e0b5      	b.n	800a662 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	795b      	ldrb	r3, [r3, #5]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f002 fdcd 	bl	800d09c <USBH_LL_GetURBState>
 800a502:	4603      	mov	r3, r0
 800a504:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d103      	bne.n	800a514 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2207      	movs	r2, #7
 800a510:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a512:	e0a1      	b.n	800a658 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	2b05      	cmp	r3, #5
 800a518:	d105      	bne.n	800a526 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	220c      	movs	r2, #12
 800a51e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800a520:	2303      	movs	r3, #3
 800a522:	73fb      	strb	r3, [r7, #15]
    break;
 800a524:	e098      	b.n	800a658 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d103      	bne.n	800a534 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2205      	movs	r2, #5
 800a530:	761a      	strb	r2, [r3, #24]
    break;
 800a532:	e091      	b.n	800a658 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	2b04      	cmp	r3, #4
 800a538:	f040 808e 	bne.w	800a658 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	220b      	movs	r2, #11
 800a540:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800a542:	2302      	movs	r3, #2
 800a544:	73fb      	strb	r3, [r7, #15]
    break;
 800a546:	e087      	b.n	800a658 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	791b      	ldrb	r3, [r3, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	2100      	movs	r1, #0
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f8ca 	bl	800a6ea <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2208      	movs	r2, #8
 800a566:	761a      	strb	r2, [r3, #24]

    break;
 800a568:	e07b      	b.n	800a662 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	791b      	ldrb	r3, [r3, #4]
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f002 fd93 	bl	800d09c <USBH_LL_GetURBState>
 800a576:	4603      	mov	r3, r0
 800a578:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800a57a:	7bbb      	ldrb	r3, [r7, #14]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d105      	bne.n	800a58c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	220d      	movs	r2, #13
 800a584:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a58a:	e067      	b.n	800a65c <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d103      	bne.n	800a59a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	220b      	movs	r2, #11
 800a596:	761a      	strb	r2, [r3, #24]
    break;
 800a598:	e060      	b.n	800a65c <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	d15d      	bne.n	800a65c <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a4:	e05a      	b.n	800a65c <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	795a      	ldrb	r2, [r3, #5]
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f873 	bl	800a6a0 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	220a      	movs	r2, #10
 800a5ca:	761a      	strb	r2, [r3, #24]
    break;
 800a5cc:	e049      	b.n	800a662 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	795b      	ldrb	r3, [r3, #5]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f002 fd61 	bl	800d09c <USBH_LL_GetURBState>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d105      	bne.n	800a5f0 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	220d      	movs	r2, #13
 800a5ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800a5ee:	e037      	b.n	800a660 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d103      	bne.n	800a5fe <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2209      	movs	r2, #9
 800a5fa:	761a      	strb	r2, [r3, #24]
    break;
 800a5fc:	e030      	b.n	800a660 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	2b04      	cmp	r3, #4
 800a602:	d12d      	bne.n	800a660 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	220b      	movs	r2, #11
 800a608:	761a      	strb	r2, [r3, #24]
    break;
 800a60a:	e029      	b.n	800a660 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	7e5b      	ldrb	r3, [r3, #25]
 800a610:	3301      	adds	r3, #1
 800a612:	b2da      	uxtb	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	765a      	strb	r2, [r3, #25]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	7e5b      	ldrb	r3, [r3, #25]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d809      	bhi.n	800a634 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f002 fc80 	bl	800cf26 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800a632:	e016      	b.n	800a662 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a63a:	2106      	movs	r1, #6
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800a646:	2302      	movs	r3, #2
 800a648:	73fb      	strb	r3, [r7, #15]
    break;
 800a64a:	e00a      	b.n	800a662 <USBH_HandleControl+0x2ca>

  default:
    break;
 800a64c:	bf00      	nop
 800a64e:	e008      	b.n	800a662 <USBH_HandleControl+0x2ca>
    break;
 800a650:	bf00      	nop
 800a652:	e006      	b.n	800a662 <USBH_HandleControl+0x2ca>
    break;
 800a654:	bf00      	nop
 800a656:	e004      	b.n	800a662 <USBH_HandleControl+0x2ca>
    break;
 800a658:	bf00      	nop
 800a65a:	e002      	b.n	800a662 <USBH_HandleControl+0x2ca>
    break;
 800a65c:	bf00      	nop
 800a65e:	e000      	b.n	800a662 <USBH_HandleControl+0x2ca>
    break;
 800a660:	bf00      	nop
  }
  return status;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af04      	add	r7, sp, #16
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	4613      	mov	r3, r2
 800a678:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a67a:	79f9      	ldrb	r1, [r7, #7]
 800a67c:	2300      	movs	r3, #0
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	2308      	movs	r3, #8
 800a682:	9302      	str	r3, [sp, #8]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	9301      	str	r3, [sp, #4]
 800a688:	2300      	movs	r3, #0
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	2300      	movs	r3, #0
 800a68e:	2200      	movs	r2, #0
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f002 fcd2 	bl	800d03a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af04      	add	r7, sp, #16
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	80fb      	strh	r3, [r7, #6]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a6c4:	7979      	ldrb	r1, [r7, #5]
 800a6c6:	7e3b      	ldrb	r3, [r7, #24]
 800a6c8:	9303      	str	r3, [sp, #12]
 800a6ca:	88fb      	ldrh	r3, [r7, #6]
 800a6cc:	9302      	str	r3, [sp, #8]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	2200      	movs	r2, #0
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f002 fcad 	bl	800d03a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b088      	sub	sp, #32
 800a6ee:	af04      	add	r7, sp, #16
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	4611      	mov	r1, r2
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	80fb      	strh	r3, [r7, #6]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800a700:	7979      	ldrb	r1, [r7, #5]
 800a702:	2300      	movs	r3, #0
 800a704:	9303      	str	r3, [sp, #12]
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	9302      	str	r3, [sp, #8]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	2301      	movs	r3, #1
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	2300      	movs	r3, #0
 800a714:	2201      	movs	r2, #1
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f002 fc8f 	bl	800d03a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a71c:	2300      	movs	r3, #0

}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b086      	sub	sp, #24
 800a72a:	af04      	add	r7, sp, #16
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	4608      	mov	r0, r1
 800a730:	4611      	mov	r1, r2
 800a732:	461a      	mov	r2, r3
 800a734:	4603      	mov	r3, r0
 800a736:	70fb      	strb	r3, [r7, #3]
 800a738:	460b      	mov	r3, r1
 800a73a:	70bb      	strb	r3, [r7, #2]
 800a73c:	4613      	mov	r3, r2
 800a73e:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800a740:	7878      	ldrb	r0, [r7, #1]
 800a742:	78ba      	ldrb	r2, [r7, #2]
 800a744:	78f9      	ldrb	r1, [r7, #3]
 800a746:	8b3b      	ldrh	r3, [r7, #24]
 800a748:	9302      	str	r3, [sp, #8]
 800a74a:	7d3b      	ldrb	r3, [r7, #20]
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	7c3b      	ldrb	r3, [r7, #16]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	4603      	mov	r3, r0
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f002 fc41 	bl	800cfdc <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800a75a:	2300      	movs	r3, #0

}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f831 	bl	800a7d8 <USBH_GetFreePipe>
 800a776:	4603      	mov	r3, r0
 800a778:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a77a:	89fb      	ldrh	r3, [r7, #14]
 800a77c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a780:	4293      	cmp	r3, r2
 800a782:	d007      	beq.n	800a794 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800a784:	78fb      	ldrb	r3, [r7, #3]
 800a786:	89fa      	ldrh	r2, [r7, #14]
 800a788:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	32e0      	adds	r2, #224	; 0xe0
 800a790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800a794:	89fb      	ldrh	r3, [r7, #14]
 800a796:	b2db      	uxtb	r3, r3
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800a7ac:	78fb      	ldrb	r3, [r7, #3]
 800a7ae:	2b0a      	cmp	r3, #10
 800a7b0:	d80b      	bhi.n	800a7ca <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800a7b2:	78fa      	ldrb	r2, [r7, #3]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	32e0      	adds	r2, #224	; 0xe0
 800a7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7bc:	78fa      	ldrb	r2, [r7, #3]
 800a7be:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	32e0      	adds	r2, #224	; 0xe0
 800a7c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73fb      	strb	r3, [r7, #15]
 800a7e8:	e00e      	b.n	800a808 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a7ea:	7bfa      	ldrb	r2, [r7, #15]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	32e0      	adds	r2, #224	; 0xe0
 800a7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d102      	bne.n	800a802 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	e007      	b.n	800a812 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	3301      	adds	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	2b0a      	cmp	r3, #10
 800a80c:	d9ed      	bls.n	800a7ea <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800a80e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a812:	4618      	mov	r0, r3
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
	...

0800a820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b0c2      	sub	sp, #264	; 0x108
 800a824:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a826:	f7f6 fd27 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a82a:	f000 f971 	bl	800ab10 <SystemClock_Config>

  //RNG->CR |= RNG_CR_RNGEN;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a82e:	f001 f8d7 	bl	800b9e0 <MX_GPIO_Init>
  MX_ADC3_Init();
 800a832:	f000 fa29 	bl	800ac88 <MX_ADC3_Init>
  MX_CRC_Init();
 800a836:	f000 fa79 	bl	800ad2c <MX_CRC_Init>
  MX_DCMI_Init();
 800a83a:	f000 fa99 	bl	800ad70 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800a83e:	f000 facb 	bl	800add8 <MX_DMA2D_Init>
  MX_FMC_Init();
 800a842:	f001 f87d 	bl	800b940 <MX_FMC_Init>
  MX_I2C1_Init();
 800a846:	f000 faf9 	bl	800ae3c <MX_I2C1_Init>
  MX_I2C3_Init();
 800a84a:	f000 fb37 	bl	800aebc <MX_I2C3_Init>
  MX_LTDC_Init();
 800a84e:	f000 fb75 	bl	800af3c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800a852:	f000 fbf5 	bl	800b040 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800a856:	f000 fc33 	bl	800b0c0 <MX_RTC_Init>
  MX_SAI2_Init();
 800a85a:	f000 fcd9 	bl	800b210 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 800a85e:	f000 fd7f 	bl	800b360 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800a862:	f000 fdad 	bl	800b3c0 <MX_SPI2_Init>
  MX_TIM1_Init();
 800a866:	f000 fde9 	bl	800b43c <MX_TIM1_Init>
  MX_TIM2_Init();
 800a86a:	f000 fe93 	bl	800b594 <MX_TIM2_Init>
  MX_TIM3_Init();
 800a86e:	f000 fedd 	bl	800b62c <MX_TIM3_Init>
  MX_TIM5_Init();
 800a872:	f000 ff29 	bl	800b6c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 800a876:	f000 ff9d 	bl	800b7b4 <MX_TIM8_Init>
  MX_TIM12_Init();
 800a87a:	f000 ffed 	bl	800b858 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800a87e:	f001 f82f 	bl	800b8e0 <MX_USART1_UART_Init>
  MX_RNG_Init();
 800a882:	f000 fc09 	bl	800b098 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
 // BSP_LED_Init(LED_GREEN);

  BSP_LCD_Init();
 800a886:	f7f5 fe93 	bl	80005b0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800a88a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800a88e:	2001      	movs	r0, #1
 800a890:	f7f5 ff26 	bl	80006e0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800a894:	2001      	movs	r0, #1
 800a896:	f7f5 ff83 	bl	80007a0 <BSP_LCD_SelectLayer>
  //BSP_LCD_SetLayerVisible(1, 1);
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a89a:	488b      	ldr	r0, [pc, #556]	; (800aac8 <main+0x2a8>)
 800a89c:	f7f5 ffaa 	bl	80007f4 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	f7f5 ff8c 	bl	80007c0 <BSP_LCD_SetBackColor>
  //BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
  //BSP_LCD_DisplayOn();
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800a8a8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a8ac:	f7f5 ffbc 	bl	8000828 <BSP_LCD_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

    if (round_counter > 4) {
 800a8b0:	4b86      	ldr	r3, [pc, #536]	; (800aacc <main+0x2ac>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d92f      	bls.n	800a918 <main+0xf8>
                   round_counter = 0;
 800a8b8:	4b84      	ldr	r3, [pc, #528]	; (800aacc <main+0x2ac>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]

                   HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800a8be:	2201      	movs	r2, #1
 800a8c0:	2140      	movs	r1, #64	; 0x40
 800a8c2:	4883      	ldr	r0, [pc, #524]	; (800aad0 <main+0x2b0>)
 800a8c4:	f7f8 f8da 	bl	8002a7c <HAL_GPIO_WritePin>
                   char * average;
                   reaction_time_1_average = reaction_time_1_sum / valid_round_counter_1;
 800a8c8:	4b82      	ldr	r3, [pc, #520]	; (800aad4 <main+0x2b4>)
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	4b82      	ldr	r3, [pc, #520]	; (800aad8 <main+0x2b8>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d4:	4a81      	ldr	r2, [pc, #516]	; (800aadc <main+0x2bc>)
 800a8d6:	6013      	str	r3, [r2, #0]
                           sprintf(average, "Valid average: %d ms.", reaction_time_1_average);
 800a8d8:	4b80      	ldr	r3, [pc, #512]	; (800aadc <main+0x2bc>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	4980      	ldr	r1, [pc, #512]	; (800aae0 <main+0x2c0>)
 800a8e0:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800a8e4:	f002 fd38 	bl	800d358 <siprintf>

                           BSP_LCD_DisplayStringAt(20, 160, average, CENTER_MODE);
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a8ee:	21a0      	movs	r1, #160	; 0xa0
 800a8f0:	2014      	movs	r0, #20
 800a8f2:	f7f6 f805 	bl	8000900 <BSP_LCD_DisplayStringAt>
                   HAL_Delay(5000);
 800a8f6:	f241 3088 	movw	r0, #5000	; 0x1388
 800a8fa:	f7f6 fceb 	bl	80012d4 <HAL_Delay>
                   BSP_LCD_Clear(LCD_COLOR_BLACK);
 800a8fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a902:	f7f5 ff91 	bl	8000828 <BSP_LCD_Clear>
                   valid_round_counter_1 =0;
 800a906:	4b74      	ldr	r3, [pc, #464]	; (800aad8 <main+0x2b8>)
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]
                   reaction_time_1_sum =0;
 800a90c:	4b71      	ldr	r3, [pc, #452]	; (800aad4 <main+0x2b4>)
 800a90e:	2200      	movs	r2, #0
 800a910:	601a      	str	r2, [r3, #0]
                   game_state = READY;
 800a912:	4b74      	ldr	r3, [pc, #464]	; (800aae4 <main+0x2c4>)
 800a914:	2200      	movs	r2, #0
 800a916:	701a      	strb	r2, [r3, #0]

                   //return;
                 }


    switch (game_state) {
 800a918:	4b72      	ldr	r3, [pc, #456]	; (800aae4 <main+0x2c4>)
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	f200 80cd 	bhi.w	800aabc <main+0x29c>
 800a922:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <main+0x108>)
 800a924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a928:	0800a93d 	.word	0x0800a93d
 800a92c:	0800a967 	.word	0x0800a967
 800a930:	0800aabd 	.word	0x0800aabd
 800a934:	0800a9ff 	.word	0x0800a9ff
 800a938:	0800aa6f 	.word	0x0800aa6f
    case READY:
        BSP_LCD_DisplayStringAt(20, 20, "Welcome to Reaction Tester", CENTER_MODE);
 800a93c:	2301      	movs	r3, #1
 800a93e:	4a6a      	ldr	r2, [pc, #424]	; (800aae8 <main+0x2c8>)
 800a940:	2114      	movs	r1, #20
 800a942:	2014      	movs	r0, #20
 800a944:	f7f5 ffdc 	bl	8000900 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 40, "Press button to start!", CENTER_MODE);
 800a948:	2301      	movs	r3, #1
 800a94a:	4a68      	ldr	r2, [pc, #416]	; (800aaec <main+0x2cc>)
 800a94c:	2128      	movs	r1, #40	; 0x28
 800a94e:	2014      	movs	r0, #20
 800a950:	f7f5 ffd6 	bl	8000900 <BSP_LCD_DisplayStringAt>

         HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800a954:	2140      	movs	r1, #64	; 0x40
 800a956:	485e      	ldr	r0, [pc, #376]	; (800aad0 <main+0x2b0>)
 800a958:	f7f8 f8a9 	bl	8002aae <HAL_GPIO_TogglePin>
         HAL_Delay(500);
 800a95c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a960:	f7f6 fcb8 	bl	80012d4 <HAL_Delay>

         break;
 800a964:	e0ad      	b.n	800aac2 <main+0x2a2>


    case STEADY:

         HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800a966:	2201      	movs	r2, #1
 800a968:	2140      	movs	r1, #64	; 0x40
 800a96a:	4859      	ldr	r0, [pc, #356]	; (800aad0 <main+0x2b0>)
 800a96c:	f7f8 f886 	bl	8002a7c <HAL_GPIO_WritePin>

         //read random number from RNG_DR register

         // unsigned int rnd = RNG -> DR;

         delay = 1000 + (HAL_RNG_GetRandomNumber(&hrng) % 9) * 1000;
 800a970:	485f      	ldr	r0, [pc, #380]	; (800aaf0 <main+0x2d0>)
 800a972:	f7fb fc5a 	bl	800622a <HAL_RNG_GetRandomNumber>
 800a976:	4601      	mov	r1, r0
 800a978:	4b5e      	ldr	r3, [pc, #376]	; (800aaf4 <main+0x2d4>)
 800a97a:	fba3 2301 	umull	r2, r3, r3, r1
 800a97e:	085a      	lsrs	r2, r3, #1
 800a980:	4613      	mov	r3, r2
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	4413      	add	r3, r2
 800a986:	1aca      	subs	r2, r1, r3
 800a988:	1c53      	adds	r3, r2, #1
 800a98a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a98e:	fb02 f303 	mul.w	r3, r2, r3
 800a992:	4a59      	ldr	r2, [pc, #356]	; (800aaf8 <main+0x2d8>)
 800a994:	6013      	str	r3, [r2, #0]

        // HAL_Delay(delay);
           uint32_t tickstart = HAL_GetTick();
 800a996:	f7f6 fc91 	bl	80012bc <HAL_GetTick>
 800a99a:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100


           /* Add a freq to guarantee minimum wait */
           if (delay < HAL_MAX_DELAY)
 800a99e:	4b56      	ldr	r3, [pc, #344]	; (800aaf8 <main+0x2d8>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a6:	d00c      	beq.n	800a9c2 <main+0x1a2>
           {
             delay += (uint32_t)(uwTickFreq);
 800a9a8:	4b54      	ldr	r3, [pc, #336]	; (800aafc <main+0x2dc>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	4b52      	ldr	r3, [pc, #328]	; (800aaf8 <main+0x2d8>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	4a50      	ldr	r2, [pc, #320]	; (800aaf8 <main+0x2d8>)
 800a9b6:	6013      	str	r3, [r2, #0]
           }

           while ((HAL_GetTick() - tickstart) < delay)
 800a9b8:	e003      	b.n	800a9c2 <main+0x1a2>
           {
             if (game_state == INVALID) {
 800a9ba:	4b4a      	ldr	r3, [pc, #296]	; (800aae4 <main+0x2c4>)
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	d00a      	beq.n	800a9d8 <main+0x1b8>
           while ((HAL_GetTick() - tickstart) < delay)
 800a9c2:	f7f6 fc7b 	bl	80012bc <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a9cc:	1ad2      	subs	r2, r2, r3
 800a9ce:	4b4a      	ldr	r3, [pc, #296]	; (800aaf8 <main+0x2d8>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d3f1      	bcc.n	800a9ba <main+0x19a>
 800a9d6:	e000      	b.n	800a9da <main+0x1ba>
             break;
 800a9d8:	bf00      	nop
             }
           }

           if (game_state == INVALID) {
 800a9da:	4b42      	ldr	r3, [pc, #264]	; (800aae4 <main+0x2c4>)
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d06e      	beq.n	800aac0 <main+0x2a0>
                        break;
                        }

         HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2140      	movs	r1, #64	; 0x40
 800a9e6:	483a      	ldr	r0, [pc, #232]	; (800aad0 <main+0x2b0>)
 800a9e8:	f7f8 f848 	bl	8002a7c <HAL_GPIO_WritePin>


         round_start_time = HAL_GetTick();
 800a9ec:	f7f6 fc66 	bl	80012bc <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	4b43      	ldr	r3, [pc, #268]	; (800ab00 <main+0x2e0>)
 800a9f4:	601a      	str	r2, [r3, #0]

         game_state = GO;
 800a9f6:	4b3b      	ldr	r3, [pc, #236]	; (800aae4 <main+0x2c4>)
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	701a      	strb	r2, [r3, #0]

         break;
 800a9fc:	e061      	b.n	800aac2 <main+0x2a2>


    case VALID:
         HAL_GPIO_WritePin(RGB_LED1_G_GPIO_Port, RGB_LED1_G_Pin, GPIO_PIN_RESET);
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2180      	movs	r1, #128	; 0x80
 800aa02:	4833      	ldr	r0, [pc, #204]	; (800aad0 <main+0x2b0>)
 800aa04:	f7f8 f83a 	bl	8002a7c <HAL_GPIO_WritePin>
         HAL_Delay(3000);
 800aa08:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa0c:	f7f6 fc62 	bl	80012d4 <HAL_Delay>
         HAL_GPIO_WritePin(RGB_LED1_G_GPIO_Port, RGB_LED1_G_Pin, GPIO_PIN_SET);
 800aa10:	2201      	movs	r2, #1
 800aa12:	2180      	movs	r1, #128	; 0x80
 800aa14:	482e      	ldr	r0, [pc, #184]	; (800aad0 <main+0x2b0>)
 800aa16:	f7f8 f831 	bl	8002a7c <HAL_GPIO_WritePin>

         round_counter = round_counter + 1;
 800aa1a:	4b2c      	ldr	r3, [pc, #176]	; (800aacc <main+0x2ac>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	4a2a      	ldr	r2, [pc, #168]	; (800aacc <main+0x2ac>)
 800aa22:	6013      	str	r3, [r2, #0]
         valid_round_counter_1 = valid_round_counter_1 + 1;
 800aa24:	4b2c      	ldr	r3, [pc, #176]	; (800aad8 <main+0x2b8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	4a2b      	ldr	r2, [pc, #172]	; (800aad8 <main+0x2b8>)
 800aa2c:	6013      	str	r3, [r2, #0]
         reaction_time_1_sum = reaction_time_1_sum + reaction_time_1;
 800aa2e:	4b29      	ldr	r3, [pc, #164]	; (800aad4 <main+0x2b4>)
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	4b34      	ldr	r3, [pc, #208]	; (800ab04 <main+0x2e4>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4413      	add	r3, r2
 800aa38:	4a26      	ldr	r2, [pc, #152]	; (800aad4 <main+0x2b4>)
 800aa3a:	6013      	str	r3, [r2, #0]

         char  result[256];
         sprintf(result, "Reaction Time: %d ms.", reaction_time_1);
 800aa3c:	4b31      	ldr	r3, [pc, #196]	; (800ab04 <main+0x2e4>)
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	463b      	mov	r3, r7
 800aa42:	4931      	ldr	r1, [pc, #196]	; (800ab08 <main+0x2e8>)
 800aa44:	4618      	mov	r0, r3
 800aa46:	f002 fc87 	bl	800d358 <siprintf>

         BSP_LCD_DisplayStringAt(20, 20 + round_counter*20, result, LEFT_MODE);
 800aa4a:	4b20      	ldr	r3, [pc, #128]	; (800aacc <main+0x2ac>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	461a      	mov	r2, r3
 800aa54:	0092      	lsls	r2, r2, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	b299      	uxth	r1, r3
 800aa5c:	463a      	mov	r2, r7
 800aa5e:	2303      	movs	r3, #3
 800aa60:	2014      	movs	r0, #20
 800aa62:	f7f5 ff4d 	bl	8000900 <BSP_LCD_DisplayStringAt>

         game_state = STEADY;
 800aa66:	4b1f      	ldr	r3, [pc, #124]	; (800aae4 <main+0x2c4>)
 800aa68:	2201      	movs	r2, #1
 800aa6a:	701a      	strb	r2, [r3, #0]

         break;
 800aa6c:	e029      	b.n	800aac2 <main+0x2a2>


    case INVALID:
         //BSP_LED_On(LED_GREEN);
         HAL_GPIO_WritePin(RGB_LED1_R_GPIO_Port, RGB_LED1_R_Pin, GPIO_PIN_RESET);
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa74:	4816      	ldr	r0, [pc, #88]	; (800aad0 <main+0x2b0>)
 800aa76:	f7f8 f801 	bl	8002a7c <HAL_GPIO_WritePin>
         HAL_Delay(3000);
 800aa7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800aa7e:	f7f6 fc29 	bl	80012d4 <HAL_Delay>
         HAL_GPIO_WritePin(RGB_LED1_R_GPIO_Port, RGB_LED1_R_Pin, GPIO_PIN_SET);
 800aa82:	2201      	movs	r2, #1
 800aa84:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa88:	4811      	ldr	r0, [pc, #68]	; (800aad0 <main+0x2b0>)
 800aa8a:	f7f7 fff7 	bl	8002a7c <HAL_GPIO_WritePin>

         round_counter = round_counter + 1;
 800aa8e:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <main+0x2ac>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3301      	adds	r3, #1
 800aa94:	4a0d      	ldr	r2, [pc, #52]	; (800aacc <main+0x2ac>)
 800aa96:	6013      	str	r3, [r2, #0]


                 BSP_LCD_DisplayStringAt(20, 20 + round_counter*20,"Jumped light-invalid round!", LEFT_MODE);
 800aa98:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <main+0x2ac>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	0092      	lsls	r2, r2, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	b299      	uxth	r1, r3
 800aaaa:	2303      	movs	r3, #3
 800aaac:	4a17      	ldr	r2, [pc, #92]	; (800ab0c <main+0x2ec>)
 800aaae:	2014      	movs	r0, #20
 800aab0:	f7f5 ff26 	bl	8000900 <BSP_LCD_DisplayStringAt>


         game_state = STEADY;
 800aab4:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <main+0x2c4>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	701a      	strb	r2, [r3, #0]

         break;
 800aaba:	e002      	b.n	800aac2 <main+0x2a2>

    default:

         break;
 800aabc:	bf00      	nop
 800aabe:	e000      	b.n	800aac2 <main+0x2a2>
                        break;
 800aac0:	bf00      	nop

    }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800aac2:	f002 f9b7 	bl	800ce34 <MX_USB_HOST_Process>
    if (round_counter > 4) {
 800aac6:	e6f3      	b.n	800a8b0 <main+0x90>
 800aac8:	20000000 	.word	0x20000000
 800aacc:	20000200 	.word	0x20000200
 800aad0:	40021400 	.word	0x40021400
 800aad4:	20000434 	.word	0x20000434
 800aad8:	20000204 	.word	0x20000204
 800aadc:	2000063c 	.word	0x2000063c
 800aae0:	0800da0c 	.word	0x0800da0c
 800aae4:	20000208 	.word	0x20000208
 800aae8:	0800da24 	.word	0x0800da24
 800aaec:	0800da40 	.word	0x0800da40
 800aaf0:	200008e4 	.word	0x200008e4
 800aaf4:	38e38e39 	.word	0x38e38e39
 800aaf8:	200008f4 	.word	0x200008f4
 800aafc:	20000009 	.word	0x20000009
 800ab00:	20000a34 	.word	0x20000a34
 800ab04:	20000768 	.word	0x20000768
 800ab08:	0800da58 	.word	0x0800da58
 800ab0c:	0800da70 	.word	0x0800da70

0800ab10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b0b4      	sub	sp, #208	; 0xd0
 800ab14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ab16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ab1a:	2230      	movs	r2, #48	; 0x30
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f002 fb5a 	bl	800d1d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ab24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
 800ab2c:	605a      	str	r2, [r3, #4]
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	60da      	str	r2, [r3, #12]
 800ab32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ab34:	f107 0308 	add.w	r3, r7, #8
 800ab38:	2284      	movs	r2, #132	; 0x84
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f002 fb4b 	bl	800d1d8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ab42:	4b4e      	ldr	r3, [pc, #312]	; (800ac7c <SystemClock_Config+0x16c>)
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	4a4d      	ldr	r2, [pc, #308]	; (800ac7c <SystemClock_Config+0x16c>)
 800ab48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ab4e:	4b4b      	ldr	r3, [pc, #300]	; (800ac7c <SystemClock_Config+0x16c>)
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab56:	607b      	str	r3, [r7, #4]
 800ab58:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab5a:	4b49      	ldr	r3, [pc, #292]	; (800ac80 <SystemClock_Config+0x170>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a48      	ldr	r2, [pc, #288]	; (800ac80 <SystemClock_Config+0x170>)
 800ab60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	4b46      	ldr	r3, [pc, #280]	; (800ac80 <SystemClock_Config+0x170>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800ab72:	2309      	movs	r3, #9
 800ab74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ab78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800ab80:	2301      	movs	r3, #1
 800ab82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ab86:	2302      	movs	r3, #2
 800ab88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ab8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800ab94:	2319      	movs	r3, #25
 800ab96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800ab9a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ab9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800aba2:	2302      	movs	r3, #2
 800aba4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800aba8:	2309      	movs	r3, #9
 800abaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800abae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fa f92e 	bl	8004e14 <HAL_RCC_OscConfig>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800abbe:	f001 f979 	bl	800beb4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800abc2:	f7fa f807 	bl	8004bd4 <HAL_PWREx_EnableOverDrive>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800abcc:	f001 f972 	bl	800beb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800abd0:	230f      	movs	r3, #15
 800abd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800abd6:	2302      	movs	r3, #2
 800abd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800abdc:	2300      	movs	r3, #0
 800abde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800abe2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800abe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800abea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800abf2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800abf6:	2106      	movs	r1, #6
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fa fb7b 	bl	80052f4 <HAL_RCC_ClockConfig>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800ac04:	f001 f956 	bl	800beb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800ac08:	4b1e      	ldr	r3, [pc, #120]	; (800ac84 <SystemClock_Config+0x174>)
 800ac0a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800ac0c:	2364      	movs	r3, #100	; 0x64
 800ac0e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800ac10:	2302      	movs	r3, #2
 800ac12:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800ac14:	2302      	movs	r3, #2
 800ac16:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800ac18:	2302      	movs	r3, #2
 800ac1a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800ac1c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ac20:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800ac22:	2305      	movs	r3, #5
 800ac24:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800ac26:	2302      	movs	r3, #2
 800ac28:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800ac32:	2301      	movs	r3, #1
 800ac34:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800ac36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac3a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800ac3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac40:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800ac42:	2300      	movs	r3, #0
 800ac44:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800ac46:	2300      	movs	r3, #0
 800ac48:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800ac52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ac60:	f107 0308 	add.w	r3, r7, #8
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fa fd45 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <SystemClock_Config+0x164>
  {
    Error_Handler();
 800ac70:	f001 f920 	bl	800beb4 <Error_Handler>
  }
}
 800ac74:	bf00      	nop
 800ac76:	37d0      	adds	r7, #208	; 0xd0
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	40023800 	.word	0x40023800
 800ac80:	40007000 	.word	0x40007000
 800ac84:	01b14068 	.word	0x01b14068

0800ac88 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ac8e:	463b      	mov	r3, r7
 800ac90:	2200      	movs	r2, #0
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	605a      	str	r2, [r3, #4]
 800ac96:	609a      	str	r2, [r3, #8]
 800ac98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800ac9a:	4b21      	ldr	r3, [pc, #132]	; (800ad20 <MX_ADC3_Init+0x98>)
 800ac9c:	4a21      	ldr	r2, [pc, #132]	; (800ad24 <MX_ADC3_Init+0x9c>)
 800ac9e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800aca0:	4b1f      	ldr	r3, [pc, #124]	; (800ad20 <MX_ADC3_Init+0x98>)
 800aca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aca6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800aca8:	4b1d      	ldr	r3, [pc, #116]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acaa:	2200      	movs	r2, #0
 800acac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800acae:	4b1c      	ldr	r3, [pc, #112]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800acb4:	4b1a      	ldr	r3, [pc, #104]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acb6:	2200      	movs	r2, #0
 800acb8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800acba:	4b19      	ldr	r3, [pc, #100]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800acc2:	4b17      	ldr	r3, [pc, #92]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800acc8:	4b15      	ldr	r3, [pc, #84]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acca:	4a17      	ldr	r2, [pc, #92]	; (800ad28 <MX_ADC3_Init+0xa0>)
 800accc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800acce:	4b14      	ldr	r3, [pc, #80]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800acd4:	4b12      	ldr	r3, [pc, #72]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acd6:	2201      	movs	r2, #1
 800acd8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800acda:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ace2:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <MX_ADC3_Init+0x98>)
 800ace4:	2201      	movs	r2, #1
 800ace6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800ace8:	480d      	ldr	r0, [pc, #52]	; (800ad20 <MX_ADC3_Init+0x98>)
 800acea:	f7f6 fb15 	bl	8001318 <HAL_ADC_Init>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d001      	beq.n	800acf8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800acf4:	f001 f8de 	bl	800beb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800acfc:	2301      	movs	r3, #1
 800acfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ad00:	2300      	movs	r3, #0
 800ad02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800ad04:	463b      	mov	r3, r7
 800ad06:	4619      	mov	r1, r3
 800ad08:	4805      	ldr	r0, [pc, #20]	; (800ad20 <MX_ADC3_Init+0x98>)
 800ad0a:	f7f6 fb49 	bl	80013a0 <HAL_ADC_ConfigChannel>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800ad14:	f001 f8ce 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800ad18:	bf00      	nop
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	2000076c 	.word	0x2000076c
 800ad24:	40012200 	.word	0x40012200
 800ad28:	0f000001 	.word	0x0f000001

0800ad2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800ad30:	4b0d      	ldr	r3, [pc, #52]	; (800ad68 <MX_CRC_Init+0x3c>)
 800ad32:	4a0e      	ldr	r2, [pc, #56]	; (800ad6c <MX_CRC_Init+0x40>)
 800ad34:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <MX_CRC_Init+0x3c>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <MX_CRC_Init+0x3c>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800ad42:	4b09      	ldr	r3, [pc, #36]	; (800ad68 <MX_CRC_Init+0x3c>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800ad48:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <MX_CRC_Init+0x3c>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800ad4e:	4b06      	ldr	r3, [pc, #24]	; (800ad68 <MX_CRC_Init+0x3c>)
 800ad50:	2201      	movs	r2, #1
 800ad52:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800ad54:	4804      	ldr	r0, [pc, #16]	; (800ad68 <MX_CRC_Init+0x3c>)
 800ad56:	f7f6 fe33 	bl	80019c0 <HAL_CRC_Init>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800ad60:	f001 f8a8 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ad64:	bf00      	nop
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	20000594 	.word	0x20000594
 800ad6c:	40023000 	.word	0x40023000

0800ad70 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800ad74:	4b16      	ldr	r3, [pc, #88]	; (800add0 <MX_DCMI_Init+0x60>)
 800ad76:	4a17      	ldr	r2, [pc, #92]	; (800add4 <MX_DCMI_Init+0x64>)
 800ad78:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800ad7a:	4b15      	ldr	r3, [pc, #84]	; (800add0 <MX_DCMI_Init+0x60>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800ad80:	4b13      	ldr	r3, [pc, #76]	; (800add0 <MX_DCMI_Init+0x60>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800ad86:	4b12      	ldr	r3, [pc, #72]	; (800add0 <MX_DCMI_Init+0x60>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800ad8c:	4b10      	ldr	r3, [pc, #64]	; (800add0 <MX_DCMI_Init+0x60>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800ad92:	4b0f      	ldr	r3, [pc, #60]	; (800add0 <MX_DCMI_Init+0x60>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800ad98:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <MX_DCMI_Init+0x60>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800ad9e:	4b0c      	ldr	r3, [pc, #48]	; (800add0 <MX_DCMI_Init+0x60>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800ada4:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <MX_DCMI_Init+0x60>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800adaa:	4b09      	ldr	r3, [pc, #36]	; (800add0 <MX_DCMI_Init+0x60>)
 800adac:	2200      	movs	r2, #0
 800adae:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <MX_DCMI_Init+0x60>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800adb6:	4b06      	ldr	r3, [pc, #24]	; (800add0 <MX_DCMI_Init+0x60>)
 800adb8:	2200      	movs	r2, #0
 800adba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800adbc:	4804      	ldr	r0, [pc, #16]	; (800add0 <MX_DCMI_Init+0x60>)
 800adbe:	f7f6 fee9 	bl	8001b94 <HAL_DCMI_Init>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800adc8:	f001 f874 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800adcc:	bf00      	nop
 800adce:	bd80      	pop	{r7, pc}
 800add0:	200007b4 	.word	0x200007b4
 800add4:	50050000 	.word	0x50050000

0800add8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800addc:	4b15      	ldr	r3, [pc, #84]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800adde:	4a16      	ldr	r2, [pc, #88]	; (800ae38 <MX_DMA2D_Init+0x60>)
 800ade0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800ade2:	4b14      	ldr	r3, [pc, #80]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800ade8:	4b12      	ldr	r3, [pc, #72]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800adea:	2200      	movs	r2, #0
 800adec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800adee:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800adf4:	4b0f      	ldr	r3, [pc, #60]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800adfa:	4b0e      	ldr	r3, [pc, #56]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800ae00:	4b0c      	ldr	r3, [pc, #48]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800ae06:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800ae0c:	4809      	ldr	r0, [pc, #36]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800ae0e:	f7f7 f8ef 	bl	8001ff0 <HAL_DMA2D_Init>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800ae18:	f001 f84c 	bl	800beb4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4805      	ldr	r0, [pc, #20]	; (800ae34 <MX_DMA2D_Init+0x5c>)
 800ae20:	f7f7 fb54 	bl	80024cc <HAL_DMA2D_ConfigLayer>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800ae2a:	f001 f843 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800ae2e:	bf00      	nop
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	200008f8 	.word	0x200008f8
 800ae38:	4002b000 	.word	0x4002b000

0800ae3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800ae40:	4b1b      	ldr	r3, [pc, #108]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae42:	4a1c      	ldr	r2, [pc, #112]	; (800aeb4 <MX_I2C1_Init+0x78>)
 800ae44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800ae46:	4b1a      	ldr	r3, [pc, #104]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae48:	4a1b      	ldr	r2, [pc, #108]	; (800aeb8 <MX_I2C1_Init+0x7c>)
 800ae4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800ae4c:	4b18      	ldr	r3, [pc, #96]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ae52:	4b17      	ldr	r3, [pc, #92]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae54:	2201      	movs	r2, #1
 800ae56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ae58:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ae64:	4b12      	ldr	r3, [pc, #72]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ae6a:	4b11      	ldr	r3, [pc, #68]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ae70:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ae76:	480e      	ldr	r0, [pc, #56]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae78:	f7f9 fa0c 	bl	8004294 <HAL_I2C_Init>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800ae82:	f001 f817 	bl	800beb4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ae86:	2100      	movs	r1, #0
 800ae88:	4809      	ldr	r0, [pc, #36]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae8a:	f7f9 fa93 	bl	80043b4 <HAL_I2CEx_ConfigAnalogFilter>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d001      	beq.n	800ae98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800ae94:	f001 f80e 	bl	800beb4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800ae98:	2100      	movs	r1, #0
 800ae9a:	4805      	ldr	r0, [pc, #20]	; (800aeb0 <MX_I2C1_Init+0x74>)
 800ae9c:	f7f9 fad5 	bl	800444a <HAL_I2CEx_ConfigDigitalFilter>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800aea6:	f001 f805 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800aeaa:	bf00      	nop
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	20000548 	.word	0x20000548
 800aeb4:	40005400 	.word	0x40005400
 800aeb8:	00c0eaff 	.word	0x00c0eaff

0800aebc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800aec0:	4b1b      	ldr	r3, [pc, #108]	; (800af30 <MX_I2C3_Init+0x74>)
 800aec2:	4a1c      	ldr	r2, [pc, #112]	; (800af34 <MX_I2C3_Init+0x78>)
 800aec4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800aec6:	4b1a      	ldr	r3, [pc, #104]	; (800af30 <MX_I2C3_Init+0x74>)
 800aec8:	4a1b      	ldr	r2, [pc, #108]	; (800af38 <MX_I2C3_Init+0x7c>)
 800aeca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800aecc:	4b18      	ldr	r3, [pc, #96]	; (800af30 <MX_I2C3_Init+0x74>)
 800aece:	2200      	movs	r2, #0
 800aed0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aed2:	4b17      	ldr	r3, [pc, #92]	; (800af30 <MX_I2C3_Init+0x74>)
 800aed4:	2201      	movs	r2, #1
 800aed6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aed8:	4b15      	ldr	r3, [pc, #84]	; (800af30 <MX_I2C3_Init+0x74>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800aede:	4b14      	ldr	r3, [pc, #80]	; (800af30 <MX_I2C3_Init+0x74>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800aee4:	4b12      	ldr	r3, [pc, #72]	; (800af30 <MX_I2C3_Init+0x74>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aeea:	4b11      	ldr	r3, [pc, #68]	; (800af30 <MX_I2C3_Init+0x74>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aef0:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <MX_I2C3_Init+0x74>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800aef6:	480e      	ldr	r0, [pc, #56]	; (800af30 <MX_I2C3_Init+0x74>)
 800aef8:	f7f9 f9cc 	bl	8004294 <HAL_I2C_Init>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800af02:	f000 ffd7 	bl	800beb4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800af06:	2100      	movs	r1, #0
 800af08:	4809      	ldr	r0, [pc, #36]	; (800af30 <MX_I2C3_Init+0x74>)
 800af0a:	f7f9 fa53 	bl	80043b4 <HAL_I2CEx_ConfigAnalogFilter>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800af14:	f000 ffce 	bl	800beb4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800af18:	2100      	movs	r1, #0
 800af1a:	4805      	ldr	r0, [pc, #20]	; (800af30 <MX_I2C3_Init+0x74>)
 800af1c:	f7f9 fa95 	bl	800444a <HAL_I2CEx_ConfigDigitalFilter>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800af26:	f000 ffc5 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800af2a:	bf00      	nop
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000384 	.word	0x20000384
 800af34:	40005c00 	.word	0x40005c00
 800af38:	00c0eaff 	.word	0x00c0eaff

0800af3c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08e      	sub	sp, #56	; 0x38
 800af40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800af42:	1d3b      	adds	r3, r7, #4
 800af44:	2234      	movs	r2, #52	; 0x34
 800af46:	2100      	movs	r1, #0
 800af48:	4618      	mov	r0, r3
 800af4a:	f002 f945 	bl	800d1d8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800af4e:	4b3a      	ldr	r3, [pc, #232]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af50:	4a3a      	ldr	r2, [pc, #232]	; (800b03c <MX_LTDC_Init+0x100>)
 800af52:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800af54:	4b38      	ldr	r3, [pc, #224]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af56:	2200      	movs	r2, #0
 800af58:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800af5a:	4b37      	ldr	r3, [pc, #220]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800af60:	4b35      	ldr	r3, [pc, #212]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af62:	2200      	movs	r2, #0
 800af64:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800af66:	4b34      	ldr	r3, [pc, #208]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af68:	2200      	movs	r2, #0
 800af6a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800af6c:	4b32      	ldr	r3, [pc, #200]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af6e:	2228      	movs	r2, #40	; 0x28
 800af70:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800af72:	4b31      	ldr	r3, [pc, #196]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af74:	2209      	movs	r2, #9
 800af76:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800af78:	4b2f      	ldr	r3, [pc, #188]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af7a:	2235      	movs	r2, #53	; 0x35
 800af7c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800af7e:	4b2e      	ldr	r3, [pc, #184]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af80:	220b      	movs	r2, #11
 800af82:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800af84:	4b2c      	ldr	r3, [pc, #176]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af86:	f240 2215 	movw	r2, #533	; 0x215
 800af8a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800af8c:	4b2a      	ldr	r3, [pc, #168]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af8e:	f240 121b 	movw	r2, #283	; 0x11b
 800af92:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800af94:	4b28      	ldr	r3, [pc, #160]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af96:	f240 2235 	movw	r2, #565	; 0x235
 800af9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800af9c:	4b26      	ldr	r3, [pc, #152]	; (800b038 <MX_LTDC_Init+0xfc>)
 800af9e:	f240 121d 	movw	r2, #285	; 0x11d
 800afa2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800afa4:	4b24      	ldr	r3, [pc, #144]	; (800b038 <MX_LTDC_Init+0xfc>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800afac:	4b22      	ldr	r3, [pc, #136]	; (800b038 <MX_LTDC_Init+0xfc>)
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800afb4:	4b20      	ldr	r3, [pc, #128]	; (800b038 <MX_LTDC_Init+0xfc>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800afbc:	481e      	ldr	r0, [pc, #120]	; (800b038 <MX_LTDC_Init+0xfc>)
 800afbe:	f7f9 fa91 	bl	80044e4 <HAL_LTDC_Init>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800afc8:	f000 ff74 	bl	800beb4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800afd0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800afd4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800afda:	f44f 7388 	mov.w	r3, #272	; 0x110
 800afde:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800afe0:	2302      	movs	r3, #2
 800afe2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800afe4:	23ff      	movs	r3, #255	; 0xff
 800afe6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800afec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800aff0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800aff2:	2307      	movs	r3, #7
 800aff4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800aff6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800affa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800affc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b000:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800b002:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b006:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800b01a:	1d3b      	adds	r3, r7, #4
 800b01c:	2200      	movs	r2, #0
 800b01e:	4619      	mov	r1, r3
 800b020:	4805      	ldr	r0, [pc, #20]	; (800b038 <MX_LTDC_Init+0xfc>)
 800b022:	f7f9 fbf1 	bl	8004808 <HAL_LTDC_ConfigLayer>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800b02c:	f000 ff42 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800b030:	bf00      	nop
 800b032:	3738      	adds	r7, #56	; 0x38
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	200006c0 	.word	0x200006c0
 800b03c:	40016800 	.word	0x40016800

0800b040 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800b044:	4b12      	ldr	r3, [pc, #72]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b046:	4a13      	ldr	r2, [pc, #76]	; (800b094 <MX_QUADSPI_Init+0x54>)
 800b048:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800b04a:	4b11      	ldr	r3, [pc, #68]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b04c:	22ff      	movs	r2, #255	; 0xff
 800b04e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800b050:	4b0f      	ldr	r3, [pc, #60]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b052:	2201      	movs	r2, #1
 800b054:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800b056:	4b0e      	ldr	r3, [pc, #56]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b058:	2200      	movs	r2, #0
 800b05a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800b05c:	4b0c      	ldr	r3, [pc, #48]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b05e:	2201      	movs	r2, #1
 800b060:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800b062:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b064:	2200      	movs	r2, #0
 800b066:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800b068:	4b09      	ldr	r3, [pc, #36]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800b06e:	4b08      	ldr	r3, [pc, #32]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b070:	2200      	movs	r2, #0
 800b072:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800b074:	4b06      	ldr	r3, [pc, #24]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b076:	2200      	movs	r2, #0
 800b078:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800b07a:	4805      	ldr	r0, [pc, #20]	; (800b090 <MX_QUADSPI_Init+0x50>)
 800b07c:	f7f9 fdfa 	bl	8004c74 <HAL_QSPI_Init>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d001      	beq.n	800b08a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800b086:	f000 ff15 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800b08a:	bf00      	nop
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	20000a38 	.word	0x20000a38
 800b094:	a0001000 	.word	0xa0001000

0800b098 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800b09c:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <MX_RNG_Init+0x20>)
 800b09e:	4a07      	ldr	r2, [pc, #28]	; (800b0bc <MX_RNG_Init+0x24>)
 800b0a0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800b0a2:	4805      	ldr	r0, [pc, #20]	; (800b0b8 <MX_RNG_Init+0x20>)
 800b0a4:	f7fb f848 	bl	8006138 <HAL_RNG_Init>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800b0ae:	f000 ff01 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800b0b2:	bf00      	nop
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200008e4 	.word	0x200008e4
 800b0bc:	50060800 	.word	0x50060800

0800b0c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b092      	sub	sp, #72	; 0x48
 800b0c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b0c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	605a      	str	r2, [r3, #4]
 800b0d0:	609a      	str	r2, [r3, #8]
 800b0d2:	60da      	str	r2, [r3, #12]
 800b0d4:	611a      	str	r2, [r3, #16]
 800b0d6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800b0d8:	2300      	movs	r3, #0
 800b0da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800b0dc:	463b      	mov	r3, r7
 800b0de:	222c      	movs	r2, #44	; 0x2c
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f002 f878 	bl	800d1d8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800b0e8:	4b47      	ldr	r3, [pc, #284]	; (800b208 <MX_RTC_Init+0x148>)
 800b0ea:	4a48      	ldr	r2, [pc, #288]	; (800b20c <MX_RTC_Init+0x14c>)
 800b0ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b0ee:	4b46      	ldr	r3, [pc, #280]	; (800b208 <MX_RTC_Init+0x148>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b0f4:	4b44      	ldr	r3, [pc, #272]	; (800b208 <MX_RTC_Init+0x148>)
 800b0f6:	227f      	movs	r2, #127	; 0x7f
 800b0f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b0fa:	4b43      	ldr	r3, [pc, #268]	; (800b208 <MX_RTC_Init+0x148>)
 800b0fc:	22ff      	movs	r2, #255	; 0xff
 800b0fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b100:	4b41      	ldr	r3, [pc, #260]	; (800b208 <MX_RTC_Init+0x148>)
 800b102:	2200      	movs	r2, #0
 800b104:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b106:	4b40      	ldr	r3, [pc, #256]	; (800b208 <MX_RTC_Init+0x148>)
 800b108:	2200      	movs	r2, #0
 800b10a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b10c:	4b3e      	ldr	r3, [pc, #248]	; (800b208 <MX_RTC_Init+0x148>)
 800b10e:	2200      	movs	r2, #0
 800b110:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b112:	483d      	ldr	r0, [pc, #244]	; (800b208 <MX_RTC_Init+0x148>)
 800b114:	f7fb f89e 	bl	8006254 <HAL_RTC_Init>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800b11e:	f000 fec9 	bl	800beb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800b122:	2300      	movs	r3, #0
 800b124:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800b128:	2300      	movs	r3, #0
 800b12a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800b12e:	2300      	movs	r3, #0
 800b130:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b134:	2300      	movs	r3, #0
 800b136:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b138:	2300      	movs	r3, #0
 800b13a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800b13c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b140:	2201      	movs	r2, #1
 800b142:	4619      	mov	r1, r3
 800b144:	4830      	ldr	r0, [pc, #192]	; (800b208 <MX_RTC_Init+0x148>)
 800b146:	f7fb f901 	bl	800634c <HAL_RTC_SetTime>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800b150:	f000 feb0 	bl	800beb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800b154:	2301      	movs	r3, #1
 800b156:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800b15a:	2301      	movs	r3, #1
 800b15c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800b160:	2301      	movs	r3, #1
 800b162:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800b166:	2300      	movs	r3, #0
 800b168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800b16c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b170:	2201      	movs	r2, #1
 800b172:	4619      	mov	r1, r3
 800b174:	4824      	ldr	r0, [pc, #144]	; (800b208 <MX_RTC_Init+0x148>)
 800b176:	f7fb f9a7 	bl	80064c8 <HAL_RTC_SetDate>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800b180:	f000 fe98 	bl	800beb4 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800b184:	2300      	movs	r3, #0
 800b186:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800b188:	2300      	movs	r3, #0
 800b18a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800b190:	2300      	movs	r3, #0
 800b192:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b194:	2300      	movs	r3, #0
 800b196:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b198:	2300      	movs	r3, #0
 800b19a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800b1ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	4813      	ldr	r0, [pc, #76]	; (800b208 <MX_RTC_Init+0x148>)
 800b1bc:	f7fb fa2c 	bl	8006618 <HAL_RTC_SetAlarm>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800b1c6:	f000 fe75 	bl	800beb4 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 800b1d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	2201      	movs	r2, #1
 800b1da:	4619      	mov	r1, r3
 800b1dc:	480a      	ldr	r0, [pc, #40]	; (800b208 <MX_RTC_Init+0x148>)
 800b1de:	f7fb fa1b 	bl	8006618 <HAL_RTC_SetAlarm>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800b1e8:	f000 fe64 	bl	800beb4 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	4805      	ldr	r0, [pc, #20]	; (800b208 <MX_RTC_Init+0x148>)
 800b1f2:	f7fb fb9b 	bl	800692c <HAL_RTCEx_SetTimeStamp>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 800b1fc:	f000 fe5a 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b200:	bf00      	nop
 800b202:	3748      	adds	r7, #72	; 0x48
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	20000884 	.word	0x20000884
 800b20c:	40002800 	.word	0x40002800

0800b210 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 800b214:	4b4d      	ldr	r3, [pc, #308]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b216:	4a4e      	ldr	r2, [pc, #312]	; (800b350 <MX_SAI2_Init+0x140>)
 800b218:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800b21a:	4b4c      	ldr	r3, [pc, #304]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800b220:	4b4a      	ldr	r3, [pc, #296]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b222:	2200      	movs	r2, #0
 800b224:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800b226:	4b49      	ldr	r3, [pc, #292]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b228:	2240      	movs	r2, #64	; 0x40
 800b22a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800b22c:	4b47      	ldr	r3, [pc, #284]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b22e:	2200      	movs	r2, #0
 800b230:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b232:	4b46      	ldr	r3, [pc, #280]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b234:	2200      	movs	r2, #0
 800b236:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800b238:	4b44      	ldr	r3, [pc, #272]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800b23e:	4b43      	ldr	r3, [pc, #268]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b240:	2200      	movs	r2, #0
 800b242:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800b244:	4b41      	ldr	r3, [pc, #260]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b246:	2200      	movs	r2, #0
 800b248:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800b24a:	4b40      	ldr	r3, [pc, #256]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800b250:	4b3e      	ldr	r3, [pc, #248]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b252:	4a40      	ldr	r2, [pc, #256]	; (800b354 <MX_SAI2_Init+0x144>)
 800b254:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b256:	4b3d      	ldr	r3, [pc, #244]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b258:	2200      	movs	r2, #0
 800b25a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800b25c:	4b3b      	ldr	r3, [pc, #236]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b25e:	2200      	movs	r2, #0
 800b260:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800b262:	4b3a      	ldr	r3, [pc, #232]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b264:	2200      	movs	r2, #0
 800b266:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b268:	4b38      	ldr	r3, [pc, #224]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800b26e:	4b37      	ldr	r3, [pc, #220]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b270:	2208      	movs	r2, #8
 800b272:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800b274:	4b35      	ldr	r3, [pc, #212]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b276:	2201      	movs	r2, #1
 800b278:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800b27a:	4b34      	ldr	r3, [pc, #208]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b280:	4b32      	ldr	r3, [pc, #200]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b282:	2200      	movs	r2, #0
 800b284:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800b286:	4b31      	ldr	r3, [pc, #196]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b288:	2200      	movs	r2, #0
 800b28a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800b28c:	4b2f      	ldr	r3, [pc, #188]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b28e:	2200      	movs	r2, #0
 800b290:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800b292:	4b2e      	ldr	r3, [pc, #184]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b294:	2200      	movs	r2, #0
 800b296:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800b298:	4b2c      	ldr	r3, [pc, #176]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b29a:	2201      	movs	r2, #1
 800b29c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800b29e:	4b2b      	ldr	r3, [pc, #172]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800b2a4:	4829      	ldr	r0, [pc, #164]	; (800b34c <MX_SAI2_Init+0x13c>)
 800b2a6:	f7fb fb97 	bl	80069d8 <HAL_SAI_Init>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800b2b0:	f000 fe00 	bl	800beb4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800b2b4:	4b28      	ldr	r3, [pc, #160]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2b6:	4a29      	ldr	r2, [pc, #164]	; (800b35c <MX_SAI2_Init+0x14c>)
 800b2b8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800b2ba:	4b27      	ldr	r3, [pc, #156]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800b2c0:	4b25      	ldr	r3, [pc, #148]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2c2:	2203      	movs	r2, #3
 800b2c4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800b2c6:	4b24      	ldr	r3, [pc, #144]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2c8:	2240      	movs	r2, #64	; 0x40
 800b2ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800b2cc:	4b22      	ldr	r3, [pc, #136]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800b2d2:	4b21      	ldr	r3, [pc, #132]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800b2d8:	4b1f      	ldr	r3, [pc, #124]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2da:	2201      	movs	r2, #1
 800b2dc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800b2de:	4b1e      	ldr	r3, [pc, #120]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800b2e4:	4b1c      	ldr	r3, [pc, #112]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800b2ea:	4b1b      	ldr	r3, [pc, #108]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800b2f0:	4b19      	ldr	r3, [pc, #100]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800b2f6:	4b18      	ldr	r3, [pc, #96]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800b2fc:	4b16      	ldr	r3, [pc, #88]	; (800b358 <MX_SAI2_Init+0x148>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <MX_SAI2_Init+0x148>)
 800b304:	2218      	movs	r2, #24
 800b306:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800b308:	4b13      	ldr	r3, [pc, #76]	; (800b358 <MX_SAI2_Init+0x148>)
 800b30a:	2201      	movs	r2, #1
 800b30c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800b30e:	4b12      	ldr	r3, [pc, #72]	; (800b358 <MX_SAI2_Init+0x148>)
 800b310:	2200      	movs	r2, #0
 800b312:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800b314:	4b10      	ldr	r3, [pc, #64]	; (800b358 <MX_SAI2_Init+0x148>)
 800b316:	2200      	movs	r2, #0
 800b318:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800b31a:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <MX_SAI2_Init+0x148>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800b320:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <MX_SAI2_Init+0x148>)
 800b322:	2200      	movs	r2, #0
 800b324:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800b326:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <MX_SAI2_Init+0x148>)
 800b328:	2200      	movs	r2, #0
 800b32a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800b32c:	4b0a      	ldr	r3, [pc, #40]	; (800b358 <MX_SAI2_Init+0x148>)
 800b32e:	2201      	movs	r2, #1
 800b330:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800b332:	4b09      	ldr	r3, [pc, #36]	; (800b358 <MX_SAI2_Init+0x148>)
 800b334:	2200      	movs	r2, #0
 800b336:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800b338:	4807      	ldr	r0, [pc, #28]	; (800b358 <MX_SAI2_Init+0x148>)
 800b33a:	f7fb fb4d 	bl	80069d8 <HAL_SAI_Init>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800b344:	f000 fdb6 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800b348:	bf00      	nop
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	200004c4 	.word	0x200004c4
 800b350:	40015c04 	.word	0x40015c04
 800b354:	0002ee00 	.word	0x0002ee00
 800b358:	20000300 	.word	0x20000300
 800b35c:	40015c24 	.word	0x40015c24

0800b360 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800b364:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b366:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800b36a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800b36c:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b36e:	2200      	movs	r2, #0
 800b370:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800b372:	4b12      	ldr	r3, [pc, #72]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b374:	2200      	movs	r2, #0
 800b376:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800b378:	4b10      	ldr	r3, [pc, #64]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b380:	2200      	movs	r2, #0
 800b382:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800b384:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b386:	2200      	movs	r2, #0
 800b388:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800b38a:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b392:	2200      	movs	r2, #0
 800b394:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b398:	2200      	movs	r2, #0
 800b39a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800b39c:	4b07      	ldr	r3, [pc, #28]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800b3a2:	4b06      	ldr	r3, [pc, #24]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800b3a8:	4804      	ldr	r0, [pc, #16]	; (800b3bc <MX_SPDIFRX_Init+0x5c>)
 800b3aa:	f7fb fd3d 	bl	8006e28 <HAL_SPDIFRX_Init>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d001      	beq.n	800b3b8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800b3b4:	f000 fd7e 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800b3b8:	bf00      	nop
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	20000478 	.word	0x20000478

0800b3c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800b3c4:	4b1b      	ldr	r3, [pc, #108]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3c6:	4a1c      	ldr	r2, [pc, #112]	; (800b438 <MX_SPI2_Init+0x78>)
 800b3c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b3ca:	4b1a      	ldr	r3, [pc, #104]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b3d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b3d2:	4b18      	ldr	r3, [pc, #96]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800b3d8:	4b16      	ldr	r3, [pc, #88]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3da:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b3de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b3e0:	4b14      	ldr	r3, [pc, #80]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b3e6:	4b13      	ldr	r3, [pc, #76]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b3ec:	4b11      	ldr	r3, [pc, #68]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b3f4:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b3fa:	4b0e      	ldr	r3, [pc, #56]	; (800b434 <MX_SPI2_Init+0x74>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b400:	4b0c      	ldr	r3, [pc, #48]	; (800b434 <MX_SPI2_Init+0x74>)
 800b402:	2200      	movs	r2, #0
 800b404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b406:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <MX_SPI2_Init+0x74>)
 800b408:	2200      	movs	r2, #0
 800b40a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800b40c:	4b09      	ldr	r3, [pc, #36]	; (800b434 <MX_SPI2_Init+0x74>)
 800b40e:	2207      	movs	r2, #7
 800b410:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800b412:	4b08      	ldr	r3, [pc, #32]	; (800b434 <MX_SPI2_Init+0x74>)
 800b414:	2200      	movs	r2, #0
 800b416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b418:	4b06      	ldr	r3, [pc, #24]	; (800b434 <MX_SPI2_Init+0x74>)
 800b41a:	2208      	movs	r2, #8
 800b41c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b41e:	4805      	ldr	r0, [pc, #20]	; (800b434 <MX_SPI2_Init+0x74>)
 800b420:	f7fb fd5e 	bl	8006ee0 <HAL_SPI_Init>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800b42a:	f000 fd43 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800b42e:	bf00      	nop
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	200003d0 	.word	0x200003d0
 800b438:	40003800 	.word	0x40003800

0800b43c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b09a      	sub	sp, #104	; 0x68
 800b440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b442:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	605a      	str	r2, [r3, #4]
 800b44c:	609a      	str	r2, [r3, #8]
 800b44e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b450:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b454:	2200      	movs	r2, #0
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	605a      	str	r2, [r3, #4]
 800b45a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b45c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	605a      	str	r2, [r3, #4]
 800b466:	609a      	str	r2, [r3, #8]
 800b468:	60da      	str	r2, [r3, #12]
 800b46a:	611a      	str	r2, [r3, #16]
 800b46c:	615a      	str	r2, [r3, #20]
 800b46e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b470:	1d3b      	adds	r3, r7, #4
 800b472:	222c      	movs	r2, #44	; 0x2c
 800b474:	2100      	movs	r1, #0
 800b476:	4618      	mov	r0, r3
 800b478:	f001 feae 	bl	800d1d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b47c:	4b43      	ldr	r3, [pc, #268]	; (800b58c <MX_TIM1_Init+0x150>)
 800b47e:	4a44      	ldr	r2, [pc, #272]	; (800b590 <MX_TIM1_Init+0x154>)
 800b480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800b482:	4b42      	ldr	r3, [pc, #264]	; (800b58c <MX_TIM1_Init+0x150>)
 800b484:	2200      	movs	r2, #0
 800b486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b488:	4b40      	ldr	r3, [pc, #256]	; (800b58c <MX_TIM1_Init+0x150>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800b48e:	4b3f      	ldr	r3, [pc, #252]	; (800b58c <MX_TIM1_Init+0x150>)
 800b490:	2200      	movs	r2, #0
 800b492:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b494:	4b3d      	ldr	r3, [pc, #244]	; (800b58c <MX_TIM1_Init+0x150>)
 800b496:	2200      	movs	r2, #0
 800b498:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b49a:	4b3c      	ldr	r3, [pc, #240]	; (800b58c <MX_TIM1_Init+0x150>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4a0:	4b3a      	ldr	r3, [pc, #232]	; (800b58c <MX_TIM1_Init+0x150>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b4a6:	4839      	ldr	r0, [pc, #228]	; (800b58c <MX_TIM1_Init+0x150>)
 800b4a8:	f7fb fdac 	bl	8007004 <HAL_TIM_Base_Init>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800b4b2:	f000 fcff 	bl	800beb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b4b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ba:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b4bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4832      	ldr	r0, [pc, #200]	; (800b58c <MX_TIM1_Init+0x150>)
 800b4c4:	f7fc f856 	bl	8007574 <HAL_TIM_ConfigClockSource>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800b4ce:	f000 fcf1 	bl	800beb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800b4d2:	482e      	ldr	r0, [pc, #184]	; (800b58c <MX_TIM1_Init+0x150>)
 800b4d4:	f7fb fdec 	bl	80070b0 <HAL_TIM_PWM_Init>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800b4de:	f000 fce9 	bl	800beb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b4ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	4825      	ldr	r0, [pc, #148]	; (800b58c <MX_TIM1_Init+0x150>)
 800b4f6:	f7fc fcb7 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800b500:	f000 fcd8 	bl	800beb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b504:	2360      	movs	r3, #96	; 0x60
 800b506:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b50c:	2300      	movs	r3, #0
 800b50e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b510:	2300      	movs	r3, #0
 800b512:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b514:	2300      	movs	r3, #0
 800b516:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b518:	2300      	movs	r3, #0
 800b51a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b51c:	2300      	movs	r3, #0
 800b51e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b520:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b524:	2200      	movs	r2, #0
 800b526:	4619      	mov	r1, r3
 800b528:	4818      	ldr	r0, [pc, #96]	; (800b58c <MX_TIM1_Init+0x150>)
 800b52a:	f7fb ff0b 	bl	8007344 <HAL_TIM_PWM_ConfigChannel>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800b534:	f000 fcbe 	bl	800beb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b538:	2300      	movs	r3, #0
 800b53a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b540:	2300      	movs	r3, #0
 800b542:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b548:	2300      	movs	r3, #0
 800b54a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b54c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b550:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800b556:	2300      	movs	r3, #0
 800b558:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800b55a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b55e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b564:	2300      	movs	r3, #0
 800b566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800b568:	1d3b      	adds	r3, r7, #4
 800b56a:	4619      	mov	r1, r3
 800b56c:	4807      	ldr	r0, [pc, #28]	; (800b58c <MX_TIM1_Init+0x150>)
 800b56e:	f7fc fcd7 	bl	8007f20 <HAL_TIMEx_ConfigBreakDeadTime>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800b578:	f000 fc9c 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800b57c:	4803      	ldr	r0, [pc, #12]	; (800b58c <MX_TIM1_Init+0x150>)
 800b57e:	f001 f94b 	bl	800c818 <HAL_TIM_MspPostInit>

}
 800b582:	bf00      	nop
 800b584:	3768      	adds	r7, #104	; 0x68
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	200008a4 	.word	0x200008a4
 800b590:	40010000 	.word	0x40010000

0800b594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b088      	sub	sp, #32
 800b598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b59a:	f107 0310 	add.w	r3, r7, #16
 800b59e:	2200      	movs	r2, #0
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	605a      	str	r2, [r3, #4]
 800b5a4:	609a      	str	r2, [r3, #8]
 800b5a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b5a8:	1d3b      	adds	r3, r7, #4
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	601a      	str	r2, [r3, #0]
 800b5ae:	605a      	str	r2, [r3, #4]
 800b5b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b5b2:	4b1d      	ldr	r3, [pc, #116]	; (800b628 <MX_TIM2_Init+0x94>)
 800b5b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b5b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b5ba:	4b1b      	ldr	r3, [pc, #108]	; (800b628 <MX_TIM2_Init+0x94>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b5c0:	4b19      	ldr	r3, [pc, #100]	; (800b628 <MX_TIM2_Init+0x94>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800b5c6:	4b18      	ldr	r3, [pc, #96]	; (800b628 <MX_TIM2_Init+0x94>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b5cc:	4b16      	ldr	r3, [pc, #88]	; (800b628 <MX_TIM2_Init+0x94>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b5d2:	4b15      	ldr	r3, [pc, #84]	; (800b628 <MX_TIM2_Init+0x94>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800b5d8:	4813      	ldr	r0, [pc, #76]	; (800b628 <MX_TIM2_Init+0x94>)
 800b5da:	f7fb fd13 	bl	8007004 <HAL_TIM_Base_Init>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800b5e4:	f000 fc66 	bl	800beb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b5e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800b5ee:	f107 0310 	add.w	r3, r7, #16
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	480c      	ldr	r0, [pc, #48]	; (800b628 <MX_TIM2_Init+0x94>)
 800b5f6:	f7fb ffbd 	bl	8007574 <HAL_TIM_ConfigClockSource>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d001      	beq.n	800b604 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800b600:	f000 fc58 	bl	800beb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b604:	2300      	movs	r3, #0
 800b606:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b608:	2300      	movs	r3, #0
 800b60a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b60c:	1d3b      	adds	r3, r7, #4
 800b60e:	4619      	mov	r1, r3
 800b610:	4805      	ldr	r0, [pc, #20]	; (800b628 <MX_TIM2_Init+0x94>)
 800b612:	f7fc fc29 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d001      	beq.n	800b620 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800b61c:	f000 fc4a 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800b620:	bf00      	nop
 800b622:	3720      	adds	r7, #32
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	20000938 	.word	0x20000938

0800b62c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b088      	sub	sp, #32
 800b630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b632:	f107 0310 	add.w	r3, r7, #16
 800b636:	2200      	movs	r2, #0
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	605a      	str	r2, [r3, #4]
 800b63c:	609a      	str	r2, [r3, #8]
 800b63e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b640:	1d3b      	adds	r3, r7, #4
 800b642:	2200      	movs	r2, #0
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	605a      	str	r2, [r3, #4]
 800b648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b64a:	4b1d      	ldr	r3, [pc, #116]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b64c:	4a1d      	ldr	r2, [pc, #116]	; (800b6c4 <MX_TIM3_Init+0x98>)
 800b64e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b650:	4b1b      	ldr	r3, [pc, #108]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b652:	2200      	movs	r2, #0
 800b654:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b656:	4b1a      	ldr	r3, [pc, #104]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b658:	2200      	movs	r2, #0
 800b65a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800b65c:	4b18      	ldr	r3, [pc, #96]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b65e:	2200      	movs	r2, #0
 800b660:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b662:	4b17      	ldr	r3, [pc, #92]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b664:	2200      	movs	r2, #0
 800b666:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b668:	4b15      	ldr	r3, [pc, #84]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b66a:	2200      	movs	r2, #0
 800b66c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800b66e:	4814      	ldr	r0, [pc, #80]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b670:	f7fb fcc8 	bl	8007004 <HAL_TIM_Base_Init>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800b67a:	f000 fc1b 	bl	800beb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b682:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800b684:	f107 0310 	add.w	r3, r7, #16
 800b688:	4619      	mov	r1, r3
 800b68a:	480d      	ldr	r0, [pc, #52]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b68c:	f7fb ff72 	bl	8007574 <HAL_TIM_ConfigClockSource>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800b696:	f000 fc0d 	bl	800beb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b6a2:	1d3b      	adds	r3, r7, #4
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4806      	ldr	r0, [pc, #24]	; (800b6c0 <MX_TIM3_Init+0x94>)
 800b6a8:	f7fc fbde 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800b6b2:	f000 fbff 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b6b6:	bf00      	nop
 800b6b8:	3720      	adds	r7, #32
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20000680 	.word	0x20000680
 800b6c4:	40000400 	.word	0x40000400

0800b6c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08e      	sub	sp, #56	; 0x38
 800b6cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b6ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]
 800b6d6:	605a      	str	r2, [r3, #4]
 800b6d8:	609a      	str	r2, [r3, #8]
 800b6da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b6dc:	f107 031c 	add.w	r3, r7, #28
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	605a      	str	r2, [r3, #4]
 800b6e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b6e8:	463b      	mov	r3, r7
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	605a      	str	r2, [r3, #4]
 800b6f0:	609a      	str	r2, [r3, #8]
 800b6f2:	60da      	str	r2, [r3, #12]
 800b6f4:	611a      	str	r2, [r3, #16]
 800b6f6:	615a      	str	r2, [r3, #20]
 800b6f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800b6fa:	4b2c      	ldr	r3, [pc, #176]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b6fc:	4a2c      	ldr	r2, [pc, #176]	; (800b7b0 <MX_TIM5_Init+0xe8>)
 800b6fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800b700:	4b2a      	ldr	r3, [pc, #168]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b702:	2200      	movs	r2, #0
 800b704:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b706:	4b29      	ldr	r3, [pc, #164]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b708:	2200      	movs	r2, #0
 800b70a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800b70c:	4b27      	ldr	r3, [pc, #156]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b70e:	2200      	movs	r2, #0
 800b710:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b712:	4b26      	ldr	r3, [pc, #152]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b714:	2200      	movs	r2, #0
 800b716:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b718:	4b24      	ldr	r3, [pc, #144]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b71a:	2200      	movs	r2, #0
 800b71c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800b71e:	4823      	ldr	r0, [pc, #140]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b720:	f7fb fc70 	bl	8007004 <HAL_TIM_Base_Init>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800b72a:	f000 fbc3 	bl	800beb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b72e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b732:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800b734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b738:	4619      	mov	r1, r3
 800b73a:	481c      	ldr	r0, [pc, #112]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b73c:	f7fb ff1a 	bl	8007574 <HAL_TIM_ConfigClockSource>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800b746:	f000 fbb5 	bl	800beb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800b74a:	4818      	ldr	r0, [pc, #96]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b74c:	f7fb fcb0 	bl	80070b0 <HAL_TIM_PWM_Init>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800b756:	f000 fbad 	bl	800beb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b75a:	2300      	movs	r3, #0
 800b75c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b75e:	2300      	movs	r3, #0
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800b762:	f107 031c 	add.w	r3, r7, #28
 800b766:	4619      	mov	r1, r3
 800b768:	4810      	ldr	r0, [pc, #64]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b76a:	f7fc fb7d 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d001      	beq.n	800b778 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800b774:	f000 fb9e 	bl	800beb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b778:	2360      	movs	r3, #96	; 0x60
 800b77a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b780:	2300      	movs	r3, #0
 800b782:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b784:	2300      	movs	r3, #0
 800b786:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b788:	463b      	mov	r3, r7
 800b78a:	220c      	movs	r2, #12
 800b78c:	4619      	mov	r1, r3
 800b78e:	4807      	ldr	r0, [pc, #28]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b790:	f7fb fdd8 	bl	8007344 <HAL_TIM_PWM_ConfigChannel>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800b79a:	f000 fb8b 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800b79e:	4803      	ldr	r0, [pc, #12]	; (800b7ac <MX_TIM5_Init+0xe4>)
 800b7a0:	f001 f83a 	bl	800c818 <HAL_TIM_MspPostInit>

}
 800b7a4:	bf00      	nop
 800b7a6:	3738      	adds	r7, #56	; 0x38
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20000640 	.word	0x20000640
 800b7b0:	40000c00 	.word	0x40000c00

0800b7b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b7ba:	f107 0310 	add.w	r3, r7, #16
 800b7be:	2200      	movs	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	605a      	str	r2, [r3, #4]
 800b7c4:	609a      	str	r2, [r3, #8]
 800b7c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b7c8:	1d3b      	adds	r3, r7, #4
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	605a      	str	r2, [r3, #4]
 800b7d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800b7d2:	4b1f      	ldr	r3, [pc, #124]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b7d4:	4a1f      	ldr	r2, [pc, #124]	; (800b854 <MX_TIM8_Init+0xa0>)
 800b7d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800b7d8:	4b1d      	ldr	r3, [pc, #116]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b7de:	4b1c      	ldr	r3, [pc, #112]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800b7e4:	4b1a      	ldr	r3, [pc, #104]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b7ea:	4b19      	ldr	r3, [pc, #100]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800b7f0:	4b17      	ldr	r3, [pc, #92]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b7f6:	4b16      	ldr	r3, [pc, #88]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800b7fc:	4814      	ldr	r0, [pc, #80]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b7fe:	f7fb fc01 	bl	8007004 <HAL_TIM_Base_Init>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800b808:	f000 fb54 	bl	800beb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b80c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b810:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800b812:	f107 0310 	add.w	r3, r7, #16
 800b816:	4619      	mov	r1, r3
 800b818:	480d      	ldr	r0, [pc, #52]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b81a:	f7fb feab 	bl	8007574 <HAL_TIM_ConfigClockSource>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d001      	beq.n	800b828 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800b824:	f000 fb46 	bl	800beb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b828:	2300      	movs	r3, #0
 800b82a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800b82c:	2300      	movs	r3, #0
 800b82e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b830:	2300      	movs	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b834:	1d3b      	adds	r3, r7, #4
 800b836:	4619      	mov	r1, r3
 800b838:	4805      	ldr	r0, [pc, #20]	; (800b850 <MX_TIM8_Init+0x9c>)
 800b83a:	f7fc fb15 	bl	8007e68 <HAL_TIMEx_MasterConfigSynchronization>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d001      	beq.n	800b848 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800b844:	f000 fb36 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800b848:	bf00      	nop
 800b84a:	3720      	adds	r7, #32
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	20000438 	.word	0x20000438
 800b854:	40010400 	.word	0x40010400

0800b858 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b088      	sub	sp, #32
 800b85c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800b85e:	1d3b      	adds	r3, r7, #4
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	605a      	str	r2, [r3, #4]
 800b866:	609a      	str	r2, [r3, #8]
 800b868:	60da      	str	r2, [r3, #12]
 800b86a:	611a      	str	r2, [r3, #16]
 800b86c:	615a      	str	r2, [r3, #20]
 800b86e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800b870:	4b19      	ldr	r3, [pc, #100]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b872:	4a1a      	ldr	r2, [pc, #104]	; (800b8dc <MX_TIM12_Init+0x84>)
 800b874:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800b876:	4b18      	ldr	r3, [pc, #96]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b878:	2200      	movs	r2, #0
 800b87a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b87c:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b87e:	2200      	movs	r2, #0
 800b880:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800b882:	4b15      	ldr	r3, [pc, #84]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b884:	2200      	movs	r2, #0
 800b886:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b888:	4b13      	ldr	r3, [pc, #76]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b88e:	4b12      	ldr	r3, [pc, #72]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b890:	2200      	movs	r2, #0
 800b892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800b894:	4810      	ldr	r0, [pc, #64]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b896:	f7fb fc0b 	bl	80070b0 <HAL_TIM_PWM_Init>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800b8a0:	f000 fb08 	bl	800beb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b8a4:	2360      	movs	r3, #96	; 0x60
 800b8a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b8b4:	1d3b      	adds	r3, r7, #4
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	4807      	ldr	r0, [pc, #28]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b8bc:	f7fb fd42 	bl	8007344 <HAL_TIM_PWM_ConfigChannel>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800b8c6:	f000 faf5 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800b8ca:	4803      	ldr	r0, [pc, #12]	; (800b8d8 <MX_TIM12_Init+0x80>)
 800b8cc:	f000 ffa4 	bl	800c818 <HAL_TIM_MspPostInit>

}
 800b8d0:	bf00      	nop
 800b8d2:	3720      	adds	r7, #32
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	20000978 	.word	0x20000978
 800b8dc:	40001800 	.word	0x40001800

0800b8e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b8e4:	4b14      	ldr	r3, [pc, #80]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b8e6:	4a15      	ldr	r2, [pc, #84]	; (800b93c <MX_USART1_UART_Init+0x5c>)
 800b8e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b8ea:	4b13      	ldr	r3, [pc, #76]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b8ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b8f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b8f2:	4b11      	ldr	r3, [pc, #68]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b8f8:	4b0f      	ldr	r3, [pc, #60]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b8fe:	4b0e      	ldr	r3, [pc, #56]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b900:	2200      	movs	r2, #0
 800b902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b904:	4b0c      	ldr	r3, [pc, #48]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b906:	220c      	movs	r2, #12
 800b908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b90a:	4b0b      	ldr	r3, [pc, #44]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b910:	4b09      	ldr	r3, [pc, #36]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b912:	2200      	movs	r2, #0
 800b914:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b916:	4b08      	ldr	r3, [pc, #32]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b918:	2200      	movs	r2, #0
 800b91a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b91c:	4b06      	ldr	r3, [pc, #24]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b91e:	2200      	movs	r2, #0
 800b920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b922:	4805      	ldr	r0, [pc, #20]	; (800b938 <MX_USART1_UART_Init+0x58>)
 800b924:	f7fc fb98 	bl	8008058 <HAL_UART_Init>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b92e:	f000 fac1 	bl	800beb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b932:	bf00      	nop
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	20000804 	.word	0x20000804
 800b93c:	40011000 	.word	0x40011000

0800b940 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800b946:	1d3b      	adds	r3, r7, #4
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	605a      	str	r2, [r3, #4]
 800b94e:	609a      	str	r2, [r3, #8]
 800b950:	60da      	str	r2, [r3, #12]
 800b952:	611a      	str	r2, [r3, #16]
 800b954:	615a      	str	r2, [r3, #20]
 800b956:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b958:	4b1f      	ldr	r3, [pc, #124]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b95a:	4a20      	ldr	r2, [pc, #128]	; (800b9dc <MX_FMC_Init+0x9c>)
 800b95c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800b95e:	4b1e      	ldr	r3, [pc, #120]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b960:	2200      	movs	r2, #0
 800b962:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b964:	4b1c      	ldr	r3, [pc, #112]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b966:	2200      	movs	r2, #0
 800b968:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800b96a:	4b1b      	ldr	r3, [pc, #108]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b96c:	2204      	movs	r2, #4
 800b96e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800b970:	4b19      	ldr	r3, [pc, #100]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b972:	2210      	movs	r2, #16
 800b974:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b976:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b978:	2240      	movs	r2, #64	; 0x40
 800b97a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800b97c:	4b16      	ldr	r3, [pc, #88]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b97e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b982:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b984:	4b14      	ldr	r3, [pc, #80]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b986:	2200      	movs	r2, #0
 800b988:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800b98a:	4b13      	ldr	r3, [pc, #76]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b98c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b990:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800b992:	4b11      	ldr	r3, [pc, #68]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b998:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800b99a:	4b0f      	ldr	r3, [pc, #60]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800b9a4:	2307      	movs	r3, #7
 800b9a6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800b9a8:	2304      	movs	r3, #4
 800b9aa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800b9ac:	2307      	movs	r3, #7
 800b9ae:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b9bc:	1d3b      	adds	r3, r7, #4
 800b9be:	4619      	mov	r1, r3
 800b9c0:	4805      	ldr	r0, [pc, #20]	; (800b9d8 <MX_FMC_Init+0x98>)
 800b9c2:	f7fb f9b1 	bl	8006d28 <HAL_SDRAM_Init>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800b9cc:	f000 fa72 	bl	800beb4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800b9d0:	bf00      	nop
 800b9d2:	3720      	adds	r7, #32
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	200009b8 	.word	0x200009b8
 800b9dc:	a0000140 	.word	0xa0000140

0800b9e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b090      	sub	sp, #64	; 0x40
 800b9e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	605a      	str	r2, [r3, #4]
 800b9f0:	609a      	str	r2, [r3, #8]
 800b9f2:	60da      	str	r2, [r3, #12]
 800b9f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b9f6:	4bb0      	ldr	r3, [pc, #704]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800b9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fa:	4aaf      	ldr	r2, [pc, #700]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800b9fc:	f043 0310 	orr.w	r3, r3, #16
 800ba00:	6313      	str	r3, [r2, #48]	; 0x30
 800ba02:	4bad      	ldr	r3, [pc, #692]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba06:	f003 0310 	and.w	r3, r3, #16
 800ba0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ba0e:	4baa      	ldr	r3, [pc, #680]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba12:	4aa9      	ldr	r2, [pc, #676]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba18:	6313      	str	r3, [r2, #48]	; 0x30
 800ba1a:	4ba7      	ldr	r3, [pc, #668]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba22:	627b      	str	r3, [r7, #36]	; 0x24
 800ba24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba26:	4ba4      	ldr	r3, [pc, #656]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2a:	4aa3      	ldr	r2, [pc, #652]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba2c:	f043 0302 	orr.w	r3, r3, #2
 800ba30:	6313      	str	r3, [r2, #48]	; 0x30
 800ba32:	4ba1      	ldr	r3, [pc, #644]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba36:	f003 0302 	and.w	r3, r3, #2
 800ba3a:	623b      	str	r3, [r7, #32]
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ba3e:	4b9e      	ldr	r3, [pc, #632]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba42:	4a9d      	ldr	r2, [pc, #628]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba44:	f043 0308 	orr.w	r3, r3, #8
 800ba48:	6313      	str	r3, [r2, #48]	; 0x30
 800ba4a:	4b9b      	ldr	r3, [pc, #620]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4e:	f003 0308 	and.w	r3, r3, #8
 800ba52:	61fb      	str	r3, [r7, #28]
 800ba54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba56:	4b98      	ldr	r3, [pc, #608]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5a:	4a97      	ldr	r2, [pc, #604]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba5c:	f043 0304 	orr.w	r3, r3, #4
 800ba60:	6313      	str	r3, [r2, #48]	; 0x30
 800ba62:	4b95      	ldr	r3, [pc, #596]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba66:	f003 0304 	and.w	r3, r3, #4
 800ba6a:	61bb      	str	r3, [r7, #24]
 800ba6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba6e:	4b92      	ldr	r3, [pc, #584]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba72:	4a91      	ldr	r2, [pc, #580]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba74:	f043 0301 	orr.w	r3, r3, #1
 800ba78:	6313      	str	r3, [r2, #48]	; 0x30
 800ba7a:	4b8f      	ldr	r3, [pc, #572]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ba86:	4b8c      	ldr	r3, [pc, #560]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8a:	4a8b      	ldr	r2, [pc, #556]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba90:	6313      	str	r3, [r2, #48]	; 0x30
 800ba92:	4b89      	ldr	r3, [pc, #548]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800ba94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba9a:	613b      	str	r3, [r7, #16]
 800ba9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800ba9e:	4b86      	ldr	r3, [pc, #536]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800baa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa2:	4a85      	ldr	r2, [pc, #532]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800baa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baa8:	6313      	str	r3, [r2, #48]	; 0x30
 800baaa:	4b83      	ldr	r3, [pc, #524]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800baac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab2:	60fb      	str	r3, [r7, #12]
 800bab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800bab6:	4b80      	ldr	r3, [pc, #512]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800bab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baba:	4a7f      	ldr	r2, [pc, #508]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800babc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bac0:	6313      	str	r3, [r2, #48]	; 0x30
 800bac2:	4b7d      	ldr	r3, [pc, #500]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800bac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baca:	60bb      	str	r3, [r7, #8]
 800bacc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800bace:	4b7a      	ldr	r3, [pc, #488]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad2:	4a79      	ldr	r2, [pc, #484]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800bad4:	f043 0320 	orr.w	r3, r3, #32
 800bad8:	6313      	str	r3, [r2, #48]	; 0x30
 800bada:	4b77      	ldr	r3, [pc, #476]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800badc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bade:	f003 0320 	and.w	r3, r3, #32
 800bae2:	607b      	str	r3, [r7, #4]
 800bae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bae6:	4b74      	ldr	r3, [pc, #464]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800bae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baea:	4a73      	ldr	r2, [pc, #460]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800baec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf0:	6313      	str	r3, [r2, #48]	; 0x30
 800baf2:	4b71      	ldr	r3, [pc, #452]	; (800bcb8 <MX_GPIO_Init+0x2d8>)
 800baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafa:	603b      	str	r3, [r7, #0]
 800bafc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800bafe:	2201      	movs	r2, #1
 800bb00:	2120      	movs	r1, #32
 800bb02:	486e      	ldr	r0, [pc, #440]	; (800bcbc <MX_GPIO_Init+0x2dc>)
 800bb04:	f7f6 ffba 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800bb08:	2200      	movs	r2, #0
 800bb0a:	210c      	movs	r1, #12
 800bb0c:	486c      	ldr	r0, [pc, #432]	; (800bcc0 <MX_GPIO_Init+0x2e0>)
 800bb0e:	f7f6 ffb5 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800bb12:	2201      	movs	r2, #1
 800bb14:	2108      	movs	r1, #8
 800bb16:	486b      	ldr	r0, [pc, #428]	; (800bcc4 <MX_GPIO_Init+0x2e4>)
 800bb18:	f7f6 ffb0 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb22:	4867      	ldr	r0, [pc, #412]	; (800bcc0 <MX_GPIO_Init+0x2e0>)
 800bb24:	f7f6 ffaa 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bb2e:	4866      	ldr	r0, [pc, #408]	; (800bcc8 <MX_GPIO_Init+0x2e8>)
 800bb30:	f7f6 ffa4 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800bb34:	2200      	movs	r2, #0
 800bb36:	21c8      	movs	r1, #200	; 0xc8
 800bb38:	4864      	ldr	r0, [pc, #400]	; (800bccc <MX_GPIO_Init+0x2ec>)
 800bb3a:	f7f6 ff9f 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RGB_LED1_G_Pin|RGB_LED1_R_Pin|RGB_LED1_B_Pin, GPIO_PIN_SET);
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f44f 7160 	mov.w	r1, #896	; 0x380
 800bb44:	4862      	ldr	r0, [pc, #392]	; (800bcd0 <MX_GPIO_Init+0x2f0>)
 800bb46:	f7f6 ff99 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2140      	movs	r1, #64	; 0x40
 800bb4e:	4860      	ldr	r0, [pc, #384]	; (800bcd0 <MX_GPIO_Init+0x2f0>)
 800bb50:	f7f6 ff94 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800bb54:	2308      	movs	r3, #8
 800bb56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800bb60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb64:	4619      	mov	r1, r3
 800bb66:	485b      	ldr	r0, [pc, #364]	; (800bcd4 <MX_GPIO_Init+0x2f4>)
 800bb68:	f7f6 fdde 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800bb6c:	f643 4323 	movw	r3, #15395	; 0x3c23
 800bb70:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb72:	2302      	movs	r3, #2
 800bb74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bb7e:	230a      	movs	r3, #10
 800bb80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb86:	4619      	mov	r1, r3
 800bb88:	4853      	ldr	r0, [pc, #332]	; (800bcd8 <MX_GPIO_Init+0x2f8>)
 800bb8a:	f7f6 fdcd 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : STARTER_BUTTON_Pin */
  GPIO_InitStruct.Pin = STARTER_BUTTON_Pin;
 800bb8e:	2310      	movs	r3, #16
 800bb90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bb92:	4b52      	ldr	r3, [pc, #328]	; (800bcdc <MX_GPIO_Init+0x2fc>)
 800bb94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bb96:	2302      	movs	r3, #2
 800bb98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(STARTER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800bb9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb9e:	4619      	mov	r1, r3
 800bba0:	484d      	ldr	r0, [pc, #308]	; (800bcd8 <MX_GPIO_Init+0x2f8>)
 800bba2:	f7f6 fdc1 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : GAME_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = GAME_BUTTON_1_Pin;
 800bba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bbac:	4b4b      	ldr	r3, [pc, #300]	; (800bcdc <MX_GPIO_Init+0x2fc>)
 800bbae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GAME_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 800bbb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4849      	ldr	r0, [pc, #292]	; (800bce0 <MX_GPIO_Init+0x300>)
 800bbbc:	f7f6 fdb4 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800bbc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800bbce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	4843      	ldr	r0, [pc, #268]	; (800bce4 <MX_GPIO_Init+0x304>)
 800bbd6:	f7f6 fda7 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800bbda:	2320      	movs	r3, #32
 800bbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800bbea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4832      	ldr	r0, [pc, #200]	; (800bcbc <MX_GPIO_Init+0x2dc>)
 800bbf2:	f7f6 fd99 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800bbf6:	f241 030c 	movw	r3, #4108	; 0x100c
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc00:	2300      	movs	r3, #0
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc04:	2300      	movs	r3, #0
 800bc06:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800bc08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	482c      	ldr	r0, [pc, #176]	; (800bcc0 <MX_GPIO_Init+0x2e0>)
 800bc10:	f7f6 fd8a 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800bc14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800bc22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc26:	4619      	mov	r1, r3
 800bc28:	482f      	ldr	r0, [pc, #188]	; (800bce8 <MX_GPIO_Init+0x308>)
 800bc2a:	f7f6 fd7d 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800bc2e:	2308      	movs	r3, #8
 800bc30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc32:	2301      	movs	r3, #1
 800bc34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800bc3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc42:	4619      	mov	r1, r3
 800bc44:	481f      	ldr	r0, [pc, #124]	; (800bcc4 <MX_GPIO_Init+0x2e4>)
 800bc46:	f7f6 fd6f 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800bc4a:	2310      	movs	r3, #16
 800bc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800bc56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4817      	ldr	r0, [pc, #92]	; (800bcbc <MX_GPIO_Init+0x2dc>)
 800bc5e:	f7f6 fd63 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800bc62:	f248 0304 	movw	r3, #32772	; 0x8004
 800bc66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bc70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc74:	4619      	mov	r1, r3
 800bc76:	4814      	ldr	r0, [pc, #80]	; (800bcc8 <MX_GPIO_Init+0x2e8>)
 800bc78:	f7f6 fd56 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800bc7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc82:	2301      	movs	r3, #1
 800bc84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc86:	2300      	movs	r3, #0
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800bc8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bc92:	4619      	mov	r1, r3
 800bc94:	480c      	ldr	r0, [pc, #48]	; (800bcc8 <MX_GPIO_Init+0x2e8>)
 800bc96:	f7f6 fd47 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800bc9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800bca0:	4b12      	ldr	r3, [pc, #72]	; (800bcec <MX_GPIO_Init+0x30c>)
 800bca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800bca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bcac:	4619      	mov	r1, r3
 800bcae:	4804      	ldr	r0, [pc, #16]	; (800bcc0 <MX_GPIO_Init+0x2e0>)
 800bcb0:	f7f6 fd3a 	bl	8002728 <HAL_GPIO_Init>
 800bcb4:	e01c      	b.n	800bcf0 <MX_GPIO_Init+0x310>
 800bcb6:	bf00      	nop
 800bcb8:	40023800 	.word	0x40023800
 800bcbc:	40020c00 	.word	0x40020c00
 800bcc0:	40022000 	.word	0x40022000
 800bcc4:	40022800 	.word	0x40022800
 800bcc8:	40021c00 	.word	0x40021c00
 800bccc:	40021800 	.word	0x40021800
 800bcd0:	40021400 	.word	0x40021400
 800bcd4:	40021000 	.word	0x40021000
 800bcd8:	40020400 	.word	0x40020400
 800bcdc:	10110000 	.word	0x10110000
 800bce0:	40020000 	.word	0x40020000
 800bce4:	40022400 	.word	0x40022400
 800bce8:	40020800 	.word	0x40020800
 800bcec:	10120000 	.word	0x10120000

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800bcf0:	2310      	movs	r3, #16
 800bcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcf4:	2302      	movs	r3, #2
 800bcf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bd00:	230a      	movs	r3, #10
 800bd02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800bd04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd08:	4619      	mov	r1, r3
 800bd0a:	483a      	ldr	r0, [pc, #232]	; (800bdf4 <MX_GPIO_Init+0x414>)
 800bd0c:	f7f6 fd0c 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : GAME_BUTTON_2_Pin */
  GPIO_InitStruct.Pin = GAME_BUTTON_2_Pin;
 800bd10:	2340      	movs	r3, #64	; 0x40
 800bd12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bd14:	4b38      	ldr	r3, [pc, #224]	; (800bdf8 <MX_GPIO_Init+0x418>)
 800bd16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bd18:	2302      	movs	r3, #2
 800bd1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GAME_BUTTON_2_GPIO_Port, &GPIO_InitStruct);
 800bd1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd20:	4619      	mov	r1, r3
 800bd22:	4836      	ldr	r0, [pc, #216]	; (800bdfc <MX_GPIO_Init+0x41c>)
 800bd24:	f7f6 fd00 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800bd28:	23c8      	movs	r3, #200	; 0xc8
 800bd2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd30:	2300      	movs	r3, #0
 800bd32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd34:	2300      	movs	r3, #0
 800bd36:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bd38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4830      	ldr	r0, [pc, #192]	; (800be00 <MX_GPIO_Init+0x420>)
 800bd40:	f7f6 fcf2 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_LED1_G_Pin RED_LED_Pin RGB_LED1_R_Pin RGB_LED1_B_Pin */
  GPIO_InitStruct.Pin = RGB_LED1_G_Pin|RED_LED_Pin|RGB_LED1_R_Pin|RGB_LED1_B_Pin;
 800bd44:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bd48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd52:	2300      	movs	r3, #0
 800bd54:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bd56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4829      	ldr	r0, [pc, #164]	; (800be04 <MX_GPIO_Init+0x424>)
 800bd5e:	f7f6 fce3 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800bd62:	2305      	movs	r3, #5
 800bd64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd66:	2302      	movs	r3, #2
 800bd68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd6e:	2303      	movs	r3, #3
 800bd70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bd72:	230a      	movs	r3, #10
 800bd74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bd76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	481f      	ldr	r0, [pc, #124]	; (800bdfc <MX_GPIO_Init+0x41c>)
 800bd7e:	f7f6 fcd3 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800bd82:	2304      	movs	r3, #4
 800bd84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd86:	2300      	movs	r3, #0
 800bd88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800bd8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bd92:	4619      	mov	r1, r3
 800bd94:	481a      	ldr	r0, [pc, #104]	; (800be00 <MX_GPIO_Init+0x420>)
 800bd96:	f7f6 fcc7 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800bd9a:	2328      	movs	r3, #40	; 0x28
 800bd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd9e:	2302      	movs	r3, #2
 800bda0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bda6:	2303      	movs	r3, #3
 800bda8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800bdaa:	230a      	movs	r3, #10
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	4814      	ldr	r0, [pc, #80]	; (800be08 <MX_GPIO_Init+0x428>)
 800bdb6:	f7f6 fcb7 	bl	8002728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	200a      	movs	r0, #10
 800bdc0:	f7f5 fdd4 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800bdc4:	200a      	movs	r0, #10
 800bdc6:	f7f5 fded 	bl	80019a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2101      	movs	r1, #1
 800bdce:	2017      	movs	r0, #23
 800bdd0:	f7f5 fdcc 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800bdd4:	2017      	movs	r0, #23
 800bdd6:	f7f5 fde5 	bl	80019a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800bdda:	2200      	movs	r2, #0
 800bddc:	2101      	movs	r1, #1
 800bdde:	2028      	movs	r0, #40	; 0x28
 800bde0:	f7f5 fdc4 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800bde4:	2028      	movs	r0, #40	; 0x28
 800bde6:	f7f5 fddd 	bl	80019a4 <HAL_NVIC_EnableIRQ>

}
 800bdea:	bf00      	nop
 800bdec:	3740      	adds	r7, #64	; 0x40
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	40021c00 	.word	0x40021c00
 800bdf8:	10110000 	.word	0x10110000
 800bdfc:	40020800 	.word	0x40020800
 800be00:	40021800 	.word	0x40021800
 800be04:	40021400 	.word	0x40021400
 800be08:	40020000 	.word	0x40020000

0800be0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	80fb      	strh	r3, [r7, #6]

  unsigned int button_press_time;

  switch (GPIO_Pin) {
 800be16:	88fb      	ldrh	r3, [r7, #6]
 800be18:	2b10      	cmp	r3, #16
 800be1a:	d003      	beq.n	800be24 <HAL_GPIO_EXTI_Callback+0x18>
 800be1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be20:	d00c      	beq.n	800be3c <HAL_GPIO_EXTI_Callback+0x30>

    }
      break;

    default:
      break;
 800be22:	e028      	b.n	800be76 <HAL_GPIO_EXTI_Callback+0x6a>
    if (round_counter == 0){
 800be24:	4b16      	ldr	r3, [pc, #88]	; (800be80 <HAL_GPIO_EXTI_Callback+0x74>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d123      	bne.n	800be74 <HAL_GPIO_EXTI_Callback+0x68>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 800be2c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800be30:	f7f4 fcfa 	bl	8000828 <BSP_LCD_Clear>
    game_state = STEADY;
 800be34:	4b13      	ldr	r3, [pc, #76]	; (800be84 <HAL_GPIO_EXTI_Callback+0x78>)
 800be36:	2201      	movs	r2, #1
 800be38:	701a      	strb	r2, [r3, #0]
    break;
 800be3a:	e01b      	b.n	800be74 <HAL_GPIO_EXTI_Callback+0x68>
   button_press_time = HAL_GetTick();
 800be3c:	f7f5 fa3e 	bl	80012bc <HAL_GetTick>
 800be40:	60f8      	str	r0, [r7, #12]
    switch (game_state){
 800be42:	4b10      	ldr	r3, [pc, #64]	; (800be84 <HAL_GPIO_EXTI_Callback+0x78>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b01      	cmp	r3, #1
 800be48:	d002      	beq.n	800be50 <HAL_GPIO_EXTI_Callback+0x44>
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	d007      	beq.n	800be5e <HAL_GPIO_EXTI_Callback+0x52>
      break;
 800be4e:	e010      	b.n	800be72 <HAL_GPIO_EXTI_Callback+0x66>
      reaction_time_1 = 0;
 800be50:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <HAL_GPIO_EXTI_Callback+0x7c>)
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
      game_state = INVALID;
 800be56:	4b0b      	ldr	r3, [pc, #44]	; (800be84 <HAL_GPIO_EXTI_Callback+0x78>)
 800be58:	2204      	movs	r2, #4
 800be5a:	701a      	strb	r2, [r3, #0]
      break;
 800be5c:	e009      	b.n	800be72 <HAL_GPIO_EXTI_Callback+0x66>
      reaction_time_1 = button_press_time - round_start_time;
 800be5e:	4b0b      	ldr	r3, [pc, #44]	; (800be8c <HAL_GPIO_EXTI_Callback+0x80>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	4a08      	ldr	r2, [pc, #32]	; (800be88 <HAL_GPIO_EXTI_Callback+0x7c>)
 800be68:	6013      	str	r3, [r2, #0]
      game_state = VALID;
 800be6a:	4b06      	ldr	r3, [pc, #24]	; (800be84 <HAL_GPIO_EXTI_Callback+0x78>)
 800be6c:	2203      	movs	r2, #3
 800be6e:	701a      	strb	r2, [r3, #0]
      break;
 800be70:	bf00      	nop
      break;
 800be72:	e000      	b.n	800be76 <HAL_GPIO_EXTI_Callback+0x6a>
    break;
 800be74:	bf00      	nop
  }

}
 800be76:	bf00      	nop
 800be78:	3710      	adds	r7, #16
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20000200 	.word	0x20000200
 800be84:	20000208 	.word	0x20000208
 800be88:	20000768 	.word	0x20000768
 800be8c:	20000a34 	.word	0x20000a34

0800be90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a04      	ldr	r2, [pc, #16]	; (800beb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d101      	bne.n	800bea6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800bea2:	f7f5 f9f7 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800bea6:	bf00      	nop
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	40002000 	.word	0x40002000

0800beb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800beb4:	b480      	push	{r7}
 800beb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800beb8:	bf00      	nop
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
	...

0800bec4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800beca:	4b0f      	ldr	r3, [pc, #60]	; (800bf08 <HAL_MspInit+0x44>)
 800becc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bece:	4a0e      	ldr	r2, [pc, #56]	; (800bf08 <HAL_MspInit+0x44>)
 800bed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bed4:	6413      	str	r3, [r2, #64]	; 0x40
 800bed6:	4b0c      	ldr	r3, [pc, #48]	; (800bf08 <HAL_MspInit+0x44>)
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bede:	607b      	str	r3, [r7, #4]
 800bee0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bee2:	4b09      	ldr	r3, [pc, #36]	; (800bf08 <HAL_MspInit+0x44>)
 800bee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee6:	4a08      	ldr	r2, [pc, #32]	; (800bf08 <HAL_MspInit+0x44>)
 800bee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800beec:	6453      	str	r3, [r2, #68]	; 0x44
 800beee:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <HAL_MspInit+0x44>)
 800bef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	40023800 	.word	0x40023800

0800bf0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b08a      	sub	sp, #40	; 0x28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf14:	f107 0314 	add.w	r3, r7, #20
 800bf18:	2200      	movs	r2, #0
 800bf1a:	601a      	str	r2, [r3, #0]
 800bf1c:	605a      	str	r2, [r3, #4]
 800bf1e:	609a      	str	r2, [r3, #8]
 800bf20:	60da      	str	r2, [r3, #12]
 800bf22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a15      	ldr	r2, [pc, #84]	; (800bf80 <HAL_ADC_MspInit+0x74>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d123      	bne.n	800bf76 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800bf2e:	4b15      	ldr	r3, [pc, #84]	; (800bf84 <HAL_ADC_MspInit+0x78>)
 800bf30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf32:	4a14      	ldr	r2, [pc, #80]	; (800bf84 <HAL_ADC_MspInit+0x78>)
 800bf34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bf38:	6453      	str	r3, [r2, #68]	; 0x44
 800bf3a:	4b12      	ldr	r3, [pc, #72]	; (800bf84 <HAL_ADC_MspInit+0x78>)
 800bf3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf42:	613b      	str	r3, [r7, #16]
 800bf44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf46:	4b0f      	ldr	r3, [pc, #60]	; (800bf84 <HAL_ADC_MspInit+0x78>)
 800bf48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4a:	4a0e      	ldr	r2, [pc, #56]	; (800bf84 <HAL_ADC_MspInit+0x78>)
 800bf4c:	f043 0301 	orr.w	r3, r3, #1
 800bf50:	6313      	str	r3, [r2, #48]	; 0x30
 800bf52:	4b0c      	ldr	r3, [pc, #48]	; (800bf84 <HAL_ADC_MspInit+0x78>)
 800bf54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf62:	2303      	movs	r3, #3
 800bf64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf66:	2300      	movs	r3, #0
 800bf68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800bf6a:	f107 0314 	add.w	r3, r7, #20
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4805      	ldr	r0, [pc, #20]	; (800bf88 <HAL_ADC_MspInit+0x7c>)
 800bf72:	f7f6 fbd9 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800bf76:	bf00      	nop
 800bf78:	3728      	adds	r7, #40	; 0x28
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	40012200 	.word	0x40012200
 800bf84:	40023800 	.word	0x40023800
 800bf88:	40020000 	.word	0x40020000

0800bf8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a0a      	ldr	r2, [pc, #40]	; (800bfc4 <HAL_CRC_MspInit+0x38>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d10b      	bne.n	800bfb6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800bf9e:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <HAL_CRC_MspInit+0x3c>)
 800bfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa2:	4a09      	ldr	r2, [pc, #36]	; (800bfc8 <HAL_CRC_MspInit+0x3c>)
 800bfa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bfa8:	6313      	str	r3, [r2, #48]	; 0x30
 800bfaa:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <HAL_CRC_MspInit+0x3c>)
 800bfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800bfb6:	bf00      	nop
 800bfb8:	3714      	adds	r7, #20
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	40023000 	.word	0x40023000
 800bfc8:	40023800 	.word	0x40023800

0800bfcc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08e      	sub	sp, #56	; 0x38
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfd8:	2200      	movs	r2, #0
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	605a      	str	r2, [r3, #4]
 800bfde:	609a      	str	r2, [r3, #8]
 800bfe0:	60da      	str	r2, [r3, #12]
 800bfe2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a50      	ldr	r2, [pc, #320]	; (800c12c <HAL_DCMI_MspInit+0x160>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	f040 809a 	bne.w	800c124 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800bff0:	4b4f      	ldr	r3, [pc, #316]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800bff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff4:	4a4e      	ldr	r2, [pc, #312]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800bff6:	f043 0301 	orr.w	r3, r3, #1
 800bffa:	6353      	str	r3, [r2, #52]	; 0x34
 800bffc:	4b4c      	ldr	r3, [pc, #304]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800bffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	623b      	str	r3, [r7, #32]
 800c006:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c008:	4b49      	ldr	r3, [pc, #292]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00c:	4a48      	ldr	r2, [pc, #288]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c00e:	f043 0310 	orr.w	r3, r3, #16
 800c012:	6313      	str	r3, [r2, #48]	; 0x30
 800c014:	4b46      	ldr	r3, [pc, #280]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c018:	f003 0310 	and.w	r3, r3, #16
 800c01c:	61fb      	str	r3, [r7, #28]
 800c01e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c020:	4b43      	ldr	r3, [pc, #268]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c024:	4a42      	ldr	r2, [pc, #264]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c026:	f043 0308 	orr.w	r3, r3, #8
 800c02a:	6313      	str	r3, [r2, #48]	; 0x30
 800c02c:	4b40      	ldr	r3, [pc, #256]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c030:	f003 0308 	and.w	r3, r3, #8
 800c034:	61bb      	str	r3, [r7, #24]
 800c036:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c038:	4b3d      	ldr	r3, [pc, #244]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03c:	4a3c      	ldr	r2, [pc, #240]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c042:	6313      	str	r3, [r2, #48]	; 0x30
 800c044:	4b3a      	ldr	r3, [pc, #232]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04c:	617b      	str	r3, [r7, #20]
 800c04e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c050:	4b37      	ldr	r3, [pc, #220]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c054:	4a36      	ldr	r2, [pc, #216]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c05a:	6313      	str	r3, [r2, #48]	; 0x30
 800c05c:	4b34      	ldr	r3, [pc, #208]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c05e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c064:	613b      	str	r3, [r7, #16]
 800c066:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c068:	4b31      	ldr	r3, [pc, #196]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06c:	4a30      	ldr	r2, [pc, #192]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c06e:	f043 0301 	orr.w	r3, r3, #1
 800c072:	6313      	str	r3, [r2, #48]	; 0x30
 800c074:	4b2e      	ldr	r3, [pc, #184]	; (800c130 <HAL_DCMI_MspInit+0x164>)
 800c076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800c080:	2360      	movs	r3, #96	; 0x60
 800c082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c084:	2302      	movs	r3, #2
 800c086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c088:	2300      	movs	r3, #0
 800c08a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c08c:	2300      	movs	r3, #0
 800c08e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c090:	230d      	movs	r3, #13
 800c092:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c098:	4619      	mov	r1, r3
 800c09a:	4826      	ldr	r0, [pc, #152]	; (800c134 <HAL_DCMI_MspInit+0x168>)
 800c09c:	f7f6 fb44 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c0b0:	230d      	movs	r3, #13
 800c0b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800c0b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	481f      	ldr	r0, [pc, #124]	; (800c138 <HAL_DCMI_MspInit+0x16c>)
 800c0bc:	f7f6 fb34 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800c0c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c0d2:	230d      	movs	r3, #13
 800c0d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800c0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0da:	4619      	mov	r1, r3
 800c0dc:	4817      	ldr	r0, [pc, #92]	; (800c13c <HAL_DCMI_MspInit+0x170>)
 800c0de:	f7f6 fb23 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800c0e2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c0f4:	230d      	movs	r3, #13
 800c0f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c0f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4810      	ldr	r0, [pc, #64]	; (800c140 <HAL_DCMI_MspInit+0x174>)
 800c100:	f7f6 fb12 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800c104:	2350      	movs	r3, #80	; 0x50
 800c106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c108:	2302      	movs	r3, #2
 800c10a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c110:	2300      	movs	r3, #0
 800c112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800c114:	230d      	movs	r3, #13
 800c116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c11c:	4619      	mov	r1, r3
 800c11e:	4809      	ldr	r0, [pc, #36]	; (800c144 <HAL_DCMI_MspInit+0x178>)
 800c120:	f7f6 fb02 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800c124:	bf00      	nop
 800c126:	3738      	adds	r7, #56	; 0x38
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	50050000 	.word	0x50050000
 800c130:	40023800 	.word	0x40023800
 800c134:	40021000 	.word	0x40021000
 800c138:	40020c00 	.word	0x40020c00
 800c13c:	40021800 	.word	0x40021800
 800c140:	40021c00 	.word	0x40021c00
 800c144:	40020000 	.word	0x40020000

0800c148 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a0d      	ldr	r2, [pc, #52]	; (800c18c <HAL_DMA2D_MspInit+0x44>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d113      	bne.n	800c182 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c15a:	4b0d      	ldr	r3, [pc, #52]	; (800c190 <HAL_DMA2D_MspInit+0x48>)
 800c15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15e:	4a0c      	ldr	r2, [pc, #48]	; (800c190 <HAL_DMA2D_MspInit+0x48>)
 800c160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c164:	6313      	str	r3, [r2, #48]	; 0x30
 800c166:	4b0a      	ldr	r3, [pc, #40]	; (800c190 <HAL_DMA2D_MspInit+0x48>)
 800c168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c16a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800c172:	2200      	movs	r2, #0
 800c174:	2100      	movs	r1, #0
 800c176:	205a      	movs	r0, #90	; 0x5a
 800c178:	f7f5 fbf8 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800c17c:	205a      	movs	r0, #90	; 0x5a
 800c17e:	f7f5 fc11 	bl	80019a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800c182:	bf00      	nop
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	4002b000 	.word	0x4002b000
 800c190:	40023800 	.word	0x40023800

0800c194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b08c      	sub	sp, #48	; 0x30
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c19c:	f107 031c 	add.w	r3, r7, #28
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	605a      	str	r2, [r3, #4]
 800c1a6:	609a      	str	r2, [r3, #8]
 800c1a8:	60da      	str	r2, [r3, #12]
 800c1aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a2f      	ldr	r2, [pc, #188]	; (800c270 <HAL_I2C_MspInit+0xdc>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d129      	bne.n	800c20a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1b6:	4b2f      	ldr	r3, [pc, #188]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ba:	4a2e      	ldr	r2, [pc, #184]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c1bc:	f043 0302 	orr.w	r3, r3, #2
 800c1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800c1c2:	4b2c      	ldr	r3, [pc, #176]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c6:	f003 0302 	and.w	r3, r3, #2
 800c1ca:	61bb      	str	r3, [r7, #24]
 800c1cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800c1ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c1d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c1d4:	2312      	movs	r3, #18
 800c1d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c1e0:	2304      	movs	r3, #4
 800c1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1e4:	f107 031c 	add.w	r3, r7, #28
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4823      	ldr	r0, [pc, #140]	; (800c278 <HAL_I2C_MspInit+0xe4>)
 800c1ec:	f7f6 fa9c 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c1f0:	4b20      	ldr	r3, [pc, #128]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f4:	4a1f      	ldr	r2, [pc, #124]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c1f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1fa:	6413      	str	r3, [r2, #64]	; 0x40
 800c1fc:	4b1d      	ldr	r3, [pc, #116]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c204:	617b      	str	r3, [r7, #20]
 800c206:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800c208:	e02d      	b.n	800c266 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a1b      	ldr	r2, [pc, #108]	; (800c27c <HAL_I2C_MspInit+0xe8>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d128      	bne.n	800c266 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c214:	4b17      	ldr	r3, [pc, #92]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c218:	4a16      	ldr	r2, [pc, #88]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c21e:	6313      	str	r3, [r2, #48]	; 0x30
 800c220:	4b14      	ldr	r3, [pc, #80]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c228:	613b      	str	r3, [r7, #16]
 800c22a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800c22c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800c230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c232:	2312      	movs	r3, #18
 800c234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c236:	2301      	movs	r3, #1
 800c238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c23a:	2303      	movs	r3, #3
 800c23c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800c23e:	2304      	movs	r3, #4
 800c240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c242:	f107 031c 	add.w	r3, r7, #28
 800c246:	4619      	mov	r1, r3
 800c248:	480d      	ldr	r0, [pc, #52]	; (800c280 <HAL_I2C_MspInit+0xec>)
 800c24a:	f7f6 fa6d 	bl	8002728 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800c24e:	4b09      	ldr	r3, [pc, #36]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c252:	4a08      	ldr	r2, [pc, #32]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c254:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c258:	6413      	str	r3, [r2, #64]	; 0x40
 800c25a:	4b06      	ldr	r3, [pc, #24]	; (800c274 <HAL_I2C_MspInit+0xe0>)
 800c25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c25e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c262:	60fb      	str	r3, [r7, #12]
 800c264:	68fb      	ldr	r3, [r7, #12]
}
 800c266:	bf00      	nop
 800c268:	3730      	adds	r7, #48	; 0x30
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	40005400 	.word	0x40005400
 800c274:	40023800 	.word	0x40023800
 800c278:	40020400 	.word	0x40020400
 800c27c:	40005c00 	.word	0x40005c00
 800c280:	40021c00 	.word	0x40021c00

0800c284 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08e      	sub	sp, #56	; 0x38
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c28c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	605a      	str	r2, [r3, #4]
 800c296:	609a      	str	r2, [r3, #8]
 800c298:	60da      	str	r2, [r3, #12]
 800c29a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a55      	ldr	r2, [pc, #340]	; (800c3f8 <HAL_LTDC_MspInit+0x174>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	f040 80a3 	bne.w	800c3ee <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800c2a8:	4b54      	ldr	r3, [pc, #336]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ac:	4a53      	ldr	r2, [pc, #332]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2b2:	6453      	str	r3, [r2, #68]	; 0x44
 800c2b4:	4b51      	ldr	r3, [pc, #324]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c2bc:	623b      	str	r3, [r7, #32]
 800c2be:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c2c0:	4b4e      	ldr	r3, [pc, #312]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c4:	4a4d      	ldr	r2, [pc, #308]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2c6:	f043 0310 	orr.w	r3, r3, #16
 800c2ca:	6313      	str	r3, [r2, #48]	; 0x30
 800c2cc:	4b4b      	ldr	r3, [pc, #300]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d0:	f003 0310 	and.w	r3, r3, #16
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c2d8:	4b48      	ldr	r3, [pc, #288]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2dc:	4a47      	ldr	r2, [pc, #284]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c2e2:	6313      	str	r3, [r2, #48]	; 0x30
 800c2e4:	4b45      	ldr	r3, [pc, #276]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2ec:	61bb      	str	r3, [r7, #24]
 800c2ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800c2f0:	4b42      	ldr	r3, [pc, #264]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f4:	4a41      	ldr	r2, [pc, #260]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2fa:	6313      	str	r3, [r2, #48]	; 0x30
 800c2fc:	4b3f      	ldr	r3, [pc, #252]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c308:	4b3c      	ldr	r3, [pc, #240]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c30c:	4a3b      	ldr	r2, [pc, #236]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c312:	6313      	str	r3, [r2, #48]	; 0x30
 800c314:	4b39      	ldr	r3, [pc, #228]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31c:	613b      	str	r3, [r7, #16]
 800c31e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c320:	4b36      	ldr	r3, [pc, #216]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c324:	4a35      	ldr	r2, [pc, #212]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c32a:	6313      	str	r3, [r2, #48]	; 0x30
 800c32c:	4b33      	ldr	r3, [pc, #204]	; (800c3fc <HAL_LTDC_MspInit+0x178>)
 800c32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800c338:	2310      	movs	r3, #16
 800c33a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c33c:	2302      	movs	r3, #2
 800c33e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c340:	2300      	movs	r3, #0
 800c342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c344:	2300      	movs	r3, #0
 800c346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c348:	230e      	movs	r3, #14
 800c34a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800c34c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c350:	4619      	mov	r1, r3
 800c352:	482b      	ldr	r0, [pc, #172]	; (800c400 <HAL_LTDC_MspInit+0x17c>)
 800c354:	f7f6 f9e8 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800c358:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800c35c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c35e:	2302      	movs	r3, #2
 800c360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c362:	2300      	movs	r3, #0
 800c364:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c366:	2300      	movs	r3, #0
 800c368:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c36a:	230e      	movs	r3, #14
 800c36c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c36e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c372:	4619      	mov	r1, r3
 800c374:	4823      	ldr	r0, [pc, #140]	; (800c404 <HAL_LTDC_MspInit+0x180>)
 800c376:	f7f6 f9d7 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800c37a:	23f7      	movs	r3, #247	; 0xf7
 800c37c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c37e:	2302      	movs	r3, #2
 800c380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c382:	2300      	movs	r3, #0
 800c384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c386:	2300      	movs	r3, #0
 800c388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c38a:	230e      	movs	r3, #14
 800c38c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800c38e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c392:	4619      	mov	r1, r3
 800c394:	481c      	ldr	r0, [pc, #112]	; (800c408 <HAL_LTDC_MspInit+0x184>)
 800c396:	f7f6 f9c7 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800c39a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c39e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c3ac:	2309      	movs	r3, #9
 800c3ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800c3b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4815      	ldr	r0, [pc, #84]	; (800c40c <HAL_LTDC_MspInit+0x188>)
 800c3b8:	f7f6 f9b6 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800c3bc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800c3c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c3ce:	230e      	movs	r3, #14
 800c3d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c3d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	480d      	ldr	r0, [pc, #52]	; (800c410 <HAL_LTDC_MspInit+0x18c>)
 800c3da:	f7f6 f9a5 	bl	8002728 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	2058      	movs	r0, #88	; 0x58
 800c3e4:	f7f5 fac2 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800c3e8:	2058      	movs	r0, #88	; 0x58
 800c3ea:	f7f5 fadb 	bl	80019a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800c3ee:	bf00      	nop
 800c3f0:	3738      	adds	r7, #56	; 0x38
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	40016800 	.word	0x40016800
 800c3fc:	40023800 	.word	0x40023800
 800c400:	40021000 	.word	0x40021000
 800c404:	40022400 	.word	0x40022400
 800c408:	40022800 	.word	0x40022800
 800c40c:	40021800 	.word	0x40021800
 800c410:	40022000 	.word	0x40022000

0800c414 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b08c      	sub	sp, #48	; 0x30
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c41c:	f107 031c 	add.w	r3, r7, #28
 800c420:	2200      	movs	r2, #0
 800c422:	601a      	str	r2, [r3, #0]
 800c424:	605a      	str	r2, [r3, #4]
 800c426:	609a      	str	r2, [r3, #8]
 800c428:	60da      	str	r2, [r3, #12]
 800c42a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a3b      	ldr	r2, [pc, #236]	; (800c520 <HAL_QSPI_MspInit+0x10c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d170      	bne.n	800c518 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800c436:	4b3b      	ldr	r3, [pc, #236]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	4a3a      	ldr	r2, [pc, #232]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c43c:	f043 0302 	orr.w	r3, r3, #2
 800c440:	6393      	str	r3, [r2, #56]	; 0x38
 800c442:	4b38      	ldr	r3, [pc, #224]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c446:	f003 0302 	and.w	r3, r3, #2
 800c44a:	61bb      	str	r3, [r7, #24]
 800c44c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c44e:	4b35      	ldr	r3, [pc, #212]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c452:	4a34      	ldr	r2, [pc, #208]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c454:	f043 0310 	orr.w	r3, r3, #16
 800c458:	6313      	str	r3, [r2, #48]	; 0x30
 800c45a:	4b32      	ldr	r3, [pc, #200]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45e:	f003 0310 	and.w	r3, r3, #16
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c466:	4b2f      	ldr	r3, [pc, #188]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46a:	4a2e      	ldr	r2, [pc, #184]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c46c:	f043 0302 	orr.w	r3, r3, #2
 800c470:	6313      	str	r3, [r2, #48]	; 0x30
 800c472:	4b2c      	ldr	r3, [pc, #176]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	613b      	str	r3, [r7, #16]
 800c47c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c47e:	4b29      	ldr	r3, [pc, #164]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c482:	4a28      	ldr	r2, [pc, #160]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c484:	f043 0308 	orr.w	r3, r3, #8
 800c488:	6313      	str	r3, [r2, #48]	; 0x30
 800c48a:	4b26      	ldr	r3, [pc, #152]	; (800c524 <HAL_QSPI_MspInit+0x110>)
 800c48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48e:	f003 0308 	and.w	r3, r3, #8
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800c496:	2304      	movs	r3, #4
 800c498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c49a:	2302      	movs	r3, #2
 800c49c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c4a6:	2309      	movs	r3, #9
 800c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800c4aa:	f107 031c 	add.w	r3, r7, #28
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	481d      	ldr	r0, [pc, #116]	; (800c528 <HAL_QSPI_MspInit+0x114>)
 800c4b2:	f7f6 f939 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800c4b6:	2340      	movs	r3, #64	; 0x40
 800c4b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800c4c6:	230a      	movs	r3, #10
 800c4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800c4ca:	f107 031c 	add.w	r3, r7, #28
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	4816      	ldr	r0, [pc, #88]	; (800c52c <HAL_QSPI_MspInit+0x118>)
 800c4d2:	f7f6 f929 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c4d6:	2304      	movs	r3, #4
 800c4d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4da:	2302      	movs	r3, #2
 800c4dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c4e6:	2309      	movs	r3, #9
 800c4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c4ea:	f107 031c 	add.w	r3, r7, #28
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	480e      	ldr	r0, [pc, #56]	; (800c52c <HAL_QSPI_MspInit+0x118>)
 800c4f2:	f7f6 f919 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800c4f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c4fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c500:	2300      	movs	r3, #0
 800c502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c504:	2303      	movs	r3, #3
 800c506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c508:	2309      	movs	r3, #9
 800c50a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c50c:	f107 031c 	add.w	r3, r7, #28
 800c510:	4619      	mov	r1, r3
 800c512:	4807      	ldr	r0, [pc, #28]	; (800c530 <HAL_QSPI_MspInit+0x11c>)
 800c514:	f7f6 f908 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800c518:	bf00      	nop
 800c51a:	3730      	adds	r7, #48	; 0x30
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	a0001000 	.word	0xa0001000
 800c524:	40023800 	.word	0x40023800
 800c528:	40021000 	.word	0x40021000
 800c52c:	40020400 	.word	0x40020400
 800c530:	40020c00 	.word	0x40020c00

0800c534 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a0a      	ldr	r2, [pc, #40]	; (800c56c <HAL_RNG_MspInit+0x38>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d10b      	bne.n	800c55e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800c546:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <HAL_RNG_MspInit+0x3c>)
 800c548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54a:	4a09      	ldr	r2, [pc, #36]	; (800c570 <HAL_RNG_MspInit+0x3c>)
 800c54c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c550:	6353      	str	r3, [r2, #52]	; 0x34
 800c552:	4b07      	ldr	r3, [pc, #28]	; (800c570 <HAL_RNG_MspInit+0x3c>)
 800c554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800c55e:	bf00      	nop
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	50060800 	.word	0x50060800
 800c570:	40023800 	.word	0x40023800

0800c574 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a07      	ldr	r2, [pc, #28]	; (800c5a0 <HAL_RTC_MspInit+0x2c>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d105      	bne.n	800c592 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c586:	4b07      	ldr	r3, [pc, #28]	; (800c5a4 <HAL_RTC_MspInit+0x30>)
 800c588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c58a:	4a06      	ldr	r2, [pc, #24]	; (800c5a4 <HAL_RTC_MspInit+0x30>)
 800c58c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c590:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c592:	bf00      	nop
 800c594:	370c      	adds	r7, #12
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	40002800 	.word	0x40002800
 800c5a4:	40023800 	.word	0x40023800

0800c5a8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08a      	sub	sp, #40	; 0x28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5b0:	f107 0314 	add.w	r3, r7, #20
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	605a      	str	r2, [r3, #4]
 800c5ba:	609a      	str	r2, [r3, #8]
 800c5bc:	60da      	str	r2, [r3, #12]
 800c5be:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800c5c8:	d127      	bne.n	800c61a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800c5ca:	4b16      	ldr	r3, [pc, #88]	; (800c624 <HAL_SPDIFRX_MspInit+0x7c>)
 800c5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ce:	4a15      	ldr	r2, [pc, #84]	; (800c624 <HAL_SPDIFRX_MspInit+0x7c>)
 800c5d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5d4:	6413      	str	r3, [r2, #64]	; 0x40
 800c5d6:	4b13      	ldr	r3, [pc, #76]	; (800c624 <HAL_SPDIFRX_MspInit+0x7c>)
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5de:	613b      	str	r3, [r7, #16]
 800c5e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c5e2:	4b10      	ldr	r3, [pc, #64]	; (800c624 <HAL_SPDIFRX_MspInit+0x7c>)
 800c5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e6:	4a0f      	ldr	r2, [pc, #60]	; (800c624 <HAL_SPDIFRX_MspInit+0x7c>)
 800c5e8:	f043 0308 	orr.w	r3, r3, #8
 800c5ec:	6313      	str	r3, [r2, #48]	; 0x30
 800c5ee:	4b0d      	ldr	r3, [pc, #52]	; (800c624 <HAL_SPDIFRX_MspInit+0x7c>)
 800c5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f2:	f003 0308 	and.w	r3, r3, #8
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800c5fa:	2380      	movs	r3, #128	; 0x80
 800c5fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5fe:	2302      	movs	r3, #2
 800c600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c602:	2300      	movs	r3, #0
 800c604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c606:	2300      	movs	r3, #0
 800c608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800c60a:	2308      	movs	r3, #8
 800c60c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800c60e:	f107 0314 	add.w	r3, r7, #20
 800c612:	4619      	mov	r1, r3
 800c614:	4804      	ldr	r0, [pc, #16]	; (800c628 <HAL_SPDIFRX_MspInit+0x80>)
 800c616:	f7f6 f887 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800c61a:	bf00      	nop
 800c61c:	3728      	adds	r7, #40	; 0x28
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	40023800 	.word	0x40023800
 800c628:	40020c00 	.word	0x40020c00

0800c62c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08a      	sub	sp, #40	; 0x28
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c634:	f107 0314 	add.w	r3, r7, #20
 800c638:	2200      	movs	r2, #0
 800c63a:	601a      	str	r2, [r3, #0]
 800c63c:	605a      	str	r2, [r3, #4]
 800c63e:	609a      	str	r2, [r3, #8]
 800c640:	60da      	str	r2, [r3, #12]
 800c642:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a25      	ldr	r2, [pc, #148]	; (800c6e0 <HAL_SPI_MspInit+0xb4>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d144      	bne.n	800c6d8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c64e:	4b25      	ldr	r3, [pc, #148]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c652:	4a24      	ldr	r2, [pc, #144]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c658:	6413      	str	r3, [r2, #64]	; 0x40
 800c65a:	4b22      	ldr	r3, [pc, #136]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c662:	613b      	str	r3, [r7, #16]
 800c664:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c666:	4b1f      	ldr	r3, [pc, #124]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66a:	4a1e      	ldr	r2, [pc, #120]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c66c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c670:	6313      	str	r3, [r2, #48]	; 0x30
 800c672:	4b1c      	ldr	r3, [pc, #112]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c67e:	4b19      	ldr	r3, [pc, #100]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c682:	4a18      	ldr	r2, [pc, #96]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c684:	f043 0302 	orr.w	r3, r3, #2
 800c688:	6313      	str	r3, [r2, #48]	; 0x30
 800c68a:	4b16      	ldr	r3, [pc, #88]	; (800c6e4 <HAL_SPI_MspInit+0xb8>)
 800c68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68e:	f003 0302 	and.w	r3, r3, #2
 800c692:	60bb      	str	r3, [r7, #8]
 800c694:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800c696:	2302      	movs	r3, #2
 800c698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c69a:	2302      	movs	r3, #2
 800c69c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c6a6:	2305      	movs	r3, #5
 800c6a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800c6aa:	f107 0314 	add.w	r3, r7, #20
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	480d      	ldr	r0, [pc, #52]	; (800c6e8 <HAL_SPI_MspInit+0xbc>)
 800c6b2:	f7f6 f839 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800c6b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c6ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6bc:	2302      	movs	r3, #2
 800c6be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c6c8:	2305      	movs	r3, #5
 800c6ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6cc:	f107 0314 	add.w	r3, r7, #20
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	4806      	ldr	r0, [pc, #24]	; (800c6ec <HAL_SPI_MspInit+0xc0>)
 800c6d4:	f7f6 f828 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800c6d8:	bf00      	nop
 800c6da:	3728      	adds	r7, #40	; 0x28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	40003800 	.word	0x40003800
 800c6e4:	40023800 	.word	0x40023800
 800c6e8:	40022000 	.word	0x40022000
 800c6ec:	40020400 	.word	0x40020400

0800c6f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b088      	sub	sp, #32
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a31      	ldr	r2, [pc, #196]	; (800c7c4 <HAL_TIM_Base_MspInit+0xd4>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d10c      	bne.n	800c71c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c702:	4b31      	ldr	r3, [pc, #196]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c706:	4a30      	ldr	r2, [pc, #192]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c708:	f043 0301 	orr.w	r3, r3, #1
 800c70c:	6453      	str	r3, [r2, #68]	; 0x44
 800c70e:	4b2e      	ldr	r3, [pc, #184]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	61fb      	str	r3, [r7, #28]
 800c718:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800c71a:	e04e      	b.n	800c7ba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c724:	d10c      	bne.n	800c740 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c726:	4b28      	ldr	r3, [pc, #160]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72a:	4a27      	ldr	r2, [pc, #156]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c72c:	f043 0301 	orr.w	r3, r3, #1
 800c730:	6413      	str	r3, [r2, #64]	; 0x40
 800c732:	4b25      	ldr	r3, [pc, #148]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	61bb      	str	r3, [r7, #24]
 800c73c:	69bb      	ldr	r3, [r7, #24]
}
 800c73e:	e03c      	b.n	800c7ba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a21      	ldr	r2, [pc, #132]	; (800c7cc <HAL_TIM_Base_MspInit+0xdc>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d10c      	bne.n	800c764 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c74a:	4b1f      	ldr	r3, [pc, #124]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74e:	4a1e      	ldr	r2, [pc, #120]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c750:	f043 0302 	orr.w	r3, r3, #2
 800c754:	6413      	str	r3, [r2, #64]	; 0x40
 800c756:	4b1c      	ldr	r3, [pc, #112]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75a:	f003 0302 	and.w	r3, r3, #2
 800c75e:	617b      	str	r3, [r7, #20]
 800c760:	697b      	ldr	r3, [r7, #20]
}
 800c762:	e02a      	b.n	800c7ba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM5)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a19      	ldr	r2, [pc, #100]	; (800c7d0 <HAL_TIM_Base_MspInit+0xe0>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d10c      	bne.n	800c788 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800c76e:	4b16      	ldr	r3, [pc, #88]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c772:	4a15      	ldr	r2, [pc, #84]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c774:	f043 0308 	orr.w	r3, r3, #8
 800c778:	6413      	str	r3, [r2, #64]	; 0x40
 800c77a:	4b13      	ldr	r3, [pc, #76]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c77e:	f003 0308 	and.w	r3, r3, #8
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	693b      	ldr	r3, [r7, #16]
}
 800c786:	e018      	b.n	800c7ba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a11      	ldr	r2, [pc, #68]	; (800c7d4 <HAL_TIM_Base_MspInit+0xe4>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d113      	bne.n	800c7ba <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c792:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c796:	4a0c      	ldr	r2, [pc, #48]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c798:	f043 0302 	orr.w	r3, r3, #2
 800c79c:	6453      	str	r3, [r2, #68]	; 0x44
 800c79e:	4b0a      	ldr	r3, [pc, #40]	; (800c7c8 <HAL_TIM_Base_MspInit+0xd8>)
 800c7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7a2:	f003 0302 	and.w	r3, r3, #2
 800c7a6:	60fb      	str	r3, [r7, #12]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	202d      	movs	r0, #45	; 0x2d
 800c7b0:	f7f5 f8dc 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800c7b4:	202d      	movs	r0, #45	; 0x2d
 800c7b6:	f7f5 f8f5 	bl	80019a4 <HAL_NVIC_EnableIRQ>
}
 800c7ba:	bf00      	nop
 800c7bc:	3720      	adds	r7, #32
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	40010000 	.word	0x40010000
 800c7c8:	40023800 	.word	0x40023800
 800c7cc:	40000400 	.word	0x40000400
 800c7d0:	40000c00 	.word	0x40000c00
 800c7d4:	40010400 	.word	0x40010400

0800c7d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a0a      	ldr	r2, [pc, #40]	; (800c810 <HAL_TIM_PWM_MspInit+0x38>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d10b      	bne.n	800c802 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800c7ea:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <HAL_TIM_PWM_MspInit+0x3c>)
 800c7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ee:	4a09      	ldr	r2, [pc, #36]	; (800c814 <HAL_TIM_PWM_MspInit+0x3c>)
 800c7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7f4:	6413      	str	r3, [r2, #64]	; 0x40
 800c7f6:	4b07      	ldr	r3, [pc, #28]	; (800c814 <HAL_TIM_PWM_MspInit+0x3c>)
 800c7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fe:	60fb      	str	r3, [r7, #12]
 800c800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	40001800 	.word	0x40001800
 800c814:	40023800 	.word	0x40023800

0800c818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08a      	sub	sp, #40	; 0x28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c820:	f107 0314 	add.w	r3, r7, #20
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]
 800c828:	605a      	str	r2, [r3, #4]
 800c82a:	609a      	str	r2, [r3, #8]
 800c82c:	60da      	str	r2, [r3, #12]
 800c82e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a33      	ldr	r2, [pc, #204]	; (800c904 <HAL_TIM_MspPostInit+0xec>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d11d      	bne.n	800c876 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c83a:	4b33      	ldr	r3, [pc, #204]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83e:	4a32      	ldr	r2, [pc, #200]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c840:	f043 0301 	orr.w	r3, r3, #1
 800c844:	6313      	str	r3, [r2, #48]	; 0x30
 800c846:	4b30      	ldr	r3, [pc, #192]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84a:	f003 0301 	and.w	r3, r3, #1
 800c84e:	613b      	str	r3, [r7, #16]
 800c850:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800c852:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c858:	2302      	movs	r3, #2
 800c85a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c860:	2300      	movs	r3, #0
 800c862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c864:	2301      	movs	r3, #1
 800c866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800c868:	f107 0314 	add.w	r3, r7, #20
 800c86c:	4619      	mov	r1, r3
 800c86e:	4827      	ldr	r0, [pc, #156]	; (800c90c <HAL_TIM_MspPostInit+0xf4>)
 800c870:	f7f5 ff5a 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800c874:	e042      	b.n	800c8fc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM5)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a25      	ldr	r2, [pc, #148]	; (800c910 <HAL_TIM_MspPostInit+0xf8>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d11c      	bne.n	800c8ba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c880:	4b21      	ldr	r3, [pc, #132]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c884:	4a20      	ldr	r2, [pc, #128]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c88a:	6313      	str	r3, [r2, #48]	; 0x30
 800c88c:	4b1e      	ldr	r3, [pc, #120]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800c898:	2301      	movs	r3, #1
 800c89a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c89c:	2302      	movs	r3, #2
 800c89e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800c8ac:	f107 0314 	add.w	r3, r7, #20
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4818      	ldr	r0, [pc, #96]	; (800c914 <HAL_TIM_MspPostInit+0xfc>)
 800c8b4:	f7f5 ff38 	bl	8002728 <HAL_GPIO_Init>
}
 800c8b8:	e020      	b.n	800c8fc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM12)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a16      	ldr	r2, [pc, #88]	; (800c918 <HAL_TIM_MspPostInit+0x100>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d11b      	bne.n	800c8fc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c8c4:	4b10      	ldr	r3, [pc, #64]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c8:	4a0f      	ldr	r2, [pc, #60]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ce:	6313      	str	r3, [r2, #48]	; 0x30
 800c8d0:	4b0d      	ldr	r3, [pc, #52]	; (800c908 <HAL_TIM_MspPostInit+0xf0>)
 800c8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d8:	60bb      	str	r3, [r7, #8]
 800c8da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800c8dc:	2340      	movs	r3, #64	; 0x40
 800c8de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800c8ec:	2309      	movs	r3, #9
 800c8ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800c8f0:	f107 0314 	add.w	r3, r7, #20
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4809      	ldr	r0, [pc, #36]	; (800c91c <HAL_TIM_MspPostInit+0x104>)
 800c8f8:	f7f5 ff16 	bl	8002728 <HAL_GPIO_Init>
}
 800c8fc:	bf00      	nop
 800c8fe:	3728      	adds	r7, #40	; 0x28
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	40010000 	.word	0x40010000
 800c908:	40023800 	.word	0x40023800
 800c90c:	40020000 	.word	0x40020000
 800c910:	40000c00 	.word	0x40000c00
 800c914:	40022000 	.word	0x40022000
 800c918:	40001800 	.word	0x40001800
 800c91c:	40021c00 	.word	0x40021c00

0800c920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b08a      	sub	sp, #40	; 0x28
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c928:	f107 0314 	add.w	r3, r7, #20
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	605a      	str	r2, [r3, #4]
 800c932:	609a      	str	r2, [r3, #8]
 800c934:	60da      	str	r2, [r3, #12]
 800c936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a25      	ldr	r2, [pc, #148]	; (800c9d4 <HAL_UART_MspInit+0xb4>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d144      	bne.n	800c9cc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c942:	4b25      	ldr	r3, [pc, #148]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c946:	4a24      	ldr	r2, [pc, #144]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c948:	f043 0310 	orr.w	r3, r3, #16
 800c94c:	6453      	str	r3, [r2, #68]	; 0x44
 800c94e:	4b22      	ldr	r3, [pc, #136]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c952:	f003 0310 	and.w	r3, r3, #16
 800c956:	613b      	str	r3, [r7, #16]
 800c958:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c95a:	4b1f      	ldr	r3, [pc, #124]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95e:	4a1e      	ldr	r2, [pc, #120]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c960:	f043 0302 	orr.w	r3, r3, #2
 800c964:	6313      	str	r3, [r2, #48]	; 0x30
 800c966:	4b1c      	ldr	r3, [pc, #112]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96a:	f003 0302 	and.w	r3, r3, #2
 800c96e:	60fb      	str	r3, [r7, #12]
 800c970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c972:	4b19      	ldr	r3, [pc, #100]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c976:	4a18      	ldr	r2, [pc, #96]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c978:	f043 0301 	orr.w	r3, r3, #1
 800c97c:	6313      	str	r3, [r2, #48]	; 0x30
 800c97e:	4b16      	ldr	r3, [pc, #88]	; (800c9d8 <HAL_UART_MspInit+0xb8>)
 800c980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	60bb      	str	r3, [r7, #8]
 800c988:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800c98a:	2380      	movs	r3, #128	; 0x80
 800c98c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c98e:	2302      	movs	r3, #2
 800c990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c992:	2300      	movs	r3, #0
 800c994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c996:	2300      	movs	r3, #0
 800c998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c99a:	2307      	movs	r3, #7
 800c99c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800c99e:	f107 0314 	add.w	r3, r7, #20
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	480d      	ldr	r0, [pc, #52]	; (800c9dc <HAL_UART_MspInit+0xbc>)
 800c9a6:	f7f5 febf 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800c9aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c9bc:	2307      	movs	r3, #7
 800c9be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800c9c0:	f107 0314 	add.w	r3, r7, #20
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	4806      	ldr	r0, [pc, #24]	; (800c9e0 <HAL_UART_MspInit+0xc0>)
 800c9c8:	f7f5 feae 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c9cc:	bf00      	nop
 800c9ce:	3728      	adds	r7, #40	; 0x28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	40011000 	.word	0x40011000
 800c9d8:	40023800 	.word	0x40023800
 800c9dc:	40020400 	.word	0x40020400
 800c9e0:	40020000 	.word	0x40020000

0800c9e4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800c9ea:	1d3b      	adds	r3, r7, #4
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	605a      	str	r2, [r3, #4]
 800c9f2:	609a      	str	r2, [r3, #8]
 800c9f4:	60da      	str	r2, [r3, #12]
 800c9f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800c9f8:	4b3a      	ldr	r3, [pc, #232]	; (800cae4 <HAL_FMC_MspInit+0x100>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d16d      	bne.n	800cadc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800ca00:	4b38      	ldr	r3, [pc, #224]	; (800cae4 <HAL_FMC_MspInit+0x100>)
 800ca02:	2201      	movs	r2, #1
 800ca04:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ca06:	4b38      	ldr	r3, [pc, #224]	; (800cae8 <HAL_FMC_MspInit+0x104>)
 800ca08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0a:	4a37      	ldr	r2, [pc, #220]	; (800cae8 <HAL_FMC_MspInit+0x104>)
 800ca0c:	f043 0301 	orr.w	r3, r3, #1
 800ca10:	6393      	str	r3, [r2, #56]	; 0x38
 800ca12:	4b35      	ldr	r3, [pc, #212]	; (800cae8 <HAL_FMC_MspInit+0x104>)
 800ca14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	603b      	str	r3, [r7, #0]
 800ca1c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800ca1e:	f64f 7383 	movw	r3, #65411	; 0xff83
 800ca22:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca24:	2302      	movs	r3, #2
 800ca26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ca30:	230c      	movs	r3, #12
 800ca32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ca34:	1d3b      	adds	r3, r7, #4
 800ca36:	4619      	mov	r1, r3
 800ca38:	482c      	ldr	r0, [pc, #176]	; (800caec <HAL_FMC_MspInit+0x108>)
 800ca3a:	f7f5 fe75 	bl	8002728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800ca3e:	f248 1333 	movw	r3, #33075	; 0x8133
 800ca42:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca44:	2302      	movs	r3, #2
 800ca46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ca50:	230c      	movs	r3, #12
 800ca52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ca54:	1d3b      	adds	r3, r7, #4
 800ca56:	4619      	mov	r1, r3
 800ca58:	4825      	ldr	r0, [pc, #148]	; (800caf0 <HAL_FMC_MspInit+0x10c>)
 800ca5a:	f7f5 fe65 	bl	8002728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800ca5e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ca62:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca64:	2302      	movs	r3, #2
 800ca66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ca70:	230c      	movs	r3, #12
 800ca72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ca74:	1d3b      	adds	r3, r7, #4
 800ca76:	4619      	mov	r1, r3
 800ca78:	481e      	ldr	r0, [pc, #120]	; (800caf4 <HAL_FMC_MspInit+0x110>)
 800ca7a:	f7f5 fe55 	bl	8002728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800ca7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800ca82:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca84:	2302      	movs	r3, #2
 800ca86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ca90:	230c      	movs	r3, #12
 800ca92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ca94:	1d3b      	adds	r3, r7, #4
 800ca96:	4619      	mov	r1, r3
 800ca98:	4817      	ldr	r0, [pc, #92]	; (800caf8 <HAL_FMC_MspInit+0x114>)
 800ca9a:	f7f5 fe45 	bl	8002728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800ca9e:	2328      	movs	r3, #40	; 0x28
 800caa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caa2:	2302      	movs	r3, #2
 800caa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caa6:	2300      	movs	r3, #0
 800caa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800caaa:	2303      	movs	r3, #3
 800caac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800caae:	230c      	movs	r3, #12
 800cab0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800cab2:	1d3b      	adds	r3, r7, #4
 800cab4:	4619      	mov	r1, r3
 800cab6:	4811      	ldr	r0, [pc, #68]	; (800cafc <HAL_FMC_MspInit+0x118>)
 800cab8:	f7f5 fe36 	bl	8002728 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800cabc:	2308      	movs	r3, #8
 800cabe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cac0:	2302      	movs	r3, #2
 800cac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cac4:	2300      	movs	r3, #0
 800cac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cac8:	2303      	movs	r3, #3
 800caca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800cacc:	230c      	movs	r3, #12
 800cace:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800cad0:	1d3b      	adds	r3, r7, #4
 800cad2:	4619      	mov	r1, r3
 800cad4:	480a      	ldr	r0, [pc, #40]	; (800cb00 <HAL_FMC_MspInit+0x11c>)
 800cad6:	f7f5 fe27 	bl	8002728 <HAL_GPIO_Init>
 800cada:	e000      	b.n	800cade <HAL_FMC_MspInit+0xfa>
    return;
 800cadc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800cade:	3718      	adds	r7, #24
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	2000020c 	.word	0x2000020c
 800cae8:	40023800 	.word	0x40023800
 800caec:	40021000 	.word	0x40021000
 800caf0:	40021800 	.word	0x40021800
 800caf4:	40020c00 	.word	0x40020c00
 800caf8:	40021400 	.word	0x40021400
 800cafc:	40021c00 	.word	0x40021c00
 800cb00:	40020800 	.word	0x40020800

0800cb04 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800cb0c:	f7ff ff6a 	bl	800c9e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08a      	sub	sp, #40	; 0x28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a2b      	ldr	r2, [pc, #172]	; (800cbd4 <HAL_SAI_MspInit+0xbc>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d124      	bne.n	800cb74 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800cb2a:	4b2b      	ldr	r3, [pc, #172]	; (800cbd8 <HAL_SAI_MspInit+0xc0>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10b      	bne.n	800cb4a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800cb32:	4b2a      	ldr	r3, [pc, #168]	; (800cbdc <HAL_SAI_MspInit+0xc4>)
 800cb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb36:	4a29      	ldr	r2, [pc, #164]	; (800cbdc <HAL_SAI_MspInit+0xc4>)
 800cb38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb3c:	6453      	str	r3, [r2, #68]	; 0x44
 800cb3e:	4b27      	ldr	r3, [pc, #156]	; (800cbdc <HAL_SAI_MspInit+0xc4>)
 800cb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb46:	613b      	str	r3, [r7, #16]
 800cb48:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800cb4a:	4b23      	ldr	r3, [pc, #140]	; (800cbd8 <HAL_SAI_MspInit+0xc0>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	4a21      	ldr	r2, [pc, #132]	; (800cbd8 <HAL_SAI_MspInit+0xc0>)
 800cb52:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800cb54:	23f0      	movs	r3, #240	; 0xf0
 800cb56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb58:	2302      	movs	r3, #2
 800cb5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb60:	2300      	movs	r3, #0
 800cb62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800cb64:	230a      	movs	r3, #10
 800cb66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cb68:	f107 0314 	add.w	r3, r7, #20
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	481c      	ldr	r0, [pc, #112]	; (800cbe0 <HAL_SAI_MspInit+0xc8>)
 800cb70:	f7f5 fdda 	bl	8002728 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a1a      	ldr	r2, [pc, #104]	; (800cbe4 <HAL_SAI_MspInit+0xcc>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d125      	bne.n	800cbca <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800cb7e:	4b16      	ldr	r3, [pc, #88]	; (800cbd8 <HAL_SAI_MspInit+0xc0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10b      	bne.n	800cb9e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800cb86:	4b15      	ldr	r3, [pc, #84]	; (800cbdc <HAL_SAI_MspInit+0xc4>)
 800cb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb8a:	4a14      	ldr	r2, [pc, #80]	; (800cbdc <HAL_SAI_MspInit+0xc4>)
 800cb8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb90:	6453      	str	r3, [r2, #68]	; 0x44
 800cb92:	4b12      	ldr	r3, [pc, #72]	; (800cbdc <HAL_SAI_MspInit+0xc4>)
 800cb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800cb9e:	4b0e      	ldr	r3, [pc, #56]	; (800cbd8 <HAL_SAI_MspInit+0xc0>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3301      	adds	r3, #1
 800cba4:	4a0c      	ldr	r2, [pc, #48]	; (800cbd8 <HAL_SAI_MspInit+0xc0>)
 800cba6:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800cba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbae:	2302      	movs	r3, #2
 800cbb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800cbba:	230a      	movs	r3, #10
 800cbbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800cbbe:	f107 0314 	add.w	r3, r7, #20
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4808      	ldr	r0, [pc, #32]	; (800cbe8 <HAL_SAI_MspInit+0xd0>)
 800cbc6:	f7f5 fdaf 	bl	8002728 <HAL_GPIO_Init>

    }
}
 800cbca:	bf00      	nop
 800cbcc:	3728      	adds	r7, #40	; 0x28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	40015c04 	.word	0x40015c04
 800cbd8:	20000210 	.word	0x20000210
 800cbdc:	40023800 	.word	0x40023800
 800cbe0:	40022000 	.word	0x40022000
 800cbe4:	40015c24 	.word	0x40015c24
 800cbe8:	40021800 	.word	0x40021800

0800cbec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08c      	sub	sp, #48	; 0x30
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	6879      	ldr	r1, [r7, #4]
 800cc00:	202d      	movs	r0, #45	; 0x2d
 800cc02:	f7f4 feb3 	bl	800196c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 800cc06:	202d      	movs	r0, #45	; 0x2d
 800cc08:	f7f4 fecc 	bl	80019a4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800cc0c:	4b1f      	ldr	r3, [pc, #124]	; (800cc8c <HAL_InitTick+0xa0>)
 800cc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc10:	4a1e      	ldr	r2, [pc, #120]	; (800cc8c <HAL_InitTick+0xa0>)
 800cc12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc16:	6413      	str	r3, [r2, #64]	; 0x40
 800cc18:	4b1c      	ldr	r3, [pc, #112]	; (800cc8c <HAL_InitTick+0xa0>)
 800cc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc20:	60fb      	str	r3, [r7, #12]
 800cc22:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800cc24:	f107 0210 	add.w	r2, r7, #16
 800cc28:	f107 0314 	add.w	r3, r7, #20
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7f8 fd2e 	bl	8005690 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800cc34:	f7f8 fd04 	bl	8005640 <HAL_RCC_GetPCLK1Freq>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	005b      	lsls	r3, r3, #1
 800cc3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	4a13      	ldr	r2, [pc, #76]	; (800cc90 <HAL_InitTick+0xa4>)
 800cc42:	fba2 2303 	umull	r2, r3, r2, r3
 800cc46:	0c9b      	lsrs	r3, r3, #18
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800cc4c:	4b11      	ldr	r3, [pc, #68]	; (800cc94 <HAL_InitTick+0xa8>)
 800cc4e:	4a12      	ldr	r2, [pc, #72]	; (800cc98 <HAL_InitTick+0xac>)
 800cc50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 800cc52:	4b10      	ldr	r3, [pc, #64]	; (800cc94 <HAL_InitTick+0xa8>)
 800cc54:	f240 32e7 	movw	r2, #999	; 0x3e7
 800cc58:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800cc5a:	4a0e      	ldr	r2, [pc, #56]	; (800cc94 <HAL_InitTick+0xa8>)
 800cc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800cc60:	4b0c      	ldr	r3, [pc, #48]	; (800cc94 <HAL_InitTick+0xa8>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cc66:	4b0b      	ldr	r3, [pc, #44]	; (800cc94 <HAL_InitTick+0xa8>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800cc6c:	4809      	ldr	r0, [pc, #36]	; (800cc94 <HAL_InitTick+0xa8>)
 800cc6e:	f7fa f9c9 	bl	8007004 <HAL_TIM_Base_Init>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d104      	bne.n	800cc82 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800cc78:	4806      	ldr	r0, [pc, #24]	; (800cc94 <HAL_InitTick+0xa8>)
 800cc7a:	f7fa f9ef 	bl	800705c <HAL_TIM_Base_Start_IT>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	e000      	b.n	800cc84 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3730      	adds	r7, #48	; 0x30
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	40023800 	.word	0x40023800
 800cc90:	431bde83 	.word	0x431bde83
 800cc94:	20000a84 	.word	0x20000a84
 800cc98:	40002000 	.word	0x40002000

0800cc9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cca0:	bf00      	nop
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ccae:	e7fe      	b.n	800ccae <HardFault_Handler+0x4>

0800ccb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ccb4:	e7fe      	b.n	800ccb4 <MemManage_Handler+0x4>

0800ccb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ccb6:	b480      	push	{r7}
 800ccb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ccba:	e7fe      	b.n	800ccba <BusFault_Handler+0x4>

0800ccbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ccc0:	e7fe      	b.n	800ccc0 <UsageFault_Handler+0x4>

0800ccc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ccc6:	bf00      	nop
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ccd4:	bf00      	nop
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ccde:	b480      	push	{r7}
 800cce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cce2:	bf00      	nop
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800ccf0:	2010      	movs	r0, #16
 800ccf2:	f7f5 fef7 	bl	8002ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800ccf6:	bf00      	nop
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800ccfe:	2040      	movs	r0, #64	; 0x40
 800cd00:	f7f5 fef0 	bl	8002ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800cd04:	bf00      	nop
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800cd0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cd10:	f7f5 fee8 	bl	8002ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800cd14:	bf00      	nop
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cd1c:	4803      	ldr	r0, [pc, #12]	; (800cd2c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800cd1e:	f7fa f9f2 	bl	8007106 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800cd22:	4803      	ldr	r0, [pc, #12]	; (800cd30 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800cd24:	f7fa f9ef 	bl	8007106 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800cd28:	bf00      	nop
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	20000438 	.word	0x20000438
 800cd30:	20000a84 	.word	0x20000a84

0800cd34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800cd38:	4802      	ldr	r0, [pc, #8]	; (800cd44 <OTG_FS_IRQHandler+0x10>)
 800cd3a:	f7f6 f8eb 	bl	8002f14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800cd3e:	bf00      	nop
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	20000e90 	.word	0x20000e90

0800cd48 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800cd4c:	4802      	ldr	r0, [pc, #8]	; (800cd58 <LTDC_IRQHandler+0x10>)
 800cd4e:	f7f7 fc99 	bl	8004684 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800cd52:	bf00      	nop
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	200006c0 	.word	0x200006c0

0800cd5c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800cd60:	4802      	ldr	r0, [pc, #8]	; (800cd6c <DMA2D_IRQHandler+0x10>)
 800cd62:	f7f5 faa3 	bl	80022ac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800cd66:	bf00      	nop
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	200008f8 	.word	0x200008f8

0800cd70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800cd78:	4b11      	ldr	r3, [pc, #68]	; (800cdc0 <_sbrk+0x50>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d102      	bne.n	800cd86 <_sbrk+0x16>
		heap_end = &end;
 800cd80:	4b0f      	ldr	r3, [pc, #60]	; (800cdc0 <_sbrk+0x50>)
 800cd82:	4a10      	ldr	r2, [pc, #64]	; (800cdc4 <_sbrk+0x54>)
 800cd84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800cd86:	4b0e      	ldr	r3, [pc, #56]	; (800cdc0 <_sbrk+0x50>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800cd8c:	4b0c      	ldr	r3, [pc, #48]	; (800cdc0 <_sbrk+0x50>)
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4413      	add	r3, r2
 800cd94:	466a      	mov	r2, sp
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d907      	bls.n	800cdaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800cd9a:	f000 f9f3 	bl	800d184 <__errno>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	230c      	movs	r3, #12
 800cda2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800cda4:	f04f 33ff 	mov.w	r3, #4294967295
 800cda8:	e006      	b.n	800cdb8 <_sbrk+0x48>
	}

	heap_end += incr;
 800cdaa:	4b05      	ldr	r3, [pc, #20]	; (800cdc0 <_sbrk+0x50>)
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	4a03      	ldr	r2, [pc, #12]	; (800cdc0 <_sbrk+0x50>)
 800cdb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3710      	adds	r7, #16
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20000214 	.word	0x20000214
 800cdc4:	20001158 	.word	0x20001158

0800cdc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cdcc:	4b15      	ldr	r3, [pc, #84]	; (800ce24 <SystemInit+0x5c>)
 800cdce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdd2:	4a14      	ldr	r2, [pc, #80]	; (800ce24 <SystemInit+0x5c>)
 800cdd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cdd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800cddc:	4b12      	ldr	r3, [pc, #72]	; (800ce28 <SystemInit+0x60>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a11      	ldr	r2, [pc, #68]	; (800ce28 <SystemInit+0x60>)
 800cde2:	f043 0301 	orr.w	r3, r3, #1
 800cde6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800cde8:	4b0f      	ldr	r3, [pc, #60]	; (800ce28 <SystemInit+0x60>)
 800cdea:	2200      	movs	r2, #0
 800cdec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800cdee:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <SystemInit+0x60>)
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	490d      	ldr	r1, [pc, #52]	; (800ce28 <SystemInit+0x60>)
 800cdf4:	4b0d      	ldr	r3, [pc, #52]	; (800ce2c <SystemInit+0x64>)
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800cdfa:	4b0b      	ldr	r3, [pc, #44]	; (800ce28 <SystemInit+0x60>)
 800cdfc:	4a0c      	ldr	r2, [pc, #48]	; (800ce30 <SystemInit+0x68>)
 800cdfe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ce00:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <SystemInit+0x60>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a08      	ldr	r2, [pc, #32]	; (800ce28 <SystemInit+0x60>)
 800ce06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ce0c:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <SystemInit+0x60>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ce12:	4b04      	ldr	r3, [pc, #16]	; (800ce24 <SystemInit+0x5c>)
 800ce14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ce18:	609a      	str	r2, [r3, #8]
#endif
}
 800ce1a:	bf00      	nop
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	e000ed00 	.word	0xe000ed00
 800ce28:	40023800 	.word	0x40023800
 800ce2c:	fef6ffff 	.word	0xfef6ffff
 800ce30:	24003010 	.word	0x24003010

0800ce34 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ce38:	4802      	ldr	r0, [pc, #8]	; (800ce44 <MX_USB_HOST_Process+0x10>)
 800ce3a:	f7fc fc47 	bl	80096cc <USBH_Process>
}
 800ce3e:	bf00      	nop
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	20000ac4 	.word	0x20000ac4

0800ce48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fc feda 	bl	8009c10 <USBH_LL_IncTimer>
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fc ff1f 	bl	8009cb6 <USBH_LL_Connect>
}
 800ce78:	bf00      	nop
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fc ff37 	bl	8009d02 <USBH_LL_Disconnect>
}
 800ce94:	bf00      	nop
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ceac:	bf00      	nop
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fc fecc 	bl	8009c64 <USBH_LL_PortEnabled>
} 
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fc fecc 	bl	8009c80 <USBH_LL_PortDisabled>
} 
 800cee8:	bf00      	nop
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7f6 f90a 	bl	8003120 <HAL_HCD_Start>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 f8e0 	bl	800d0d8 <USBH_Get_USB_Status>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cf1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7f6 f912 	bl	8003166 <HAL_HCD_Stop>
 800cf42:	4603      	mov	r3, r0
 800cf44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 f8c5 	bl	800d0d8 <USBH_Get_USB_Status>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800cf52:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cf64:	2301      	movs	r3, #1
 800cf66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7f6 f939 	bl	80031e6 <HAL_HCD_GetCurrentSpeed>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d007      	beq.n	800cf8a <USBH_LL_GetSpeed+0x2e>
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d302      	bcc.n	800cf84 <USBH_LL_GetSpeed+0x28>
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d006      	beq.n	800cf90 <USBH_LL_GetSpeed+0x34>
 800cf82:	e008      	b.n	800cf96 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cf84:	2300      	movs	r3, #0
 800cf86:	73fb      	strb	r3, [r7, #15]
    break;
 800cf88:	e008      	b.n	800cf9c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf8e:	e005      	b.n	800cf9c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cf90:	2302      	movs	r3, #2
 800cf92:	73fb      	strb	r3, [r7, #15]
    break;
 800cf94:	e002      	b.n	800cf9c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800cf96:	2301      	movs	r3, #1
 800cf98:	73fb      	strb	r3, [r7, #15]
    break;
 800cf9a:	bf00      	nop
  }
  return  speed;
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b084      	sub	sp, #16
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7f6 f8ef 	bl	80031a0 <HAL_HCD_ResetPort>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800cfc6:	7bfb      	ldrb	r3, [r7, #15]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 f885 	bl	800d0d8 <USBH_Get_USB_Status>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cfdc:	b590      	push	{r4, r7, lr}
 800cfde:	b089      	sub	sp, #36	; 0x24
 800cfe0:	af04      	add	r7, sp, #16
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	4608      	mov	r0, r1
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	461a      	mov	r2, r3
 800cfea:	4603      	mov	r3, r0
 800cfec:	70fb      	strb	r3, [r7, #3]
 800cfee:	460b      	mov	r3, r1
 800cff0:	70bb      	strb	r3, [r7, #2]
 800cff2:	4613      	mov	r3, r2
 800cff4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800d004:	787c      	ldrb	r4, [r7, #1]
 800d006:	78ba      	ldrb	r2, [r7, #2]
 800d008:	78f9      	ldrb	r1, [r7, #3]
 800d00a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d00c:	9302      	str	r3, [sp, #8]
 800d00e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d012:	9301      	str	r3, [sp, #4]
 800d014:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	4623      	mov	r3, r4
 800d01c:	f7f5 fd7a 	bl	8002b14 <HAL_HCD_HC_Init>
 800d020:	4603      	mov	r3, r0
 800d022:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	4618      	mov	r0, r3
 800d028:	f000 f856 	bl	800d0d8 <USBH_Get_USB_Status>
 800d02c:	4603      	mov	r3, r0
 800d02e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d030:	7bbb      	ldrb	r3, [r7, #14]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	bd90      	pop	{r4, r7, pc}

0800d03a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d03a:	b590      	push	{r4, r7, lr}
 800d03c:	b089      	sub	sp, #36	; 0x24
 800d03e:	af04      	add	r7, sp, #16
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	4608      	mov	r0, r1
 800d044:	4611      	mov	r1, r2
 800d046:	461a      	mov	r2, r3
 800d048:	4603      	mov	r3, r0
 800d04a:	70fb      	strb	r3, [r7, #3]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70bb      	strb	r3, [r7, #2]
 800d050:	4613      	mov	r3, r2
 800d052:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800d062:	787c      	ldrb	r4, [r7, #1]
 800d064:	78ba      	ldrb	r2, [r7, #2]
 800d066:	78f9      	ldrb	r1, [r7, #3]
 800d068:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d06c:	9303      	str	r3, [sp, #12]
 800d06e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d070:	9302      	str	r3, [sp, #8]
 800d072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d074:	9301      	str	r3, [sp, #4]
 800d076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	4623      	mov	r3, r4
 800d07e:	f7f5 fde1 	bl	8002c44 <HAL_HCD_HC_SubmitRequest>
 800d082:	4603      	mov	r3, r0
 800d084:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d086:	7bfb      	ldrb	r3, [r7, #15]
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 f825 	bl	800d0d8 <USBH_Get_USB_Status>
 800d08e:	4603      	mov	r3, r0
 800d090:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d092:	7bbb      	ldrb	r3, [r7, #14]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd90      	pop	{r4, r7, pc}

0800d09c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d0ae:	78fa      	ldrb	r2, [r7, #3]
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7f6 f882 	bl	80031bc <HAL_HCD_HC_GetURBState>
 800d0b8:	4603      	mov	r3, r0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b082      	sub	sp, #8
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7f4 f902 	bl	80012d4 <HAL_Delay>
}
 800d0d0:	bf00      	nop
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	4603      	mov	r3, r0
 800d0e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	2b03      	cmp	r3, #3
 800d0ea:	d817      	bhi.n	800d11c <USBH_Get_USB_Status+0x44>
 800d0ec:	a201      	add	r2, pc, #4	; (adr r2, 800d0f4 <USBH_Get_USB_Status+0x1c>)
 800d0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f2:	bf00      	nop
 800d0f4:	0800d105 	.word	0x0800d105
 800d0f8:	0800d10b 	.word	0x0800d10b
 800d0fc:	0800d111 	.word	0x0800d111
 800d100:	0800d117 	.word	0x0800d117
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73fb      	strb	r3, [r7, #15]
    break;
 800d108:	e00b      	b.n	800d122 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d10a:	2302      	movs	r3, #2
 800d10c:	73fb      	strb	r3, [r7, #15]
    break;
 800d10e:	e008      	b.n	800d122 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d110:	2301      	movs	r3, #1
 800d112:	73fb      	strb	r3, [r7, #15]
    break;
 800d114:	e005      	b.n	800d122 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d116:	2302      	movs	r3, #2
 800d118:	73fb      	strb	r3, [r7, #15]
    break;
 800d11a:	e002      	b.n	800d122 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d11c:	2302      	movs	r3, #2
 800d11e:	73fb      	strb	r3, [r7, #15]
    break;
 800d120:	bf00      	nop
  }
  return usb_status;
 800d122:	7bfb      	ldrb	r3, [r7, #15]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d130:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d168 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d134:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d136:	e003      	b.n	800d140 <LoopCopyDataInit>

0800d138 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d138:	4b0c      	ldr	r3, [pc, #48]	; (800d16c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d13a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d13c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d13e:	3104      	adds	r1, #4

0800d140 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d140:	480b      	ldr	r0, [pc, #44]	; (800d170 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d142:	4b0c      	ldr	r3, [pc, #48]	; (800d174 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d144:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d146:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d148:	d3f6      	bcc.n	800d138 <CopyDataInit>
  ldr  r2, =_sbss
 800d14a:	4a0b      	ldr	r2, [pc, #44]	; (800d178 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d14c:	e002      	b.n	800d154 <LoopFillZerobss>

0800d14e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d14e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d150:	f842 3b04 	str.w	r3, [r2], #4

0800d154 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d154:	4b09      	ldr	r3, [pc, #36]	; (800d17c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d156:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d158:	d3f9      	bcc.n	800d14e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800d15a:	f7ff fe35 	bl	800cdc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d15e:	f000 f817 	bl	800d190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d162:	f7fd fb5d 	bl	800a820 <main>
  bx  lr    
 800d166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d168:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800d16c:	0800f5a8 	.word	0x0800f5a8
  ldr  r0, =_sdata
 800d170:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d174:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800d178:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800d17c:	20001158 	.word	0x20001158

0800d180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d180:	e7fe      	b.n	800d180 <ADC_IRQHandler>
	...

0800d184 <__errno>:
 800d184:	4b01      	ldr	r3, [pc, #4]	; (800d18c <__errno+0x8>)
 800d186:	6818      	ldr	r0, [r3, #0]
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	20000010 	.word	0x20000010

0800d190 <__libc_init_array>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	4e0d      	ldr	r6, [pc, #52]	; (800d1c8 <__libc_init_array+0x38>)
 800d194:	4c0d      	ldr	r4, [pc, #52]	; (800d1cc <__libc_init_array+0x3c>)
 800d196:	1ba4      	subs	r4, r4, r6
 800d198:	10a4      	asrs	r4, r4, #2
 800d19a:	2500      	movs	r5, #0
 800d19c:	42a5      	cmp	r5, r4
 800d19e:	d109      	bne.n	800d1b4 <__libc_init_array+0x24>
 800d1a0:	4e0b      	ldr	r6, [pc, #44]	; (800d1d0 <__libc_init_array+0x40>)
 800d1a2:	4c0c      	ldr	r4, [pc, #48]	; (800d1d4 <__libc_init_array+0x44>)
 800d1a4:	f000 fc26 	bl	800d9f4 <_init>
 800d1a8:	1ba4      	subs	r4, r4, r6
 800d1aa:	10a4      	asrs	r4, r4, #2
 800d1ac:	2500      	movs	r5, #0
 800d1ae:	42a5      	cmp	r5, r4
 800d1b0:	d105      	bne.n	800d1be <__libc_init_array+0x2e>
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
 800d1b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d1b8:	4798      	blx	r3
 800d1ba:	3501      	adds	r5, #1
 800d1bc:	e7ee      	b.n	800d19c <__libc_init_array+0xc>
 800d1be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d1c2:	4798      	blx	r3
 800d1c4:	3501      	adds	r5, #1
 800d1c6:	e7f2      	b.n	800d1ae <__libc_init_array+0x1e>
 800d1c8:	0800f5a0 	.word	0x0800f5a0
 800d1cc:	0800f5a0 	.word	0x0800f5a0
 800d1d0:	0800f5a0 	.word	0x0800f5a0
 800d1d4:	0800f5a4 	.word	0x0800f5a4

0800d1d8 <memset>:
 800d1d8:	4402      	add	r2, r0
 800d1da:	4603      	mov	r3, r0
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d100      	bne.n	800d1e2 <memset+0xa>
 800d1e0:	4770      	bx	lr
 800d1e2:	f803 1b01 	strb.w	r1, [r3], #1
 800d1e6:	e7f9      	b.n	800d1dc <memset+0x4>

0800d1e8 <_free_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	2900      	cmp	r1, #0
 800d1ee:	d045      	beq.n	800d27c <_free_r+0x94>
 800d1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1f4:	1f0c      	subs	r4, r1, #4
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	bfb8      	it	lt
 800d1fa:	18e4      	addlt	r4, r4, r3
 800d1fc:	f000 f8cc 	bl	800d398 <__malloc_lock>
 800d200:	4a1f      	ldr	r2, [pc, #124]	; (800d280 <_free_r+0x98>)
 800d202:	6813      	ldr	r3, [r2, #0]
 800d204:	4610      	mov	r0, r2
 800d206:	b933      	cbnz	r3, 800d216 <_free_r+0x2e>
 800d208:	6063      	str	r3, [r4, #4]
 800d20a:	6014      	str	r4, [r2, #0]
 800d20c:	4628      	mov	r0, r5
 800d20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d212:	f000 b8c2 	b.w	800d39a <__malloc_unlock>
 800d216:	42a3      	cmp	r3, r4
 800d218:	d90c      	bls.n	800d234 <_free_r+0x4c>
 800d21a:	6821      	ldr	r1, [r4, #0]
 800d21c:	1862      	adds	r2, r4, r1
 800d21e:	4293      	cmp	r3, r2
 800d220:	bf04      	itt	eq
 800d222:	681a      	ldreq	r2, [r3, #0]
 800d224:	685b      	ldreq	r3, [r3, #4]
 800d226:	6063      	str	r3, [r4, #4]
 800d228:	bf04      	itt	eq
 800d22a:	1852      	addeq	r2, r2, r1
 800d22c:	6022      	streq	r2, [r4, #0]
 800d22e:	6004      	str	r4, [r0, #0]
 800d230:	e7ec      	b.n	800d20c <_free_r+0x24>
 800d232:	4613      	mov	r3, r2
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	b10a      	cbz	r2, 800d23c <_free_r+0x54>
 800d238:	42a2      	cmp	r2, r4
 800d23a:	d9fa      	bls.n	800d232 <_free_r+0x4a>
 800d23c:	6819      	ldr	r1, [r3, #0]
 800d23e:	1858      	adds	r0, r3, r1
 800d240:	42a0      	cmp	r0, r4
 800d242:	d10b      	bne.n	800d25c <_free_r+0x74>
 800d244:	6820      	ldr	r0, [r4, #0]
 800d246:	4401      	add	r1, r0
 800d248:	1858      	adds	r0, r3, r1
 800d24a:	4282      	cmp	r2, r0
 800d24c:	6019      	str	r1, [r3, #0]
 800d24e:	d1dd      	bne.n	800d20c <_free_r+0x24>
 800d250:	6810      	ldr	r0, [r2, #0]
 800d252:	6852      	ldr	r2, [r2, #4]
 800d254:	605a      	str	r2, [r3, #4]
 800d256:	4401      	add	r1, r0
 800d258:	6019      	str	r1, [r3, #0]
 800d25a:	e7d7      	b.n	800d20c <_free_r+0x24>
 800d25c:	d902      	bls.n	800d264 <_free_r+0x7c>
 800d25e:	230c      	movs	r3, #12
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	e7d3      	b.n	800d20c <_free_r+0x24>
 800d264:	6820      	ldr	r0, [r4, #0]
 800d266:	1821      	adds	r1, r4, r0
 800d268:	428a      	cmp	r2, r1
 800d26a:	bf04      	itt	eq
 800d26c:	6811      	ldreq	r1, [r2, #0]
 800d26e:	6852      	ldreq	r2, [r2, #4]
 800d270:	6062      	str	r2, [r4, #4]
 800d272:	bf04      	itt	eq
 800d274:	1809      	addeq	r1, r1, r0
 800d276:	6021      	streq	r1, [r4, #0]
 800d278:	605c      	str	r4, [r3, #4]
 800d27a:	e7c7      	b.n	800d20c <_free_r+0x24>
 800d27c:	bd38      	pop	{r3, r4, r5, pc}
 800d27e:	bf00      	nop
 800d280:	20000218 	.word	0x20000218

0800d284 <_malloc_r>:
 800d284:	b570      	push	{r4, r5, r6, lr}
 800d286:	1ccd      	adds	r5, r1, #3
 800d288:	f025 0503 	bic.w	r5, r5, #3
 800d28c:	3508      	adds	r5, #8
 800d28e:	2d0c      	cmp	r5, #12
 800d290:	bf38      	it	cc
 800d292:	250c      	movcc	r5, #12
 800d294:	2d00      	cmp	r5, #0
 800d296:	4606      	mov	r6, r0
 800d298:	db01      	blt.n	800d29e <_malloc_r+0x1a>
 800d29a:	42a9      	cmp	r1, r5
 800d29c:	d903      	bls.n	800d2a6 <_malloc_r+0x22>
 800d29e:	230c      	movs	r3, #12
 800d2a0:	6033      	str	r3, [r6, #0]
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	bd70      	pop	{r4, r5, r6, pc}
 800d2a6:	f000 f877 	bl	800d398 <__malloc_lock>
 800d2aa:	4a21      	ldr	r2, [pc, #132]	; (800d330 <_malloc_r+0xac>)
 800d2ac:	6814      	ldr	r4, [r2, #0]
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	b991      	cbnz	r1, 800d2d8 <_malloc_r+0x54>
 800d2b2:	4c20      	ldr	r4, [pc, #128]	; (800d334 <_malloc_r+0xb0>)
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	b91b      	cbnz	r3, 800d2c0 <_malloc_r+0x3c>
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f000 f83d 	bl	800d338 <_sbrk_r>
 800d2be:	6020      	str	r0, [r4, #0]
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f000 f838 	bl	800d338 <_sbrk_r>
 800d2c8:	1c43      	adds	r3, r0, #1
 800d2ca:	d124      	bne.n	800d316 <_malloc_r+0x92>
 800d2cc:	230c      	movs	r3, #12
 800d2ce:	6033      	str	r3, [r6, #0]
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f000 f862 	bl	800d39a <__malloc_unlock>
 800d2d6:	e7e4      	b.n	800d2a2 <_malloc_r+0x1e>
 800d2d8:	680b      	ldr	r3, [r1, #0]
 800d2da:	1b5b      	subs	r3, r3, r5
 800d2dc:	d418      	bmi.n	800d310 <_malloc_r+0x8c>
 800d2de:	2b0b      	cmp	r3, #11
 800d2e0:	d90f      	bls.n	800d302 <_malloc_r+0x7e>
 800d2e2:	600b      	str	r3, [r1, #0]
 800d2e4:	50cd      	str	r5, [r1, r3]
 800d2e6:	18cc      	adds	r4, r1, r3
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	f000 f856 	bl	800d39a <__malloc_unlock>
 800d2ee:	f104 000b 	add.w	r0, r4, #11
 800d2f2:	1d23      	adds	r3, r4, #4
 800d2f4:	f020 0007 	bic.w	r0, r0, #7
 800d2f8:	1ac3      	subs	r3, r0, r3
 800d2fa:	d0d3      	beq.n	800d2a4 <_malloc_r+0x20>
 800d2fc:	425a      	negs	r2, r3
 800d2fe:	50e2      	str	r2, [r4, r3]
 800d300:	e7d0      	b.n	800d2a4 <_malloc_r+0x20>
 800d302:	428c      	cmp	r4, r1
 800d304:	684b      	ldr	r3, [r1, #4]
 800d306:	bf16      	itet	ne
 800d308:	6063      	strne	r3, [r4, #4]
 800d30a:	6013      	streq	r3, [r2, #0]
 800d30c:	460c      	movne	r4, r1
 800d30e:	e7eb      	b.n	800d2e8 <_malloc_r+0x64>
 800d310:	460c      	mov	r4, r1
 800d312:	6849      	ldr	r1, [r1, #4]
 800d314:	e7cc      	b.n	800d2b0 <_malloc_r+0x2c>
 800d316:	1cc4      	adds	r4, r0, #3
 800d318:	f024 0403 	bic.w	r4, r4, #3
 800d31c:	42a0      	cmp	r0, r4
 800d31e:	d005      	beq.n	800d32c <_malloc_r+0xa8>
 800d320:	1a21      	subs	r1, r4, r0
 800d322:	4630      	mov	r0, r6
 800d324:	f000 f808 	bl	800d338 <_sbrk_r>
 800d328:	3001      	adds	r0, #1
 800d32a:	d0cf      	beq.n	800d2cc <_malloc_r+0x48>
 800d32c:	6025      	str	r5, [r4, #0]
 800d32e:	e7db      	b.n	800d2e8 <_malloc_r+0x64>
 800d330:	20000218 	.word	0x20000218
 800d334:	2000021c 	.word	0x2000021c

0800d338 <_sbrk_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4c06      	ldr	r4, [pc, #24]	; (800d354 <_sbrk_r+0x1c>)
 800d33c:	2300      	movs	r3, #0
 800d33e:	4605      	mov	r5, r0
 800d340:	4608      	mov	r0, r1
 800d342:	6023      	str	r3, [r4, #0]
 800d344:	f7ff fd14 	bl	800cd70 <_sbrk>
 800d348:	1c43      	adds	r3, r0, #1
 800d34a:	d102      	bne.n	800d352 <_sbrk_r+0x1a>
 800d34c:	6823      	ldr	r3, [r4, #0]
 800d34e:	b103      	cbz	r3, 800d352 <_sbrk_r+0x1a>
 800d350:	602b      	str	r3, [r5, #0]
 800d352:	bd38      	pop	{r3, r4, r5, pc}
 800d354:	20001154 	.word	0x20001154

0800d358 <siprintf>:
 800d358:	b40e      	push	{r1, r2, r3}
 800d35a:	b500      	push	{lr}
 800d35c:	b09c      	sub	sp, #112	; 0x70
 800d35e:	ab1d      	add	r3, sp, #116	; 0x74
 800d360:	9002      	str	r0, [sp, #8]
 800d362:	9006      	str	r0, [sp, #24]
 800d364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d368:	4809      	ldr	r0, [pc, #36]	; (800d390 <siprintf+0x38>)
 800d36a:	9107      	str	r1, [sp, #28]
 800d36c:	9104      	str	r1, [sp, #16]
 800d36e:	4909      	ldr	r1, [pc, #36]	; (800d394 <siprintf+0x3c>)
 800d370:	f853 2b04 	ldr.w	r2, [r3], #4
 800d374:	9105      	str	r1, [sp, #20]
 800d376:	6800      	ldr	r0, [r0, #0]
 800d378:	9301      	str	r3, [sp, #4]
 800d37a:	a902      	add	r1, sp, #8
 800d37c:	f000 f868 	bl	800d450 <_svfiprintf_r>
 800d380:	9b02      	ldr	r3, [sp, #8]
 800d382:	2200      	movs	r2, #0
 800d384:	701a      	strb	r2, [r3, #0]
 800d386:	b01c      	add	sp, #112	; 0x70
 800d388:	f85d eb04 	ldr.w	lr, [sp], #4
 800d38c:	b003      	add	sp, #12
 800d38e:	4770      	bx	lr
 800d390:	20000010 	.word	0x20000010
 800d394:	ffff0208 	.word	0xffff0208

0800d398 <__malloc_lock>:
 800d398:	4770      	bx	lr

0800d39a <__malloc_unlock>:
 800d39a:	4770      	bx	lr

0800d39c <__ssputs_r>:
 800d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a0:	688e      	ldr	r6, [r1, #8]
 800d3a2:	429e      	cmp	r6, r3
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	460c      	mov	r4, r1
 800d3a8:	4690      	mov	r8, r2
 800d3aa:	4699      	mov	r9, r3
 800d3ac:	d837      	bhi.n	800d41e <__ssputs_r+0x82>
 800d3ae:	898a      	ldrh	r2, [r1, #12]
 800d3b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3b4:	d031      	beq.n	800d41a <__ssputs_r+0x7e>
 800d3b6:	6825      	ldr	r5, [r4, #0]
 800d3b8:	6909      	ldr	r1, [r1, #16]
 800d3ba:	1a6f      	subs	r7, r5, r1
 800d3bc:	6965      	ldr	r5, [r4, #20]
 800d3be:	2302      	movs	r3, #2
 800d3c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d3c8:	f109 0301 	add.w	r3, r9, #1
 800d3cc:	443b      	add	r3, r7
 800d3ce:	429d      	cmp	r5, r3
 800d3d0:	bf38      	it	cc
 800d3d2:	461d      	movcc	r5, r3
 800d3d4:	0553      	lsls	r3, r2, #21
 800d3d6:	d530      	bpl.n	800d43a <__ssputs_r+0x9e>
 800d3d8:	4629      	mov	r1, r5
 800d3da:	f7ff ff53 	bl	800d284 <_malloc_r>
 800d3de:	4606      	mov	r6, r0
 800d3e0:	b950      	cbnz	r0, 800d3f8 <__ssputs_r+0x5c>
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	f8ca 3000 	str.w	r3, [sl]
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ee:	81a3      	strh	r3, [r4, #12]
 800d3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f8:	463a      	mov	r2, r7
 800d3fa:	6921      	ldr	r1, [r4, #16]
 800d3fc:	f000 faa8 	bl	800d950 <memcpy>
 800d400:	89a3      	ldrh	r3, [r4, #12]
 800d402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d40a:	81a3      	strh	r3, [r4, #12]
 800d40c:	6126      	str	r6, [r4, #16]
 800d40e:	6165      	str	r5, [r4, #20]
 800d410:	443e      	add	r6, r7
 800d412:	1bed      	subs	r5, r5, r7
 800d414:	6026      	str	r6, [r4, #0]
 800d416:	60a5      	str	r5, [r4, #8]
 800d418:	464e      	mov	r6, r9
 800d41a:	454e      	cmp	r6, r9
 800d41c:	d900      	bls.n	800d420 <__ssputs_r+0x84>
 800d41e:	464e      	mov	r6, r9
 800d420:	4632      	mov	r2, r6
 800d422:	4641      	mov	r1, r8
 800d424:	6820      	ldr	r0, [r4, #0]
 800d426:	f000 fa9e 	bl	800d966 <memmove>
 800d42a:	68a3      	ldr	r3, [r4, #8]
 800d42c:	1b9b      	subs	r3, r3, r6
 800d42e:	60a3      	str	r3, [r4, #8]
 800d430:	6823      	ldr	r3, [r4, #0]
 800d432:	441e      	add	r6, r3
 800d434:	6026      	str	r6, [r4, #0]
 800d436:	2000      	movs	r0, #0
 800d438:	e7dc      	b.n	800d3f4 <__ssputs_r+0x58>
 800d43a:	462a      	mov	r2, r5
 800d43c:	f000 faac 	bl	800d998 <_realloc_r>
 800d440:	4606      	mov	r6, r0
 800d442:	2800      	cmp	r0, #0
 800d444:	d1e2      	bne.n	800d40c <__ssputs_r+0x70>
 800d446:	6921      	ldr	r1, [r4, #16]
 800d448:	4650      	mov	r0, sl
 800d44a:	f7ff fecd 	bl	800d1e8 <_free_r>
 800d44e:	e7c8      	b.n	800d3e2 <__ssputs_r+0x46>

0800d450 <_svfiprintf_r>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	461d      	mov	r5, r3
 800d456:	898b      	ldrh	r3, [r1, #12]
 800d458:	061f      	lsls	r7, r3, #24
 800d45a:	b09d      	sub	sp, #116	; 0x74
 800d45c:	4680      	mov	r8, r0
 800d45e:	460c      	mov	r4, r1
 800d460:	4616      	mov	r6, r2
 800d462:	d50f      	bpl.n	800d484 <_svfiprintf_r+0x34>
 800d464:	690b      	ldr	r3, [r1, #16]
 800d466:	b96b      	cbnz	r3, 800d484 <_svfiprintf_r+0x34>
 800d468:	2140      	movs	r1, #64	; 0x40
 800d46a:	f7ff ff0b 	bl	800d284 <_malloc_r>
 800d46e:	6020      	str	r0, [r4, #0]
 800d470:	6120      	str	r0, [r4, #16]
 800d472:	b928      	cbnz	r0, 800d480 <_svfiprintf_r+0x30>
 800d474:	230c      	movs	r3, #12
 800d476:	f8c8 3000 	str.w	r3, [r8]
 800d47a:	f04f 30ff 	mov.w	r0, #4294967295
 800d47e:	e0c8      	b.n	800d612 <_svfiprintf_r+0x1c2>
 800d480:	2340      	movs	r3, #64	; 0x40
 800d482:	6163      	str	r3, [r4, #20]
 800d484:	2300      	movs	r3, #0
 800d486:	9309      	str	r3, [sp, #36]	; 0x24
 800d488:	2320      	movs	r3, #32
 800d48a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d48e:	2330      	movs	r3, #48	; 0x30
 800d490:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d494:	9503      	str	r5, [sp, #12]
 800d496:	f04f 0b01 	mov.w	fp, #1
 800d49a:	4637      	mov	r7, r6
 800d49c:	463d      	mov	r5, r7
 800d49e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d4a2:	b10b      	cbz	r3, 800d4a8 <_svfiprintf_r+0x58>
 800d4a4:	2b25      	cmp	r3, #37	; 0x25
 800d4a6:	d13e      	bne.n	800d526 <_svfiprintf_r+0xd6>
 800d4a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800d4ac:	d00b      	beq.n	800d4c6 <_svfiprintf_r+0x76>
 800d4ae:	4653      	mov	r3, sl
 800d4b0:	4632      	mov	r2, r6
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	4640      	mov	r0, r8
 800d4b6:	f7ff ff71 	bl	800d39c <__ssputs_r>
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	f000 80a4 	beq.w	800d608 <_svfiprintf_r+0x1b8>
 800d4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c2:	4453      	add	r3, sl
 800d4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c6:	783b      	ldrb	r3, [r7, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 809d 	beq.w	800d608 <_svfiprintf_r+0x1b8>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4d8:	9304      	str	r3, [sp, #16]
 800d4da:	9307      	str	r3, [sp, #28]
 800d4dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4e0:	931a      	str	r3, [sp, #104]	; 0x68
 800d4e2:	462f      	mov	r7, r5
 800d4e4:	2205      	movs	r2, #5
 800d4e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d4ea:	4850      	ldr	r0, [pc, #320]	; (800d62c <_svfiprintf_r+0x1dc>)
 800d4ec:	f7f2 fe90 	bl	8000210 <memchr>
 800d4f0:	9b04      	ldr	r3, [sp, #16]
 800d4f2:	b9d0      	cbnz	r0, 800d52a <_svfiprintf_r+0xda>
 800d4f4:	06d9      	lsls	r1, r3, #27
 800d4f6:	bf44      	itt	mi
 800d4f8:	2220      	movmi	r2, #32
 800d4fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4fe:	071a      	lsls	r2, r3, #28
 800d500:	bf44      	itt	mi
 800d502:	222b      	movmi	r2, #43	; 0x2b
 800d504:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d508:	782a      	ldrb	r2, [r5, #0]
 800d50a:	2a2a      	cmp	r2, #42	; 0x2a
 800d50c:	d015      	beq.n	800d53a <_svfiprintf_r+0xea>
 800d50e:	9a07      	ldr	r2, [sp, #28]
 800d510:	462f      	mov	r7, r5
 800d512:	2000      	movs	r0, #0
 800d514:	250a      	movs	r5, #10
 800d516:	4639      	mov	r1, r7
 800d518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d51c:	3b30      	subs	r3, #48	; 0x30
 800d51e:	2b09      	cmp	r3, #9
 800d520:	d94d      	bls.n	800d5be <_svfiprintf_r+0x16e>
 800d522:	b1b8      	cbz	r0, 800d554 <_svfiprintf_r+0x104>
 800d524:	e00f      	b.n	800d546 <_svfiprintf_r+0xf6>
 800d526:	462f      	mov	r7, r5
 800d528:	e7b8      	b.n	800d49c <_svfiprintf_r+0x4c>
 800d52a:	4a40      	ldr	r2, [pc, #256]	; (800d62c <_svfiprintf_r+0x1dc>)
 800d52c:	1a80      	subs	r0, r0, r2
 800d52e:	fa0b f000 	lsl.w	r0, fp, r0
 800d532:	4318      	orrs	r0, r3
 800d534:	9004      	str	r0, [sp, #16]
 800d536:	463d      	mov	r5, r7
 800d538:	e7d3      	b.n	800d4e2 <_svfiprintf_r+0x92>
 800d53a:	9a03      	ldr	r2, [sp, #12]
 800d53c:	1d11      	adds	r1, r2, #4
 800d53e:	6812      	ldr	r2, [r2, #0]
 800d540:	9103      	str	r1, [sp, #12]
 800d542:	2a00      	cmp	r2, #0
 800d544:	db01      	blt.n	800d54a <_svfiprintf_r+0xfa>
 800d546:	9207      	str	r2, [sp, #28]
 800d548:	e004      	b.n	800d554 <_svfiprintf_r+0x104>
 800d54a:	4252      	negs	r2, r2
 800d54c:	f043 0302 	orr.w	r3, r3, #2
 800d550:	9207      	str	r2, [sp, #28]
 800d552:	9304      	str	r3, [sp, #16]
 800d554:	783b      	ldrb	r3, [r7, #0]
 800d556:	2b2e      	cmp	r3, #46	; 0x2e
 800d558:	d10c      	bne.n	800d574 <_svfiprintf_r+0x124>
 800d55a:	787b      	ldrb	r3, [r7, #1]
 800d55c:	2b2a      	cmp	r3, #42	; 0x2a
 800d55e:	d133      	bne.n	800d5c8 <_svfiprintf_r+0x178>
 800d560:	9b03      	ldr	r3, [sp, #12]
 800d562:	1d1a      	adds	r2, r3, #4
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	9203      	str	r2, [sp, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	bfb8      	it	lt
 800d56c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d570:	3702      	adds	r7, #2
 800d572:	9305      	str	r3, [sp, #20]
 800d574:	4d2e      	ldr	r5, [pc, #184]	; (800d630 <_svfiprintf_r+0x1e0>)
 800d576:	7839      	ldrb	r1, [r7, #0]
 800d578:	2203      	movs	r2, #3
 800d57a:	4628      	mov	r0, r5
 800d57c:	f7f2 fe48 	bl	8000210 <memchr>
 800d580:	b138      	cbz	r0, 800d592 <_svfiprintf_r+0x142>
 800d582:	2340      	movs	r3, #64	; 0x40
 800d584:	1b40      	subs	r0, r0, r5
 800d586:	fa03 f000 	lsl.w	r0, r3, r0
 800d58a:	9b04      	ldr	r3, [sp, #16]
 800d58c:	4303      	orrs	r3, r0
 800d58e:	3701      	adds	r7, #1
 800d590:	9304      	str	r3, [sp, #16]
 800d592:	7839      	ldrb	r1, [r7, #0]
 800d594:	4827      	ldr	r0, [pc, #156]	; (800d634 <_svfiprintf_r+0x1e4>)
 800d596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d59a:	2206      	movs	r2, #6
 800d59c:	1c7e      	adds	r6, r7, #1
 800d59e:	f7f2 fe37 	bl	8000210 <memchr>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d038      	beq.n	800d618 <_svfiprintf_r+0x1c8>
 800d5a6:	4b24      	ldr	r3, [pc, #144]	; (800d638 <_svfiprintf_r+0x1e8>)
 800d5a8:	bb13      	cbnz	r3, 800d5f0 <_svfiprintf_r+0x1a0>
 800d5aa:	9b03      	ldr	r3, [sp, #12]
 800d5ac:	3307      	adds	r3, #7
 800d5ae:	f023 0307 	bic.w	r3, r3, #7
 800d5b2:	3308      	adds	r3, #8
 800d5b4:	9303      	str	r3, [sp, #12]
 800d5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b8:	444b      	add	r3, r9
 800d5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d5bc:	e76d      	b.n	800d49a <_svfiprintf_r+0x4a>
 800d5be:	fb05 3202 	mla	r2, r5, r2, r3
 800d5c2:	2001      	movs	r0, #1
 800d5c4:	460f      	mov	r7, r1
 800d5c6:	e7a6      	b.n	800d516 <_svfiprintf_r+0xc6>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	3701      	adds	r7, #1
 800d5cc:	9305      	str	r3, [sp, #20]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	250a      	movs	r5, #10
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5d8:	3a30      	subs	r2, #48	; 0x30
 800d5da:	2a09      	cmp	r2, #9
 800d5dc:	d903      	bls.n	800d5e6 <_svfiprintf_r+0x196>
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d0c8      	beq.n	800d574 <_svfiprintf_r+0x124>
 800d5e2:	9105      	str	r1, [sp, #20]
 800d5e4:	e7c6      	b.n	800d574 <_svfiprintf_r+0x124>
 800d5e6:	fb05 2101 	mla	r1, r5, r1, r2
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	4607      	mov	r7, r0
 800d5ee:	e7f0      	b.n	800d5d2 <_svfiprintf_r+0x182>
 800d5f0:	ab03      	add	r3, sp, #12
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	4b11      	ldr	r3, [pc, #68]	; (800d63c <_svfiprintf_r+0x1ec>)
 800d5f8:	a904      	add	r1, sp, #16
 800d5fa:	4640      	mov	r0, r8
 800d5fc:	f3af 8000 	nop.w
 800d600:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d604:	4681      	mov	r9, r0
 800d606:	d1d6      	bne.n	800d5b6 <_svfiprintf_r+0x166>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	065b      	lsls	r3, r3, #25
 800d60c:	f53f af35 	bmi.w	800d47a <_svfiprintf_r+0x2a>
 800d610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d612:	b01d      	add	sp, #116	; 0x74
 800d614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d618:	ab03      	add	r3, sp, #12
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	4622      	mov	r2, r4
 800d61e:	4b07      	ldr	r3, [pc, #28]	; (800d63c <_svfiprintf_r+0x1ec>)
 800d620:	a904      	add	r1, sp, #16
 800d622:	4640      	mov	r0, r8
 800d624:	f000 f882 	bl	800d72c <_printf_i>
 800d628:	e7ea      	b.n	800d600 <_svfiprintf_r+0x1b0>
 800d62a:	bf00      	nop
 800d62c:	0800f564 	.word	0x0800f564
 800d630:	0800f56a 	.word	0x0800f56a
 800d634:	0800f56e 	.word	0x0800f56e
 800d638:	00000000 	.word	0x00000000
 800d63c:	0800d39d 	.word	0x0800d39d

0800d640 <_printf_common>:
 800d640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d644:	4691      	mov	r9, r2
 800d646:	461f      	mov	r7, r3
 800d648:	688a      	ldr	r2, [r1, #8]
 800d64a:	690b      	ldr	r3, [r1, #16]
 800d64c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d650:	4293      	cmp	r3, r2
 800d652:	bfb8      	it	lt
 800d654:	4613      	movlt	r3, r2
 800d656:	f8c9 3000 	str.w	r3, [r9]
 800d65a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d65e:	4606      	mov	r6, r0
 800d660:	460c      	mov	r4, r1
 800d662:	b112      	cbz	r2, 800d66a <_printf_common+0x2a>
 800d664:	3301      	adds	r3, #1
 800d666:	f8c9 3000 	str.w	r3, [r9]
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	0699      	lsls	r1, r3, #26
 800d66e:	bf42      	ittt	mi
 800d670:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d674:	3302      	addmi	r3, #2
 800d676:	f8c9 3000 	strmi.w	r3, [r9]
 800d67a:	6825      	ldr	r5, [r4, #0]
 800d67c:	f015 0506 	ands.w	r5, r5, #6
 800d680:	d107      	bne.n	800d692 <_printf_common+0x52>
 800d682:	f104 0a19 	add.w	sl, r4, #25
 800d686:	68e3      	ldr	r3, [r4, #12]
 800d688:	f8d9 2000 	ldr.w	r2, [r9]
 800d68c:	1a9b      	subs	r3, r3, r2
 800d68e:	42ab      	cmp	r3, r5
 800d690:	dc28      	bgt.n	800d6e4 <_printf_common+0xa4>
 800d692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d696:	6822      	ldr	r2, [r4, #0]
 800d698:	3300      	adds	r3, #0
 800d69a:	bf18      	it	ne
 800d69c:	2301      	movne	r3, #1
 800d69e:	0692      	lsls	r2, r2, #26
 800d6a0:	d42d      	bmi.n	800d6fe <_printf_common+0xbe>
 800d6a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6a6:	4639      	mov	r1, r7
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	47c0      	blx	r8
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d020      	beq.n	800d6f2 <_printf_common+0xb2>
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	68e5      	ldr	r5, [r4, #12]
 800d6b4:	f8d9 2000 	ldr.w	r2, [r9]
 800d6b8:	f003 0306 	and.w	r3, r3, #6
 800d6bc:	2b04      	cmp	r3, #4
 800d6be:	bf08      	it	eq
 800d6c0:	1aad      	subeq	r5, r5, r2
 800d6c2:	68a3      	ldr	r3, [r4, #8]
 800d6c4:	6922      	ldr	r2, [r4, #16]
 800d6c6:	bf0c      	ite	eq
 800d6c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6cc:	2500      	movne	r5, #0
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	bfc4      	itt	gt
 800d6d2:	1a9b      	subgt	r3, r3, r2
 800d6d4:	18ed      	addgt	r5, r5, r3
 800d6d6:	f04f 0900 	mov.w	r9, #0
 800d6da:	341a      	adds	r4, #26
 800d6dc:	454d      	cmp	r5, r9
 800d6de:	d11a      	bne.n	800d716 <_printf_common+0xd6>
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	e008      	b.n	800d6f6 <_printf_common+0xb6>
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	4652      	mov	r2, sl
 800d6e8:	4639      	mov	r1, r7
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	47c0      	blx	r8
 800d6ee:	3001      	adds	r0, #1
 800d6f0:	d103      	bne.n	800d6fa <_printf_common+0xba>
 800d6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6fa:	3501      	adds	r5, #1
 800d6fc:	e7c3      	b.n	800d686 <_printf_common+0x46>
 800d6fe:	18e1      	adds	r1, r4, r3
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	2030      	movs	r0, #48	; 0x30
 800d704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d708:	4422      	add	r2, r4
 800d70a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d70e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d712:	3302      	adds	r3, #2
 800d714:	e7c5      	b.n	800d6a2 <_printf_common+0x62>
 800d716:	2301      	movs	r3, #1
 800d718:	4622      	mov	r2, r4
 800d71a:	4639      	mov	r1, r7
 800d71c:	4630      	mov	r0, r6
 800d71e:	47c0      	blx	r8
 800d720:	3001      	adds	r0, #1
 800d722:	d0e6      	beq.n	800d6f2 <_printf_common+0xb2>
 800d724:	f109 0901 	add.w	r9, r9, #1
 800d728:	e7d8      	b.n	800d6dc <_printf_common+0x9c>
	...

0800d72c <_printf_i>:
 800d72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d734:	460c      	mov	r4, r1
 800d736:	7e09      	ldrb	r1, [r1, #24]
 800d738:	b085      	sub	sp, #20
 800d73a:	296e      	cmp	r1, #110	; 0x6e
 800d73c:	4617      	mov	r7, r2
 800d73e:	4606      	mov	r6, r0
 800d740:	4698      	mov	r8, r3
 800d742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d744:	f000 80b3 	beq.w	800d8ae <_printf_i+0x182>
 800d748:	d822      	bhi.n	800d790 <_printf_i+0x64>
 800d74a:	2963      	cmp	r1, #99	; 0x63
 800d74c:	d036      	beq.n	800d7bc <_printf_i+0x90>
 800d74e:	d80a      	bhi.n	800d766 <_printf_i+0x3a>
 800d750:	2900      	cmp	r1, #0
 800d752:	f000 80b9 	beq.w	800d8c8 <_printf_i+0x19c>
 800d756:	2958      	cmp	r1, #88	; 0x58
 800d758:	f000 8083 	beq.w	800d862 <_printf_i+0x136>
 800d75c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d764:	e032      	b.n	800d7cc <_printf_i+0xa0>
 800d766:	2964      	cmp	r1, #100	; 0x64
 800d768:	d001      	beq.n	800d76e <_printf_i+0x42>
 800d76a:	2969      	cmp	r1, #105	; 0x69
 800d76c:	d1f6      	bne.n	800d75c <_printf_i+0x30>
 800d76e:	6820      	ldr	r0, [r4, #0]
 800d770:	6813      	ldr	r3, [r2, #0]
 800d772:	0605      	lsls	r5, r0, #24
 800d774:	f103 0104 	add.w	r1, r3, #4
 800d778:	d52a      	bpl.n	800d7d0 <_printf_i+0xa4>
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	6011      	str	r1, [r2, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	da03      	bge.n	800d78a <_printf_i+0x5e>
 800d782:	222d      	movs	r2, #45	; 0x2d
 800d784:	425b      	negs	r3, r3
 800d786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d78a:	486f      	ldr	r0, [pc, #444]	; (800d948 <_printf_i+0x21c>)
 800d78c:	220a      	movs	r2, #10
 800d78e:	e039      	b.n	800d804 <_printf_i+0xd8>
 800d790:	2973      	cmp	r1, #115	; 0x73
 800d792:	f000 809d 	beq.w	800d8d0 <_printf_i+0x1a4>
 800d796:	d808      	bhi.n	800d7aa <_printf_i+0x7e>
 800d798:	296f      	cmp	r1, #111	; 0x6f
 800d79a:	d020      	beq.n	800d7de <_printf_i+0xb2>
 800d79c:	2970      	cmp	r1, #112	; 0x70
 800d79e:	d1dd      	bne.n	800d75c <_printf_i+0x30>
 800d7a0:	6823      	ldr	r3, [r4, #0]
 800d7a2:	f043 0320 	orr.w	r3, r3, #32
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	e003      	b.n	800d7b2 <_printf_i+0x86>
 800d7aa:	2975      	cmp	r1, #117	; 0x75
 800d7ac:	d017      	beq.n	800d7de <_printf_i+0xb2>
 800d7ae:	2978      	cmp	r1, #120	; 0x78
 800d7b0:	d1d4      	bne.n	800d75c <_printf_i+0x30>
 800d7b2:	2378      	movs	r3, #120	; 0x78
 800d7b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7b8:	4864      	ldr	r0, [pc, #400]	; (800d94c <_printf_i+0x220>)
 800d7ba:	e055      	b.n	800d868 <_printf_i+0x13c>
 800d7bc:	6813      	ldr	r3, [r2, #0]
 800d7be:	1d19      	adds	r1, r3, #4
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6011      	str	r1, [r2, #0]
 800d7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e08c      	b.n	800d8ea <_printf_i+0x1be>
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	6011      	str	r1, [r2, #0]
 800d7d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d7d8:	bf18      	it	ne
 800d7da:	b21b      	sxthne	r3, r3
 800d7dc:	e7cf      	b.n	800d77e <_printf_i+0x52>
 800d7de:	6813      	ldr	r3, [r2, #0]
 800d7e0:	6825      	ldr	r5, [r4, #0]
 800d7e2:	1d18      	adds	r0, r3, #4
 800d7e4:	6010      	str	r0, [r2, #0]
 800d7e6:	0628      	lsls	r0, r5, #24
 800d7e8:	d501      	bpl.n	800d7ee <_printf_i+0xc2>
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	e002      	b.n	800d7f4 <_printf_i+0xc8>
 800d7ee:	0668      	lsls	r0, r5, #25
 800d7f0:	d5fb      	bpl.n	800d7ea <_printf_i+0xbe>
 800d7f2:	881b      	ldrh	r3, [r3, #0]
 800d7f4:	4854      	ldr	r0, [pc, #336]	; (800d948 <_printf_i+0x21c>)
 800d7f6:	296f      	cmp	r1, #111	; 0x6f
 800d7f8:	bf14      	ite	ne
 800d7fa:	220a      	movne	r2, #10
 800d7fc:	2208      	moveq	r2, #8
 800d7fe:	2100      	movs	r1, #0
 800d800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d804:	6865      	ldr	r5, [r4, #4]
 800d806:	60a5      	str	r5, [r4, #8]
 800d808:	2d00      	cmp	r5, #0
 800d80a:	f2c0 8095 	blt.w	800d938 <_printf_i+0x20c>
 800d80e:	6821      	ldr	r1, [r4, #0]
 800d810:	f021 0104 	bic.w	r1, r1, #4
 800d814:	6021      	str	r1, [r4, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d13d      	bne.n	800d896 <_printf_i+0x16a>
 800d81a:	2d00      	cmp	r5, #0
 800d81c:	f040 808e 	bne.w	800d93c <_printf_i+0x210>
 800d820:	4665      	mov	r5, ip
 800d822:	2a08      	cmp	r2, #8
 800d824:	d10b      	bne.n	800d83e <_printf_i+0x112>
 800d826:	6823      	ldr	r3, [r4, #0]
 800d828:	07db      	lsls	r3, r3, #31
 800d82a:	d508      	bpl.n	800d83e <_printf_i+0x112>
 800d82c:	6923      	ldr	r3, [r4, #16]
 800d82e:	6862      	ldr	r2, [r4, #4]
 800d830:	429a      	cmp	r2, r3
 800d832:	bfde      	ittt	le
 800d834:	2330      	movle	r3, #48	; 0x30
 800d836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d83a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d83e:	ebac 0305 	sub.w	r3, ip, r5
 800d842:	6123      	str	r3, [r4, #16]
 800d844:	f8cd 8000 	str.w	r8, [sp]
 800d848:	463b      	mov	r3, r7
 800d84a:	aa03      	add	r2, sp, #12
 800d84c:	4621      	mov	r1, r4
 800d84e:	4630      	mov	r0, r6
 800d850:	f7ff fef6 	bl	800d640 <_printf_common>
 800d854:	3001      	adds	r0, #1
 800d856:	d14d      	bne.n	800d8f4 <_printf_i+0x1c8>
 800d858:	f04f 30ff 	mov.w	r0, #4294967295
 800d85c:	b005      	add	sp, #20
 800d85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d862:	4839      	ldr	r0, [pc, #228]	; (800d948 <_printf_i+0x21c>)
 800d864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d868:	6813      	ldr	r3, [r2, #0]
 800d86a:	6821      	ldr	r1, [r4, #0]
 800d86c:	1d1d      	adds	r5, r3, #4
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6015      	str	r5, [r2, #0]
 800d872:	060a      	lsls	r2, r1, #24
 800d874:	d50b      	bpl.n	800d88e <_printf_i+0x162>
 800d876:	07ca      	lsls	r2, r1, #31
 800d878:	bf44      	itt	mi
 800d87a:	f041 0120 	orrmi.w	r1, r1, #32
 800d87e:	6021      	strmi	r1, [r4, #0]
 800d880:	b91b      	cbnz	r3, 800d88a <_printf_i+0x15e>
 800d882:	6822      	ldr	r2, [r4, #0]
 800d884:	f022 0220 	bic.w	r2, r2, #32
 800d888:	6022      	str	r2, [r4, #0]
 800d88a:	2210      	movs	r2, #16
 800d88c:	e7b7      	b.n	800d7fe <_printf_i+0xd2>
 800d88e:	064d      	lsls	r5, r1, #25
 800d890:	bf48      	it	mi
 800d892:	b29b      	uxthmi	r3, r3
 800d894:	e7ef      	b.n	800d876 <_printf_i+0x14a>
 800d896:	4665      	mov	r5, ip
 800d898:	fbb3 f1f2 	udiv	r1, r3, r2
 800d89c:	fb02 3311 	mls	r3, r2, r1, r3
 800d8a0:	5cc3      	ldrb	r3, [r0, r3]
 800d8a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	2900      	cmp	r1, #0
 800d8aa:	d1f5      	bne.n	800d898 <_printf_i+0x16c>
 800d8ac:	e7b9      	b.n	800d822 <_printf_i+0xf6>
 800d8ae:	6813      	ldr	r3, [r2, #0]
 800d8b0:	6825      	ldr	r5, [r4, #0]
 800d8b2:	6961      	ldr	r1, [r4, #20]
 800d8b4:	1d18      	adds	r0, r3, #4
 800d8b6:	6010      	str	r0, [r2, #0]
 800d8b8:	0628      	lsls	r0, r5, #24
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	d501      	bpl.n	800d8c2 <_printf_i+0x196>
 800d8be:	6019      	str	r1, [r3, #0]
 800d8c0:	e002      	b.n	800d8c8 <_printf_i+0x19c>
 800d8c2:	066a      	lsls	r2, r5, #25
 800d8c4:	d5fb      	bpl.n	800d8be <_printf_i+0x192>
 800d8c6:	8019      	strh	r1, [r3, #0]
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	6123      	str	r3, [r4, #16]
 800d8cc:	4665      	mov	r5, ip
 800d8ce:	e7b9      	b.n	800d844 <_printf_i+0x118>
 800d8d0:	6813      	ldr	r3, [r2, #0]
 800d8d2:	1d19      	adds	r1, r3, #4
 800d8d4:	6011      	str	r1, [r2, #0]
 800d8d6:	681d      	ldr	r5, [r3, #0]
 800d8d8:	6862      	ldr	r2, [r4, #4]
 800d8da:	2100      	movs	r1, #0
 800d8dc:	4628      	mov	r0, r5
 800d8de:	f7f2 fc97 	bl	8000210 <memchr>
 800d8e2:	b108      	cbz	r0, 800d8e8 <_printf_i+0x1bc>
 800d8e4:	1b40      	subs	r0, r0, r5
 800d8e6:	6060      	str	r0, [r4, #4]
 800d8e8:	6863      	ldr	r3, [r4, #4]
 800d8ea:	6123      	str	r3, [r4, #16]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8f2:	e7a7      	b.n	800d844 <_printf_i+0x118>
 800d8f4:	6923      	ldr	r3, [r4, #16]
 800d8f6:	462a      	mov	r2, r5
 800d8f8:	4639      	mov	r1, r7
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	47c0      	blx	r8
 800d8fe:	3001      	adds	r0, #1
 800d900:	d0aa      	beq.n	800d858 <_printf_i+0x12c>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	079b      	lsls	r3, r3, #30
 800d906:	d413      	bmi.n	800d930 <_printf_i+0x204>
 800d908:	68e0      	ldr	r0, [r4, #12]
 800d90a:	9b03      	ldr	r3, [sp, #12]
 800d90c:	4298      	cmp	r0, r3
 800d90e:	bfb8      	it	lt
 800d910:	4618      	movlt	r0, r3
 800d912:	e7a3      	b.n	800d85c <_printf_i+0x130>
 800d914:	2301      	movs	r3, #1
 800d916:	464a      	mov	r2, r9
 800d918:	4639      	mov	r1, r7
 800d91a:	4630      	mov	r0, r6
 800d91c:	47c0      	blx	r8
 800d91e:	3001      	adds	r0, #1
 800d920:	d09a      	beq.n	800d858 <_printf_i+0x12c>
 800d922:	3501      	adds	r5, #1
 800d924:	68e3      	ldr	r3, [r4, #12]
 800d926:	9a03      	ldr	r2, [sp, #12]
 800d928:	1a9b      	subs	r3, r3, r2
 800d92a:	42ab      	cmp	r3, r5
 800d92c:	dcf2      	bgt.n	800d914 <_printf_i+0x1e8>
 800d92e:	e7eb      	b.n	800d908 <_printf_i+0x1dc>
 800d930:	2500      	movs	r5, #0
 800d932:	f104 0919 	add.w	r9, r4, #25
 800d936:	e7f5      	b.n	800d924 <_printf_i+0x1f8>
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d1ac      	bne.n	800d896 <_printf_i+0x16a>
 800d93c:	7803      	ldrb	r3, [r0, #0]
 800d93e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d942:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d946:	e76c      	b.n	800d822 <_printf_i+0xf6>
 800d948:	0800f575 	.word	0x0800f575
 800d94c:	0800f586 	.word	0x0800f586

0800d950 <memcpy>:
 800d950:	b510      	push	{r4, lr}
 800d952:	1e43      	subs	r3, r0, #1
 800d954:	440a      	add	r2, r1
 800d956:	4291      	cmp	r1, r2
 800d958:	d100      	bne.n	800d95c <memcpy+0xc>
 800d95a:	bd10      	pop	{r4, pc}
 800d95c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d960:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d964:	e7f7      	b.n	800d956 <memcpy+0x6>

0800d966 <memmove>:
 800d966:	4288      	cmp	r0, r1
 800d968:	b510      	push	{r4, lr}
 800d96a:	eb01 0302 	add.w	r3, r1, r2
 800d96e:	d807      	bhi.n	800d980 <memmove+0x1a>
 800d970:	1e42      	subs	r2, r0, #1
 800d972:	4299      	cmp	r1, r3
 800d974:	d00a      	beq.n	800d98c <memmove+0x26>
 800d976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d97a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d97e:	e7f8      	b.n	800d972 <memmove+0xc>
 800d980:	4283      	cmp	r3, r0
 800d982:	d9f5      	bls.n	800d970 <memmove+0xa>
 800d984:	1881      	adds	r1, r0, r2
 800d986:	1ad2      	subs	r2, r2, r3
 800d988:	42d3      	cmn	r3, r2
 800d98a:	d100      	bne.n	800d98e <memmove+0x28>
 800d98c:	bd10      	pop	{r4, pc}
 800d98e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d992:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d996:	e7f7      	b.n	800d988 <memmove+0x22>

0800d998 <_realloc_r>:
 800d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99a:	4607      	mov	r7, r0
 800d99c:	4614      	mov	r4, r2
 800d99e:	460e      	mov	r6, r1
 800d9a0:	b921      	cbnz	r1, 800d9ac <_realloc_r+0x14>
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9a8:	f7ff bc6c 	b.w	800d284 <_malloc_r>
 800d9ac:	b922      	cbnz	r2, 800d9b8 <_realloc_r+0x20>
 800d9ae:	f7ff fc1b 	bl	800d1e8 <_free_r>
 800d9b2:	4625      	mov	r5, r4
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9b8:	f000 f814 	bl	800d9e4 <_malloc_usable_size_r>
 800d9bc:	42a0      	cmp	r0, r4
 800d9be:	d20f      	bcs.n	800d9e0 <_realloc_r+0x48>
 800d9c0:	4621      	mov	r1, r4
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	f7ff fc5e 	bl	800d284 <_malloc_r>
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	2800      	cmp	r0, #0
 800d9cc:	d0f2      	beq.n	800d9b4 <_realloc_r+0x1c>
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	f7ff ffbd 	bl	800d950 <memcpy>
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	4638      	mov	r0, r7
 800d9da:	f7ff fc05 	bl	800d1e8 <_free_r>
 800d9de:	e7e9      	b.n	800d9b4 <_realloc_r+0x1c>
 800d9e0:	4635      	mov	r5, r6
 800d9e2:	e7e7      	b.n	800d9b4 <_realloc_r+0x1c>

0800d9e4 <_malloc_usable_size_r>:
 800d9e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9e8:	1f18      	subs	r0, r3, #4
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	bfbc      	itt	lt
 800d9ee:	580b      	ldrlt	r3, [r1, r0]
 800d9f0:	18c0      	addlt	r0, r0, r3
 800d9f2:	4770      	bx	lr

0800d9f4 <_init>:
 800d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f6:	bf00      	nop
 800d9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9fa:	bc08      	pop	{r3}
 800d9fc:	469e      	mov	lr, r3
 800d9fe:	4770      	bx	lr

0800da00 <_fini>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	bf00      	nop
 800da04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da06:	bc08      	pop	{r3}
 800da08:	469e      	mov	lr, r3
 800da0a:	4770      	bx	lr
